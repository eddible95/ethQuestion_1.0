{"version":3,"file":"static\\development\\pages\\home.js","sources":["webpack:///webpack/bootstrap","webpack:///./components/AccountIssueModal.js","webpack:///./components/DesktopHeader.js","webpack:///./components/Footer.js","webpack:///./components/Layout.js","webpack:///./components/MobileHeader.js","webpack:///./ethereum/credentials.js","webpack:///./ethereum/factory.js","webpack:///./ethereum/profile.js","webpack:///./ethereum/question.js","webpack:///./ethereum/web3.js","webpack:///./pages/home.js","webpack:///./routes.js","webpack:///./utils/device.js","webpack:///./utils/functions.js","webpack:///external \"fuse.js\"","webpack:///external \"lodash\"","webpack:///external \"mobile-detect\"","webpack:///external \"next-cookies\"","webpack:///external \"next-routes\"","webpack:///external \"next/head\"","webpack:///external \"react\"","webpack:///external \"semantic-ui-react\"","webpack:///external \"web3\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import React, { Component } from 'react';\r\nimport { Modal, Header, Button, Loader } from 'semantic-ui-react';\r\nimport {Link, Router} from '../routes';\r\n\r\nclass AccountIssueModal extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Modal open={this.props.loading} basic size='small'>\r\n          <Header icon='ethereum' content='Loading Resources' />\r\n          <Modal.Content>\r\n            <Loader active inline=\"centered\">\r\n              Fetching Data From Blockchain\r\n            </Loader>\r\n          </Modal.Content>\r\n        </Modal>\r\n        <Modal open={!this.props.login && !this.props.loading} basic size='small'>\r\n          <Header icon='ethereum' content='Account Issue' />\r\n          <Modal.Content>\r\n            <p>\r\n              You are facing one of the following issues:\r\n            </p>\r\n            <p>\r\n              (1) Banned from accessing the platform.\r\n            </p>\r\n            <p>\r\n              (2) Currently not registered to access the platform. Please have your account registered.\r\n            </p>\r\n          </Modal.Content>\r\n          <Modal.Actions>\r\n            <Button color='green' inverted attached='bottom' onClick={() => {\r\n              Router.pushRoute('/')}\r\n            }>\r\n              Register For Account\r\n            </Button>\r\n          </Modal.Actions>\r\n        </Modal>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AccountIssueModal;\r\n","import React, { Component } from 'react';\r\nimport { Menu, Icon, Input, Segment, Sticky, Container, Button, Dropdown, Grid } from 'semantic-ui-react';\r\nimport { Link, Router } from '../routes';\r\n\r\nclass DesktopHeader extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value:''\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.keyPress = this.keyPress.bind(this);\r\n   }\r\n\r\n  handleChange(e) {\r\n    this.setState({ value: e.target.value });\r\n   }\r\n\r\n  keyPress(e){\r\n    if(e.keyCode == 13){\r\n     if (this.state.value!='')\r\n         Router.pushRoute(`/${'search/'+encodeURIComponent(this.state.value)}`);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Segment inverted style={{marginBottom:'0px', fontSize:'20px', borderRadius:'0px', border:'0px', paddingRight:'5%'}} as='h1' textAlign='center'>\r\n          <Icon name='ethereum' />Block-Chain Based Question Answering System\r\n          <Button compact floated='right' inverted color='orange' onClick={()=>{Router.pushRoute('/')}}><Icon name='user' circular size='small'/>Log Out</Button>\r\n        </Segment>\r\n        <Sticky context={this.props.contextRef}>\r\n            <Menu inverted size='massive' fluid style={{marginTop:'0px', borderRadius:'0px', border:'0px', paddingLeft:'5%', paddingRight:'5%'}}>\r\n              <Link route=\"/home\">\r\n                <Menu.Item\r\n                  name='Home'\r\n                  icon='home'\r\n                  active = {this.props.page === 'Home'}\r\n                  color='orange'\r\n                />\r\n              </Link>\r\n              <Link route=\"/about\">\r\n                <Menu.Item\r\n                  name='About'\r\n                  icon='question'\r\n                  active = {this.props.page === 'About'}\r\n                  color='orange'\r\n                />\r\n              </Link>\r\n              <Link route='/userProfile'>\r\n                <Menu.Item\r\n                  name='Profile'\r\n                  icon='user'\r\n                  active = {this.props.page === 'Profile'}\r\n                  color='orange'\r\n                />\r\n              </Link>\r\n              <Link route=\"/new\">\r\n                <Menu.Item\r\n                  name='Ask Question'\r\n                  icon='pencil alternate'\r\n                  active = {this.props.page === 'New'}\r\n                  color='orange'\r\n                />\r\n              </Link>\r\n              <Link route=\"/feedback\">\r\n                <Menu.Item\r\n                  name='Feedback'\r\n                  icon='comment'\r\n                  active = {this.props.page === 'Feedback'}\r\n                  color='orange'\r\n                />\r\n              </Link>\r\n              <Link route=\"/leaderboard\">\r\n                <Menu.Item\r\n                  name='Leaderboard'\r\n                  icon='trophy'\r\n                  active = {this.props.page === 'Leaderboard'}\r\n                  color='orange'\r\n                />\r\n              </Link>\r\n              {this.props.accountType == \"Admin\" ? <Link route=\"/admin\">\r\n                                                    <Menu.Item\r\n                                                      name='Admin Options'\r\n                                                      icon='settings'\r\n                                                      active = {this.props.page === 'Admin'}\r\n                                                      color='orange'\r\n                                                      />\r\n                                                   </Link>\r\n                                                 : null }\r\n              <Menu.Menu position=\"right\">\r\n                <Menu.Item>\r\n                  <Input icon={<Icon name=\"search\" link onClick={() => {\r\n                   if (this.state.value!='') {\r\n                     Router.pushRoute(`/${'search/'+encodeURIComponent(this.state.value)}`);\r\n                   }\r\n                  }}/>}\r\n                  placeholder=\"Search...\"\r\n                  onKeyDown={this.keyPress}\r\n                  onChange={this.handleChange}\r\n                   />\r\n                </Menu.Item>\r\n              </Menu.Menu>\r\n            </Menu>\r\n        </Sticky>\r\n        {this.props.children}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DesktopHeader;\r\n","import React, { Component } from 'react';\r\nimport { Container, Segment, Icon, Header } from 'semantic-ui-react';\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n    return (\r\n      <Segment inverted vertical >\r\n        <Header as='h4' inverted textAlign='center'>\r\n          <Icon name='ethereum'/>Block-Chain Based Question Answering System\r\n        </Header>\r\n        <p style={{textAlign:\"center\"}}>\r\n          SCSE Final Year Project | Powered By Ethereum | Created Using React JS\r\n        </p>\r\n      </Segment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import Head from 'next/head';\r\nimport React, { Component } from 'react';\r\nimport MobileDetect from 'mobile-detect';\r\nimport { Container, Responsive, Sidebar, Divider } from 'semantic-ui-react';\r\nimport { getWidthFactory } from '../utils/device';\r\nimport DesktopHeader from './DesktopHeader';\r\nimport MobileHeader from \"./MobileHeader\"\r\nimport Footer from './Footer';\r\n\r\nclass DesktopContainer extends Component {\r\n  state = {}\r\n\r\n  render() {\r\n    const { accountType, page, getWidth, contextRef, children } = this.props;\r\n    return(\r\n      <Responsive fireOnMount getWidth={getWidth} minWidth={Responsive.onlyTablet.minWidth}>\r\n        <DesktopHeader accountType={accountType} contextRef={contextRef} page={page}>\r\n          <Container style={{minHeight:\"100vh\", width:\"100vw\"}}>\r\n            {children}\r\n          </Container>\r\n        </DesktopHeader>\r\n      </Responsive>\r\n    );\r\n  }\r\n}\r\n\r\nclass MobileContainer extends Component {\r\n  state = { sidebarOpened: false };\r\n\r\n  handleSidebarHide = () => this.setState({ sidebarOpened: false })\r\n\r\n  handleToggle = () => this.setState({ sidebarOpened: true })\r\n\r\n  render() {\r\n    const { accountType, getWidth, contextRef, children } = this.props;\r\n\r\n    return(\r\n      <Responsive fireOnMount as={Sidebar.Pushable} getWidth={getWidth} maxWidth={Responsive.onlyMobile.maxWidth}>\r\n          <MobileHeader contextRef={contextRef}\r\n                      accountType={accountType}\r\n                      handleSidebarHide={this.handleSidebarHide}\r\n                      handleToggle={this.handleToggle}\r\n                      sidebarOpened={this.state.sidebarOpened}>\r\n              <Container style={{ paddingTop: \"10em\", minHeight:\"100vh\", width:\"100vw\"}}>\r\n                {children}\r\n              </Container>\r\n          </MobileHeader>\r\n      </Responsive>\r\n    );\r\n  }\r\n}\r\n\r\nclass Layout extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  };\r\n  static async getInitialProps(props) {\r\n    let isMobileFromSSR = false;\r\n    if(props.req){\r\n        const device = props.req.headers[\"user-agent\"];\r\n        const md = new MobileDetect(device);\r\n        isMobileFromSSR = !!md.mobile();\r\n    }\r\n    return { isMobileFromSSR };\r\n  }\r\n  handleContextRef = contextRef => this.setState({ contextRef });\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Head>\r\n          <link\r\n              rel=\"stylesheet\"\r\n              href=\"//cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\"\r\n          />\r\n          <link rel=\"shortcut icon\" href=\"/static/ethIcon.ico\" />\r\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n          <title>Block-Chain Based Question Answering System</title>\r\n        </Head>\r\n        <div ref={this.handleContextRef}>\r\n          <DesktopContainer accountType={this.props.accountType} getWidth={getWidthFactory(this.props.isMobileFromSSR)} page={this.props.page}>\r\n            {this.props.children}\r\n          </DesktopContainer>\r\n\r\n          <MobileContainer accountType={this.props.accountType} getWidth={getWidthFactory(this.props.isMobileFromSSR)}>\r\n            {this.props.children}\r\n          </MobileContainer>\r\n        </div>\r\n        <Divider hidden/>\r\n        <Footer/>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Layout;\r\n","import React, { Component } from 'react';\r\nimport { Menu, Segment, Container, Icon, Header, Grid,\r\n   Input, Button, Sticky, Rail, Sidebar } from 'semantic-ui-react';\r\nimport { Link, Router } from '../routes';\r\n\r\nclass HeaderMobile extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state ={value:''}\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.keyPress = this.keyPress.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n      this.setState({ value: e.target.value });\r\n   }\r\n\r\n  keyPress(e){\r\n      if(e.keyCode == 13){\r\n         if (this.state.value!='')\r\n              Router.pushRoute(`/${'search/'+encodeURIComponent(this.state.value)}`);\r\n      }\r\n  }\r\n\r\n  renderSideBar() {\r\n    const {\r\n        handleSidebarHide,\r\n        handleToggle,\r\n        sidebarOpened,\r\n        children\r\n    } = this.props;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Sidebar.Pushable>\r\n          <Sidebar\r\n            as={Menu}\r\n            animation='push'\r\n            inverted\r\n            onHide={handleSidebarHide}\r\n            vertical\r\n            visible={sidebarOpened}\r\n            width='thin'\r\n            icon='labeled'>\r\n            <Menu.Item header>\r\n              <h3>Question Answering System</h3>\r\n            </Menu.Item>\r\n\r\n            <Link route=\"/home\">\r\n              <a className = \"item\">\r\n                <Icon name='home'/>\r\n                Home\r\n              </a>\r\n            </Link>\r\n            <Link route=\"/about\">\r\n              <a className = \"item\">\r\n                <Icon name='question'/>\r\n                About\r\n              </a>\r\n            </Link>\r\n            <Link route=\"/userProfile\">\r\n              <a className = \"item\">\r\n                <Icon name='user'/>\r\n                Profile\r\n              </a>\r\n            </Link>\r\n            <Link route=\"/new\">\r\n              <a className = \"item\">\r\n                <Icon name='pencil alternate'/>\r\n                Ask Question\r\n              </a>\r\n            </Link>\r\n            <Link route=\"/feedback\">\r\n              <a className = \"item\">\r\n                <Icon name='comment'/>\r\n                Feedback\r\n              </a>\r\n            </Link>\r\n            <Link route=\"/leaderboard\">\r\n              <a className = \"item\">\r\n                <Icon name='trophy'/>\r\n                Leaderboard\r\n              </a>\r\n            </Link>\r\n            {this.props.accountType == \"Admin\" ? <Link route=\"/admin\">\r\n                                                  <a className = \"item\">\r\n                                                    <Icon name='settings'/>\r\n                                                    Admin Settings\r\n                                                  </a>\r\n                                                 </Link>\r\n                                               : null }\r\n             <Link route=\"/login\">\r\n               <a className = \"item\">\r\n                 <Icon name='power off'/>\r\n                 Log Out\r\n               </a>\r\n             </Link>\r\n          </Sidebar>\r\n\r\n          <Sidebar.Pusher dimmed={sidebarOpened} style={{minHeight: '100vh'}}>\r\n            <Rail\r\n              internal\r\n              position=\"left\"\r\n              attached\r\n              style={{ top: \"auto\", height: \"auto\", width: \"100%\" }}>\r\n              <Sticky context={this.props.contextRef}>\r\n                <Segment inverted vertical style={{ minHeight: 50 , padding: '1em 0em 0em 0em', textAlign: 'flex-end'}}>\r\n                  <Menu inverted fixed='top' size='large' secondary>\r\n                    <Container>\r\n                      <Menu.Item onClick={handleToggle}>\r\n                        <Icon name='sidebar' />\r\n                      </Menu.Item>\r\n                      <Menu.Item header style={{padding: 0}}>\r\n                        <Icon name='ethereum' style={{float: 'left'}}/>\r\n                        Ethereum Question Answering System\r\n                      </Menu.Item>\r\n                    </Container>\r\n                  </Menu>\r\n                  <Container style={{marginTop: '40px'}}>\r\n                    <Grid inverted style={{padding: '0em 0.7em 0em 1.5em'}} verticalAlign='bottom'>\r\n                      <Grid.Row>\r\n                        <Menu secondary inverted fluid>\r\n                          <Menu.Item>\r\n                            <Input icon={<Icon name=\"search\" link onClick={() => {\r\n                             if (this.state.value!='') {\r\n                               Router.pushRoute(`/${'search/'+encodeURIComponent(this.state.value)}`);\r\n                             }\r\n                            }}/>}\r\n                            placeholder=\"Search...\"\r\n                            onKeyDown={this.keyPress}\r\n                            onChange={this.handleChange}\r\n                             />\r\n                          </Menu.Item>\r\n                          <Button compact floated='right' inverted color='orange' onClick={()=>{Router.pushRoute('/new')}}>\r\n                            <Icon name='pencil alternate' circular size='small'/>Ask Question\r\n                          </Button>\r\n                        </Menu>\r\n                      </Grid.Row>\r\n                      </Grid>\r\n                    </Container>\r\n                  </Segment>\r\n                </Sticky>\r\n              </Rail>\r\n              {children}\r\n          </Sidebar.Pusher>\r\n        </Sidebar.Pushable>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <React.Fragment>\r\n      {this.renderSideBar()}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HeaderMobile;\r\n","// The idea: If we need to get access to our deployed factory instance from somewhere else in our app,\r\n//     we won't have to go through the entire process of importing web3, and the interface and get the address and etc.\r\n//     Instead, we can import this factory.js file.\r\n\r\n// Import the copy of web3 that we created (The instance that is created there).\r\nimport web3 from './web3';\r\n\r\n// Import the compiled contract that is placed in the build directory.\r\n// Any time that we want to tell web3 about an already deployed contract, we have to give web3 that contract's interface (ABI).\r\n// The ABI is defined inside the PostFactory.JSON file.\r\nimport Credentials from './build/Credentials.json';\r\n\r\n// Create the contract instance that refers to the specific address that we deployed the contract to\r\n// and we we'll export it from this file.\r\n// So, if we need excess to our deployed factory - We can import factory.js.\r\n// arguments: Our contract ABI, The address that we deployed our factory to\r\nlet instance;\r\nif (typeof web3 !== 'undefined') {\r\n  instance = new web3.eth.Contract(\r\n      JSON.parse(Credentials.interface),\r\n      \"0x24F324e559FD33741Baf45d9F0D4c22834636E7d\"\r\n  );\r\n}\r\n\r\nexport default instance;\r\n","// The idea: If we need to get access to our deployed factory instance from somewhere else in our app,\r\n//     we won't have to go through the entire process of importing web3, and the interface and get the address and etc.\r\n//     Instead, we can import this factory.js file.\r\n\r\n// Import the copy of web3 that we created (The instance that is created there).\r\nimport web3 from './web3';\r\n\r\n// Import the compiled contract that is placed in the build directory.\r\n// Any time that we want to tell web3 about an already deployed contract, we have to give web3 that contract's interface (ABI).\r\n// The ABI is defined inside the PostFactory.JSON file.\r\nimport QuestionFactory from './build/QuestionFactory.json';\r\n\r\n// Create the contract instance that refers to the specific address that we deployed the contract to\r\n// and we we'll export it from this file.\r\n// So, if we need excess to our deployed factory - We can import factory.js.\r\n// arguments: Our contract ABI, The address that we deployed our factory to\r\nlet instance;\r\nif (typeof web3 !== 'undefined') {\r\n  instance = new web3.eth.Contract(\r\n      JSON.parse(QuestionFactory.interface),\r\n      \"0xc82918Bd8970D2774343e239437B2A40E2ffDA23\"\r\n  );\r\n}\r\n\r\nexport default instance;\r\n","import web3 from './web3';\r\nimport Profile from './build/Profile.json';\r\n\r\nexport default (address) => {\r\n  return new web3.eth.Contract(\r\n    // The interface from the build/Profile:\r\n    JSON.parse(Profile.interface), address\r\n  );\r\n} ;\r\n","import web3 from './web3';\r\nimport Question from './build/Question.json';\r\n\r\nexport default (address) => {\r\n  return new web3.eth.Contract(\r\n    // The interface from the build/Question:\r\n    JSON.parse(Question.interface), address\r\n  );\r\n} ;\r\n","// Imports Web3 API\r\nimport Web3 from 'web3';\r\n\r\nlet web3;\r\nconst provider = new Web3.providers.HttpProvider('http://192.168.86.248:8543');\r\nweb3 = new Web3(provider);\r\n\r\nexport default web3;\r\n","import React, { Component } from 'react';\r\nimport MobileDetect from 'mobile-detect';\r\nimport _ from 'lodash';\r\nimport { Button, Header, Table, Statistic, Rating, Grid, Loader, List, Popup,\r\n   Divider, Container, Icon, Label, Progress, Segment, Modal, Responsive, Checkbox, Dropdown } from 'semantic-ui-react';\r\nimport AccountIssueModal from '../components/AccountIssueModal';\r\nimport { getWidthFactory } from '../utils/device';\r\nimport factory from '../ethereum/factory';\r\nimport credentials from '../ethereum/credentials';\r\nimport Question from '../ethereum/question';\r\nimport Profile from '../ethereum/profile';\r\nimport Layout from '../components/Layout';\r\nimport {Link, Router} from '../routes';\r\nimport web3 from '../ethereum/web3';\r\nimport { search, sortingQuestions } from '../utils/functions';\r\nimport cookies from 'next-cookies';\r\n\r\nclass HomePage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      login: false,\r\n      accountType: null,\r\n      tags: [],\r\n      topTags: [],\r\n      loading: true,\r\n      sortBy:null,\r\n      data: [],\r\n      summaries: [],\r\n      questionLimit: 30,\r\n      questionLimitChoice: [],\r\n      isSSR: false,\r\n      isMining: false\r\n    };\r\n  }\r\n\r\n  static async getInitialProps(props) {\r\n    let isMobileFromSSR = false;\r\n    let queryValue = props.query.value;\r\n    if(props.req) {\r\n      const device = props.req.headers[\"user-agent\"];\r\n      const md = new MobileDetect(device);\r\n      isMobileFromSSR = !!md.mobile();\r\n    }\r\n    return { isMobileFromSSR, queryValue, isLogin: cookies(props).login || '' , account: cookies(props).wallet || ''};\r\n  }\r\n\r\n  async componentDidUpdate(prevProps) {\r\n    if(this.props != prevProps) {\r\n      this.fetchQuestionData()\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (typeof web3 === 'undefined') {\r\n      this.setState({ loading: false })\r\n      return\r\n    }\r\n    let login = false;\r\n    if (this.props.isLogin) {\r\n      login = true;\r\n      // Get Account Type\r\n      let profileAddress = await factory.methods.getProfile(this.props.account).call();\r\n      let profile = Profile(profileAddress);\r\n      let accountType = await profile.methods.getAccountType().call();\r\n      accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"\r\n      await this.fetchQuestionData();\r\n      this.setState( { login: login });\r\n      this.setState( { accountType: accountType });\r\n    }\r\n    this.setState( { loading: false });\r\n  }\r\n\r\n  async fetchQuestionData() {\r\n    // Retrieve an array of addresses of questions deployed\r\n    let deployedQuestions = await factory.methods.getDeployedQuestions().call();\r\n    let deployedQuestionsCount = deployedQuestions.length;\r\n    this.setState({ deployedQuestionsCount: deployedQuestionsCount });\r\n\r\n    // Retrieve the summaries of all deployed questions\r\n    let summaries = [];\r\n    let searchItem;\r\n    //filter the questions based on search value\r\n    if (this.props.queryValue != undefined && this.props.queryValue != 'favicon.ico') {\r\n        searchItem = decodeURIComponent(this.props.queryValue);\r\n        deployedQuestions = await search(searchItem,deployedQuestions);\r\n        deployedQuestionsCount = deployedQuestions.length;\r\n    }\r\n\r\n    for(let i=0; i<deployedQuestionsCount; i++) {\r\n      let question = Question(deployedQuestions[i]);\r\n      let summary = await question.methods.getSummary().call();\r\n      // Filter out flagged questions\r\n      if (!summary[9]) {\r\n        summaries[i] = summary;\r\n        let answerList = await question.methods.getAnswerList().call();\r\n        summaries[i][10] = answerList.length;\r\n        summaries[i][11] = deployedQuestions[i];\r\n      }\r\n    }\r\n    summaries = summaries.reverse()\r\n    // Displays questions in interval of 30\r\n    let questionLimitChoice = [30]\r\n    let choice = Math.floor(summaries.length/30)\r\n    for (let i=1; i<=choice; i++) {\r\n      questionLimitChoice.push(30*(i+1))\r\n    }\r\n\r\n    // Get the top 10 used tags\r\n    let tags = {};\r\n    summaries = summaries.slice(0, this.state.questionLimit)\r\n    summaries.forEach(summary =>{\r\n      summary[8].forEach(tag => {\r\n        if (tags[tag] == undefined) {\r\n          tags[tag] = 1;\r\n        } else {\r\n          tags[tag] = tags[tag] + 1;\r\n        }\r\n      })\r\n    })\r\n    let sortedTags = Object.keys(tags).map(function(key) {\r\n      return [key, tags[key]];\r\n    });\r\n\r\n    // Sort the array based on the second element\r\n    sortedTags.sort(function(first, second) {\r\n      return second[1] - first[1];\r\n    });\r\n\r\n    // Array of all tags\r\n    let tagList = [];\r\n    sortedTags.forEach(tag=> {\r\n      tagList.push(tag[0])\r\n    })\r\n\r\n    // Array with only the first 10 items\r\n    tags = [];\r\n    sortedTags.slice(0, 10).forEach(tag => {\r\n      tags.push(tag[0])\r\n    })\r\n    let isMining = await web3.eth.isMining();\r\n    let blockNumber = await web3.eth.getBlockNumber();\r\n    let users = await factory.methods.getEthWallets().call();\r\n    this.setState({ isMining: isMining, blockNumber: blockNumber, users: users.length });\r\n    this.setState({ topTags: tags });\r\n    this.setState({ tags: tagList });\r\n    this.setState({ summaries: summaries });\r\n    this.setState({ questionLimitChoice: questionLimitChoice });\r\n  }\r\n\r\n  renderQuestionHeader() {\r\n    return(\r\n      <Table.Row>\r\n        <Table.HeaderCell textAlign='center' width={2}><span style={{fontSize: 15, color: '#6A737C'}}>Current Phase</span></Table.HeaderCell>\r\n        <Table.HeaderCell textAlign='center' width={2}><span style={{fontSize: 15, color: '#6A737C'}}>Answers Submitted</span></Table.HeaderCell>\r\n        <Table.HeaderCell textAlign='center' width={2}><span style={{fontSize: 15, color: '#6A737C'}}>Reward</span></Table.HeaderCell>\r\n        <Table.HeaderCell textAlign='center'><span style={{fontSize: 15, color: '#6A737C'}}>Question Title</span></Table.HeaderCell>\r\n      </Table.Row>\r\n    );\r\n  }\r\n\r\n  // Renders out the list of question\r\n  renderQuestionList() {\r\n    let summaries = this.state.summaries\r\n    summaries = sortingQuestions(summaries, this.state.sortBy);\r\n    return summaries.map((summary, index) => {\r\n      const questionState = summary[4];\r\n      const tagList = summary[8];\r\n      return <Table.Row key={index}>\r\n        <Table.Cell textAlign='center' width={2}>\r\n            {\r\n              questionState == 0 ? <Statistic size='mini' color='red'>\r\n                              <Statistic.Value><span\r\n                                  style={{fontSize: 15, color: 'red'}}> Answering\r\n                                              </span></Statistic.Value>\r\n                              <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>Phase</span></Statistic.Label>\r\n                          </Statistic>\r\n                        : questionState == 1 ?\r\n                        <Statistic size='mini' color='red'>\r\n                              <Statistic.Value><span\r\n                                  style={{fontSize: 15, color: '#C9C633'}}> Voting\r\n                                              </span></Statistic.Value>\r\n                              <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>Phase</span></Statistic.Label>\r\n                          </Statistic>\r\n                        :<Statistic size='mini' color='red'>\r\n                              <Statistic.Value><span\r\n                                  style={{fontSize: 15, color: '#10EE44'}}> Rewarded\r\n                                              </span></Statistic.Value>\r\n                              <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>Phase</span></Statistic.Label>\r\n                          </Statistic>\r\n            }\r\n          </Table.Cell>\r\n          <Table.Cell textAlign='center' width={2}>\r\n              <Statistic size='mini' color='red'>\r\n                  <Statistic.Value><span style={{fontSize: 15, color: '#6A737C'}}>{summary[10]}</span></Statistic.Value>\r\n                  <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>answer(s)</span></Statistic.Label>\r\n              </Statistic>\r\n          </Table.Cell>\r\n          <Table.Cell textAlign='center' width={2}>\r\n              <Statistic size='mini' color='red'>\r\n                  <Statistic.Value><span style={{fontSize: 15, color: '#6A737C'}}>{summary[2]*1e-4}</span></Statistic.Value>\r\n                  <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>EQT(s)</span></Statistic.Label>\r\n              </Statistic>\r\n          </Table.Cell>\r\n          <Table.Cell textAlign='left'>\r\n              <Grid.Row textAlign='left'>\r\n                  <span style={{fontSize: 18, color: '#6A737C', cursor: 'pointer'}} onClick={() => Router.pushRoute(`/questions/${summary[11]}`)}><a>{summary[0]}</a></span>\r\n              </Grid.Row>\r\n              {this.renderTag(tagList, \"mini\")}\r\n          </Table.Cell>\r\n      </Table.Row>\r\n    });\r\n  }\r\n\r\n  renderMobileQuestionList() {\r\n    let summaries = this.state.summaries\r\n    summaries = sortingQuestions(summaries, this.state.sortBy);\r\n    return summaries.map((summary, index) => {\r\n      const tags = summary[8];\r\n      const questionState = summary[4];\r\n      const tagList = summary[8];\r\n      return <List.Item key={index}>\r\n              <List.Icon name='question circle' size='large' verticalAlign='middle' />\r\n              <List.Content>\r\n                <List.Header as='a' onClick={() => Router.pushRoute(`/questions/${summary[11]}`)}>{summary[0]}</List.Header>\r\n                <Grid>\r\n                <Grid.Column width={10}>\r\n                  <List.Description>{\"Number of Answer(s): \" + summary[10]}</List.Description>\r\n                  <List.Description>{\"Reward: \" + summary[2]*1e-4 + \" EQT(s)\" }</List.Description>\r\n                  {this.renderTag(tags, \"mini\")}\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                  {questionState == 0 ? <List.Description><b><font color='red'>{\"ANSWERING PHASE\"}</font></b></List.Description> : questionState == 1\r\n                  ? <List.Description><b><font color='#C9C633'>{\"VOTING PHASE\"}</font></b></List.Description>\r\n                  : <List.Description><b><font color='#10EE44'>{\"REWARDED PHASE\"}</font></b></List.Description> }\r\n                </Grid.Column>\r\n                </Grid>\r\n              </List.Content>\r\n              <Divider hidden/>\r\n            </List.Item>\r\n    });\r\n  }\r\n\r\n  // Render each tag individually for each question\r\n  renderTag(tagList, tagSize) {\r\n    const tagColours = [\"red\", \"olive\", \"blue\", \"teal\", \"green\"];\r\n    return tagList.map((tag, index) => {\r\n      return(\r\n        <Label as='a' onClick={() => Router.pushRoute(`/${'search/'+encodeURIComponent(tag)}`)}\r\n          tag size={tagSize} key={index} color={tagColours[index%5]}>\r\n          {tag}\r\n        </Label>\r\n      )\r\n    });\r\n  }\r\n\r\n  renderTopTags() {\r\n    return (\r\n      <Segment>\r\n        <Header as='h3' textAlign=\"center\">\r\n          <Icon name=\"tags\"/>Top 10 Tags\r\n        </Header>\r\n        {this.renderTag(this.state.topTags, \"medium\")}\r\n      </Segment>\r\n    );\r\n  }\r\n\r\n  renderAbout() {\r\n    return (\r\n      <Segment>\r\n        <Header as='h3' textAlign=\"center\">\r\n          <Icon name=\"question\"/>What Are Question Phases\r\n        </Header>\r\n        <span style={{fontSize: 18, color: 'red'}}>ANSWERING</span>\r\n        <p style={{fontSize: 15}}>You can submit answers but answers will not be shown</p>\r\n        <span style={{fontSize: 18, color: '#C9C633'}}>VOTING</span>\r\n        <p style={{fontSize: 15}}>You can only approve answers submitted</p>\r\n        <span style={{fontSize: 18, color: '#10EE44'}}>REWARDED</span>\r\n        <p style={{fontSize: 15}}>Someone has already earned the reward for the question</p>\r\n      </Segment>\r\n    );\r\n  }\r\n\r\n  renderQuestionStatistics() {\r\n    return (\r\n      <Segment>\r\n        <Statistic.Group horizontal color='red'>\r\n          <Statistic>\r\n            <Statistic.Value>{this.state.deployedQuestionsCount}</Statistic.Value>\r\n            <Statistic.Label>Questions Asked</Statistic.Label>\r\n          </Statistic>\r\n        </Statistic.Group>\r\n        <Statistic.Group horizontal color='yellow'>\r\n          <Statistic>\r\n            <Statistic.Value>{this.state.users}</Statistic.Value>\r\n            <Statistic.Label>Active Users</Statistic.Label>\r\n          </Statistic>\r\n        </Statistic.Group>\r\n      </Segment>\r\n    );\r\n  }\r\n\r\n  renderBlockChainStatistics() {\r\n    return (\r\n      <Segment>\r\n        <Header as='h3' textAlign=\"center\">\r\n          <Icon name=\"ethereum\"/>Block-Chain Status\r\n        </Header>\r\n        {this.state.isMining ? <Statistic.Value><span\r\n            style={{fontSize: 18, color: 'green'}}>Currently Mining\r\n                        </span></Statistic.Value> : <Statistic.Value><span\r\n            style={{fontSize: 18, color: 'red'}}>Currently Not Mining\r\n                        </span></Statistic.Value>\r\n        }\r\n        <Statistic.Group horizontal color='green'>\r\n          <Statistic>\r\n            <Statistic.Value>{this.state.blockNumber}</Statistic.Value>\r\n            <Statistic.Label>Blocks Mined</Statistic.Label>\r\n          </Statistic>\r\n        </Statistic.Group>\r\n        *When blockchain is not mining, do not create any transaction\r\n      </Segment>\r\n    );\r\n  }\r\n\r\n  renderSortSettings() {\r\n    const options = ['Ascending Phase', 'Descending Phase', 'Ascending Answers',\r\n                     'Descending Answers', 'Ascending Rewards', 'Descending Rewards'];\r\n    return (\r\n      <span>\r\n        <Dropdown text='Sorting Questions' multiple>\r\n          <Dropdown.Menu>\r\n            <Dropdown.Header icon='filter' content='Sorting Options' />\r\n            <Dropdown.Menu scrolling>\r\n              {options.map((tag, index) => (\r\n                <Dropdown.Item key={index}\r\n                               text={tag}\r\n                               onClick={() => this.setState({ sortBy : index })}/>\r\n              ))}\r\n            </Dropdown.Menu>\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  renderFilterSettings() {\r\n    const tagColours = [\"red\", \"olive\", \"blue\", \"teal\", \"green\"];\r\n    return (\r\n      <span>\r\n        <Dropdown text='Filter Questions' multiple>\r\n          <Dropdown.Menu>\r\n            <Dropdown.Header icon='tags' content='Tag Label' />\r\n            <Dropdown.Menu scrolling>\r\n              {this.state.tags.map((tag, index) => (\r\n                <Dropdown.Item key={index}\r\n                               text={tag}\r\n                               label={{color: tagColours[index%6], empty: true, circular: true}}\r\n                               onClick={() => Router.pushRoute(`/${'search/'+encodeURIComponent(tag)}`)} />\r\n              ))}\r\n            </Dropdown.Menu>\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  renderQuestionLimitSettings() {\r\n    return(\r\n      <Dropdown text='Viewing Limit' multiple>\r\n        <Dropdown.Menu>\r\n          <Dropdown.Header icon='list' content='Question Limit' />\r\n          <Dropdown.Menu scrolling>\r\n            {this.state.questionLimitChoice.map((choice, index) => (\r\n              <Dropdown.Item key={index}\r\n                             text={choice}\r\n                             onClick={async () => {\r\n                               await this.setState({ questionLimit : choice});\r\n                               this.fetchQuestionData()\r\n                             }} />\r\n            ))}\r\n          </Dropdown.Menu>\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (this.state.login) {\r\n      return (\r\n        <Layout accountType={this.state.accountType} page={\"Home\"}>\r\n          <Responsive fireOnMount getWidth={getWidthFactory(this.props.isMobileFromSSR)} minWidth={Responsive.onlyTablet.minWidth}>\r\n            <Divider hidden/>\r\n            <Grid centered>\r\n              <Grid.Column width={10}>\r\n                <Header as='h2' textAlign='center'>\r\n                    Questions Asked\r\n                </Header>\r\n                <Segment textAlign='center'>\r\n                  {this.renderSortSettings()}\r\n                  {this.renderFilterSettings()}\r\n                  {this.renderQuestionLimitSettings()}\r\n                  <Button onClick={ () => {\r\n                      this.setState({ sortBy: ''});\r\n                      Router.pushRoute(`/home`);\r\n                  }}>Clear Fliter/Sort</Button>\r\n                </Segment>\r\n                <Table>\r\n                  <Table.Header>\r\n                    {this.renderQuestionHeader()}\r\n                  </Table.Header>\r\n                  <Table.Body>\r\n                    {this.renderQuestionList()}\r\n                  </Table.Body>\r\n                </Table>\r\n                <Divider hidden/>\r\n                <div style={{ marginTop: 20 }}>Found {this.state.summaries.length} Item(s).</div>\r\n              </Grid.Column>\r\n              <Grid.Column width={3}>\r\n                {this.renderAbout()}\r\n                {this.renderQuestionStatistics()}\r\n                {this.renderTopTags()}\r\n                {this.renderBlockChainStatistics()}\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Responsive>\r\n\r\n          <Responsive fireOnMount getWidth={getWidthFactory(this.props.isMobileFromSSR)} maxWidth={Responsive.onlyMobile.maxWidth}>\r\n            <Divider hidden/>\r\n            <Grid centered>\r\n              <Grid.Column>\r\n                <Header as='h2' textAlign='center'>\r\n                    Questions Asked\r\n                </Header>\r\n                <Segment textAlign='center'>\r\n                  {this.renderSortSettings()}\r\n                  {this.renderFilterSettings()}\r\n                  {this.renderQuestionLimitSettings()}\r\n                </Segment>\r\n                <Button onClick={ () => {\r\n                    this.setState({ sortBy: ''});\r\n                    Router.pushRoute(`/home`);\r\n                }}>Clear Fliter/Sort</Button>\r\n                <Divider hidden/>\r\n                <List divided relaxed>\r\n                  {this.renderMobileQuestionList()}\r\n                </List>\r\n                <Divider hidden/>\r\n                <div style={{ marginTop: 20 }}>Found {this.state.summaries.length} Item(s).</div>\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Responsive>\r\n        </Layout>\r\n      );\r\n    } else {\r\n      return (\r\n        <Layout accountType={this.state.accountType}>\r\n          <AccountIssueModal loading={this.state.loading} login={this.state.login} />\r\n        </Layout>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default HomePage;\r\n","const routes = require('next-routes')();\r\n\r\n// Define a new route mapping\r\n// Arguments: The pattern to look for, which route inside the page directory\r\n// we want to display\r\n\r\nroutes\r\n  .add('/', '/login')\r\n  .add('/home', 'home')\r\n  .add('/about', '/about')\r\n  .add('/userProfile/:value', '/userProfile')\r\n  .add('/feedback', '/feedback')\r\n  .add('/admin', '/admin')\r\n  .add('/new', '/newQuestion')\r\n  .add('/questions/:value', '/showQuestion')\r\n  .add('/search/:value', '/home')\r\n  .add('/leaderboard', '/leaderboard')\r\n  .add('/register', '/register');\r\n\r\nmodule.exports = routes;\r\n","const MobileDetect = require('mobile-detect');\r\nconst { Responsive } = require('semantic-ui-react');\r\n\r\nconst isMobileSSR = (req) => {\r\n    const md = new MobileDetect(req.headers[\"user-agent\"]);\r\n    console.log(md);\r\n    return !!md.mobile();\r\n}\r\n\r\nconst getWidthFactory = (isMobileFromSSR) => () => {\r\n    const isSSR = typeof window === \"undefined\";\r\n    const ssrValue = isMobileFromSSR\r\n      ? Responsive.onlyMobile.maxWidth\r\n      : Responsive.onlyTablet.minWidth;\r\n    return isSSR ? ssrValue : window.innerWidth;\r\n};\r\n\r\n export { isMobileSSR, getWidthFactory };\r\n","import Question from '../ethereum/question';\r\nconst Fuse = require(\"fuse.js\");\r\n\r\n// Validate Email Address Format\r\nconst validate = (emailAddress) => {\r\n  if (emailAddress === \"admin\") {\r\n    return true;\r\n  } else {\r\n    const re = /\\S+@e\\.ntu\\.edu\\.sg$/;\r\n    return re.test(emailAddress);\r\n  }\r\n};\r\n\r\n// Provides common logging method for logging every transactions\r\nconst logging = (message) => {\r\n    let today = new Date();\r\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\r\n    \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    let date = months[today.getMonth()]+\" \"+today.getDate()+\" \"+today.getFullYear();\r\n    let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n    let dateTime = date+' '+time+\": \"+message;\r\n    return dateTime;\r\n};\r\n\r\n// Search Algorithm\r\nasync function search(value, questions) {\r\n    let list = [];\r\n    for (let i = 0; i < questions.length; i++) {\r\n        var summary = await Question(questions[i]).methods.getSummary().call();\r\n        list.push({'address': questions[i], 'title': summary[0], 'content': summary[1], 'tags': summary[8]});\r\n    }\r\n    let options = {\r\n        id: \"address\",\r\n        threshold: 0.1,\r\n        shouldSort: true,\r\n        tokenize: true,\r\n        keys: [{\r\n            name: 'title',\r\n            weight: 0.3\r\n        }, {\r\n            name: 'content',\r\n            weight: 0.4\r\n        }, {\r\n           name:'tags',\r\n           weight: 0.3\r\n        }]\r\n    };\r\n    let fuse = new Fuse(list, options);\r\n    const result = fuse.search(value);\r\n    return result;\r\n}\r\n\r\n// Checks required fields are filled up\r\nconst checkFieldEmpty = (field) => {\r\n  return field === \"\" ? false : true;\r\n}\r\n\r\n// Checks time-related fields are filled up properly\r\nconst checkTimeField = (field) => {\r\n  return field > 0 ? true : false;\r\n}\r\n\r\n// Checks ETQ fields are filled up properly\r\nconst checkRewardField = (field) => {\r\n  return field >= 1 ? true : false;\r\n}\r\n\r\n// Convert to lower case letters in a string\r\nconst lowerCase = (item) => {\r\n  for (let i = 0; i<item.length; i++) {\r\n    item[i] = item[i].toLowerCase();\r\n  }\r\n  return item;\r\n}\r\n\r\nconst sortingQuestions = (summary, sortBy) => {\r\n  switch(sortBy) {\r\n    case 0:\r\n      summary.sort(function(a, b) {\r\n        return a[4] - b[4];\r\n      });\r\n      break;\r\n    case 1:\r\n      summary.sort(function(a, b) {\r\n        return b[4] - a[4];\r\n      });\r\n      break;\r\n    case 2:\r\n      summary.sort(function(a, b) {\r\n        return a[10] - b[10];\r\n      });\r\n      break;\r\n    case 3:\r\n      summary.sort(function(a, b) {\r\n        return b[10] - a[10];\r\n      });\r\n      break;\r\n    case 4:\r\n      summary.sort(function(a, b) {\r\n        return a[2] - b[2];\r\n      });\r\n      break;\r\n    case 5:\r\n      summary.sort(function(a, b) {\r\n        return b[2] - a[2];\r\n      });\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return summary;\r\n}\r\n\r\nconst sortingAnswers = (answers, sorted) => {\r\n  if (sorted) {\r\n    answers.sort(function(a, b) {\r\n      return a[4] - b[4];\r\n    });\r\n  } else {\r\n    answers.sort(function(a, b) {\r\n      return b[4] - a[4];\r\n    });\r\n  }\r\n  return answers;\r\n}\r\n\r\nexport { validate, logging, search, checkFieldEmpty, checkTimeField, checkRewardField, lowerCase, sortingQuestions, sortingAnswers };\r\n","module.exports = require(\"fuse.js\");","module.exports = require(\"lodash\");","module.exports = require(\"mobile-detect\");","module.exports = require(\"next-cookies\");","module.exports = require(\"next-routes\");","module.exports = require(\"next/head\");","module.exports = require(\"react\");","module.exports = require(\"semantic-ui-react\");","module.exports = require(\"web3\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AACA;AAAA;AADA;AASA;AACA;AAxCA;AACA;AAyCA;;;;;;;;;;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAOA;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EA;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcaA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AASA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAGA;AAAA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AAHA;AAIA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AA7bA;AACA;AA8bA;;;;;;;;;;;AChdA;AAGA;AACA;AACA;AACA;AAAA;AAaA;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAXA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAhCA;AACA;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC7HA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}