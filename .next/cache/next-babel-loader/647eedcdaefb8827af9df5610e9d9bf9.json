{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Button, Card, Segment, Container, List, Transition, Popup, Modal, Header, Icon, Divider, Form, Input, Message } from \"semantic-ui-react\";\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport TimeOutModal from '../components/TimeOutModal';\nimport web3 from '../ethereum/web3';\nimport Layout from '../components/Layout';\nimport factory from '../ethereum/factory';\nimport credentials from '../ethereum/credentials';\nimport EthQuestionToken from '../ethereum/token';\nimport EthQuestionTokenSale from '../ethereum/tokenSale';\nimport Profile from '../ethereum/profile';\nimport { Router } from '../routes';\nimport { checkRewardField, logging } from '../utils/functions';\nimport cookies from 'next-cookies';\n\nclass userProfile extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"toggleVisibility\", () => this.setState(prevState => ({\n      visible: !prevState.visible\n    })));\n\n    _defineProperty(this, \"topUp\", async () => {\n      this.setState({\n        toppingUp: true,\n        errorMessage: ''\n      });\n\n      if (checkRewardField(this.state.topUpAmount)) {\n        try {\n          const account = this.state.account;\n          const profileAddress = await factory.methods.getProfile(account).call();\n          let logTransaction = logging(\"Top Up: \" + this.state.topUpAmount + \" EQT(s)\");\n          await EthQuestionTokenSale.methods.buyTokens(this.state.topUpAmount * 1e4, EthQuestionToken._address, profileAddress, logTransaction).send({\n            from: account,\n            value: this.state.topUpAmount * 1e4 * this.state.tokenPrice,\n            gasPrice: '0'\n          });\n          Router.pushRoute('/home'); // Automatic redirect the user.\n        } catch (err) {\n          if (err.message == \"Returned error: authentication needed: password or unlock\") {\n            this.setState({\n              timeout: true\n            });\n          }\n\n          this.setState({\n            errorMessage: err.message\n          });\n          this.setState({\n            error: true\n          });\n          this.setState({\n            toppingUp: false\n          });\n        }\n      } else {\n        this.setState({\n          errorMessage: \"Required Field(s) Empty or Invalid Input\"\n        });\n        this.setState({\n          error: true\n        });\n        this.setState({\n          toppingUp: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"exchange\", async () => {\n      this.setState({\n        exchanging: true,\n        errorMessage: ''\n      });\n\n      try {\n        const account = this.state.account;\n        const profileAddress = await factory.methods.getProfile(account).call();\n        let logTransaction = logging(\"Exchange: 100 Points for 5 EQT(s)\");\n        await EthQuestionTokenSale.methods.exchangeTokens(EthQuestionToken._address, profileAddress, logTransaction).send({\n          from: account,\n          gasPrice: '0'\n        });\n        Router.pushRoute('/home'); // Automatic redirect the user.\n      } catch (err) {\n        if (err.message == \"Returned error: authentication needed: password or unlock\") {\n          this.setState({\n            timeout: true\n          });\n        } else {\n          this.setState({\n            errorMessage: err.message + \" Insufficient Points\"\n          });\n        }\n\n        this.setState({\n          error: true\n        });\n        this.setState({\n          exchanging: false\n        });\n      }\n    });\n\n    this.state = {\n      visible: false,\n      login: false,\n      loading: true,\n      timeout: false,\n      accountType: null,\n      account: null,\n      token: null,\n      emailAddress: null,\n      points: null,\n      transactions: [],\n      topUpModalOpen: false,\n      topUp: false,\n      topUpAmount: '',\n      error: false,\n      errorMessage: '',\n      tokenPrice: '',\n      exchanging: false\n    };\n  }\n\n  static async getInitialProps(props) {\n    return {\n      isLogin: cookies(props).login || '',\n      account: cookies(props).wallet || ''\n    };\n  }\n\n  async componentDidMount() {\n    if (typeof web3 === 'undefined') {\n      this.setState({\n        loading: false\n      });\n      return;\n    }\n\n    let login = false;\n\n    if (this.props.isLogin) {\n      login = true; // Get profile data\n\n      const account = this.props.account;\n      const profileAddress = await factory.methods.getProfile(account).call();\n      const profile = Profile(profileAddress);\n      const emailAddress = await credentials.methods.getBinding(account).call();\n      const token = ((await EthQuestionToken.methods.balanceOf(account).call()) * 1e-4).toFixed(4);\n      const etherBalance = await web3.eth.getBalance(account);\n      const points = await profile.methods.getPoints().call();\n      const transactions = await profile.methods.getTransactions().call();\n      const tokenPrice = await EthQuestionTokenSale.methods.getTokenPrice().call(); // Get Account Type\n\n      let accountType = await profile.methods.getAccountType().call();\n      accountType == 0 ? accountType = \"Admin\" : accountType = \"User\";\n      this.setState({\n        accountType: accountType,\n        account: account,\n        token: token,\n        etherBalance: etherBalance,\n        emailAddress: emailAddress,\n        points: points,\n        transactions: transactions,\n        login: true,\n        tokenPrice: tokenPrice\n      });\n    }\n\n    this.setState({\n      loading: false\n    });\n  }\n\n  renderTransactions() {\n    const transactions = this.state.transactions;\n    return transactions.map((transaction, index) => {\n      return __jsx(List.Item, {\n        key: index\n      }, __jsx(List.Icon, {\n        name: \"calendar outline\",\n        size: \"large\",\n        verticalAlign: \"middle\"\n      }), __jsx(List.Content, null, transaction));\n    });\n  }\n\n  render() {\n    if (this.state.login) {\n      return __jsx(Layout, {\n        accountType: this.state.accountType,\n        page: \"Profile\"\n      }, __jsx(Divider, {\n        hidden: true\n      }), __jsx(Container, null, __jsx(Card, {\n        color: \"red\",\n        centered: true,\n        fluid: true\n      }, __jsx(Card.Content, null, __jsx(Header, {\n        as: \"h1\",\n        textAlign: \"center\"\n      }, __jsx(Icon, {\n        name: \"user\",\n        circular: true\n      })), __jsx(Card.Header, {\n        textAlign: \"center\"\n      }, \"Account Details:\", __jsx(\"div\", {\n        style: {\n          color: \"red\",\n          fontSize: \"small\",\n          wordWrap: \"break-word\"\n        }\n      }, this.state.account)), __jsx(Card.Meta, {\n        textAlign: \"center\"\n      }, __jsx(\"b\", null, this.state.accountType)), __jsx(Card.Description, {\n        textAlign: \"center\"\n      }, __jsx(\"b\", null, \"EQT Balance:\"), \" \", this.state.token, __jsx(Popup, {\n        trigger: __jsx(Button, {\n          icon: \"ethereum\",\n          onClick: () => {\n            this.setState({\n              topUpModalOpen: true,\n              topUpAmount: '',\n              error: false,\n              errorMessage: ''\n            });\n          },\n          floated: \"right\",\n          size: \"mini\",\n          color: \"green\"\n        }),\n        content: \"Top Up EQT(s)\",\n        inverted: true\n      })), __jsx(Card.Description, {\n        textAlign: \"center\"\n      }, __jsx(\"b\", null, \"Ether Balance:\"), \" \", this.state.etherBalance), __jsx(Card.Description, {\n        textAlign: \"center\"\n      }, __jsx(\"b\", null, \"Points Accumulated:\"), \" \", this.state.points), __jsx(Card.Description, {\n        textAlign: \"center\"\n      }, __jsx(\"b\", null, \"Valid Email Address:\"), \" \", this.state.emailAddress)))), __jsx(Divider, {\n        hidden: true\n      }), __jsx(Container, null, __jsx(Segment, {\n        textAlign: \"center\"\n      }, __jsx(\"b\", {\n        style: {\n          fontSize: \"20px\"\n        }\n      }, \"Transaction History\"), __jsx(Popup, {\n        trigger: __jsx(Button, {\n          icon: this.state.visible ? \"minus\" : \"plus\",\n          onClick: this.toggleVisibility,\n          floated: \"right\",\n          size: \"mini\"\n        }),\n        content: \"Click to expand/close\",\n        inverted: true\n      })), __jsx(Transition, {\n        visible: this.state.visible,\n        animation: \"scale\",\n        duration: 500\n      }, __jsx(List, {\n        divided: true,\n        size: \"huge\"\n      }, this.renderTransactions())), __jsx(Modal, {\n        open: this.state.topUpModalOpen,\n        size: \"small\"\n      }, __jsx(Header, {\n        icon: \"ethereum\",\n        content: \"Topping Up EQT(s)\"\n      }), __jsx(Modal.Content, null, __jsx(Form, {\n        error: !!this.state.errorMessage,\n        style: {\n          marginTop: '10px'\n        }\n      }, __jsx(Form.Field, {\n        required: true\n      }, __jsx(\"label\", null, \"Top Up Amount (1 EQT = \", this.state.tokenPrice * 1e-18, \" Ether)\"), __jsx(Input, {\n        label: \"EQT(s)\",\n        labelPosition: \"right\",\n        placeholder: \"Enter EQT Value\",\n        value: this.state.topUpAmount,\n        onChange: event => this.setState({\n          topUpAmount: event.target.value\n        })\n      }))), __jsx(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.errorMessage,\n        hidden: !this.state.error\n      })), __jsx(Modal.Actions, null, __jsx(Button, {\n        color: \"red\",\n        onClick: () => {\n          this.setState({\n            topUpModalOpen: false\n          });\n        }\n      }, __jsx(Icon, {\n        name: \"remove\"\n      }), \" Cancel\"), __jsx(Button, {\n        color: \"green\",\n        onClick: this.topUp,\n        loading: this.state.toppingUp\n      }, __jsx(Icon, {\n        name: \"checkmark\"\n      }), \" Top Up\"), __jsx(Button, {\n        color: \"green\",\n        onClick: this.exchange,\n        loading: this.state.exchanging\n      }, __jsx(Icon, {\n        name: \"exchange\"\n      }), \" Exchange With Points\")))), __jsx(TimeOutModal, {\n        timeout: this.state.timeout\n      }));\n    } else {\n      return __jsx(Layout, {\n        accountType: this.state.accountType\n      }, __jsx(AccountIssueModal, {\n        loading: this.state.loading,\n        login: this.state.login\n      }));\n    }\n  }\n\n}\n\nexport default userProfile;","map":{"version":3,"sources":["C:/Users/edd1e/Desktop/ethQuestion_1.0/pages/userProfile.js"],"names":["React","Component","Button","Card","Segment","Container","List","Transition","Popup","Modal","Header","Icon","Divider","Form","Input","Message","AccountIssueModal","TimeOutModal","web3","Layout","factory","credentials","EthQuestionToken","EthQuestionTokenSale","Profile","Router","checkRewardField","logging","cookies","userProfile","constructor","props","setState","prevState","visible","toppingUp","errorMessage","state","topUpAmount","account","profileAddress","methods","getProfile","call","logTransaction","buyTokens","_address","send","from","value","tokenPrice","gasPrice","pushRoute","err","message","timeout","error","exchanging","exchangeTokens","login","loading","accountType","token","emailAddress","points","transactions","topUpModalOpen","topUp","getInitialProps","isLogin","wallet","componentDidMount","profile","getBinding","balanceOf","toFixed","etherBalance","eth","getBalance","getPoints","getTransactions","getTokenPrice","getAccountType","renderTransactions","map","transaction","index","render","color","fontSize","wordWrap","toggleVisibility","marginTop","event","target","exchange"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Card, Segment, Container, List, Transition, Popup, Modal,\r\n         Header, Icon, Divider, Form, Input, Message } from \"semantic-ui-react\";\r\nimport AccountIssueModal from '../components/AccountIssueModal';\r\nimport TimeOutModal from '../components/TimeOutModal';\r\nimport web3 from '../ethereum/web3'\r\nimport Layout from '../components/Layout';\r\nimport factory from '../ethereum/factory';\r\nimport credentials from '../ethereum/credentials';\r\nimport EthQuestionToken from '../ethereum/token';\r\nimport EthQuestionTokenSale from '../ethereum/tokenSale'\r\nimport Profile from '../ethereum/profile';\r\nimport { Router } from '../routes';\r\nimport { checkRewardField, logging } from '../utils/functions'\r\nimport cookies from 'next-cookies';\r\n\r\nclass userProfile extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      visible: false,\r\n      login: false,\r\n      loading: true,\r\n      timeout: false,\r\n      accountType: null,\r\n      account: null,\r\n      token: null,\r\n      emailAddress: null,\r\n      points: null,\r\n      transactions: [],\r\n      topUpModalOpen: false,\r\n      topUp: false,\r\n      topUpAmount: '',\r\n      error: false,\r\n      errorMessage: '',\r\n      tokenPrice: '',\r\n      exchanging: false\r\n    };\r\n  }\r\n\r\n  static async getInitialProps(props) {\r\n    return { isLogin: cookies(props).login || '' , account: cookies(props).wallet || '' };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (typeof web3 === 'undefined') {\r\n      this.setState({ loading: false })\r\n      return\r\n    }\r\n    let login = false;\r\n    if (this.props.isLogin) {\r\n      login = true;\r\n      // Get profile data\r\n      const account = this.props.account;\r\n      const profileAddress = await factory.methods.getProfile(account).call();\r\n      const profile = Profile(profileAddress);\r\n      const emailAddress = await credentials.methods.getBinding(account).call();\r\n      const token = (await EthQuestionToken.methods.balanceOf(account).call()*1e-4).toFixed(4);\r\n      const etherBalance = await web3.eth.getBalance(account);\r\n      const points = await profile.methods.getPoints().call();\r\n      const transactions = await profile.methods.getTransactions().call();\r\n      const tokenPrice = await EthQuestionTokenSale.methods.getTokenPrice().call();\r\n\r\n      // Get Account Type\r\n      let accountType = await profile.methods.getAccountType().call();\r\n      accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"\r\n      this.setState({ accountType: accountType,\r\n                      account: account,\r\n                      token: token,\r\n                      etherBalance: etherBalance,\r\n                      emailAddress: emailAddress,\r\n                      points: points,\r\n                      transactions: transactions,\r\n                      login: true,\r\n                      tokenPrice: tokenPrice });\r\n    }\r\n    this.setState( { loading: false });\r\n  }\r\n\r\n  toggleVisibility = () =>\r\n    this.setState((prevState) => ({ visible: !prevState.visible }))\r\n\r\n  topUp = async () => {\r\n    this.setState({ toppingUp: true, errorMessage: ''});\r\n    if(checkRewardField(this.state.topUpAmount)) {\r\n      try {\r\n          const account = this.state.account;\r\n          const profileAddress = await factory.methods.getProfile(account).call();\r\n          let logTransaction = logging(\"Top Up: \" + this.state.topUpAmount + \" EQT(s)\");\r\n          await EthQuestionTokenSale.methods\r\n          .buyTokens(this.state.topUpAmount*1e4, EthQuestionToken._address, profileAddress, logTransaction)\r\n          .send({\r\n              from: account,\r\n              value: this.state.topUpAmount*1e4 * this.state.tokenPrice,\r\n              gasPrice: '0'\r\n\r\n          });\r\n          Router.pushRoute('/home'); // Automatic redirect the user.\r\n      } catch (err) {\r\n          if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n            this.setState({ timeout: true });\r\n          }\r\n          this.setState({ errorMessage: err.message });\r\n          this.setState({ error: true})\r\n          this.setState({ toppingUp: false });\r\n      }\r\n    } else {\r\n      this.setState({ errorMessage: \"Required Field(s) Empty or Invalid Input\" });\r\n      this.setState({ error: true});\r\n      this.setState({ toppingUp: false });\r\n    }\r\n  }\r\n\r\n  exchange = async () => {\r\n    this.setState({ exchanging: true, errorMessage: ''});\r\n    try {\r\n      const account = this.state.account;\r\n      const profileAddress = await factory.methods.getProfile(account).call();\r\n      let logTransaction = logging(\"Exchange: 100 Points for 5 EQT(s)\");\r\n      await EthQuestionTokenSale.methods\r\n      .exchangeTokens(EthQuestionToken._address, profileAddress, logTransaction)\r\n      .send({\r\n          from: account,\r\n          gasPrice: '0'\r\n      });\r\n      Router.pushRoute('/home'); // Automatic redirect the user.\r\n    } catch (err) {\r\n      if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n        this.setState({ timeout: true });\r\n      } else {\r\n        this.setState({ errorMessage: err.message + \" Insufficient Points\"});\r\n      }\r\n      this.setState({ error: true})\r\n      this.setState({ exchanging: false });\r\n    }\r\n  }\r\n\r\n  renderTransactions() {\r\n    const transactions = this.state.transactions;\r\n    return transactions.map((transaction, index) => {\r\n      return(\r\n        <List.Item key={index}>\r\n          <List.Icon name=\"calendar outline\" size='large' verticalAlign='middle'/>\r\n          <List.Content>\r\n            {transaction}\r\n          </List.Content>\r\n        </List.Item>\r\n      );\r\n    })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.login) {\r\n      return(\r\n        <Layout accountType={this.state.accountType} page={\"Profile\"}>\r\n          <Divider hidden/>\r\n          <Container>\r\n            <Card color = \"red\" centered fluid>\r\n              <Card.Content>\r\n                <Header as='h1' textAlign='center'>\r\n                  <Icon name='user' circular/>\r\n                </Header>\r\n                <Card.Header textAlign='center'>\r\n                  Account Details:\r\n                  <div style={{color: \"red\", fontSize: \"small\", wordWrap: \"break-word\" }}>{this.state.account}</div>\r\n                </Card.Header>\r\n                <Card.Meta textAlign='center'>\r\n                  <b>{this.state.accountType}</b>\r\n                </Card.Meta>\r\n                <Card.Description textAlign='center'>\r\n                  <b>EQT Balance:</b> {this.state.token}\r\n                  <Popup\r\n                    trigger={\r\n                      <Button\r\n                        icon=\"ethereum\"\r\n                        onClick={ () => {this.setState({ topUpModalOpen: true, topUpAmount: '', error: false, errorMessage: '' })} }\r\n                        floated=\"right\"\r\n                        size=\"mini\"\r\n                        color=\"green\"\r\n                      />\r\n                    }\r\n                    content={\"Top Up EQT(s)\"}\r\n                    inverted/>\r\n                </Card.Description>\r\n                <Card.Description textAlign='center'>\r\n                  <b>Ether Balance:</b> {this.state.etherBalance}\r\n                </Card.Description>\r\n                <Card.Description textAlign='center'>\r\n                  <b>Points Accumulated:</b> {this.state.points}\r\n                </Card.Description>\r\n                <Card.Description textAlign='center'>\r\n                  <b>Valid Email Address:</b> {this.state.emailAddress}\r\n                </Card.Description>\r\n              </Card.Content>\r\n            </Card>\r\n          </Container>\r\n          <Divider hidden/>\r\n          <Container>\r\n            <Segment textAlign=\"center\">\r\n              <b style={{fontSize:\"20px\"}}>Transaction History</b>\r\n              <Popup\r\n                trigger={\r\n                  <Button\r\n                    icon={this.state.visible ? \"minus\" : \"plus\"}\r\n                    onClick={this.toggleVisibility}\r\n                    floated=\"right\"\r\n                    size=\"mini\"\r\n                  />\r\n                }\r\n                content={\"Click to expand/close\"}\r\n                inverted/>\r\n            </Segment>\r\n            <Transition visible={this.state.visible} animation='scale' duration={500}>\r\n              <List divided size=\"huge\">\r\n                {this.renderTransactions()}\r\n              </List>\r\n            </Transition>\r\n\r\n            <Modal open={this.state.topUpModalOpen} size='small'>\r\n            <Header icon='ethereum' content='Topping Up EQT(s)' />\r\n            <Modal.Content>\r\n              <Form error={!!this.state.errorMessage} style={{ marginTop: '10px' }}>\r\n                <Form.Field required={true}>\r\n                    <label>Top Up Amount (1 EQT = {this.state.tokenPrice*1e-18} Ether)</label>\r\n                    <Input\r\n                        label=\"EQT(s)\"\r\n                        labelPosition=\"right\"\r\n                        placeholder='Enter EQT Value'\r\n                        value={this.state.topUpAmount}\r\n                        onChange={event => this.setState({ topUpAmount: event.target.value })}\r\n                    />\r\n                </Form.Field>\r\n              </Form>\r\n              <Message error header=\"Oops!\" content={this.state.errorMessage} hidden={!this.state.error}/>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n              <Button color='red' onClick={ () => {this.setState({ topUpModalOpen: false })} }>\r\n                <Icon name='remove' /> Cancel\r\n\r\n              </Button>\r\n              <Button color='green' onClick={this.topUp} loading={this.state.toppingUp}>\r\n                <Icon name='checkmark' /> Top Up\r\n              </Button>\r\n              <Button color='green' onClick={this.exchange} loading={this.state.exchanging}>\r\n                <Icon name='exchange' /> Exchange With Points\r\n              </Button>\r\n            </Modal.Actions>\r\n          </Modal>\r\n          </Container>\r\n          <TimeOutModal timeout={this.state.timeout} />\r\n        </Layout>\r\n      );\r\n    } else {\r\n      return (\r\n        <Layout accountType={this.state.accountType}>\r\n          <AccountIssueModal loading={this.state.loading} login={this.state.login} />\r\n        </Layout>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default userProfile;\r\n"]},"metadata":{},"sourceType":"module"}