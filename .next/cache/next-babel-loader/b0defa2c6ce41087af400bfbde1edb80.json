{"ast":null,"code":"import Question from '../ethereum/question';\n\nconst Fuse = require(\"fuse.js\"); // Validate Email Address Format\n\n\nconst validate = emailAddress => {\n  if (emailAddress === \"admin\") {\n    return true;\n  } else {\n    const re = /\\S+@e\\.ntu\\.edu\\.sg$/;\n    return re.test(emailAddress);\n  }\n}; // Provides common logging method for logging every transactions\n\n\nconst logging = message => {\n  let today = new Date();\n  let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  let date = months[today.getMonth()] + \" \" + today.getDate() + \" \" + today.getFullYear();\n  let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n  let dateTime = date + ' ' + time + \": \" + message;\n  return dateTime;\n}; // Search Algorithm\n\n\nasync function search(value, questions) {\n  let list = [];\n\n  for (let i = 0; i < questions.length; i++) {\n    var summary = await Question(questions[i]).methods.getSummary().call();\n    list.push({\n      'address': questions[i],\n      'title': summary[0],\n      'content': summary[1],\n      'tags': summary[8]\n    });\n  }\n\n  let options = {\n    id: \"address\",\n    threshold: 0.1,\n    shouldSort: true,\n    tokenize: true,\n    keys: [{\n      name: 'title',\n      weight: 0.3\n    }, {\n      name: 'content',\n      weight: 0.4\n    }, {\n      name: 'tags',\n      weight: 0.3\n    }]\n  };\n  let fuse = new Fuse(list, options);\n  const result = fuse.search(value);\n  return result;\n} // Checks required fields are filled up\n\n\nconst checkFieldEmpty = field => {\n  return field === \"\" ? false : true;\n}; // Checks time-related fields are filled up properly\n\n\nconst checkTimeField = field => {\n  return field > 0 ? true : false;\n}; // Checks ETQ fields are filled up properly\n\n\nconst checkRewardField = field => {\n  return field >= 1 ? true : false;\n}; // Convert to lower case letters in a string\n\n\nconst lowerCase = item => {\n  for (let i = 0; i < item.length; i++) {\n    item[i] = item[i].toLowerCase();\n  }\n\n  return item;\n};\n\nconst sortingQuestions = (summary, sortBy) => {\n  switch (sortBy) {\n    case 0:\n      summary.sort(function (a, b) {\n        return a[4] - b[4];\n      });\n      break;\n\n    case 1:\n      summary.sort(function (a, b) {\n        return b[4] - a[4];\n      });\n      break;\n\n    case 2:\n      summary.sort(function (a, b) {\n        return a[10] - b[10];\n      });\n      break;\n\n    case 3:\n      summary.sort(function (a, b) {\n        return b[10] - a[10];\n      });\n      break;\n\n    case 4:\n      summary.sort(function (a, b) {\n        return a[2] - b[2];\n      });\n      break;\n\n    case 5:\n      summary.sort(function (a, b) {\n        return b[2] - a[2];\n      });\n      break;\n\n    default:\n      break;\n  }\n\n  return summary;\n};\n\nconst sortingAnswers = (answers, sorted) => {\n  if (sorted) {\n    answers.sort(function (a, b) {\n      return a[4] - b[4];\n    });\n  } else {\n    answers.sort(function (a, b) {\n      return b[4] - a[4];\n    });\n  }\n\n  return answers;\n};\n\nexport { validate, logging, search, checkFieldEmpty, checkTimeField, checkRewardField, lowerCase, sortingQuestions, sortingAnswers };","map":{"version":3,"sources":["C:/Users/edd1e/Desktop/ethQuestion_1.0/utils/functions.js"],"names":["Question","Fuse","require","validate","emailAddress","re","test","logging","message","today","Date","months","date","getMonth","getDate","getFullYear","time","getHours","getMinutes","getSeconds","dateTime","search","value","questions","list","i","length","summary","methods","getSummary","call","push","options","id","threshold","shouldSort","tokenize","keys","name","weight","fuse","result","checkFieldEmpty","field","checkTimeField","checkRewardField","lowerCase","item","toLowerCase","sortingQuestions","sortBy","sort","a","b","sortingAnswers","answers","sorted"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,sBAArB;;AACA,MAAMC,IAAI,GAAGC,OAAO,CAAC,SAAD,CAApB,C,CAEA;;;AACA,MAAMC,QAAQ,GAAIC,YAAD,IAAkB;AACjC,MAAIA,YAAY,KAAK,OAArB,EAA8B;AAC5B,WAAO,IAAP;AACD,GAFD,MAEO;AACL,UAAMC,EAAE,GAAG,sBAAX;AACA,WAAOA,EAAE,CAACC,IAAH,CAAQF,YAAR,CAAP;AACD;AACF,CAPD,C,CASA;;;AACA,MAAMG,OAAO,GAAIC,OAAD,IAAa;AACzB,MAAIC,KAAK,GAAG,IAAIC,IAAJ,EAAZ;AACA,MAAIC,MAAM,GAAG,CAAC,SAAD,EAAY,UAAZ,EAAwB,OAAxB,EAAiC,OAAjC,EAA0C,KAA1C,EAAiD,MAAjD,EAAyD,MAAzD,EACb,QADa,EACH,WADG,EACU,SADV,EACqB,UADrB,EACiC,UADjC,CAAb;AAEA,MAAIC,IAAI,GAAGD,MAAM,CAACF,KAAK,CAACI,QAAN,EAAD,CAAN,GAAyB,GAAzB,GAA6BJ,KAAK,CAACK,OAAN,EAA7B,GAA6C,GAA7C,GAAiDL,KAAK,CAACM,WAAN,EAA5D;AACA,MAAIC,IAAI,GAAGP,KAAK,CAACQ,QAAN,KAAmB,GAAnB,GAAyBR,KAAK,CAACS,UAAN,EAAzB,GAA8C,GAA9C,GAAoDT,KAAK,CAACU,UAAN,EAA/D;AACA,MAAIC,QAAQ,GAAGR,IAAI,GAAC,GAAL,GAASI,IAAT,GAAc,IAAd,GAAmBR,OAAlC;AACA,SAAOY,QAAP;AACH,CARD,C,CAUA;;;AACA,eAAeC,MAAf,CAAsBC,KAAtB,EAA6BC,SAA7B,EAAwC;AACpC,MAAIC,IAAI,GAAG,EAAX;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACG,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvC,QAAIE,OAAO,GAAG,MAAM3B,QAAQ,CAACuB,SAAS,CAACE,CAAD,CAAV,CAAR,CAAuBG,OAAvB,CAA+BC,UAA/B,GAA4CC,IAA5C,EAApB;AACAN,IAAAA,IAAI,CAACO,IAAL,CAAU;AAAC,iBAAWR,SAAS,CAACE,CAAD,CAArB;AAA0B,eAASE,OAAO,CAAC,CAAD,CAA1C;AAA+C,iBAAWA,OAAO,CAAC,CAAD,CAAjE;AAAsE,cAAQA,OAAO,CAAC,CAAD;AAArF,KAAV;AACH;;AACD,MAAIK,OAAO,GAAG;AACVC,IAAAA,EAAE,EAAE,SADM;AAEVC,IAAAA,SAAS,EAAE,GAFD;AAGVC,IAAAA,UAAU,EAAE,IAHF;AAIVC,IAAAA,QAAQ,EAAE,IAJA;AAKVC,IAAAA,IAAI,EAAE,CAAC;AACHC,MAAAA,IAAI,EAAE,OADH;AAEHC,MAAAA,MAAM,EAAE;AAFL,KAAD,EAGH;AACCD,MAAAA,IAAI,EAAE,SADP;AAECC,MAAAA,MAAM,EAAE;AAFT,KAHG,EAMH;AACAD,MAAAA,IAAI,EAAC,MADL;AAEAC,MAAAA,MAAM,EAAE;AAFR,KANG;AALI,GAAd;AAgBA,MAAIC,IAAI,GAAG,IAAIvC,IAAJ,CAASuB,IAAT,EAAeQ,OAAf,CAAX;AACA,QAAMS,MAAM,GAAGD,IAAI,CAACnB,MAAL,CAAYC,KAAZ,CAAf;AACA,SAAOmB,MAAP;AACH,C,CAED;;;AACA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAOA,KAAK,KAAK,EAAV,GAAe,KAAf,GAAuB,IAA9B;AACD,CAFD,C,CAIA;;;AACA,MAAMC,cAAc,GAAID,KAAD,IAAW;AAChC,SAAOA,KAAK,GAAG,CAAR,GAAY,IAAZ,GAAmB,KAA1B;AACD,CAFD,C,CAIA;;;AACA,MAAME,gBAAgB,GAAIF,KAAD,IAAW;AAClC,SAAOA,KAAK,IAAI,CAAT,GAAa,IAAb,GAAoB,KAA3B;AACD,CAFD,C,CAIA;;;AACA,MAAMG,SAAS,GAAIC,IAAD,IAAU;AAC1B,OAAK,IAAItB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAACsB,IAAI,CAACrB,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AAClCsB,IAAAA,IAAI,CAACtB,CAAD,CAAJ,GAAUsB,IAAI,CAACtB,CAAD,CAAJ,CAAQuB,WAAR,EAAV;AACD;;AACD,SAAOD,IAAP;AACD,CALD;;AAOA,MAAME,gBAAgB,GAAG,CAACtB,OAAD,EAAUuB,MAAV,KAAqB;AAC5C,UAAOA,MAAP;AACE,SAAK,CAAL;AACEvB,MAAAA,OAAO,CAACwB,IAAR,CAAa,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC1B,eAAOD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAf;AACD,OAFD;AAGA;;AACF,SAAK,CAAL;AACE1B,MAAAA,OAAO,CAACwB,IAAR,CAAa,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC1B,eAAOA,CAAC,CAAC,CAAD,CAAD,GAAOD,CAAC,CAAC,CAAD,CAAf;AACD,OAFD;AAGA;;AACF,SAAK,CAAL;AACEzB,MAAAA,OAAO,CAACwB,IAAR,CAAa,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC1B,eAAOD,CAAC,CAAC,EAAD,CAAD,GAAQC,CAAC,CAAC,EAAD,CAAhB;AACD,OAFD;AAGA;;AACF,SAAK,CAAL;AACE1B,MAAAA,OAAO,CAACwB,IAAR,CAAa,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC1B,eAAOA,CAAC,CAAC,EAAD,CAAD,GAAQD,CAAC,CAAC,EAAD,CAAhB;AACD,OAFD;AAGA;;AACF,SAAK,CAAL;AACEzB,MAAAA,OAAO,CAACwB,IAAR,CAAa,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC1B,eAAOD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAf;AACD,OAFD;AAGA;;AACF,SAAK,CAAL;AACE1B,MAAAA,OAAO,CAACwB,IAAR,CAAa,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC1B,eAAOA,CAAC,CAAC,CAAD,CAAD,GAAOD,CAAC,CAAC,CAAD,CAAf;AACD,OAFD;AAGA;;AACF;AACE;AAhCJ;;AAkCA,SAAOzB,OAAP;AACD,CApCD;;AAsCA,MAAM2B,cAAc,GAAG,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC1C,MAAIA,MAAJ,EAAY;AACVD,IAAAA,OAAO,CAACJ,IAAR,CAAa,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC1B,aAAOD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAf;AACD,KAFD;AAGD,GAJD,MAIO;AACLE,IAAAA,OAAO,CAACJ,IAAR,CAAa,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC1B,aAAOA,CAAC,CAAC,CAAD,CAAD,GAAOD,CAAC,CAAC,CAAD,CAAf;AACD,KAFD;AAGD;;AACD,SAAOG,OAAP;AACD,CAXD;;AAaA,SAASpD,QAAT,EAAmBI,OAAnB,EAA4Bc,MAA5B,EAAoCqB,eAApC,EAAqDE,cAArD,EAAqEC,gBAArE,EAAuFC,SAAvF,EAAkGG,gBAAlG,EAAoHK,cAApH","sourcesContent":["import Question from '../ethereum/question';\r\nconst Fuse = require(\"fuse.js\");\r\n\r\n// Validate Email Address Format\r\nconst validate = (emailAddress) => {\r\n  if (emailAddress === \"admin\") {\r\n    return true;\r\n  } else {\r\n    const re = /\\S+@e\\.ntu\\.edu\\.sg$/;\r\n    return re.test(emailAddress);\r\n  }\r\n};\r\n\r\n// Provides common logging method for logging every transactions\r\nconst logging = (message) => {\r\n    let today = new Date();\r\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\r\n    \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    let date = months[today.getMonth()]+\" \"+today.getDate()+\" \"+today.getFullYear();\r\n    let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n    let dateTime = date+' '+time+\": \"+message;\r\n    return dateTime;\r\n};\r\n\r\n// Search Algorithm\r\nasync function search(value, questions) {\r\n    let list = [];\r\n    for (let i = 0; i < questions.length; i++) {\r\n        var summary = await Question(questions[i]).methods.getSummary().call();\r\n        list.push({'address': questions[i], 'title': summary[0], 'content': summary[1], 'tags': summary[8]});\r\n    }\r\n    let options = {\r\n        id: \"address\",\r\n        threshold: 0.1,\r\n        shouldSort: true,\r\n        tokenize: true,\r\n        keys: [{\r\n            name: 'title',\r\n            weight: 0.3\r\n        }, {\r\n            name: 'content',\r\n            weight: 0.4\r\n        }, {\r\n           name:'tags',\r\n           weight: 0.3\r\n        }]\r\n    };\r\n    let fuse = new Fuse(list, options);\r\n    const result = fuse.search(value);\r\n    return result;\r\n}\r\n\r\n// Checks required fields are filled up\r\nconst checkFieldEmpty = (field) => {\r\n  return field === \"\" ? false : true;\r\n}\r\n\r\n// Checks time-related fields are filled up properly\r\nconst checkTimeField = (field) => {\r\n  return field > 0 ? true : false;\r\n}\r\n\r\n// Checks ETQ fields are filled up properly\r\nconst checkRewardField = (field) => {\r\n  return field >= 1 ? true : false;\r\n}\r\n\r\n// Convert to lower case letters in a string\r\nconst lowerCase = (item) => {\r\n  for (let i = 0; i<item.length; i++) {\r\n    item[i] = item[i].toLowerCase();\r\n  }\r\n  return item;\r\n}\r\n\r\nconst sortingQuestions = (summary, sortBy) => {\r\n  switch(sortBy) {\r\n    case 0:\r\n      summary.sort(function(a, b) {\r\n        return a[4] - b[4];\r\n      });\r\n      break;\r\n    case 1:\r\n      summary.sort(function(a, b) {\r\n        return b[4] - a[4];\r\n      });\r\n      break;\r\n    case 2:\r\n      summary.sort(function(a, b) {\r\n        return a[10] - b[10];\r\n      });\r\n      break;\r\n    case 3:\r\n      summary.sort(function(a, b) {\r\n        return b[10] - a[10];\r\n      });\r\n      break;\r\n    case 4:\r\n      summary.sort(function(a, b) {\r\n        return a[2] - b[2];\r\n      });\r\n      break;\r\n    case 5:\r\n      summary.sort(function(a, b) {\r\n        return b[2] - a[2];\r\n      });\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return summary;\r\n}\r\n\r\nconst sortingAnswers = (answers, sorted) => {\r\n  if (sorted) {\r\n    answers.sort(function(a, b) {\r\n      return a[4] - b[4];\r\n    });\r\n  } else {\r\n    answers.sort(function(a, b) {\r\n      return b[4] - a[4];\r\n    });\r\n  }\r\n  return answers;\r\n}\r\n\r\nexport { validate, logging, search, checkFieldEmpty, checkTimeField, checkRewardField, lowerCase, sortingQuestions, sortingAnswers };\r\n"]},"metadata":{},"sourceType":"module"}