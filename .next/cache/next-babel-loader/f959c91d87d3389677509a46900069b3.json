{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Form, Button, Input, Message, Dropdown, Header, Icon, Segment, Container, TextArea, Divider, Label, Modal, Loader } from 'semantic-ui-react';\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport TimeOutModal from '../components/TimeOutModal';\nimport Layout from '../components/Layout';\nimport factory from '../ethereum/factory';\nimport Question from '../ethereum/question';\nimport Profile from '../ethereum/profile';\nimport web3 from '../ethereum/web3';\nimport EthQuestionToken from '../ethereum/token';\nimport credentials from '../ethereum/credentials';\nimport { Router } from '../routes';\nimport { getIpfsHash } from '../utils/ipfs';\nimport { logging, checkFieldEmpty, checkTimeField, checkRewardField, lowerCase } from '../utils/functions';\nimport cookies from 'next-cookies';\n\nclass NewQuestion extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onSubmit\", async () => {\n      this.setState({\n        loading: true,\n        errorMessage: ''\n      }); // Ensures all fields are filled\n\n      if (checkFieldEmpty(this.state.questionTitle) && checkFieldEmpty(this.state.content) && checkRewardField(this.state.reward) && checkTimeField(this.state.maxDuration)) {\n        try {\n          const account = this.props.account; // Logs the transactions\n\n          let logTransaction = logging(\"Created New Question: \" + this.state.questionTitle + \" [\" + this.state.reward + \" EQT(s) as reward]\"); // Create new question\n\n          await factory.methods.createQuestion(this.state.questionTitle, this.state.content, lowerCase(this.state.tag), Number(this.state.reward) * 10e3, parseFloat(this.state.maxDuration) * 60 * 60, this.state.fileHashes_array, this.state.fileNames_array, logTransaction, EthQuestionToken._address).send({\n            from: account,\n            gasPrice: '0'\n          }); // Transfer EQT into question contract\n\n          const address = await factory.methods.getLastDeployedQuestion().call();\n          await EthQuestionToken.methods.transfer(address, Number(this.state.reward) * 10e3).send({\n            from: account,\n            gasPrice: '0'\n          });\n          Router.pushRoute('/home'); // Automatic redirect the user.\n        } catch (err) {\n          if (err.message == \"Returned error: authentication needed: password or unlock\") {\n            this.setState({\n              loading: false\n            });\n            this.setState({\n              timeout: true\n            });\n          }\n\n          this.setState({\n            errorMessage: err.message + \" Or check if you have sufficient EQT(s)\"\n          });\n        }\n\n        this.setState({\n          loading: false\n        });\n      } else {\n        this.setState({\n          errorMessage: \"Required Field(s) Empty or Invalid Input\"\n        });\n        this.setState({\n          loading: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"onFileSelected\", async () => {\n      // Access JavaScript FileReader() method for conversion to buffer\n      const reader = new FileReader();\n      const file = this.fileInput.files[0];\n      this.setState({\n        fileLoading: true\n      });\n\n      if (file instanceof Blob) {\n        let {\n          files_array,\n          fileNames_array,\n          fileHashes_array\n        } = this.state;\n        files_array.push(file);\n        fileNames_array.push(file.name);\n        this.setState({\n          files_array: files_array,\n          fileNames_array: fileNames_array\n        });\n        console.log(\"fileNames_array: \", fileNames_array);\n\n        reader.onloadend = async () => {\n          await this.setState({\n            fileUrl: reader.result,\n            fileLoading: true,\n            buffer: Buffer.from(reader.result) // File is converted to a buffer for upload to IPFS\n\n          });\n          const fileHash = this.state.buffer ? await getIpfsHash(file) : '0';\n          fileHashes_array.push(fileHash);\n          this.setState({\n            fileHashes_array: fileHashes_array\n          });\n          console.log(\"fileHashes_array: \", fileHashes_array);\n          this.setState({\n            fileLoading: false\n          });\n        };\n\n        reader.readAsDataURL(file);\n      }\n    });\n\n    _defineProperty(this, \"onFileRemoved\", file => {\n      var i = 0;\n      let {\n        files_array,\n        fileHashes_array,\n        fileNames_array\n      } = this.state;\n      console.log('file: ', file);\n\n      for (i = 0; i < files_array.length; i++) {\n        if (file === files_array[i]) {\n          files_array.splice(i, 1);\n          fileNames_array.splice(i, 1);\n          fileHashes_array.splice(i, 1);\n          break;\n        }\n      }\n\n      this.setState({\n        files_array: files_array,\n        fileNames_array: fileNames_array,\n        fileHashes_array: fileHashes_array\n      });\n      console.log('fileNames_array', fileNames_array);\n      console.log(\"fileHashes_array: \", fileHashes_array);\n    });\n\n    _defineProperty(this, \"handleAddition\", (e, {\n      value\n    }) => {\n      this.setState({\n        tagOptions: [{\n          text: value,\n          value\n        }, ...this.state.tagOptions]\n      });\n    });\n\n    this.state = {\n      questionTitle: '',\n      content: '',\n      tag: [],\n      tagOptions: [],\n      reward: '',\n      maxDuration: '',\n      errorMessage: '',\n      loading: false,\n      fileLoading: false,\n      buffer: null,\n      files_array: [],\n      fileHashes_array: [],\n      fileNames_array: [],\n      login: false,\n      resourceLoading: true,\n      timeout: false,\n      accountType: null\n    };\n  }\n\n  static async getInitialProps(props) {\n    return {\n      isLogin: cookies(props).login || '',\n      account: cookies(props).wallet || ''\n    };\n  }\n\n  async componentDidMount() {\n    if (typeof web3 === 'undefined') {\n      this.setState({\n        loading: false\n      });\n      return;\n    }\n\n    let login = false;\n\n    if (this.props.isLogin) {\n      login = true; // Get Account Type\n\n      let profileAddress = await factory.methods.getProfile(this.props.account).call();\n      let profile = Profile(profileAddress);\n      let accountType = await profile.methods.getAccountType().call();\n      accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"; // Retrieve previously used tags and ether balance\n\n      let deployedQuestions = await factory.methods.getDeployedQuestions().call();\n      let deployedQuestionsCount = deployedQuestions.length;\n      let tags = [];\n      let tagOptions = [];\n\n      for (let i = 0; i < deployedQuestionsCount; i++) {\n        let question = Question(deployedQuestions[i]);\n        let summary = await question.methods.getSummary().call();\n        tags = [...tags, ...summary[8]];\n      } // Remove duplicated tags and select recently used tags\n\n\n      tags = [...new Set(tags)];\n      tags = tags.reverse().slice(0, 30);\n\n      for (let i = 0; i < tags.length; i++) {\n        tagOptions.push({\n          key: i,\n          text: tags[i],\n          value: tags[i]\n        });\n      }\n\n      this.setState({\n        login: login,\n        accountType: accountType,\n        tagOptions: tagOptions\n      });\n    }\n\n    this.setState({\n      resourceLoading: false\n    });\n  } // Submit the question to be stored on the Ethereum Blockchain\n\n\n  renderFilesUpload(files) {\n    let {\n      files_array\n    } = this.state;\n\n    if (this.state.files_array.length == 0) {\n      return __jsx(Segment, {\n        placeholder: true\n      }, __jsx(Header, {\n        icon: true\n      }, __jsx(Icon, {\n        name: \"images outline\"\n      }), \"No images are uploaded for this question\"), __jsx(\"input\", {\n        style: {\n          display: 'none'\n        },\n        type: \"file\",\n        onChange: () => this.onFileSelected(),\n        ref: fileInput => this.fileInput = fileInput\n      }), __jsx(Button, {\n        primary: true,\n        onClick: () => this.fileInput.click(),\n        loading: this.state.fileLoading\n      }, \"Upload Image\"));\n    } else {\n      return __jsx(Segment, {\n        placeholder: true\n      }, __jsx(\"center\", null, __jsx(\"div\", {\n        style: {\n          marginBottom: '20px'\n        }\n      }, files), __jsx(\"input\", {\n        style: {\n          display: 'none'\n        },\n        type: \"file\",\n        onChange: () => this.onFileSelected(),\n        ref: fileInput => this.fileInput = fileInput\n      }), __jsx(Button, {\n        primary: true,\n        onClick: () => this.fileInput.click(),\n        loading: this.state.fileLoading\n      }, \"Upload Files\")));\n    }\n  }\n\n  render() {\n    if (this.state.login) {\n      let {\n        files_array\n      } = this.state;\n      let elmFiles = null;\n\n      if (files_array !== null) {\n        elmFiles = files_array.map((item, index) => __jsx(Label, {\n          as: \"a\",\n          key: index,\n          size: \"big\"\n        }, item.name, __jsx(Icon, {\n          name: \"delete\",\n          onClick: () => this.onFileRemoved(item)\n        })));\n      }\n\n      return __jsx(Layout, {\n        accountType: this.state.accountType,\n        page: \"New\"\n      }, __jsx(Container, null, __jsx(Divider, {\n        hidden: true\n      }), __jsx(Segment, {\n        textAlign: \"center\",\n        as: \"h3\"\n      }, \"Creating Of New Question\"), __jsx(Form, {\n        error: !!this.state.errorMessage,\n        style: {\n          marginTop: '10px'\n        }\n      }, __jsx(Form.Field, {\n        required: true\n      }, __jsx(\"label\", null, \"Question Title\"), __jsx(Input, {\n        placeholder: \"Enter Title\",\n        value: this.state.questionTitle,\n        onChange: event => this.setState({\n          questionTitle: event.target.value\n        })\n      })), __jsx(Form.Field, {\n        required: true\n      }, __jsx(\"label\", null, \"Question Description (To include math questions, delimit the latex format with $$)\"), __jsx(Label, null, \"Example: This is my equation: $$1 \\\\triangleright 1 \\\\bigcirc  \\\\bigcirc $$\"), __jsx(\"a\", {\n        style: {\n          display: \"table-cell\"\n        },\n        href: \"https://www.codecogs.com/latex/eqneditor.php\",\n        target: \"_blank\"\n      }, \"Link to Supported Latex Editor\"), __jsx(TextArea, {\n        placeholder: \"Enter Description\",\n        value: this.state.content,\n        onChange: event => this.setState({\n          content: event.target.value\n        })\n      })), __jsx(Form.Field, null, __jsx(\"label\", null, \"Tags\"), __jsx(Dropdown, {\n        clearable: true,\n        options: this.state.tagOptions,\n        selection: true,\n        multiple: true,\n        allowAdditions: true,\n        search: true,\n        placeholder: \"Select from recently used tags or create your own tags\",\n        value: this.state.tag,\n        onChange: (e, {\n          value\n        }) => this.setState({\n          tag: value\n        }),\n        onAddItem: this.handleAddition\n      })), __jsx(Form.Field, {\n        required: true\n      }, __jsx(\"label\", null, \"EQT(s)\"), __jsx(Input, {\n        label: \"EQT(s)\",\n        labelPosition: \"right\",\n        placeholder: \"Enter your value of reward\",\n        value: this.state.reward,\n        onChange: event => this.setState({\n          reward: event.target.value\n        })\n      })), __jsx(Form.Field, {\n        required: true\n      }, __jsx(\"label\", null, \"Maximum Duration\"), __jsx(Input, {\n        label: \"hour(s)\",\n        labelPosition: \"right\",\n        placeholder: \"Enter the duration for the question to be valid\",\n        value: this.state.maxDuration,\n        onChange: event => this.setState({\n          maxDuration: event.target.value\n        })\n      })), __jsx(Form.Field, null, this.renderFilesUpload(elmFiles)), __jsx(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.errorMessage\n      }), __jsx(Modal, {\n        open: this.state.loading,\n        trigger: __jsx(Button, {\n          primary: true,\n          onClick: this.onSubmit\n        }, \"Submit Question\"),\n        basic: true,\n        size: \"small\"\n      }, __jsx(Header, {\n        content: \"Posting New Question\"\n      }), __jsx(Modal.Content, null, __jsx(\"p\", null, \"System is submitting your question to the blockchain. Upon successful submission, you will be redirected to the Home Page. This process might take awhile.\"), __jsx(Loader, {\n        active: true,\n        inline: \"centered\"\n      }, \"Loading\"))))), __jsx(TimeOutModal, {\n        timeout: this.state.timeout\n      }));\n    } else {\n      return __jsx(Layout, {\n        accountType: this.state.accountType\n      }, __jsx(AccountIssueModal, {\n        loading: this.state.resourceLoading,\n        login: this.state.login\n      }));\n    }\n  }\n\n}\n\nexport default NewQuestion;","map":null,"metadata":{},"sourceType":"module"}