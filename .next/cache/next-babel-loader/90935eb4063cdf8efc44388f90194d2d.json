{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Form, Button, Input, Message, Dropdown, Header, Icon, Segment, Container, TextArea, Divider, Label, Modal, Loader } from 'semantic-ui-react';\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport TimeOutModal from '../components/TimeOutModal';\nimport Layout from '../components/Layout';\nimport factory from '../ethereum/factory';\nimport Question from '../ethereum/question';\nimport Profile from '../ethereum/profile';\nimport web3 from '../ethereum/web3';\nimport EthQuestionToken from '../ethereum/token';\nimport credentials from '../ethereum/credentials';\nimport { Router } from '../routes';\nimport { getIpfsHash } from '../utils/ipfs';\nimport { logging, checkFieldEmpty, checkTimeField, checkRewardField, lowerCase } from '../utils/functions';\nimport cookies from 'next-cookies';\n\nclass NewQuestion extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onSubmit\", async () => {\n      this.setState({\n        loading: true,\n        errorMessage: ''\n      }); // Ensures all fields are filled\n\n      if (checkFieldEmpty(this.state.questionTitle) && checkFieldEmpty(this.state.content) && checkRewardField(this.state.reward) && checkTimeField(this.state.maxDuration)) {\n        try {\n          const account = this.props.account; // Logs the transactions\n\n          let logTransaction = logging(\"Created New Question: \" + this.state.questionTitle + \" [\" + this.state.reward + \" EQT(s) as reward]\"); // Create new question\n\n          await factory.methods.createQuestion(this.state.questionTitle, this.state.content, lowerCase(this.state.tag), Number(this.state.reward) * 10e3, parseFloat(this.state.maxDuration) * 60 * 60, this.state.fileHashes_array, this.state.fileNames_array, logTransaction, EthQuestionToken._address).send({\n            from: account,\n            gasPrice: '0'\n          }); // Transfer EQT into question contract\n\n          const address = await factory.methods.getLastDeployedQuestion().call();\n          await EthQuestionToken.methods.transfer(address, Number(this.state.reward) * 10e3).send({\n            from: account,\n            gasPrice: '0'\n          });\n          Router.pushRoute('/home'); // Automatic redirect the user.\n        } catch (err) {\n          if (err.message == \"Returned error: authentication needed: password or unlock\") {\n            this.setState({\n              loading: false\n            });\n            this.setState({\n              timeout: true\n            });\n          }\n\n          this.setState({\n            errorMessage: err.message + \" Or check if you have sufficient EQT(s)\"\n          });\n        }\n\n        this.setState({\n          loading: false\n        });\n      } else {\n        this.setState({\n          errorMessage: \"Required Field(s) Empty or Invalid Input\"\n        });\n        this.setState({\n          loading: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"onFileSelected\", async () => {\n      // Access JavaScript FileReader() method for conversion to buffer\n      const reader = new FileReader();\n      const file = this.fileInput.files[0];\n      this.setState({\n        fileLoading: true\n      });\n\n      if (file instanceof Blob) {\n        let {\n          files_array,\n          fileNames_array,\n          fileHashes_array\n        } = this.state;\n        files_array.push(file);\n        fileNames_array.push(file.name);\n        this.setState({\n          files_array: files_array,\n          fileNames_array: fileNames_array\n        });\n        console.log(\"fileNames_array: \", fileNames_array);\n\n        reader.onloadend = async () => {\n          await this.setState({\n            fileUrl: reader.result,\n            fileLoading: true,\n            buffer: Buffer.from(reader.result) // File is converted to a buffer for upload to IPFS\n\n          });\n          const fileHash = this.state.buffer ? await getIpfsHash(file) : '0';\n          fileHashes_array.push(fileHash);\n          this.setState({\n            fileHashes_array: fileHashes_array\n          });\n          console.log(\"fileHashes_array: \", fileHashes_array);\n          this.setState({\n            fileLoading: false\n          });\n        };\n\n        reader.readAsDataURL(file);\n      }\n    });\n\n    _defineProperty(this, \"onFileRemoved\", file => {\n      var i = 0;\n      let {\n        files_array,\n        fileHashes_array,\n        fileNames_array\n      } = this.state;\n      console.log('file: ', file);\n\n      for (i = 0; i < files_array.length; i++) {\n        if (file === files_array[i]) {\n          files_array.splice(i, 1);\n          fileNames_array.splice(i, 1);\n          fileHashes_array.splice(i, 1);\n          break;\n        }\n      }\n\n      this.setState({\n        files_array: files_array,\n        fileNames_array: fileNames_array,\n        fileHashes_array: fileHashes_array\n      });\n      console.log('fileNames_array', fileNames_array);\n      console.log(\"fileHashes_array: \", fileHashes_array);\n    });\n\n    _defineProperty(this, \"handleAddition\", (e, {\n      value\n    }) => {\n      this.setState({\n        tagOptions: [{\n          text: value,\n          value\n        }, ...this.state.tagOptions]\n      });\n    });\n\n    this.state = {\n      questionTitle: '',\n      content: '',\n      tag: [],\n      tagOptions: [],\n      reward: '',\n      maxDuration: '',\n      errorMessage: '',\n      loading: false,\n      fileLoading: false,\n      buffer: null,\n      files_array: [],\n      fileHashes_array: [],\n      fileNames_array: [],\n      login: false,\n      resourceLoading: true,\n      timeout: false,\n      accountType: null\n    };\n  }\n\n  static async getInitialProps(props) {\n    return {\n      isLogin: cookies(props).login || '',\n      account: cookies(props).wallet || ''\n    };\n  }\n\n  async componentDidMount() {\n    if (typeof web3 === 'undefined') {\n      this.setState({\n        loading: false\n      });\n      return;\n    }\n\n    let login = false;\n\n    if (this.props.isLogin) {\n      login = true; // Get Account Type\n\n      let profileAddress = await factory.methods.getProfile(this.props.account).call();\n      let profile = Profile(profileAddress);\n      let accountType = await profile.methods.getAccountType().call();\n      accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"; // Retrieve previously used tags and ether balance\n\n      let deployedQuestions = await factory.methods.getDeployedQuestions().call();\n      let deployedQuestionsCount = deployedQuestions.length;\n      let tags = [];\n      let tagOptions = [];\n\n      for (let i = 0; i < deployedQuestionsCount; i++) {\n        let question = Question(deployedQuestions[i]);\n        let summary = await question.methods.getSummary().call();\n        tags = [...tags, ...summary[8]];\n      } // Remove duplicated tags and select recently used tags\n\n\n      tags = [...new Set(tags)];\n      tags = tags.reverse().slice(0, 30);\n\n      for (let i = 0; i < tags.length; i++) {\n        tagOptions.push({\n          key: i,\n          text: tags[i],\n          value: tags[i]\n        });\n      }\n\n      this.setState({\n        login: login,\n        accountType: accountType,\n        tagOptions: tagOptions\n      });\n    }\n\n    this.setState({\n      resourceLoading: false\n    });\n  } // Submit the question to be stored on the Ethereum Blockchain\n\n\n  renderFilesUpload(files) {\n    let {\n      files_array\n    } = this.state;\n\n    if (this.state.files_array.length == 0) {\n      return __jsx(Segment, {\n        placeholder: true\n      }, __jsx(Header, {\n        icon: true\n      }, __jsx(Icon, {\n        name: \"images outline\"\n      }), \"No images are uploaded for this question\"), __jsx(\"input\", {\n        style: {\n          display: 'none'\n        },\n        type: \"file\",\n        onChange: () => this.onFileSelected(),\n        ref: fileInput => this.fileInput = fileInput\n      }), __jsx(Button, {\n        primary: true,\n        onClick: () => this.fileInput.click(),\n        loading: this.state.fileLoading\n      }, \"Upload Image\"));\n    } else {\n      return __jsx(Segment, {\n        placeholder: true\n      }, __jsx(\"center\", null, __jsx(\"div\", {\n        style: {\n          marginBottom: '20px'\n        }\n      }, files), __jsx(\"input\", {\n        style: {\n          display: 'none'\n        },\n        type: \"file\",\n        onChange: () => this.onFileSelected(),\n        ref: fileInput => this.fileInput = fileInput\n      }), __jsx(Button, {\n        primary: true,\n        onClick: () => this.fileInput.click(),\n        loading: this.state.fileLoading\n      }, \"Upload Files\")));\n    }\n  }\n\n  render() {\n    if (this.state.login) {\n      let {\n        files_array\n      } = this.state;\n      let elmFiles = null;\n\n      if (files_array !== null) {\n        elmFiles = files_array.map((item, index) => __jsx(Label, {\n          as: \"a\",\n          key: index,\n          size: \"big\"\n        }, item.name, __jsx(Icon, {\n          name: \"delete\",\n          onClick: () => this.onFileRemoved(item)\n        })));\n      }\n\n      return __jsx(Layout, {\n        accountType: this.state.accountType,\n        page: \"New\"\n      }, __jsx(Container, null, __jsx(Divider, {\n        hidden: true\n      }), __jsx(Segment, {\n        textAlign: \"center\",\n        as: \"h3\"\n      }, \"Creating Of New Question\"), __jsx(Form, {\n        error: !!this.state.errorMessage,\n        style: {\n          marginTop: '10px'\n        }\n      }, __jsx(Form.Field, {\n        required: true\n      }, __jsx(\"label\", null, \"Question Title\"), __jsx(Input, {\n        placeholder: \"Enter Title\",\n        value: this.state.questionTitle,\n        onChange: event => this.setState({\n          questionTitle: event.target.value\n        })\n      })), __jsx(Form.Field, {\n        required: true\n      }, __jsx(\"label\", null, \"Question Description (To include math questions, delimit the latex format with $$)\"), __jsx(Label, null, \"Example: This is my equation: $$1 \\\\triangleright 1 \\\\bigcirc  \\\\bigcirc $$\"), __jsx(\"a\", {\n        style: {\n          display: \"table-cell\"\n        },\n        href: \"https://www.codecogs.com/latex/eqneditor.php\",\n        target: \"_blank\"\n      }, \"Link to Supported Latex Editor\"), __jsx(TextArea, {\n        placeholder: \"Enter Description\",\n        value: this.state.content,\n        onChange: event => this.setState({\n          content: event.target.value\n        })\n      })), __jsx(Form.Field, null, __jsx(\"label\", null, \"Tags\"), __jsx(Dropdown, {\n        clearable: true,\n        options: this.state.tagOptions,\n        selection: true,\n        multiple: true,\n        allowAdditions: true,\n        search: true,\n        placeholder: \"Select from recently used tags or create your own tags\",\n        value: this.state.tag,\n        onChange: (e, {\n          value\n        }) => this.setState({\n          tag: value\n        }),\n        onAddItem: this.handleAddition\n      })), __jsx(Form.Field, {\n        required: true\n      }, __jsx(\"label\", null, \"EQT(s)\"), __jsx(Input, {\n        label: \"EQT(s)\",\n        labelPosition: \"right\",\n        placeholder: \"Enter your value of reward\",\n        value: this.state.reward,\n        onChange: event => this.setState({\n          reward: event.target.value\n        })\n      })), __jsx(Form.Field, {\n        required: true\n      }, __jsx(\"label\", null, \"Maximum Duration\"), __jsx(Input, {\n        label: \"hour(s)\",\n        labelPosition: \"right\",\n        placeholder: \"Enter the duration for the question to be valid\",\n        value: this.state.maxDuration,\n        onChange: event => this.setState({\n          maxDuration: event.target.value\n        })\n      })), __jsx(Form.Field, null, this.renderFilesUpload(elmFiles)), __jsx(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.errorMessage\n      }), __jsx(Modal, {\n        open: this.state.loading,\n        trigger: __jsx(Button, {\n          primary: true,\n          onClick: this.onSubmit\n        }, \"Submit Question\"),\n        basic: true,\n        size: \"small\"\n      }, __jsx(Header, {\n        content: \"Posting New Question\"\n      }), __jsx(Modal.Content, null, __jsx(\"p\", null, \"System is submitting your question to the blockchain. Upon successful submission, you will be redirected to the Home Page. This process might take awhile.\"), __jsx(Loader, {\n        active: true,\n        inline: \"centered\"\n      }, \"Loading\"))))), __jsx(TimeOutModal, {\n        timeout: this.state.timeout\n      }));\n    } else {\n      return __jsx(Layout, {\n        accountType: this.state.accountType\n      }, __jsx(AccountIssueModal, {\n        loading: this.state.resourceLoading,\n        login: this.state.login\n      }));\n    }\n  }\n\n}\n\nexport default NewQuestion;","map":{"version":3,"sources":["C:/Users/edd1e/Desktop/ethQuestion_1.0/pages/newQuestion.js"],"names":["React","Component","Form","Button","Input","Message","Dropdown","Header","Icon","Segment","Container","TextArea","Divider","Label","Modal","Loader","AccountIssueModal","TimeOutModal","Layout","factory","Question","Profile","web3","EthQuestionToken","credentials","Router","getIpfsHash","logging","checkFieldEmpty","checkTimeField","checkRewardField","lowerCase","cookies","NewQuestion","constructor","props","setState","loading","errorMessage","state","questionTitle","content","reward","maxDuration","account","logTransaction","methods","createQuestion","tag","Number","parseFloat","fileHashes_array","fileNames_array","_address","send","from","gasPrice","address","getLastDeployedQuestion","call","transfer","pushRoute","err","message","timeout","reader","FileReader","file","fileInput","files","fileLoading","Blob","files_array","push","name","console","log","onloadend","fileUrl","result","buffer","Buffer","fileHash","readAsDataURL","i","length","splice","e","value","tagOptions","text","login","resourceLoading","accountType","getInitialProps","isLogin","wallet","componentDidMount","profileAddress","getProfile","profile","getAccountType","deployedQuestions","getDeployedQuestions","deployedQuestionsCount","tags","question","summary","getSummary","Set","reverse","slice","key","renderFilesUpload","display","onFileSelected","click","marginBottom","render","elmFiles","map","item","index","onFileRemoved","marginTop","event","target","handleAddition","onSubmit"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Form, Button, Input, Message, Dropdown, Header,\r\n  Icon, Segment, Container, TextArea, Divider, Label, Modal, Loader } from 'semantic-ui-react';\r\nimport AccountIssueModal from '../components/AccountIssueModal';\r\nimport TimeOutModal from '../components/TimeOutModal';\r\nimport Layout from '../components/Layout';\r\nimport factory from '../ethereum/factory';\r\nimport Question from '../ethereum/question';\r\nimport Profile from '../ethereum/profile';\r\nimport web3 from '../ethereum/web3';\r\nimport EthQuestionToken from '../ethereum/token';\r\nimport credentials from '../ethereum/credentials';\r\nimport { Router } from '../routes';\r\nimport { getIpfsHash } from '../utils/ipfs';\r\nimport { logging, checkFieldEmpty, checkTimeField, checkRewardField, lowerCase } from '../utils/functions';\r\nimport cookies from 'next-cookies';\r\n\r\nclass NewQuestion extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n          questionTitle: '',\r\n          content:'',\r\n          tag: [],\r\n          tagOptions: [],\r\n          reward:'',\r\n          maxDuration:'',\r\n          errorMessage: '',\r\n          loading: false,\r\n          fileLoading: false,\r\n          buffer: null,\r\n          files_array: [],\r\n          fileHashes_array: [],\r\n          fileNames_array: [],\r\n          login: false,\r\n          resourceLoading: true,\r\n          timeout: false,\r\n          accountType: null\r\n      };\r\n    }\r\n\r\n    static async getInitialProps(props) {\r\n      return { isLogin: cookies(props).login || '' , account: cookies(props).wallet || '' };\r\n    }\r\n\r\n    async componentDidMount() {\r\n      if (typeof web3 === 'undefined') {\r\n        this.setState({ loading: false })\r\n        return\r\n      }\r\n      let login = false;\r\n      if (this.props.isLogin) {\r\n        login = true;\r\n        // Get Account Type\r\n        let profileAddress = await factory.methods.getProfile(this.props.account).call();\r\n        let profile = Profile(profileAddress);\r\n        let accountType = await profile.methods.getAccountType().call();\r\n        accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"\r\n\r\n        // Retrieve previously used tags and ether balance\r\n        let deployedQuestions = await factory.methods.getDeployedQuestions().call();\r\n        let deployedQuestionsCount = deployedQuestions.length;\r\n        let tags = [];\r\n        let tagOptions = [];\r\n\r\n        for (let i=0; i<deployedQuestionsCount; i++) {\r\n          let question = Question(deployedQuestions[i])\r\n          let summary = await question.methods.getSummary().call();\r\n          tags = [...tags, ...summary[8]]\r\n        }\r\n        // Remove duplicated tags and select recently used tags\r\n        tags = [...new Set(tags)]\r\n        tags = tags.reverse().slice(0,30);\r\n\r\n        for (let i = 0; i<tags.length; i++) {\r\n            tagOptions.push({\r\n                key: i,\r\n                text: tags[i],\r\n                value: tags[i]\r\n            });\r\n        }\r\n\r\n        this.setState( { login: login,\r\n                         accountType: accountType,\r\n                         tagOptions: tagOptions });\r\n      }\r\n      this.setState( { resourceLoading: false });\r\n    }\r\n\r\n    // Submit the question to be stored on the Ethereum Blockchain\r\n    onSubmit = async () => {\r\n        this.setState({ loading: true, errorMessage: '' });\r\n        // Ensures all fields are filled\r\n        if (checkFieldEmpty(this.state.questionTitle) && checkFieldEmpty(this.state.content) && checkRewardField(this.state.reward) && checkTimeField(this.state.maxDuration)){\r\n          try {\r\n              const account = this.props.account;\r\n              // Logs the transactions\r\n              let logTransaction = logging(\"Created New Question: \" + this.state.questionTitle + \" [\" + this.state.reward + \" EQT(s) as reward]\");\r\n              // Create new question\r\n              await factory.methods\r\n              .createQuestion(this.state.questionTitle, this.state.content, lowerCase(this.state.tag), Number(this.state.reward)*10e3, parseFloat(this.state.maxDuration) * 60 * 60,\r\n                this.state.fileHashes_array, this.state.fileNames_array, logTransaction, EthQuestionToken._address)\r\n              .send({\r\n                  from: account,\r\n                  gasPrice: '0'\r\n              });\r\n              // Transfer EQT into question contract\r\n              const address = await factory.methods.getLastDeployedQuestion().call();\r\n              await EthQuestionToken.methods.transfer(address, Number(this.state.reward)*10e3)\r\n              .send({\r\n                  from: account,\r\n                  gasPrice: '0'\r\n              });\r\n              Router.pushRoute('/home'); // Automatic redirect the user.\r\n          } catch (err) {\r\n              if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n                this.setState({ loading: false });\r\n                this.setState({ timeout: true });\r\n              }\r\n              this.setState({ errorMessage: err.message + \" Or check if you have sufficient EQT(s)\"});\r\n          }\r\n          this.setState({ loading: false });\r\n        } else {\r\n          this.setState({ errorMessage: \"Required Field(s) Empty or Invalid Input\" });\r\n          this.setState({ loading: false });\r\n        }\r\n    };\r\n\r\n    // Select a file to upload\r\n    onFileSelected = async () => {\r\n        // Access JavaScript FileReader() method for conversion to buffer\r\n        const reader = new FileReader();\r\n        const file = this.fileInput.files[0];\r\n        this.setState({fileLoading: true});\r\n        if (file instanceof Blob ) {\r\n            let {files_array, fileNames_array, fileHashes_array} = this.state;\r\n            files_array.push(file);\r\n            fileNames_array.push(file.name);\r\n            this.setState({\r\n                files_array: files_array,\r\n                fileNames_array: fileNames_array\r\n            });\r\n            console.log(\"fileNames_array: \", fileNames_array);\r\n            reader.onloadend = async () => {\r\n                await this.setState({\r\n                    fileUrl: reader.result,\r\n                    fileLoading: true,\r\n                    buffer: Buffer.from(reader.result) // File is converted to a buffer for upload to IPFS\r\n                });\r\n                const fileHash = this.state.buffer ? (await getIpfsHash(file)) : '0';\r\n                fileHashes_array.push(fileHash);\r\n                this.setState({ fileHashes_array: fileHashes_array });\r\n                console.log(\"fileHashes_array: \", fileHashes_array);\r\n                this.setState({fileLoading: false});\r\n            }\r\n            reader.readAsDataURL(file);\r\n        }\r\n    }\r\n\r\n    // Remove a previously selected file to upload\r\n    onFileRemoved = (file) => {\r\n        var i = 0;\r\n        let {files_array, fileHashes_array, fileNames_array} = this.state;\r\n        console.log('file: ', file);\r\n        for (i = 0 ; i < files_array.length ; i++) {\r\n            if (file === files_array[i]) {\r\n                files_array.splice(i, 1);\r\n                fileNames_array.splice(i, 1);\r\n                fileHashes_array.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n        this.setState({\r\n            files_array: files_array,\r\n            fileNames_array: fileNames_array,\r\n            fileHashes_array: fileHashes_array\r\n        });\r\n        console.log('fileNames_array', fileNames_array);\r\n        console.log(\"fileHashes_array: \", fileHashes_array);\r\n    }\r\n\r\n    handleAddition = (e, { value }) => {\r\n      this.setState({ tagOptions: [{ text: value, value }, ...this.state.tagOptions] });\r\n    }\r\n\r\n    renderFilesUpload(files) {\r\n      let {files_array} = this.state;\r\n      if(this.state.files_array.length == 0){\r\n        return (\r\n          <Segment placeholder>\r\n            <Header icon>\r\n              <Icon name='images outline' />\r\n              No images are uploaded for this question\r\n            </Header>\r\n            <input\r\n                style={{ display: 'none' }}\r\n                type='file'\r\n                onChange={() => this.onFileSelected()}\r\n                ref={fileInput => this.fileInput = fileInput}/>\r\n            <Button primary onClick={() => this.fileInput.click()} loading={this.state.fileLoading}>Upload Image</Button>\r\n          </Segment>\r\n        )\r\n      } else {\r\n        return (\r\n          <Segment placeholder>\r\n            <center>\r\n                <div style={{marginBottom: '20px'}}>\r\n                    {files}\r\n                </div>\r\n                <input\r\n                    style={{ display: 'none' }}\r\n                    type='file'\r\n                    onChange={() => this.onFileSelected()}\r\n                    ref={fileInput => this.fileInput = fileInput}/>\r\n                <Button primary onClick={() => this.fileInput.click()} loading={this.state.fileLoading}>Upload Files</Button>\r\n            </center>\r\n          </Segment>\r\n        )\r\n      }\r\n    };\r\n\r\n    render() {\r\n      if (this.state.login) {\r\n        let {files_array} = this.state;\r\n        let elmFiles = null;\r\n\r\n        if (files_array !== null) {\r\n          elmFiles = files_array.map((item, index) =>\r\n              <Label as='a' key={index} size='big'>\r\n                  {item.name}\r\n                  <Icon name='delete'\r\n                        onClick={() => this.onFileRemoved(item)} />\r\n              </Label>\r\n          );\r\n        }\r\n        return (\r\n          <Layout accountType={this.state.accountType} page={\"New\"}>\r\n              <Container>\r\n                <Divider hidden/>\r\n                <Segment textAlign='center' as='h3'>Creating Of New Question</Segment>\r\n                <Form error={!!this.state.errorMessage} style={{ marginTop: '10px' }}>\r\n                    <Form.Field required={true}>\r\n                        <label>Question Title</label>\r\n                        <Input\r\n                            placeholder=\"Enter Title\"\r\n                            value={this.state.questionTitle}\r\n                            onChange={event => this.setState({ questionTitle: event.target.value })}\r\n                        />\r\n                    </Form.Field>\r\n                    <Form.Field required={true}>\r\n                        <label>Question Description (To include math questions, delimit the latex format with $$)</label>\r\n                        <Label>Example: This is my equation: $$1 \\triangleright 1 \\bigcirc  \\bigcirc $$</Label>\r\n                        <a style={{display: \"table-cell\"}} href=\"https://www.codecogs.com/latex/eqneditor.php\" target=\"_blank\">Link to Supported Latex Editor</a>\r\n                        <TextArea\r\n                            placeholder=\"Enter Description\"\r\n                            value={this.state.content}\r\n                            onChange={event => this.setState({ content: event.target.value })}\r\n                        />\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label>Tags</label>\r\n                        <Dropdown clearable\r\n                                  options={this.state.tagOptions}\r\n                                  selection\r\n                                  multiple\r\n                                  allowAdditions\r\n                                  search\r\n                                  placeholder='Select from recently used tags or create your own tags'\r\n                                  value={this.state.tag}\r\n                                  onChange={ (e, { value }) => this.setState({ tag: value })}\r\n                                  onAddItem={this.handleAddition} />\r\n\r\n                    </Form.Field>\r\n                    <Form.Field required={true}>\r\n                        <label>EQT(s)</label>\r\n                        <Input\r\n                            label=\"EQT(s)\"\r\n                            labelPosition=\"right\"\r\n                            placeholder='Enter your value of reward'\r\n                            value={this.state.reward}\r\n                            onChange={event => this.setState({ reward: event.target.value })}\r\n                        />\r\n                    </Form.Field>\r\n                    <Form.Field required={true}>\r\n                        <label>Maximum Duration</label>\r\n                        <Input\r\n                            label=\"hour(s)\"\r\n                            labelPosition=\"right\"\r\n                            placeholder='Enter the duration for the question to be valid'\r\n                            value={this.state.maxDuration}\r\n                            onChange={event => this.setState({ maxDuration: event.target.value })}\r\n                        />\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      {this.renderFilesUpload(elmFiles)}\r\n                    </Form.Field>\r\n                    <Message error header=\"Oops!\" content={this.state.errorMessage} />\r\n                    <Modal open={this.state.loading} trigger={<Button primary onClick={this.onSubmit}>Submit Question</Button>} basic size='small'>\r\n                      <Header content='Posting New Question' />\r\n                      <Modal.Content>\r\n                        <p>\r\n                          System is submitting your question to the blockchain. Upon successful submission, you will be redirected to the Home Page.\r\n                          This process might take awhile.\r\n                        </p>\r\n                        <Loader active inline=\"centered\">\r\n                          Loading\r\n                        </Loader>\r\n                      </Modal.Content>\r\n                    </Modal>\r\n                </Form>\r\n              </Container>\r\n              <TimeOutModal timeout={this.state.timeout} />\r\n          </Layout>\r\n        );\r\n      } else {\r\n        return (\r\n          <Layout accountType={this.state.accountType}>\r\n            <AccountIssueModal loading={this.state.resourceLoading} login={this.state.login} />\r\n          </Layout>\r\n        );\r\n      }\r\n    }\r\n}\r\n\r\nexport default NewQuestion;\r\n"]},"metadata":{},"sourceType":"module"}