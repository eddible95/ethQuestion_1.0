{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport MobileDetect from 'mobile-detect';\nimport { Container, Segment, Header, Divider, Responsive, Button, Icon, TextArea, Modal, Loader, Message, Form, Grid, Label, Progress } from \"semantic-ui-react\";\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport TimeOutModal from '../components/TimeOutModal';\nimport Layout from '../components/Layout';\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\nimport Profile from '../ethereum/profile';\nimport credentials from '../ethereum/credentials';\nimport feedback from '../ethereum/feedback';\nimport { getWidthFactory } from '../utils/device';\nimport { checkFieldEmpty } from '../utils/functions';\nimport { Router } from '../routes';\nimport cookies from 'next-cookies';\n\nclass FeedbackPage extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onSubmit\", async () => {\n      this.setState({\n        loading: true,\n        errorMessage: ''\n      }); // Ensures all fields are filled\n\n      if (checkFieldEmpty(this.state.like) && checkFieldEmpty(this.state.usefulness) && checkFieldEmpty(this.state.easy)) {\n        try {\n          const account = this.props.account;\n          let emailAddress = await credentials.methods.getBinding(account).call();\n          let comments = \"Comments provided by \" + emailAddress + \": \" + this.state.comments;\n          await feedback.methods.updateFeedback(this.state.like, this.state.usefulness, this.state.easy, comments).send({\n            from: account,\n            gasPrice: '0'\n          });\n          Router.pushRoute('/home'); // Automatic redirect the user.\n        } catch (err) {\n          if (err.message == \"Returned error: authentication needed: password or unlock\") {\n            this.setState({\n              timeout: true\n            });\n          }\n\n          this.setState({\n            errorMessage: err.message\n          });\n        }\n\n        this.setState({\n          loading: false\n        });\n      } else {\n        this.setState({\n          errorMessage: \"Required Field(s) Empty\"\n        });\n        this.setState({\n          loading: false\n        });\n      }\n    });\n\n    this.state = {\n      like: \"\",\n      usefulness: \"\",\n      easy: \"\",\n      comments: \"\",\n      loading: false,\n      errorMessage: \"\",\n      login: false,\n      resourceLoading: true,\n      timeout: false,\n      accountType: null,\n      statistics: []\n    };\n  }\n\n  static async getInitialProps(props) {\n    let isMobileFromSSR = false;\n\n    if (props.req) {\n      const device = props.req.headers[\"user-agent\"];\n      const md = new MobileDetect(device);\n      isMobileFromSSR = !!md.mobile();\n    }\n\n    return {\n      isMobileFromSSR,\n      isLogin: cookies(props).login || '',\n      account: cookies(props).wallet || ''\n    };\n  }\n\n  async componentDidMount() {\n    if (typeof web3 === 'undefined') {\n      this.setState({\n        loading: false\n      });\n      return;\n    }\n\n    let login = false;\n\n    if (this.props.isLogin) {\n      login = true; // Get Account Type\n\n      let profileAddress = await factory.methods.getProfile(this.props.account).call();\n      let profile = Profile(profileAddress);\n      let accountType = await profile.methods.getAccountType().call();\n      accountType == 0 ? accountType = \"Admin\" : accountType = \"User\";\n      let statistics = await feedback.methods.getSummaryStatistics().call();\n      this.setState({\n        login: login\n      });\n      this.setState({\n        accountType: accountType\n      });\n      this.setState({\n        statistics: statistics\n      });\n    }\n\n    this.setState({\n      resourceLoading: false\n    });\n  } // Submit the question to be stored on the Ethereum Blockchain\n\n\n  renderStatistic() {\n    const numOfLikes = this.state.statistics[0];\n    const numOfDislikes = this.state.statistics[1];\n    const numOfUseful = this.state.statistics[2];\n    const numOfNotUseful = this.state.statistics[3];\n    const numOfEasy = this.state.statistics[4];\n    const numOfNotEasy = this.state.statistics[5];\n    const totalRatings = Number(numOfLikes) + Number(numOfDislikes);\n    return __jsx(Segment, null, __jsx(Header, {\n      as: \"h3\",\n      textAlign: \"center\"\n    }, __jsx(Icon, {\n      name: \"chart bar outline\"\n    }), \"Summary Statistics of System\"), __jsx(\"p\", {\n      style: {\n        textAlign: 'center'\n      }\n    }, __jsx(\"b\", null, \"Total Rating(s):\"), \" \", totalRatings), __jsx(Grid, {\n      centered: true,\n      columns: 2\n    }, __jsx(Grid.Column, {\n      style: {\n        paddingLeft: \"10px\",\n        paddingRight: \"0\",\n        width: \"30%\"\n      }\n    }, __jsx(Label, {\n      horizontal: true\n    }, \"Likes\")), __jsx(Grid.Column, {\n      style: {\n        paddingLeft: \"0\",\n        paddingRight: \"10px\",\n        width: \"70%\"\n      }\n    }, __jsx(Progress, {\n      color: \"green\",\n      value: numOfLikes,\n      total: totalRatings,\n      progress: \"percent\",\n      precision: 2,\n      style: {\n        margin: \"0\"\n      }\n    })), __jsx(Grid.Column, {\n      style: {\n        paddingLeft: \"10px\",\n        paddingRight: \"0\",\n        width: \"30%\"\n      }\n    }, __jsx(Label, {\n      horizontal: true\n    }, \"Useful\")), __jsx(Grid.Column, {\n      style: {\n        paddingLeft: \"0\",\n        paddingRight: \"10px\",\n        width: \"70%\"\n      }\n    }, __jsx(Progress, {\n      color: \"green\",\n      value: numOfUseful,\n      total: totalRatings,\n      progress: \"percent\",\n      precision: 2,\n      style: {\n        margin: \"0\"\n      }\n    })), __jsx(Grid.Column, {\n      style: {\n        paddingLeft: \"10px\",\n        paddingRight: \"0\",\n        width: \"30%\"\n      }\n    }, __jsx(Label, {\n      horizontal: true\n    }, \"Easy To Use\")), __jsx(Grid.Column, {\n      style: {\n        paddingLeft: \"0\",\n        paddingRight: \"10px\",\n        width: \"70%\"\n      }\n    }, __jsx(Progress, {\n      color: \"green\",\n      value: numOfEasy,\n      total: totalRatings,\n      progress: \"percent\",\n      precision: 2,\n      style: {\n        margin: \"0\"\n      }\n    }))));\n  }\n\n  render() {\n    if (this.state.login) {\n      return __jsx(Layout, {\n        accountType: this.state.accountType,\n        page: \"Feedback\"\n      }, __jsx(Divider, {\n        hidden: true\n      }), __jsx(Container, {\n        style: {\n          width: \"70vw\"\n        }\n      }, __jsx(Segment, {\n        raised: true\n      }, __jsx(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"Collection of Feedback For System\"))), __jsx(Divider, {\n        hidden: true\n      }), __jsx(Grid, {\n        centered: true\n      }, __jsx(Grid.Column, {\n        width: 8\n      }, __jsx(Header, {\n        as: \"h3\",\n        textAlign: \"left\"\n      }, \"Please provided feedback via the Google Form below:\"), __jsx(\"a\", {\n        style: {\n          display: \"table-cell\"\n        },\n        href: \"https://forms.gle/g4MstrdxWFLtcC6V6\",\n        target: \"_blank\"\n      }, \"Link to Google Form\"), __jsx(Header, {\n        as: \"h3\",\n        textAlign: \"left\"\n      }, \"Do you like the system?\"), __jsx(\"p\", null, \"Selected Choice: \", __jsx(\"b\", null, this.state.like.toString())), __jsx(Button, {\n        icon: true,\n        labelPosition: \"left\",\n        color: \"green\",\n        compact: true,\n        onClick: () => {\n          this.setState({\n            like: true\n          });\n        }\n      }, __jsx(Icon, {\n        name: \"thumbs up outline\"\n      }), \"Yes\"), __jsx(Button, {\n        icon: true,\n        labelPosition: \"left\",\n        color: \"red\",\n        compact: true,\n        onClick: () => {\n          this.setState({\n            like: false\n          });\n        }\n      }, __jsx(Icon, {\n        name: \"thumbs down outline\"\n      }), \"No\"), __jsx(Header, {\n        as: \"h3\",\n        textAlign: \"left\"\n      }, \"Do you find the system useful?\"), __jsx(\"p\", null, \"Selected Choice: \", __jsx(\"b\", null, this.state.usefulness.toString())), __jsx(Button, {\n        icon: true,\n        labelPosition: \"left\",\n        color: \"green\",\n        compact: true,\n        onClick: () => {\n          this.setState({\n            usefulness: true\n          });\n        }\n      }, __jsx(Icon, {\n        name: \"thumbs up outline\"\n      }), \"Yes\"), __jsx(Button, {\n        icon: true,\n        labelPosition: \"left\",\n        color: \"red\",\n        compact: true,\n        onClick: () => {\n          this.setState({\n            usefulness: false\n          });\n        }\n      }, __jsx(Icon, {\n        name: \"thumbs down outline\"\n      }), \"No\"), __jsx(Header, {\n        as: \"h3\",\n        textAlign: \"left\"\n      }, \"Do you find the system easy to use?\"), __jsx(\"p\", null, \"Selected Choice: \", __jsx(\"b\", null, this.state.easy.toString())), __jsx(Button, {\n        icon: true,\n        labelPosition: \"left\",\n        color: \"green\",\n        compact: true,\n        onClick: () => {\n          this.setState({\n            easy: true\n          });\n        }\n      }, __jsx(Icon, {\n        name: \"thumbs up outline\"\n      }), \"Yes\"), __jsx(Button, {\n        icon: true,\n        labelPosition: \"left\",\n        color: \"red\",\n        compact: true,\n        onClick: () => {\n          this.setState({\n            easy: false\n          });\n        }\n      }, __jsx(Icon, {\n        name: \"thumbs down outline\"\n      }), \"No\"), __jsx(Header, {\n        as: \"h3\",\n        textAlign: \"left\"\n      }, \"Any suggestions for improvments or other comments?\"), __jsx(Form, {\n        error: !!this.state.errorMessage,\n        style: {\n          marginTop: '10px'\n        }\n      }, __jsx(Form.Field, null, __jsx(TextArea, {\n        placeholder: \"Tell us more\",\n        style: {\n          width: \"100%\",\n          height: \"20%\"\n        },\n        value: this.state.comments,\n        onChange: event => this.setState({\n          comments: event.target.value\n        })\n      })), __jsx(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.errorMessage\n      })), __jsx(Divider, {\n        hidden: true\n      }), __jsx(Modal, {\n        open: this.state.loading,\n        trigger: __jsx(Button, {\n          primary: true,\n          onClick: this.onSubmit\n        }, \"Submit Feedback\"),\n        basic: true,\n        size: \"small\"\n      }, __jsx(Header, {\n        content: \"Submitting Feedback\"\n      }), __jsx(Modal.Content, null, __jsx(\"p\", null, \"Please wait patiently as the system submits your feedback to the blockchain. Upon successful submission, you will be redirected to the Home Page.\"), __jsx(Loader, {\n        active: true,\n        inline: \"centered\"\n      }, \"Loading\")))), __jsx(Grid.Column, {\n        width: 4\n      }, __jsx(Responsive, {\n        fireOnMount: true,\n        getWidth: getWidthFactory(this.props.isMobileFromSSR),\n        minWidth: Responsive.onlyTablet.minWidth\n      }, this.renderStatistic()))), __jsx(TimeOutModal, {\n        timeout: this.state.timeout\n      }));\n    } else {\n      return __jsx(Layout, {\n        accountType: this.state.accountType\n      }, __jsx(AccountIssueModal, {\n        loading: this.state.resourceLoading,\n        login: this.state.login\n      }));\n    }\n  }\n\n}\n\nexport default FeedbackPage;","map":null,"metadata":{},"sourceType":"module"}