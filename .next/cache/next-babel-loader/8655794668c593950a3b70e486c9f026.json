{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Button, Form, Container, Divider, Input, Segment, Message, Icon, Modal, Header, Loader } from 'semantic-ui-react';\nimport LoginLayout from '../components/LoginLayout';\nimport web3 from '../ethereum/web3';\nimport Profile from '../ethereum/profile';\nimport factory from '../ethereum/factory';\nimport EthQuestionToken from '../ethereum/token';\nimport EthQuestionTokenSale from '../ethereum/tokenSale';\nimport credentials from '../ethereum/credentials';\nimport { Router } from '../routes';\nimport { validate, logging } from '../utils/functions';\n\nvar passwordHash = require('password-hash');\n\nclass RegisterPage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      emailAddress: '',\n      password: '',\n      loading: false,\n      showKeys: false,\n      errorMessage: ''\n    });\n\n    _defineProperty(this, \"onSubmit\", async () => {\n      this.setState({\n        loading: true,\n        errorMessage: ''\n      }); // Check for valid NTU Student Email Address, Existence of Email Address and EthWallet\n\n      try {\n        let validEmail = validate(this.state.emailAddress);\n        let emailNotExist = await credentials.methods.emailNotExist(this.state.emailAddress).call();\n\n        if (validEmail && !emailNotExist) {\n          if (this.state.emailAddress === \"admin\") {\n            const accounts = await web3.eth.getAccounts();\n            let hashedPassword = passwordHash.generate(this.state.password);\n            await factory.methods // Create Admin\n            .createAdmin(credentials._address, this.state.emailAddress, hashedPassword).send({\n              from: accounts[0],\n              gasPrice: \"0\"\n            });\n            document.cookie = `wallet=${accounts[0]}; path=/`;\n          } else {\n            // Create a new Profile\n            let wallet = await web3.eth.accounts.create();\n            let hashedPassword = passwordHash.generate(this.state.password);\n            await web3.eth.personal.importRawKey(wallet['privateKey'].slice(2), this.state.password);\n            await web3.eth.personal.unlockAccount(wallet['address'], this.state.password, 3600);\n            let logTransaction = logging(\"Credited 10 EQT(s) for first time User\");\n            await EthQuestionTokenSale.methods;\n            await factory.methods.createProfile(credentials._address, this.state.emailAddress, hashedPassword, EthQuestionToken._address, EthQuestionTokenSale._address, logTransaction).send({\n              from: wallet['address'],\n              gasPrice: \"0\"\n            });\n            document.cookie = `wallet=${wallet['address']}; path=/`;\n            this.setState({\n              publicKey: wallet['address'],\n              privateKey: wallet['privateKey']\n            });\n          }\n\n          document.cookie = `login=${true}; path=/`;\n          this.setState({\n            loading: false,\n            showKeys: true\n          });\n        } else {\n          this.setState({\n            errorMessage: \"Invalid Email Address or Email Address Already In Used\"\n          });\n          this.setState({\n            loading: false\n          });\n        }\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n        this.setState({\n          loading: false\n        });\n      }\n    });\n  }\n\n  async componentDidMount() {\n    // Delete any existing Cookies\n    document.cookie = `login=${false}; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT`;\n    document.cookie = `wallet=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT`;\n  }\n\n  renderForm() {\n    return __jsx(Form, {\n      error: !!this.state.errorMessage\n    }, __jsx(Segment, {\n      raised: true,\n      textAlign: \"center\"\n    }, \"This will create a password-protected account using your NTU email address and have it linked to cryptocurrency wallet created by the system.\"), __jsx(Form.Field, null, __jsx(\"label\", null, \"NTU Student Email Address\"), __jsx(Input, {\n      placeholder: \"example@e.ntu.edu.sg\",\n      value: this.state.emailAddress,\n      onChange: event => this.setState({\n        emailAddress: event.target.value\n      })\n    })), __jsx(Form.Field, null, __jsx(\"label\", null, \"Password\"), __jsx(Input, {\n      placeholder: \"Password\",\n      type: \"password\",\n      value: this.state.password,\n      onChange: event => this.setState({\n        password: event.target.value\n      })\n    })), __jsx(Message, {\n      error: true,\n      header: \"Oops!\",\n      content: this.state.errorMessage\n    }), __jsx(Modal, {\n      open: this.state.loading,\n      trigger: __jsx(Button, {\n        primary: true,\n        onClick: this.onSubmit\n      }, \"Register\"),\n      basic: true,\n      size: \"small\"\n    }, __jsx(Header, {\n      content: \"Registering Your Email Address\"\n    }), __jsx(Modal.Content, null, __jsx(\"p\", null, \"Creating of password-protected account. Please wait...\"), __jsx(Loader, {\n      active: true,\n      inline: \"centered\"\n    }, \"Registering Your Email\"))), __jsx(Modal, {\n      open: this.state.showKeys,\n      basic: true,\n      size: \"small\"\n    }, __jsx(Header, {\n      content: \"Wallet Information\"\n    }), __jsx(Modal.Content, null, \"WARNING: Never reveal your private key to anyone. These keys will be required for future access to your wallet, please have it recorded down.\", __jsx(\"p\", null, \"Public Key: \", this.state.publicKey), __jsx(\"p\", null, \"Private Key: \", this.state.privateKey)), __jsx(Modal.Actions, null, __jsx(Button, {\n      color: \"green\",\n      onClick: () => Router.pushRoute(`/home`)\n    }, __jsx(Icon, {\n      name: \"checkmark\"\n    }), \" Okay\"))), __jsx(Button, {\n      primary: true,\n      onClick: () => Router.pushRoute(`/`)\n    }, \"Go Back\"));\n  }\n\n  render() {\n    return __jsx(LoginLayout, null, __jsx(Container, {\n      style: {\n        height: \"100vh\"\n      }\n    }, this.renderForm()));\n  }\n\n}\n\nexport default RegisterPage;","map":null,"metadata":{},"sourceType":"module"}