{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport MobileDetect from 'mobile-detect';\nimport _ from 'lodash';\nimport { Button, Header, Table, Statistic, Rating, Grid, Loader, List, Popup, Divider, Container, Icon, Label, Progress, Segment, Modal, Responsive, Checkbox, Dropdown } from 'semantic-ui-react';\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport { getWidthFactory } from '../utils/device';\nimport factory from '../ethereum/factory';\nimport credentials from '../ethereum/credentials';\nimport Question from '../ethereum/question';\nimport Profile from '../ethereum/profile';\nimport Layout from '../components/Layout';\nimport { Link, Router } from '../routes';\nimport web3 from '../ethereum/web3';\nimport { search, sortingQuestions } from '../utils/functions';\nimport cookies from 'next-cookies';\n\nvar HomePage = /*#__PURE__*/function (_Component) {\n  _inherits(HomePage, _Component);\n\n  var _super = _createSuper(HomePage);\n\n  function HomePage(props) {\n    var _this;\n\n    _classCallCheck(this, HomePage);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      login: false,\n      accountType: null,\n      tags: [],\n      topTags: [],\n      loading: true,\n      sortBy: null,\n      data: [],\n      summaries: [],\n      questionLimit: 30,\n      questionLimitChoice: [],\n      isSSR: false,\n      isMining: false\n    };\n    return _this;\n  }\n\n  _createClass(HomePage, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      return _regeneratorRuntime.async(function componentDidUpdate$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (this.props != prevProps) {\n                this.fetchQuestionData();\n              }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var login, profileAddress, profile, accountType;\n      return _regeneratorRuntime.async(function componentDidMount$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(typeof web3 === 'undefined')) {\n                _context2.next = 3;\n                break;\n              }\n\n              this.setState({\n                loading: false\n              });\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              login = false;\n\n              if (!this.props.isLogin) {\n                _context2.next = 18;\n                break;\n              }\n\n              login = true; // Get Account Type\n\n              _context2.next = 8;\n              return _regeneratorRuntime.awrap(factory.methods.getProfile(this.props.account).call());\n\n            case 8:\n              profileAddress = _context2.sent;\n              profile = Profile(profileAddress);\n              _context2.next = 12;\n              return _regeneratorRuntime.awrap(profile.methods.getAccountType().call());\n\n            case 12:\n              accountType = _context2.sent;\n              accountType == 0 ? accountType = \"Admin\" : accountType = \"User\";\n              _context2.next = 16;\n              return _regeneratorRuntime.awrap(this.fetchQuestionData());\n\n            case 16:\n              this.setState({\n                login: login\n              });\n              this.setState({\n                accountType: accountType\n              });\n\n            case 18:\n              this.setState({\n                loading: false\n              });\n\n            case 19:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"fetchQuestionData\",\n    value: function fetchQuestionData() {\n      var deployedQuestions, deployedQuestionsCount, summaries, searchItem, i, question, summary, answerList, questionLimitChoice, choice, _i, tags, sortedTags, tagList, isMining, blockNumber, users;\n\n      return _regeneratorRuntime.async(function fetchQuestionData$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(factory.methods.getDeployedQuestions().call());\n\n            case 2:\n              deployedQuestions = _context3.sent;\n              deployedQuestionsCount = deployedQuestions.length;\n              this.setState({\n                deployedQuestionsCount: deployedQuestionsCount\n              }); // Retrieve the summaries of all deployed questions\n\n              summaries = [];\n\n              if (!(this.props.queryValue != undefined && this.props.queryValue != 'favicon.ico')) {\n                _context3.next = 12;\n                break;\n              }\n\n              searchItem = decodeURIComponent(this.props.queryValue);\n              _context3.next = 10;\n              return _regeneratorRuntime.awrap(search(searchItem, deployedQuestions));\n\n            case 10:\n              deployedQuestions = _context3.sent;\n              deployedQuestionsCount = deployedQuestions.length;\n\n            case 12:\n              i = 0;\n\n            case 13:\n              if (!(i < deployedQuestionsCount)) {\n                _context3.next = 28;\n                break;\n              }\n\n              question = Question(deployedQuestions[i]);\n              _context3.next = 17;\n              return _regeneratorRuntime.awrap(question.methods.getSummary().call());\n\n            case 17:\n              summary = _context3.sent;\n\n              if (summary[9]) {\n                _context3.next = 25;\n                break;\n              }\n\n              summaries[i] = summary;\n              _context3.next = 22;\n              return _regeneratorRuntime.awrap(question.methods.getAnswerList().call());\n\n            case 22:\n              answerList = _context3.sent;\n              summaries[i][10] = answerList.length;\n              summaries[i][11] = deployedQuestions[i];\n\n            case 25:\n              i++;\n              _context3.next = 13;\n              break;\n\n            case 28:\n              summaries = summaries.reverse(); // Displays questions in interval of 30\n\n              questionLimitChoice = [30];\n              choice = Math.floor(summaries.length / 30);\n\n              for (_i = 1; _i <= choice; _i++) {\n                questionLimitChoice.push(30 * (_i + 1));\n              } // Get the top 10 used tags\n\n\n              tags = {};\n              summaries = summaries.slice(0, this.state.questionLimit);\n              summaries.forEach(function (summary) {\n                summary[8].forEach(function (tag) {\n                  if (tags[tag] == undefined) {\n                    tags[tag] = 1;\n                  } else {\n                    tags[tag] = tags[tag] + 1;\n                  }\n                });\n              });\n              sortedTags = Object.keys(tags).map(function (key) {\n                return [key, tags[key]];\n              }); // Sort the array based on the second element\n\n              sortedTags.sort(function (first, second) {\n                return second[1] - first[1];\n              }); // Array of all tags\n\n              tagList = [];\n              sortedTags.forEach(function (tag) {\n                tagList.push(tag[0]);\n              }); // Array with only the first 10 items\n\n              tags = [];\n              sortedTags.slice(0, 10).forEach(function (tag) {\n                tags.push(tag[0]);\n              });\n              _context3.next = 43;\n              return _regeneratorRuntime.awrap(web3.eth.isMining());\n\n            case 43:\n              isMining = _context3.sent;\n              _context3.next = 46;\n              return _regeneratorRuntime.awrap(web3.eth.getBlockNumber());\n\n            case 46:\n              blockNumber = _context3.sent;\n              _context3.next = 49;\n              return _regeneratorRuntime.awrap(factory.methods.getEthWallets().call());\n\n            case 49:\n              users = _context3.sent;\n              this.setState({\n                isMining: isMining,\n                blockNumber: blockNumber,\n                users: users.length\n              });\n              this.setState({\n                topTags: tags\n              });\n              this.setState({\n                tags: tagList\n              });\n              this.setState({\n                summaries: summaries\n              });\n              this.setState({\n                questionLimitChoice: questionLimitChoice\n              });\n\n            case 55:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"renderQuestionHeader\",\n    value: function renderQuestionHeader() {\n      return __jsx(Table.Row, null, __jsx(Table.HeaderCell, {\n        textAlign: \"center\",\n        width: 2\n      }, __jsx(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Current Phase\")), __jsx(Table.HeaderCell, {\n        textAlign: \"center\",\n        width: 2\n      }, __jsx(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Answers Submitted\")), __jsx(Table.HeaderCell, {\n        textAlign: \"center\",\n        width: 2\n      }, __jsx(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Reward\")), __jsx(Table.HeaderCell, {\n        textAlign: \"center\"\n      }, __jsx(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Question Title\")));\n    } // Renders out the list of question\n\n  }, {\n    key: \"renderQuestionList\",\n    value: function renderQuestionList() {\n      var _this2 = this;\n\n      var summaries = this.state.summaries;\n      summaries = sortingQuestions(summaries, this.state.sortBy);\n      return summaries.map(function (summary, index) {\n        var questionState = summary[4];\n        var tagList = summary[8];\n        return __jsx(Table.Row, {\n          key: index\n        }, __jsx(Table.Cell, {\n          textAlign: \"center\",\n          width: 2\n        }, questionState == 0 ? __jsx(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, __jsx(Statistic.Value, null, __jsx(\"span\", {\n          style: {\n            fontSize: 15,\n            color: 'red'\n          }\n        }, \" Answering\")), __jsx(Statistic.Label, null, __jsx(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"Phase\"))) : questionState == 1 ? __jsx(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, __jsx(Statistic.Value, null, __jsx(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#C9C633'\n          }\n        }, \" Voting\")), __jsx(Statistic.Label, null, __jsx(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"Phase\"))) : __jsx(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, __jsx(Statistic.Value, null, __jsx(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#10EE44'\n          }\n        }, \" Rewarded\")), __jsx(Statistic.Label, null, __jsx(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"Phase\")))), __jsx(Table.Cell, {\n          textAlign: \"center\",\n          width: 2\n        }, __jsx(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, __jsx(Statistic.Value, null, __jsx(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, summary[10])), __jsx(Statistic.Label, null, __jsx(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"answer(s)\")))), __jsx(Table.Cell, {\n          textAlign: \"center\",\n          width: 2\n        }, __jsx(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, __jsx(Statistic.Value, null, __jsx(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, summary[2] * 1e-4)), __jsx(Statistic.Label, null, __jsx(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"EQT(s)\")))), __jsx(Table.Cell, {\n          textAlign: \"left\"\n        }, __jsx(Grid.Row, {\n          textAlign: \"left\"\n        }, __jsx(\"span\", {\n          style: {\n            fontSize: 18,\n            color: '#6A737C',\n            cursor: 'pointer'\n          },\n          onClick: function onClick() {\n            return Router.pushRoute(\"/questions/\".concat(summary[11]));\n          }\n        }, __jsx(\"a\", null, summary[0]))), _this2.renderTag(tagList, \"mini\")));\n      });\n    }\n  }, {\n    key: \"renderMobileQuestionList\",\n    value: function renderMobileQuestionList() {\n      var _this3 = this;\n\n      var summaries = this.state.summaries;\n      summaries = sortingQuestions(summaries, this.state.sortBy);\n      return summaries.map(function (summary, index) {\n        var tags = summary[8];\n        var questionState = summary[4];\n        var tagList = summary[8];\n        return __jsx(List.Item, {\n          key: index\n        }, __jsx(List.Icon, {\n          name: \"question circle\",\n          size: \"large\",\n          verticalAlign: \"middle\"\n        }), __jsx(List.Content, null, __jsx(List.Header, {\n          as: \"a\",\n          onClick: function onClick() {\n            return Router.pushRoute(\"/questions/\".concat(summary[11]));\n          }\n        }, summary[0]), __jsx(Grid, null, __jsx(Grid.Column, {\n          width: 10\n        }, __jsx(List.Description, null, \"Number of Answer(s): \" + summary[10]), __jsx(List.Description, null, \"Reward: \" + summary[2] * 1e-4 + \" EQT(s)\"), _this3.renderTag(tags, \"mini\")), __jsx(Grid.Column, {\n          width: 4\n        }, questionState == 0 ? __jsx(List.Description, null, __jsx(\"b\", null, __jsx(\"font\", {\n          color: \"red\"\n        }, \"ANSWERING PHASE\"))) : questionState == 1 ? __jsx(List.Description, null, __jsx(\"b\", null, __jsx(\"font\", {\n          color: \"#C9C633\"\n        }, \"VOTING PHASE\"))) : __jsx(List.Description, null, __jsx(\"b\", null, __jsx(\"font\", {\n          color: \"#10EE44\"\n        }, \"REWARDED PHASE\")))))), __jsx(Divider, {\n          hidden: true\n        }));\n      });\n    } // Render each tag individually for each question\n\n  }, {\n    key: \"renderTag\",\n    value: function renderTag(tagList, tagSize) {\n      var tagColours = [\"red\", \"olive\", \"blue\", \"teal\", \"green\"];\n      return tagList.map(function (tag, index) {\n        return __jsx(Label, {\n          as: \"a\",\n          onClick: function onClick() {\n            return Router.pushRoute(\"/\".concat('search/' + encodeURIComponent(tag)));\n          },\n          tag: true,\n          size: tagSize,\n          key: index,\n          color: tagColours[index % 5]\n        }, tag);\n      });\n    }\n  }, {\n    key: \"renderTopTags\",\n    value: function renderTopTags() {\n      return __jsx(Segment, null, __jsx(Header, {\n        as: \"h3\",\n        textAlign: \"center\"\n      }, __jsx(Icon, {\n        name: \"tags\"\n      }), \"Top 10 Tags\"), this.renderTag(this.state.topTags, \"medium\"));\n    }\n  }, {\n    key: \"renderAbout\",\n    value: function renderAbout() {\n      return __jsx(Segment, null, __jsx(Header, {\n        as: \"h3\",\n        textAlign: \"center\"\n      }, __jsx(Icon, {\n        name: \"question\"\n      }), \"What Are Question Phases\"), __jsx(\"span\", {\n        style: {\n          fontSize: 18,\n          color: 'red'\n        }\n      }, \"ANSWERING\"), __jsx(\"p\", {\n        style: {\n          fontSize: 15\n        }\n      }, \"You can submit answers but answers will not be shown\"), __jsx(\"span\", {\n        style: {\n          fontSize: 18,\n          color: '#C9C633'\n        }\n      }, \"VOTING\"), __jsx(\"p\", {\n        style: {\n          fontSize: 15\n        }\n      }, \"You can only approve answers submitted\"), __jsx(\"span\", {\n        style: {\n          fontSize: 18,\n          color: '#10EE44'\n        }\n      }, \"REWARDED\"), __jsx(\"p\", {\n        style: {\n          fontSize: 15\n        }\n      }, \"Someone has already earned the reward for the question\"));\n    }\n  }, {\n    key: \"renderQuestionStatistics\",\n    value: function renderQuestionStatistics() {\n      return __jsx(Segment, null, __jsx(Statistic.Group, {\n        horizontal: true,\n        color: \"red\"\n      }, __jsx(Statistic, null, __jsx(Statistic.Value, null, this.state.deployedQuestionsCount), __jsx(Statistic.Label, null, \"Questions Asked\"))), __jsx(Statistic.Group, {\n        horizontal: true,\n        color: \"yellow\"\n      }, __jsx(Statistic, null, __jsx(Statistic.Value, null, this.state.users), __jsx(Statistic.Label, null, \"Active Users\"))));\n    }\n  }, {\n    key: \"renderBlockChainStatistics\",\n    value: function renderBlockChainStatistics() {\n      return __jsx(Segment, null, __jsx(Header, {\n        as: \"h3\",\n        textAlign: \"center\"\n      }, __jsx(Icon, {\n        name: \"ethereum\"\n      }), \"Block-Chain Status\"), this.state.isMining ? __jsx(Statistic.Value, null, __jsx(\"span\", {\n        style: {\n          fontSize: 18,\n          color: 'green'\n        }\n      }, \"Currently Mining\")) : __jsx(Statistic.Value, null, __jsx(\"span\", {\n        style: {\n          fontSize: 18,\n          color: 'red'\n        }\n      }, \"Currently Not Mining\")), __jsx(Statistic.Group, {\n        horizontal: true,\n        color: \"green\"\n      }, __jsx(Statistic, null, __jsx(Statistic.Value, null, this.state.blockNumber), __jsx(Statistic.Label, null, \"Blocks Mined\"))), \"*When blockchain is not mining, do not create any transaction\");\n    }\n  }, {\n    key: \"renderSortSettings\",\n    value: function renderSortSettings() {\n      var _this4 = this;\n\n      var options = ['Ascending Phase', 'Descending Phase', 'Ascending Answers', 'Descending Answers', 'Ascending Rewards', 'Descending Rewards'];\n      return __jsx(\"span\", null, __jsx(Dropdown, {\n        text: \"Sorting Questions\",\n        multiple: true\n      }, __jsx(Dropdown.Menu, null, __jsx(Dropdown.Header, {\n        icon: \"filter\",\n        content: \"Sorting Options\"\n      }), __jsx(Dropdown.Menu, {\n        scrolling: true\n      }, options.map(function (tag, index) {\n        return __jsx(Dropdown.Item, {\n          key: index,\n          text: tag,\n          onClick: function onClick() {\n            return _this4.setState({\n              sortBy: index\n            });\n          }\n        });\n      })))));\n    }\n  }, {\n    key: \"renderFilterSettings\",\n    value: function renderFilterSettings() {\n      var tagColours = [\"red\", \"olive\", \"blue\", \"teal\", \"green\"];\n      return __jsx(\"span\", null, __jsx(Dropdown, {\n        text: \"Filter Questions\",\n        multiple: true\n      }, __jsx(Dropdown.Menu, null, __jsx(Dropdown.Header, {\n        icon: \"tags\",\n        content: \"Tag Label\"\n      }), __jsx(Dropdown.Menu, {\n        scrolling: true\n      }, this.state.tags.map(function (tag, index) {\n        return __jsx(Dropdown.Item, {\n          key: index,\n          text: tag,\n          label: {\n            color: tagColours[index % 6],\n            empty: true,\n            circular: true\n          },\n          onClick: function onClick() {\n            return Router.pushRoute(\"/\".concat('search/' + encodeURIComponent(tag)));\n          }\n        });\n      })))));\n    }\n  }, {\n    key: \"renderQuestionLimitSettings\",\n    value: function renderQuestionLimitSettings() {\n      var _this5 = this;\n\n      return __jsx(Dropdown, {\n        text: \"Viewing Limit\",\n        multiple: true\n      }, __jsx(Dropdown.Menu, null, __jsx(Dropdown.Header, {\n        icon: \"list\",\n        content: \"Question Limit\"\n      }), __jsx(Dropdown.Menu, {\n        scrolling: true\n      }, this.state.questionLimitChoice.map(function (choice, index) {\n        return __jsx(Dropdown.Item, {\n          key: index,\n          text: choice,\n          onClick: function _callee() {\n            return _regeneratorRuntime.async(function _callee$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.next = 2;\n                    return _regeneratorRuntime.awrap(_this5.setState({\n                      questionLimit: choice\n                    }));\n\n                  case 2:\n                    _this5.fetchQuestionData();\n\n                  case 3:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }\n        });\n      }))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      if (this.state.login) {\n        return __jsx(Layout, {\n          accountType: this.state.accountType,\n          page: \"Home\"\n        }, __jsx(Responsive, {\n          fireOnMount: true,\n          getWidth: getWidthFactory(this.props.isMobileFromSSR),\n          minWidth: Responsive.onlyTablet.minWidth\n        }, __jsx(Divider, {\n          hidden: true\n        }), __jsx(Grid, {\n          centered: true\n        }, __jsx(Grid.Column, {\n          width: 10\n        }, __jsx(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"Questions Asked\"), __jsx(Segment, {\n          textAlign: \"center\"\n        }, this.renderSortSettings(), this.renderFilterSettings(), this.renderQuestionLimitSettings(), __jsx(Button, {\n          onClick: function onClick() {\n            _this6.setState({\n              sortBy: ''\n            });\n\n            Router.pushRoute(\"/home\");\n          }\n        }, \"Clear Fliter/Sort\")), __jsx(Table, null, __jsx(Table.Header, null, this.renderQuestionHeader()), __jsx(Table.Body, null, this.renderQuestionList())), __jsx(Divider, {\n          hidden: true\n        }), __jsx(\"div\", {\n          style: {\n            marginTop: 20\n          }\n        }, \"Found \", this.state.summaries.length, \" Item(s).\")), __jsx(Grid.Column, {\n          width: 3\n        }, this.renderAbout(), this.renderQuestionStatistics(), this.renderTopTags(), this.renderBlockChainStatistics()))), __jsx(Responsive, {\n          fireOnMount: true,\n          getWidth: getWidthFactory(this.props.isMobileFromSSR),\n          maxWidth: Responsive.onlyMobile.maxWidth\n        }, __jsx(Divider, {\n          hidden: true\n        }), __jsx(Grid, {\n          centered: true\n        }, __jsx(Grid.Column, null, __jsx(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"Questions Asked\"), __jsx(Segment, {\n          textAlign: \"center\"\n        }, this.renderSortSettings(), this.renderFilterSettings(), this.renderQuestionLimitSettings()), __jsx(Button, {\n          onClick: function onClick() {\n            _this6.setState({\n              sortBy: ''\n            });\n\n            Router.pushRoute(\"/home\");\n          }\n        }, \"Clear Fliter/Sort\"), __jsx(Divider, {\n          hidden: true\n        }), __jsx(List, {\n          divided: true,\n          relaxed: true\n        }, this.renderMobileQuestionList()), __jsx(Divider, {\n          hidden: true\n        }), __jsx(\"div\", {\n          style: {\n            marginTop: 20\n          }\n        }, \"Found \", this.state.summaries.length, \" Item(s).\")))));\n      } else {\n        return __jsx(Layout, {\n          accountType: this.state.accountType\n        }, __jsx(AccountIssueModal, {\n          loading: this.state.loading,\n          login: this.state.login\n        }));\n      }\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      var isMobileFromSSR, queryValue, device, md;\n      return _regeneratorRuntime.async(function getInitialProps$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              isMobileFromSSR = false;\n              queryValue = props.query.value;\n\n              if (props.req) {\n                device = props.req.headers[\"user-agent\"];\n                md = new MobileDetect(device);\n                isMobileFromSSR = !!md.mobile();\n              }\n\n              return _context5.abrupt(\"return\", {\n                isMobileFromSSR: isMobileFromSSR,\n                queryValue: queryValue,\n                isLogin: cookies(props).login || '',\n                account: cookies(props).wallet || ''\n              });\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return HomePage;\n}(Component);\n\nexport default HomePage;","map":null,"metadata":{},"sourceType":"module"}