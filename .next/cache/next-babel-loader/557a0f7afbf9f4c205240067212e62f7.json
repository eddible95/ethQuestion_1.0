{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { Container, Segment, Header, Divider, Button, Popup, Form, Input, Icon, Dropdown, Table, Modal, Loader, Message, Transition, Grid } from \"semantic-ui-react\";\nimport Layout from '../components/Layout';\nimport LoadingModal from '../components/LoadingModal';\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport TimeOutModal from '../components/TimeOutModal';\nimport { Router } from '../routes';\nimport { logging, checkRewardField } from '../utils/functions';\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\nimport Profile from '../ethereum/profile';\nimport Question from '../ethereum/question';\nimport feedback from '../ethereum/feedback';\nimport EthQuestionToken from '../ethereum/token';\nimport EthQuestionTokenSale from '../ethereum/tokenSale';\nimport credentials from '../ethereum/credentials';\nimport { exportQuestion, exportComments } from '../utils/pdf';\nimport cookies from 'next-cookies';\n\nvar AdminPage = /*#__PURE__*/function (_Component) {\n  _inherits(AdminPage, _Component);\n\n  var _super = _createSuper(AdminPage);\n\n  function AdminPage(props) {\n    var _this;\n\n    _classCallCheck(this, AdminPage);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"export\", function _callee() {\n      var questionNumber, question, summary, answerList;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(_this.state.questionNumber != null)) {\n                _context.next = 11;\n                break;\n              }\n\n              // Retrieve all the data of selected question\n              questionNumber = Number(_this.state.questionNumber) - 1;\n              question = Question(_this.state.deployedQuestions[questionNumber]);\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(question.methods.getSummary().call());\n\n            case 5:\n              summary = _context.sent;\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(question.methods.getAnswerList().call());\n\n            case 8:\n              answerList = _context.sent;\n              _context.next = 11;\n              return _regeneratorRuntime.awrap(exportQuestion(summary, answerList));\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"exportFeedback\", function _callee2() {\n      var comments;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(feedback.methods.getComments().call());\n\n            case 2:\n              comments = _context2.sent;\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(exportComments(comments));\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getUserTableData\", function () {\n      return _this.state.ethWalletEmailAddressBinding.map(function (item, index) {\n        return __jsx(Table.Row, {\n          key: index\n        }, __jsx(Table.Cell, null, item.ethWallet), __jsx(Table.Cell, null, item.emailAddress), __jsx(Table.Cell, null, item.status ? \"Blacklisted\" : \"Active\"), __jsx(Table.Cell, null, item.status ? __jsx(Button, {\n          onClick: function onClick() {\n            return _this.unblacklist(item.emailAddress);\n          },\n          color: \"green\",\n          size: \"mini\",\n          icon: true\n        }, __jsx(Icon, {\n          name: \"add user\"\n        })) : __jsx(Button, {\n          onClick: function onClick() {\n            return _this.blacklist(item.emailAddress);\n          },\n          color: \"red\",\n          size: \"mini\",\n          icon: true\n        }, __jsx(Icon, {\n          name: \"remove user\"\n        }))), __jsx(Table.Cell, null, __jsx(Button, {\n          onClick: function onClick() {\n            return _this.dispense(item.ethWallet);\n          },\n          color: \"green\",\n          size: \"mini\",\n          icon: true\n        }, __jsx(Icon, {\n          name: \"ethereum\"\n        }))));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"blacklist\", function _callee3(emailAddress) {\n      var account;\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              });\n\n              _context3.prev = 1;\n              account = _this.state.account;\n              _context3.next = 5;\n              return _regeneratorRuntime.awrap(credentials.methods.blacklistEmail(emailAddress).send({\n                from: account,\n                gasPrice: '0'\n              }));\n\n            case 5:\n              Router.pushRoute('/admin'); // Automatic redirect the user.\n\n              _context3.next = 13;\n              break;\n\n            case 8:\n              _context3.prev = 8;\n              _context3.t0 = _context3[\"catch\"](1);\n\n              if (_context3.t0.message == \"Returned error: authentication needed: password or unlock\") {\n                _this.setState({\n                  timeout: true\n                });\n              }\n\n              _this.setState({\n                errorMessage: _context3.t0.message\n              });\n\n              _this.setState({\n                error: true\n              });\n\n            case 13:\n              _this.setState({\n                loading: false\n              });\n\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, [[1, 8]], Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"unblacklist\", function _callee4(emailAddress) {\n      var account;\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              });\n\n              _context4.prev = 1;\n              account = _this.state.account;\n              _context4.next = 5;\n              return _regeneratorRuntime.awrap(credentials.methods.unBlacklistEmail(emailAddress).send({\n                from: account,\n                gasPrice: '0'\n              }));\n\n            case 5:\n              _context4.next = 12;\n              break;\n\n            case 7:\n              _context4.prev = 7;\n              _context4.t0 = _context4[\"catch\"](1);\n\n              if (_context4.t0.message == \"Returned error: authentication needed: password or unlock\") {\n                _this.setState({\n                  timeout: true\n                });\n              }\n\n              _this.setState({\n                errorMessage: _context4.t0.message\n              });\n\n              _this.setState({\n                error: true\n              });\n\n            case 12:\n              _this.setState({\n                loading: false\n              });\n\n            case 13:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, [[1, 7]], Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"dispense\", function _callee5(ethWallet) {\n      var account, profileAddress, profile, logTransaction;\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              });\n\n              _context5.prev = 1;\n              account = _this.state.account;\n              _context5.next = 5;\n              return _regeneratorRuntime.awrap(EthQuestionToken.methods.transfer(ethWallet, 10e4).send({\n                from: account,\n                gasPrice: '0'\n              }));\n\n            case 5:\n              _context5.next = 7;\n              return _regeneratorRuntime.awrap(factory.methods.getProfile(ethWallet).call());\n\n            case 7:\n              profileAddress = _context5.sent;\n              profile = Profile(profileAddress);\n              logTransaction = logging(\"Awarded 10 EQT(s) for first time user\");\n              _context5.next = 12;\n              return _regeneratorRuntime.awrap(profile.methods.logTransaction(logTransaction).send({\n                from: account,\n                gasPrice: '0'\n              }));\n\n            case 12:\n              _context5.next = 19;\n              break;\n\n            case 14:\n              _context5.prev = 14;\n              _context5.t0 = _context5[\"catch\"](1);\n\n              if (_context5.t0.message == \"Returned error: authentication needed: password or unlock\") {\n                _this.setState({\n                  timeout: true\n                });\n              }\n\n              _this.setState({\n                errorMessage: _context5.t0.message\n              });\n\n              _this.setState({\n                error: true\n              });\n\n            case 19:\n              _this.setState({\n                loading: false\n              });\n\n            case 20:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, [[1, 14]], Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getQuestionTableData\", function () {\n      return _this.state.questionAddressTitleBinding.map(function (item, index) {\n        return __jsx(Table.Row, {\n          key: index\n        }, __jsx(Table.Cell, null, item.questionAddress), __jsx(Table.Cell, null, item.title), __jsx(Table.Cell, null, item.flagged ? \"Flagged\" : \"Active\"), __jsx(Table.Cell, null, item.flagged ? __jsx(Button, {\n          onClick: function onClick() {\n            return _this.undoDeleteQuestion(item.questionAddress);\n          },\n          color: \"green\",\n          size: \"mini\",\n          icon: true\n        }, __jsx(Icon, {\n          name: \"undo\"\n        })) : __jsx(Button, {\n          onClick: function onClick() {\n            return _this.deleteQuestion(item.questionAddress);\n          },\n          color: \"red\",\n          size: \"mini\",\n          icon: true\n        }, __jsx(Icon, {\n          name: \"flag\"\n        }))));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"deleteQuestion\", function _callee6(questionAddress, title) {\n      var account, logTransaction;\n      return _regeneratorRuntime.async(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              });\n\n              _context6.prev = 1;\n              account = _this.state.account;\n              logTransaction = logging(\"Deleted Question Titled: \" + title);\n              _context6.next = 6;\n              return _regeneratorRuntime.awrap(factory.methods.deleteQuestion(questionAddress, logTransaction).send({\n                from: account,\n                gasPrice: '0'\n              }));\n\n            case 6:\n              Router.pushRoute('/admin'); // Automatic redirect the user.\n\n              _context6.next = 14;\n              break;\n\n            case 9:\n              _context6.prev = 9;\n              _context6.t0 = _context6[\"catch\"](1);\n\n              if (_context6.t0.message == \"Returned error: authentication needed: password or unlock\") {\n                _this.setState({\n                  timeout: true\n                });\n              }\n\n              _this.setState({\n                errorMessage: _context6.t0.message\n              });\n\n              _this.setState({\n                error: true\n              });\n\n            case 14:\n              _this.setState({\n                loading: false\n              });\n\n            case 15:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, [[1, 9]], Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"undoDeleteQuestion\", function _callee7(questionAddress, title) {\n      var account, logTransaction;\n      return _regeneratorRuntime.async(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              });\n\n              _context7.prev = 1;\n              account = _this.state.account;\n              logTransaction = logging(\"Undo Deletion Of Question Titled: \" + title);\n              _context7.next = 6;\n              return _regeneratorRuntime.awrap(factory.methods.undoDeleteQuestion(questionAddress, logTransaction).send({\n                from: account,\n                gasPrice: '0'\n              }));\n\n            case 6:\n              Router.pushRoute('/admin'); // Automatic redirect the user.\n\n              _context7.next = 14;\n              break;\n\n            case 9:\n              _context7.prev = 9;\n              _context7.t0 = _context7[\"catch\"](1);\n\n              if (_context7.t0.message == \"Returned error: authentication needed: password or unlock\") {\n                _this.setState({\n                  timeout: true\n                });\n              }\n\n              _this.setState({\n                errorMessage: _context7.t0.message\n              });\n\n              _this.setState({\n                error: true\n              });\n\n            case 14:\n              _this.setState({\n                loading: false\n              });\n\n            case 15:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, [[1, 9]], Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"topUp\", function _callee8() {\n      var account, profileAddress, profile, logTransaction;\n      return _regeneratorRuntime.async(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              });\n\n              if (!checkRewardField(_this.state.topUpAmount)) {\n                _context8.next = 26;\n                break;\n              }\n\n              _context8.prev = 2;\n              account = _this.state.account;\n              _context8.next = 6;\n              return _regeneratorRuntime.awrap(web3.eth.personal.unlockAccount(account, \"password\", 600));\n\n            case 6:\n              _context8.next = 8;\n              return _regeneratorRuntime.awrap(EthQuestionToken.methods.transfer(EthQuestionTokenSale._address, _this.state.topUpAmount * 1e4).send({\n                from: account,\n                gasPrice: '0'\n              }));\n\n            case 8:\n              _context8.next = 10;\n              return _regeneratorRuntime.awrap(factory.methods.getProfile(account).call());\n\n            case 10:\n              profileAddress = _context8.sent;\n              profile = Profile(profileAddress);\n              logTransaction = logging(\"Added \" + _this.state.topUpAmount + \" EQT(s) for exchange\");\n              _context8.next = 15;\n              return _regeneratorRuntime.awrap(profile.methods.logTransaction(logTransaction).send({\n                from: account,\n                gasPrice: '0'\n              }));\n\n            case 15:\n              Router.pushRoute('/admin'); // Automatic redirect the user.\n\n              _context8.next = 24;\n              break;\n\n            case 18:\n              _context8.prev = 18;\n              _context8.t0 = _context8[\"catch\"](2);\n\n              if (_context8.t0.message == \"Returned error: authentication needed: password or unlock\") {\n                _this.setState({\n                  timeout: true\n                });\n              }\n\n              _this.setState({\n                errorMessage: _context8.t0.message\n              });\n\n              _this.setState({\n                error: true\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 24:\n              _context8.next = 29;\n              break;\n\n            case 26:\n              _this.setState({\n                errorMessage: \"Required Field(s) Empty or Invalid Input\"\n              });\n\n              _this.setState({\n                error: true\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 29:\n              _this.setState({\n                loading: false\n              });\n\n            case 30:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, [[2, 18]], Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"collectEther\", function _callee9() {\n      var account, profileAddress, logTransaction;\n      return _regeneratorRuntime.async(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              });\n\n              _context9.prev = 1;\n              account = _this.state.account;\n              _context9.next = 5;\n              return _regeneratorRuntime.awrap(factory.methods.getProfile(account).call());\n\n            case 5:\n              profileAddress = _context9.sent;\n              logTransaction = logging(\"Collect Ether from exchange of EQT(s)\");\n              _context9.next = 9;\n              return _regeneratorRuntime.awrap(EthQuestionTokenSale.methods.endSale(EthQuestionToken._address, profileAddress, logTransaction).send({\n                from: account,\n                gasPrice: '0'\n              }));\n\n            case 9:\n              Router.pushRoute('/admin'); // Automatic redirect the user.\n\n              _context9.next = 18;\n              break;\n\n            case 12:\n              _context9.prev = 12;\n              _context9.t0 = _context9[\"catch\"](1);\n\n              if (_context9.t0.message == \"Returned error: authentication needed: password or unlock\") {\n                _this.setState({\n                  timeout: true\n                });\n              }\n\n              _this.setState({\n                errorMessage: _context9.t0.message\n              });\n\n              _this.setState({\n                error: true\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 18:\n              _this.setState({\n                loading: false\n              });\n\n            case 19:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, null, [[1, 12]], Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"changeTokenPrice\", function _callee10() {\n      var account, profileAddress, logTransaction;\n      return _regeneratorRuntime.async(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              });\n\n              if (!checkRewardField(_this.state.newTokenPrice)) {\n                _context10.next = 21;\n                break;\n              }\n\n              _context10.prev = 2;\n              account = _this.state.account;\n              _context10.next = 6;\n              return _regeneratorRuntime.awrap(factory.methods.getProfile(account).call());\n\n            case 6:\n              profileAddress = _context10.sent;\n              logTransaction = logging(\"Changed Token Price to \" + _this.state.newTokenPrice + \" wei per EQT.\");\n              _context10.next = 10;\n              return _regeneratorRuntime.awrap(EthQuestionTokenSale.methods.changeTokenPrice(_this.state.newTokenPrice, profileAddress, logTransaction).send({\n                from: account,\n                gasPrice: '0'\n              }));\n\n            case 10:\n              Router.pushRoute('/admin'); // Automatic redirect the user.\n\n              _context10.next = 19;\n              break;\n\n            case 13:\n              _context10.prev = 13;\n              _context10.t0 = _context10[\"catch\"](2);\n\n              if (_context10.t0.message == \"Returned error: authentication needed: password or unlock\") {\n                _this.setState({\n                  timeout: true\n                });\n              }\n\n              _this.setState({\n                errorMessage: _context10.t0.message\n              });\n\n              _this.setState({\n                error: true\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 19:\n              _context10.next = 24;\n              break;\n\n            case 21:\n              _this.setState({\n                errorMessage: \"Required Field(s) Empty or Invalid Input\"\n              });\n\n              _this.setState({\n                error: true\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 24:\n              _this.setState({\n                loading: false\n              });\n\n            case 25:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, null, [[2, 13]], Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleUserTableVisibility\", function () {\n      return _this.setState(function (prevState) {\n        return {\n          userVisible: !prevState.userVisible\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleQuestionTableVisibility\", function () {\n      return _this.setState(function (prevState) {\n        return {\n          questionVisible: !prevState.questionVisible\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleTokenManagementVisibility\", function () {\n      return _this.setState(function (prevState) {\n        return {\n          tokenManagementVisible: !prevState.tokenManagementVisible\n        };\n      });\n    });\n\n    _this.state = {\n      account: null,\n      error: false,\n      loading: false,\n      loadingResource: true,\n      timeout: false,\n      deployedQuestionsCount: null,\n      deployedQuestions: [],\n      ethWalletEmailAddressBinding: [],\n      questionAddressTitleBinding: [],\n      tokenPrice: null,\n      tokenBalance: null,\n      etherBalance: null,\n      errorMessage: '',\n      accountType: null,\n      userVisible: false,\n      questionOptions: [],\n      questionNumber: null,\n      questionVisible: false,\n      newTokenPrice: '',\n      topUpAmount: '',\n      tokenManagementVisible: false\n    };\n    return _this;\n  }\n\n  _createClass(AdminPage, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      return _regeneratorRuntime.async(function componentDidUpdate$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              if (this.props != prevProps) {\n                this.fetchData();\n              }\n\n            case 1:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var login, account, profileAddress, profile, accountType, questionOptions, i, question, summary;\n      return _regeneratorRuntime.async(function componentDidMount$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              if (!(typeof web3 === 'undefined')) {\n                _context12.next = 3;\n                break;\n              }\n\n              this.setState({\n                loading: false\n              });\n              return _context12.abrupt(\"return\");\n\n            case 3:\n              login = false;\n\n              if (!this.props.isLogin) {\n                _context12.next = 33;\n                break;\n              }\n\n              login = true; // Get Account Type\n\n              account = this.props.account;\n              _context12.next = 9;\n              return _regeneratorRuntime.awrap(factory.methods.getProfile(account).call());\n\n            case 9:\n              profileAddress = _context12.sent;\n              profile = Profile(profileAddress);\n              _context12.next = 13;\n              return _regeneratorRuntime.awrap(profile.methods.getAccountType().call());\n\n            case 13:\n              accountType = _context12.sent;\n              accountType == 0 ? accountType = \"Admin\" : accountType = \"User\";\n\n              if (accountType != \"Admin\") {\n                login = false;\n              }\n\n              _context12.next = 18;\n              return _regeneratorRuntime.awrap(this.fetchData());\n\n            case 18:\n              // Get Question Deployed\n              questionOptions = [];\n              i = 0;\n\n            case 20:\n              if (!(i < this.state.deployedQuestionsCount)) {\n                _context12.next = 29;\n                break;\n              }\n\n              question = Question(this.state.deployedQuestions[i]);\n              _context12.next = 24;\n              return _regeneratorRuntime.awrap(question.methods.getSummary().call());\n\n            case 24:\n              summary = _context12.sent;\n              questionOptions.push({\n                key: i + 1,\n                text: summary[0],\n                value: i + 1\n              });\n\n            case 26:\n              i++;\n              _context12.next = 20;\n              break;\n\n            case 29:\n              this.setState({\n                questionOptions: questionOptions\n              });\n              this.setState({\n                account: account\n              });\n              this.setState({\n                login: login\n              });\n              this.setState({\n                accountType: accountType\n              });\n\n            case 33:\n              this.setState({\n                loadingResource: false\n              });\n\n            case 34:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"fetchData\",\n    value: function fetchData() {\n      var deployedQuestions, deployedQuestionsCount, questionAddressTitleBinding, i, question, summary, ethWallets, ethWalletEmailAddressBinding, _i, emailAddress, status, tokenPrice, tokenBalance, etherBalance;\n\n      return _regeneratorRuntime.async(function fetchData$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.next = 2;\n              return _regeneratorRuntime.awrap(factory.methods.getDeployedQuestions().call());\n\n            case 2:\n              deployedQuestions = _context13.sent;\n              deployedQuestionsCount = deployedQuestions.length;\n              questionAddressTitleBinding = [];\n              i = 0;\n\n            case 6:\n              if (!(i < deployedQuestionsCount)) {\n                _context13.next = 15;\n                break;\n              }\n\n              question = Question(deployedQuestions[i]);\n              _context13.next = 10;\n              return _regeneratorRuntime.awrap(question.methods.getSummary().call());\n\n            case 10:\n              summary = _context13.sent;\n              questionAddressTitleBinding.push({\n                questionAddress: deployedQuestions[i],\n                title: summary[0],\n                flagged: summary[9]\n              });\n\n            case 12:\n              i++;\n              _context13.next = 6;\n              break;\n\n            case 15:\n              _context13.next = 17;\n              return _regeneratorRuntime.awrap(factory.methods.getEthWallets().call());\n\n            case 17:\n              ethWallets = _context13.sent;\n              ethWalletEmailAddressBinding = [];\n              _i = 0;\n\n            case 20:\n              if (!(_i < ethWallets.length)) {\n                _context13.next = 31;\n                break;\n              }\n\n              _context13.next = 23;\n              return _regeneratorRuntime.awrap(credentials.methods.getBinding(ethWallets[_i]).call());\n\n            case 23:\n              emailAddress = _context13.sent;\n              _context13.next = 26;\n              return _regeneratorRuntime.awrap(credentials.methods.emailNotBlackList(emailAddress).call());\n\n            case 26:\n              status = _context13.sent;\n              ethWalletEmailAddressBinding.push({\n                ethWallet: ethWallets[_i],\n                emailAddress: emailAddress,\n                status: status\n              });\n\n            case 28:\n              _i++;\n              _context13.next = 20;\n              break;\n\n            case 31:\n              _context13.next = 33;\n              return _regeneratorRuntime.awrap(EthQuestionTokenSale.methods.getTokenPrice().call());\n\n            case 33:\n              tokenPrice = _context13.sent;\n              _context13.next = 36;\n              return _regeneratorRuntime.awrap(EthQuestionToken.methods.balanceOf(EthQuestionTokenSale._address).call());\n\n            case 36:\n              tokenBalance = _context13.sent;\n              _context13.next = 39;\n              return _regeneratorRuntime.awrap(EthQuestionTokenSale.methods.getEtherBalance().call());\n\n            case 39:\n              etherBalance = _context13.sent;\n              this.setState({\n                deployedQuestionsCount: deployedQuestionsCount,\n                deployedQuestions: deployedQuestions,\n                ethWalletEmailAddressBinding: ethWalletEmailAddressBinding,\n                questionAddressTitleBinding: questionAddressTitleBinding,\n                tokenPrice: tokenPrice,\n                tokenBalance: tokenBalance,\n                etherBalance: etherBalance\n              });\n\n            case 41:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"renderExport\",\n    value: function renderExport() {\n      var _this2 = this;\n\n      return __jsx(React.Fragment, null, __jsx(Segment, {\n        raised: true,\n        textAlign: \"left\"\n      }, __jsx(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"Exporting Questions & Answers As PDF\")), __jsx(Divider, {\n        hidden: true\n      }), __jsx(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, \"Select the question to export the question and it's corresponding answers\"), __jsx(Dropdown, {\n        clearable: true,\n        options: this.state.questionOptions,\n        selection: true,\n        placeholder: \"Select the question to export\",\n        value: this.state.questionNumber,\n        onChange: function onChange(e, _ref) {\n          var value = _ref.value;\n          return _this2.setState({\n            questionNumber: value\n          });\n        }\n      }), __jsx(Button, {\n        icon: true,\n        labelPosition: \"left\",\n        color: \"red\",\n        onClick: this[\"export\"],\n        style: {\n          left: \"20px\"\n        }\n      }, __jsx(Icon, {\n        name: \"download\"\n      }), \"Export As PDF\"), __jsx(Divider, {\n        hidden: true\n      }), __jsx(Segment, {\n        raised: true,\n        textAlign: \"left\"\n      }, __jsx(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"Exporting Feedback\")), __jsx(Button, {\n        icon: true,\n        labelPosition: \"left\",\n        color: \"red\",\n        onClick: this.exportFeedback,\n        style: {\n          left: \"20px\"\n        }\n      }, __jsx(Icon, {\n        name: \"download\"\n      }), \"Export As PDF\"));\n    }\n  }, {\n    key: \"renderEQTSettings\",\n    value: function renderEQTSettings() {\n      var _this3 = this;\n\n      return __jsx(React.Fragment, null, __jsx(Segment, {\n        raised: true,\n        textAlign: \"center\"\n      }, __jsx(\"b\", {\n        style: {\n          fontSize: \"20px\"\n        }\n      }, \"EthQuestionTokens (EQT) Exchange Settings\"), __jsx(Popup, {\n        trigger: __jsx(Button, {\n          icon: this.state.tokenManagementVisible ? \"minus\" : \"plus\",\n          onClick: this.toggleTokenManagementVisibility,\n          floated: \"right\",\n          size: \"mini\"\n        }),\n        content: \"Click to expand/close\",\n        inverted: true\n      })), __jsx(Transition, {\n        visible: this.state.tokenManagementVisible,\n        animation: \"scale\",\n        duration: 500\n      }, __jsx(Grid, {\n        container: true\n      }, __jsx(Grid.Row, null, __jsx(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, \"Balance Available For Exchange: \", __jsx(\"b\", null, this.state.tokenBalance * 1e-4, \" EQT(s)\"))), __jsx(Grid.Row, null, __jsx(Form, {\n        error: !!this.state.errorMessage,\n        style: {\n          marginTop: '10px'\n        }\n      }, __jsx(Form.Field, {\n        required: true\n      }, __jsx(\"label\", null, \"Top Up Amount\"), __jsx(Input, {\n        label: \"EQT(s)\",\n        labelPosition: \"right\",\n        placeholder: \"Enter EQT Value\",\n        value: this.state.topUpAmount,\n        onChange: function onChange(event) {\n          return _this3.setState({\n            topUpAmount: event.target.value\n          });\n        }\n      })))), __jsx(Grid.Row, null, __jsx(Button, {\n        icon: true,\n        labelPosition: \"left\",\n        color: \"red\",\n        onClick: this.topUp\n      }, __jsx(Icon, {\n        name: \"dollar sign\"\n      }), \"Top Up Balance\")), __jsx(Grid.Row, null, __jsx(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, \"Ether Collected From Exchange: \", __jsx(\"b\", null, this.state.etherBalance * 1e-18, \" Ether(s)\"))), __jsx(Grid.Row, null, __jsx(Button, {\n        icon: true,\n        labelPosition: \"left\",\n        color: \"red\",\n        onClick: this.collectEther\n      }, __jsx(Icon, {\n        name: \"ethereum\"\n      }), \"Collect Ether\")), __jsx(Grid.Row, null, __jsx(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, \"Current Token Price: \", __jsx(\"b\", null, this.state.tokenPrice * 1e-18, \" Ether(s)\"))), __jsx(Grid.Row, null, __jsx(Form, {\n        error: !!this.state.errorMessage,\n        style: {\n          marginTop: '10px'\n        }\n      }, __jsx(Form.Field, {\n        required: true\n      }, __jsx(\"label\", null, \"Token Price\"), __jsx(Input, {\n        label: \"Wei\",\n        labelPosition: \"right\",\n        placeholder: \"New Token Price\",\n        value: this.state.newTokenPrice,\n        onChange: function onChange(event) {\n          return _this3.setState({\n            newTokenPrice: event.target.value\n          });\n        }\n      })))), __jsx(Grid.Row, null, __jsx(Button, {\n        icon: true,\n        labelPosition: \"left\",\n        color: \"red\",\n        onClick: this.changeTokenPrice\n      }, __jsx(Icon, {\n        name: \"ethereum\"\n      }), \"Change Token Price\")))), __jsx(Divider, {\n        hidden: true\n      }));\n    }\n  }, {\n    key: \"renderUserManagement\",\n    value: function renderUserManagement() {\n      return __jsx(React.Fragment, null, __jsx(Segment, {\n        raised: true,\n        textAlign: \"center\"\n      }, __jsx(\"b\", {\n        style: {\n          fontSize: \"20px\"\n        }\n      }, \"Users Management\"), __jsx(Popup, {\n        trigger: __jsx(Button, {\n          icon: this.state.userVisible ? \"minus\" : \"plus\",\n          onClick: this.toggleUserTableVisibility,\n          floated: \"right\",\n          size: \"mini\"\n        }),\n        content: \"Click to expand/close\",\n        inverted: true\n      })), __jsx(Divider, {\n        hidden: true\n      }), __jsx(Transition, {\n        visible: this.state.userVisible,\n        animation: \"scale\",\n        duration: 500\n      }, __jsx(Segment, null, __jsx(Header, null, __jsx(Icon, {\n        name: \"user\",\n        circular: true\n      }), \"Registered Users\"), __jsx(Table, {\n        compact: true,\n        celled: true,\n        stackable: true\n      }, __jsx(Table.Header, {\n        fullWidth: true\n      }, __jsx(Table.Row, null, __jsx(Table.HeaderCell, {\n        width: 2\n      }, \"Ethereum Wallet\"), __jsx(Table.HeaderCell, {\n        width: 3\n      }, \"Email\"), __jsx(Table.HeaderCell, {\n        width: 2\n      }, \"Status\"), __jsx(Table.HeaderCell, {\n        width: 2\n      }, \"Blacklist\"), __jsx(Table.HeaderCell, {\n        width: 2\n      }, \"Dispense Tokens\"))), __jsx(Table.Body, null, this.getUserTableData()), __jsx(Table.Footer, {\n        fullWidth: true\n      }, __jsx(Table.Row, null, __jsx(Table.HeaderCell, {\n        colSpan: 5\n      })))))), __jsx(Divider, {\n        hidden: true\n      }), __jsx(Segment, {\n        raised: true,\n        textAlign: \"center\"\n      }, __jsx(\"b\", {\n        style: {\n          fontSize: \"20px\"\n        }\n      }, \"Removing Question\"), __jsx(Popup, {\n        trigger: __jsx(Button, {\n          icon: this.state.questionVisible ? \"minus\" : \"plus\",\n          onClick: this.toggleQuestionTableVisibility,\n          floated: \"right\",\n          size: \"mini\"\n        }),\n        content: \"Click to expand/close\",\n        inverted: true\n      })));\n    }\n  }, {\n    key: \"renderQuestionSettings\",\n    value: function renderQuestionSettings() {\n      return __jsx(React.Fragment, null, __jsx(Transition, {\n        visible: this.state.questionVisible,\n        animation: \"scale\",\n        duration: 500\n      }, __jsx(Segment, null, __jsx(Header, null, __jsx(Icon, {\n        name: \"question circle\",\n        circular: true\n      }), \"Questions Posted\"), __jsx(Table, {\n        compact: true,\n        celled: true,\n        stackable: true\n      }, __jsx(Table.Header, {\n        fullWidth: true\n      }, __jsx(Table.Row, null, __jsx(Table.HeaderCell, {\n        width: 2\n      }, \"Question Address\"), __jsx(Table.HeaderCell, {\n        width: 3\n      }, \"Title\"), __jsx(Table.HeaderCell, {\n        width: 2\n      }, \"Status\"), __jsx(Table.HeaderCell, {\n        width: 2\n      }, \"Actions\"))), __jsx(Table.Body, null, this.getQuestionTableData()), __jsx(Table.Footer, {\n        fullWidth: true\n      }, __jsx(Table.Row, null, __jsx(Table.HeaderCell, {\n        colSpan: 5\n      })))))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.login) {\n        return __jsx(Layout, {\n          accountType: this.state.accountType,\n          page: \"Admin\"\n        }, __jsx(Container, null, __jsx(Divider, {\n          hidden: true\n        }), this.renderExport(), this.renderEQTSettings(), __jsx(Message, {\n          error: true,\n          header: \"Oops!\",\n          content: this.state.errorMessage,\n          hidden: !this.state.error\n        }), this.renderUserManagement(), __jsx(Divider, {\n          hidden: true\n        }), this.renderQuestionSettings(), __jsx(Divider, {\n          hidden: true\n        }), __jsx(LoadingModal, {\n          trigger: this.state.loading,\n          title: 'Performing Admin Actions',\n          content: \"Please wait patiently as the system performs the action selected. This process might take awhile.\",\n          loader: \"Loading\"\n        })), __jsx(TimeOutModal, {\n          timeout: this.state.timeout\n        }));\n      } else {\n        return __jsx(Layout, {\n          accountType: this.state.accountType\n        }, __jsx(AccountIssueModal, {\n          loading: this.state.loadingResource,\n          login: this.state.login\n        }));\n      }\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      return _regeneratorRuntime.async(function getInitialProps$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              return _context14.abrupt(\"return\", {\n                isLogin: cookies(props).login || '',\n                account: cookies(props).wallet || ''\n              });\n\n            case 1:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return AdminPage;\n}(Component);\n\nexport default AdminPage;","map":null,"metadata":{},"sourceType":"module"}