{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport _ from 'lodash';\nimport { Segment, Container, Divider, Header, Modal, Button, Loader, Icon, Table } from 'semantic-ui-react';\nimport Layout from '../components/Layout';\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\nimport Profile from '../ethereum/profile';\nimport cookies from 'next-cookies';\n\nclass LeaderboardPage extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleSort\", clickedColumn => () => {\n      const {\n        column,\n        leaderboardData,\n        direction\n      } = this.state;\n\n      if (column !== clickedColumn) {\n        this.setState({\n          column: clickedColumn,\n          leaderboardData: _.sortBy(leaderboardData, [clickedColumn]),\n          direction: 'ascending'\n        });\n        return;\n      }\n\n      this.setState({\n        leaderboardData: leaderboardData.reverse(),\n        direction: direction === 'ascending' ? 'descending' : 'ascending'\n      });\n    });\n\n    this.state = {\n      login: false,\n      loading: true,\n      accountType: null,\n      column: null,\n      direction: null,\n      leaderboardData: []\n    };\n  }\n\n  static async getInitialProps(props) {\n    return {\n      isLogin: cookies(props).login || '',\n      account: cookies(props).wallet || ''\n    };\n  }\n\n  async componentDidMount() {\n    if (typeof web3 === 'undefined') {\n      this.setState({\n        loading: false\n      });\n      return;\n    }\n\n    let login = false;\n\n    if (this.props.isLogin) {\n      login = true; // Get Account Type\n\n      let profileAddress = await factory.methods.getProfile(this.props.account).call();\n      let profile = Profile(profileAddress);\n      let accountType = await profile.methods.getAccountType().call();\n      accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"; // Retireve an array of addresses of ethWallets registered\n\n      let ethWallet = await factory.methods.getEthWallets().call();\n      let accountPointMapping = [];\n\n      for (let i = 0; i < ethWallet.length; i++) {\n        profileAddress = await factory.methods.getProfile(ethWallet[i]).call();\n        profile = Profile(profileAddress);\n        let points = await profile.methods.getPoints().call();\n        accountPointMapping.push({\n          account: ethWallet[i],\n          points: parseInt(points)\n        });\n      } // Set the states required for the Leaderboard and ensure it is descending by default\n\n\n      this.setState({\n        leaderboardData: _.sortBy(accountPointMapping, ['points']).reverse()\n      });\n      this.setState({\n        login: login\n      });\n      this.setState({\n        accountType: accountType\n      });\n    }\n\n    this.setState({\n      loading: false\n    });\n  } // Function to handle the sorting of leaderboard\n\n\n  renderLeaderBoard() {\n    const {\n      column,\n      data,\n      direction\n    } = this.state;\n    return __jsx(Container, null, __jsx(Table, {\n      basic: \"very\",\n      celled: true,\n      sortable: true\n    }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, {\n      textAlign: \"center\"\n    }, \"Account\"), __jsx(Table.HeaderCell, {\n      textAlign: \"center\",\n      sorted: column === 'points' ? direction : null,\n      onClick: this.handleSort('points')\n    }, \"Point(s)\"))), __jsx(Table.Body, null, this.renderUserList())));\n  }\n\n  renderUserList() {\n    return this.state.leaderboardData.map((item, index) => {\n      return __jsx(Table.Row, {\n        key: index\n      }, __jsx(Table.Cell, {\n        textAlign: \"center\"\n      }, item.account), __jsx(Table.Cell, {\n        textAlign: \"center\"\n      }, item.points));\n    });\n  }\n\n  render() {\n    if (this.state.login) {\n      return __jsx(Layout, {\n        accountType: this.state.accountType,\n        page: 'Leaderboard'\n      }, __jsx(Container, null, __jsx(Divider, {\n        hidden: true\n      }), __jsx(Segment, {\n        raised: true,\n        textAlign: \"left\"\n      }, __jsx(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, __jsx(Icon, {\n        name: \"chess king\"\n      }), \"Current Leaderboard Standings\")), this.renderLeaderBoard(), __jsx(Divider, null), __jsx(\"p\", {\n        style: {\n          fontSize: '20px'\n        }\n      }, __jsx(Icon, {\n        name: \"question\"\n      }), \"How are points awarded?\"), __jsx(Divider, null), __jsx(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, __jsx(\"b\", null, \"When you ask a question:\"), \" 5 Points\"), __jsx(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, __jsx(\"b\", null, \"When you are rewarded for your answer:\"), \" 4 Points\"), __jsx(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, __jsx(\"b\", null, \"When you submit an answer:\"), \" 2 Points\"), __jsx(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, __jsx(\"b\", null, \"When the answer you approved gets awarded:\"), \" 2 Points\"), __jsx(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, __jsx(\"b\", null, \"When you approve an answer:\"), \" 1 Point\"), __jsx(Divider, null), __jsx(\"p\", {\n        style: {\n          fontSize: '20px'\n        }\n      }, __jsx(Icon, {\n        name: \"question\"\n      }), \"What can I do with my points?\"), __jsx(Divider, null), __jsx(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, \"Upon reaching \", __jsx(\"b\", null, \"100 points\"), \", you can exchange for \", __jsx(\"b\", null, \"5 EQTs\")), __jsx(Divider, null), __jsx(\"p\", {\n        style: {\n          fontSize: '20px'\n        }\n      }, __jsx(Icon, {\n        name: \"question\"\n      }), \"What is EthQuestionToken (EQT)\"), __jsx(Divider, null), __jsx(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, \"Cryptocurrency that is used within the Question Answering System and can be exchanged using Ether(s). Each user is given \", __jsx(\"b\", null, \"10 EQTs\"), \" upon signing up. User can be rewarded additional EQTs by providing answers with the highest approvals for each question.\")));\n    } else {\n      return __jsx(Layout, {\n        accountType: this.state.accountType\n      }, __jsx(AccountIssueModal, {\n        loading: this.state.loading,\n        login: this.state.login\n      }));\n    }\n  }\n\n}\n\nexport default LeaderboardPage;","map":null,"metadata":{},"sourceType":"module"}