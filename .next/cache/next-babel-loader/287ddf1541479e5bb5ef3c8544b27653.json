{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { Form, Button, Input, Message, Dropdown, Header, Icon, Segment, Container, TextArea, Divider, Label, Modal, Loader } from 'semantic-ui-react';\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport TimeOutModal from '../components/TimeOutModal';\nimport Layout from '../components/Layout';\nimport factory from '../ethereum/factory';\nimport Question from '../ethereum/question';\nimport Profile from '../ethereum/profile';\nimport web3 from '../ethereum/web3';\nimport EthQuestionToken from '../ethereum/token';\nimport credentials from '../ethereum/credentials';\nimport { Router } from '../routes';\nimport { getIpfsHash } from '../utils/ipfs';\nimport { logging, checkFieldEmpty, checkTimeField, checkRewardField, lowerCase } from '../utils/functions';\nimport cookies from 'next-cookies';\n\nvar NewQuestion = /*#__PURE__*/function (_Component) {\n  _inherits(NewQuestion, _Component);\n\n  var _super = _createSuper(NewQuestion);\n\n  function NewQuestion(props) {\n    var _this;\n\n    _classCallCheck(this, NewQuestion);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", function _callee() {\n      var account, logTransaction, address;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              }); // Ensures all fields are filled\n\n\n              if (!(checkFieldEmpty(_this.state.questionTitle) && checkFieldEmpty(_this.state.content) && checkRewardField(_this.state.reward) && checkTimeField(_this.state.maxDuration))) {\n                _context.next = 22;\n                break;\n              }\n\n              _context.prev = 2;\n              account = _this.props.account; // Logs the transactions\n\n              logTransaction = logging(\"Created New Question: \" + _this.state.questionTitle + \" [\" + _this.state.reward + \" EQT(s) as reward]\"); // Create new question\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(factory.methods.createQuestion(_this.state.questionTitle, _this.state.content, lowerCase(_this.state.tag), Number(_this.state.reward) * 10e3, parseFloat(_this.state.maxDuration) * 60 * 60, _this.state.fileHashes_array, _this.state.fileNames_array, logTransaction, EthQuestionToken._address).send({\n                from: account,\n                gasPrice: '0'\n              }));\n\n            case 7:\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(factory.methods.getLastDeployedQuestion().call());\n\n            case 9:\n              address = _context.sent;\n              _context.next = 12;\n              return _regeneratorRuntime.awrap(EthQuestionToken.methods.transfer(address, Number(_this.state.reward) * 10e3).send({\n                from: account,\n                gasPrice: '0'\n              }));\n\n            case 12:\n              Router.pushRoute('/home'); // Automatic redirect the user.\n\n              _context.next = 19;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](2);\n\n              if (_context.t0.message == \"Returned error: authentication needed: password or unlock\") {\n                _this.setState({\n                  loading: false\n                });\n\n                _this.setState({\n                  timeout: true\n                });\n              }\n\n              _this.setState({\n                errorMessage: _context.t0.message + \" Or check if you have sufficient EQT(s)\"\n              });\n\n            case 19:\n              _this.setState({\n                loading: false\n              });\n\n              _context.next = 24;\n              break;\n\n            case 22:\n              _this.setState({\n                errorMessage: \"Required Field(s) Empty or Invalid Input\"\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[2, 15]], Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFileSelected\", function _callee3() {\n      var reader, file, _this$state, files_array, fileNames_array, fileHashes_array;\n\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // Access JavaScript FileReader() method for conversion to buffer\n              reader = new FileReader();\n              file = _this.fileInput.files[0];\n\n              _this.setState({\n                fileLoading: true\n              });\n\n              if (file instanceof Blob) {\n                _this$state = _this.state, files_array = _this$state.files_array, fileNames_array = _this$state.fileNames_array, fileHashes_array = _this$state.fileHashes_array;\n                files_array.push(file);\n                fileNames_array.push(file.name);\n\n                _this.setState({\n                  files_array: files_array,\n                  fileNames_array: fileNames_array\n                });\n\n                console.log(\"fileNames_array: \", fileNames_array);\n\n                reader.onloadend = function _callee2() {\n                  var fileHash;\n                  return _regeneratorRuntime.async(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          _context2.next = 2;\n                          return _regeneratorRuntime.awrap(_this.setState({\n                            fileUrl: reader.result,\n                            fileLoading: true,\n                            buffer: Buffer.from(reader.result) // File is converted to a buffer for upload to IPFS\n\n                          }));\n\n                        case 2:\n                          if (!_this.state.buffer) {\n                            _context2.next = 8;\n                            break;\n                          }\n\n                          _context2.next = 5;\n                          return _regeneratorRuntime.awrap(getIpfsHash(file));\n\n                        case 5:\n                          _context2.t0 = _context2.sent;\n                          _context2.next = 9;\n                          break;\n\n                        case 8:\n                          _context2.t0 = '0';\n\n                        case 9:\n                          fileHash = _context2.t0;\n                          fileHashes_array.push(fileHash);\n\n                          _this.setState({\n                            fileHashes_array: fileHashes_array\n                          });\n\n                          console.log(\"fileHashes_array: \", fileHashes_array);\n\n                          _this.setState({\n                            fileLoading: false\n                          });\n\n                        case 14:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, null, null, null, Promise);\n                };\n\n                reader.readAsDataURL(file);\n              }\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFileRemoved\", function (file) {\n      var i = 0;\n      var _this$state2 = _this.state,\n          files_array = _this$state2.files_array,\n          fileHashes_array = _this$state2.fileHashes_array,\n          fileNames_array = _this$state2.fileNames_array;\n      console.log('file: ', file);\n\n      for (i = 0; i < files_array.length; i++) {\n        if (file === files_array[i]) {\n          files_array.splice(i, 1);\n          fileNames_array.splice(i, 1);\n          fileHashes_array.splice(i, 1);\n          break;\n        }\n      }\n\n      _this.setState({\n        files_array: files_array,\n        fileNames_array: fileNames_array,\n        fileHashes_array: fileHashes_array\n      });\n\n      console.log('fileNames_array', fileNames_array);\n      console.log(\"fileHashes_array: \", fileHashes_array);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleAddition\", function (e, _ref) {\n      var value = _ref.value;\n\n      _this.setState({\n        tagOptions: [{\n          text: value,\n          value: value\n        }].concat(_toConsumableArray(_this.state.tagOptions))\n      });\n    });\n\n    _this.state = {\n      questionTitle: '',\n      content: '',\n      tag: [],\n      tagOptions: [],\n      reward: '',\n      maxDuration: '',\n      errorMessage: '',\n      loading: false,\n      fileLoading: false,\n      buffer: null,\n      files_array: [],\n      fileHashes_array: [],\n      fileNames_array: [],\n      login: false,\n      resourceLoading: true,\n      timeout: false,\n      accountType: null\n    };\n    return _this;\n  }\n\n  _createClass(NewQuestion, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var login, profileAddress, profile, accountType, deployedQuestions, deployedQuestionsCount, tags, tagOptions, i, question, summary, _i;\n\n      return _regeneratorRuntime.async(function componentDidMount$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(typeof web3 === 'undefined')) {\n                _context4.next = 3;\n                break;\n              }\n\n              this.setState({\n                loading: false\n              });\n              return _context4.abrupt(\"return\");\n\n            case 3:\n              login = false;\n\n              if (!this.props.isLogin) {\n                _context4.next = 34;\n                break;\n              }\n\n              login = true; // Get Account Type\n\n              _context4.next = 8;\n              return _regeneratorRuntime.awrap(factory.methods.getProfile(this.props.account).call());\n\n            case 8:\n              profileAddress = _context4.sent;\n              profile = Profile(profileAddress);\n              _context4.next = 12;\n              return _regeneratorRuntime.awrap(profile.methods.getAccountType().call());\n\n            case 12:\n              accountType = _context4.sent;\n              accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"; // Retrieve previously used tags and ether balance\n\n              _context4.next = 16;\n              return _regeneratorRuntime.awrap(factory.methods.getDeployedQuestions().call());\n\n            case 16:\n              deployedQuestions = _context4.sent;\n              deployedQuestionsCount = deployedQuestions.length;\n              tags = [];\n              tagOptions = [];\n              i = 0;\n\n            case 21:\n              if (!(i < deployedQuestionsCount)) {\n                _context4.next = 30;\n                break;\n              }\n\n              question = Question(deployedQuestions[i]);\n              _context4.next = 25;\n              return _regeneratorRuntime.awrap(question.methods.getSummary().call());\n\n            case 25:\n              summary = _context4.sent;\n              tags = [].concat(_toConsumableArray(tags), _toConsumableArray(summary[8]));\n\n            case 27:\n              i++;\n              _context4.next = 21;\n              break;\n\n            case 30:\n              // Remove duplicated tags and select recently used tags\n              tags = _toConsumableArray(new Set(tags));\n              tags = tags.reverse().slice(0, 30);\n\n              for (_i = 0; _i < tags.length; _i++) {\n                tagOptions.push({\n                  key: _i,\n                  text: tags[_i],\n                  value: tags[_i]\n                });\n              }\n\n              this.setState({\n                login: login,\n                accountType: accountType,\n                tagOptions: tagOptions\n              });\n\n            case 34:\n              this.setState({\n                resourceLoading: false\n              });\n\n            case 35:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    } // Submit the question to be stored on the Ethereum Blockchain\n\n  }, {\n    key: \"renderFilesUpload\",\n    value: function renderFilesUpload(files) {\n      var _this2 = this;\n\n      var files_array = this.state.files_array;\n\n      if (this.state.files_array.length == 0) {\n        return __jsx(Segment, {\n          placeholder: true\n        }, __jsx(Header, {\n          icon: true\n        }, __jsx(Icon, {\n          name: \"images outline\"\n        }), \"No images are uploaded for this question\"), __jsx(\"input\", {\n          style: {\n            display: 'none'\n          },\n          type: \"file\",\n          onChange: function onChange() {\n            return _this2.onFileSelected();\n          },\n          ref: function ref(fileInput) {\n            return _this2.fileInput = fileInput;\n          }\n        }), __jsx(Button, {\n          primary: true,\n          onClick: function onClick() {\n            return _this2.fileInput.click();\n          },\n          loading: this.state.fileLoading\n        }, \"Upload Image\"));\n      } else {\n        return __jsx(Segment, {\n          placeholder: true\n        }, __jsx(\"center\", null, __jsx(\"div\", {\n          style: {\n            marginBottom: '20px'\n          }\n        }, files), __jsx(\"input\", {\n          style: {\n            display: 'none'\n          },\n          type: \"file\",\n          onChange: function onChange() {\n            return _this2.onFileSelected();\n          },\n          ref: function ref(fileInput) {\n            return _this2.fileInput = fileInput;\n          }\n        }), __jsx(Button, {\n          primary: true,\n          onClick: function onClick() {\n            return _this2.fileInput.click();\n          },\n          loading: this.state.fileLoading\n        }, \"Upload Files\")));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      if (this.state.login) {\n        var files_array = this.state.files_array;\n        var elmFiles = null;\n\n        if (files_array !== null) {\n          elmFiles = files_array.map(function (item, index) {\n            return __jsx(Label, {\n              as: \"a\",\n              key: index,\n              size: \"big\"\n            }, item.name, __jsx(Icon, {\n              name: \"delete\",\n              onClick: function onClick() {\n                return _this3.onFileRemoved(item);\n              }\n            }));\n          });\n        }\n\n        return __jsx(Layout, {\n          accountType: this.state.accountType,\n          page: \"New\"\n        }, __jsx(Container, null, __jsx(Divider, {\n          hidden: true\n        }), __jsx(Segment, {\n          textAlign: \"center\",\n          as: \"h3\"\n        }, \"Creating Of New Question\"), __jsx(Form, {\n          error: !!this.state.errorMessage,\n          style: {\n            marginTop: '10px'\n          }\n        }, __jsx(Form.Field, {\n          required: true\n        }, __jsx(\"label\", null, \"Question Title\"), __jsx(Input, {\n          placeholder: \"Enter Title\",\n          value: this.state.questionTitle,\n          onChange: function onChange(event) {\n            return _this3.setState({\n              questionTitle: event.target.value\n            });\n          }\n        })), __jsx(Form.Field, {\n          required: true\n        }, __jsx(\"label\", null, \"Question Description (To include math questions, delimit the latex format with $$)\"), __jsx(Label, null, \"Example: This is my equation: $$1 \\\\triangleright 1 \\\\bigcirc  \\\\bigcirc $$\"), __jsx(\"a\", {\n          style: {\n            display: \"table-cell\"\n          },\n          href: \"https://www.codecogs.com/latex/eqneditor.php\",\n          target: \"_blank\"\n        }, \"Link to Supported Latex Editor\"), __jsx(TextArea, {\n          placeholder: \"Enter Description\",\n          value: this.state.content,\n          onChange: function onChange(event) {\n            return _this3.setState({\n              content: event.target.value\n            });\n          }\n        })), __jsx(Form.Field, null, __jsx(\"label\", null, \"Tags\"), __jsx(Dropdown, {\n          clearable: true,\n          options: this.state.tagOptions,\n          selection: true,\n          multiple: true,\n          allowAdditions: true,\n          search: true,\n          placeholder: \"Select from recently used tags or create your own tags\",\n          value: this.state.tag,\n          onChange: function onChange(e, _ref2) {\n            var value = _ref2.value;\n            return _this3.setState({\n              tag: value\n            });\n          },\n          onAddItem: this.handleAddition\n        })), __jsx(Form.Field, {\n          required: true\n        }, __jsx(\"label\", null, \"EQT(s)\"), __jsx(Input, {\n          label: \"EQT(s)\",\n          labelPosition: \"right\",\n          placeholder: \"Enter your value of reward\",\n          value: this.state.reward,\n          onChange: function onChange(event) {\n            return _this3.setState({\n              reward: event.target.value\n            });\n          }\n        })), __jsx(Form.Field, {\n          required: true\n        }, __jsx(\"label\", null, \"Maximum Duration\"), __jsx(Input, {\n          label: \"hour(s)\",\n          labelPosition: \"right\",\n          placeholder: \"Enter the duration for the question to be valid\",\n          value: this.state.maxDuration,\n          onChange: function onChange(event) {\n            return _this3.setState({\n              maxDuration: event.target.value\n            });\n          }\n        })), __jsx(Form.Field, null, this.renderFilesUpload(elmFiles)), __jsx(Message, {\n          error: true,\n          header: \"Oops!\",\n          content: this.state.errorMessage\n        }), __jsx(Modal, {\n          open: this.state.loading,\n          trigger: __jsx(Button, {\n            primary: true,\n            onClick: this.onSubmit\n          }, \"Submit Question\"),\n          basic: true,\n          size: \"small\"\n        }, __jsx(Header, {\n          content: \"Posting New Question\"\n        }), __jsx(Modal.Content, null, __jsx(\"p\", null, \"System is submitting your question to the blockchain. Upon successful submission, you will be redirected to the Home Page. This process might take awhile.\"), __jsx(Loader, {\n          active: true,\n          inline: \"centered\"\n        }, \"Loading\"))))), __jsx(TimeOutModal, {\n          timeout: this.state.timeout\n        }));\n      } else {\n        return __jsx(Layout, {\n          accountType: this.state.accountType\n        }, __jsx(AccountIssueModal, {\n          loading: this.state.resourceLoading,\n          login: this.state.login\n        }));\n      }\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      return _regeneratorRuntime.async(function getInitialProps$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", {\n                isLogin: cookies(props).login || '',\n                account: cookies(props).wallet || ''\n              });\n\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return NewQuestion;\n}(Component);\n\nexport default NewQuestion;","map":null,"metadata":{},"sourceType":"module"}