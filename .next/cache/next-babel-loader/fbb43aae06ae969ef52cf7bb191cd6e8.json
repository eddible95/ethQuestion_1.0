{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Button, Card, Segment, Container, List, Transition, Popup, Modal, Header, Icon, Divider, Form, Input, Message } from \"semantic-ui-react\";\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport TimeOutModal from '../components/TimeOutModal';\nimport web3 from '../ethereum/web3';\nimport Layout from '../components/Layout';\nimport factory from '../ethereum/factory';\nimport credentials from '../ethereum/credentials';\nimport EthQuestionToken from '../ethereum/token';\nimport EthQuestionTokenSale from '../ethereum/tokenSale';\nimport Profile from '../ethereum/profile';\nimport { Router } from '../routes';\nimport { checkRewardField, logging } from '../utils/functions';\nimport cookies from 'next-cookies';\n\nclass userProfile extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"toggleVisibility\", () => this.setState(prevState => ({\n      visible: !prevState.visible\n    })));\n\n    _defineProperty(this, \"topUp\", async () => {\n      this.setState({\n        toppingUp: true,\n        errorMessage: ''\n      });\n\n      if (checkRewardField(this.state.topUpAmount)) {\n        try {\n          const account = this.state.account;\n          const profileAddress = await factory.methods.getProfile(account).call();\n          let logTransaction = logging(\"Top Up: \" + this.state.topUpAmount + \" EQT(s)\");\n          await EthQuestionTokenSale.methods.buyTokens(this.state.topUpAmount * 1e4, EthQuestionToken._address, profileAddress, logTransaction).send({\n            from: account,\n            value: this.state.topUpAmount * 1e4 * this.state.tokenPrice,\n            gasPrice: '0'\n          });\n          Router.pushRoute('/home'); // Automatic redirect the user.\n        } catch (err) {\n          if (err.message == \"Returned error: authentication needed: password or unlock\") {\n            this.setState({\n              timeout: true\n            });\n          }\n\n          this.setState({\n            errorMessage: err.message\n          });\n          this.setState({\n            error: true\n          });\n          this.setState({\n            toppingUp: false\n          });\n        }\n      } else {\n        this.setState({\n          errorMessage: \"Required Field(s) Empty or Invalid Input\"\n        });\n        this.setState({\n          error: true\n        });\n        this.setState({\n          toppingUp: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"exchange\", async () => {\n      this.setState({\n        exchanging: true,\n        errorMessage: ''\n      });\n\n      try {\n        const account = this.state.account;\n        const profileAddress = await factory.methods.getProfile(account).call();\n        let logTransaction = logging(\"Exchange: 100 Points for 5 EQT(s)\");\n        await EthQuestionTokenSale.methods.exchangeTokens(EthQuestionToken._address, profileAddress, logTransaction).send({\n          from: account,\n          gasPrice: '0'\n        });\n        Router.pushRoute('/home'); // Automatic redirect the user.\n      } catch (err) {\n        if (err.message == \"Returned error: authentication needed: password or unlock\") {\n          this.setState({\n            timeout: true\n          });\n        } else {\n          this.setState({\n            errorMessage: err.message + \" Insufficient Points\"\n          });\n        }\n\n        this.setState({\n          error: true\n        });\n        this.setState({\n          exchanging: false\n        });\n      }\n    });\n\n    this.state = {\n      visible: false,\n      login: false,\n      loading: true,\n      timeout: false,\n      accountType: null,\n      account: null,\n      token: null,\n      emailAddress: null,\n      points: null,\n      transactions: [],\n      topUpModalOpen: false,\n      topUp: false,\n      topUpAmount: '',\n      error: false,\n      errorMessage: '',\n      tokenPrice: '',\n      exchanging: false\n    };\n  }\n\n  static async getInitialProps(props) {\n    return {\n      isLogin: cookies(props).login || '',\n      account: cookies(props).wallet || ''\n    };\n  }\n\n  async componentDidMount() {\n    if (typeof web3 === 'undefined') {\n      this.setState({\n        loading: false\n      });\n      return;\n    }\n\n    let login = false;\n\n    if (this.props.isLogin) {\n      login = true; // Get profile data\n\n      const account = this.props.account;\n      const profileAddress = await factory.methods.getProfile(account).call();\n      const profile = Profile(profileAddress);\n      const emailAddress = await credentials.methods.getBinding(account).call();\n      const token = ((await EthQuestionToken.methods.balanceOf(account).call()) * 1e-4).toFixed(4);\n      const etherBalance = await web3.eth.getBalance(account);\n      const points = await profile.methods.getPoints().call();\n      const transactions = await profile.methods.getTransactions().call();\n      const tokenPrice = await EthQuestionTokenSale.methods.getTokenPrice().call(); // Get Account Type\n\n      let accountType = await profile.methods.getAccountType().call();\n      accountType == 0 ? accountType = \"Admin\" : accountType = \"User\";\n      this.setState({\n        accountType: accountType,\n        account: account,\n        token: token,\n        etherBalance: etherBalance,\n        emailAddress: emailAddress,\n        points: points,\n        transactions: transactions,\n        login: true,\n        tokenPrice: tokenPrice\n      });\n    }\n\n    this.setState({\n      loading: false\n    });\n  }\n\n  renderTransactions() {\n    const transactions = this.state.transactions;\n    return transactions.map((transaction, index) => {\n      return __jsx(List.Item, {\n        key: index\n      }, __jsx(List.Icon, {\n        name: \"calendar outline\",\n        size: \"large\",\n        verticalAlign: \"middle\"\n      }), __jsx(List.Content, null, transaction));\n    });\n  }\n\n  render() {\n    if (this.state.login) {\n      return __jsx(Layout, {\n        accountType: this.state.accountType,\n        page: \"Profile\"\n      }, __jsx(Divider, {\n        hidden: true\n      }), __jsx(Container, null, __jsx(Card, {\n        color: \"red\",\n        centered: true,\n        fluid: true\n      }, __jsx(Card.Content, null, __jsx(Header, {\n        as: \"h1\",\n        textAlign: \"center\"\n      }, __jsx(Icon, {\n        name: \"user\",\n        circular: true\n      })), __jsx(Card.Header, {\n        textAlign: \"center\"\n      }, \"Account Details:\", __jsx(\"div\", {\n        style: {\n          color: \"red\",\n          fontSize: \"small\",\n          wordWrap: \"break-word\"\n        }\n      }, this.state.account)), __jsx(Card.Meta, {\n        textAlign: \"center\"\n      }, __jsx(\"b\", null, this.state.accountType)), __jsx(Card.Description, {\n        textAlign: \"center\"\n      }, __jsx(\"b\", null, \"EQT Balance:\"), \" \", this.state.token, __jsx(Popup, {\n        trigger: __jsx(Button, {\n          icon: \"ethereum\",\n          onClick: () => {\n            this.setState({\n              topUpModalOpen: true,\n              topUpAmount: '',\n              error: false,\n              errorMessage: ''\n            });\n          },\n          floated: \"right\",\n          size: \"mini\",\n          color: \"green\"\n        }),\n        content: \"Top Up EQT(s)\",\n        inverted: true\n      })), __jsx(Card.Description, {\n        textAlign: \"center\"\n      }, __jsx(\"b\", null, \"Ether Balance:\"), \" \", this.state.etherBalance), __jsx(Card.Description, {\n        textAlign: \"center\"\n      }, __jsx(\"b\", null, \"Points Accumulated:\"), \" \", this.state.points), __jsx(Card.Description, {\n        textAlign: \"center\"\n      }, __jsx(\"b\", null, \"Valid Email Address:\"), \" \", this.state.emailAddress)))), __jsx(Divider, {\n        hidden: true\n      }), __jsx(Container, null, __jsx(Segment, {\n        textAlign: \"center\"\n      }, __jsx(\"b\", {\n        style: {\n          fontSize: \"20px\"\n        }\n      }, \"Transaction History\"), __jsx(Popup, {\n        trigger: __jsx(Button, {\n          icon: this.state.visible ? \"minus\" : \"plus\",\n          onClick: this.toggleVisibility,\n          floated: \"right\",\n          size: \"mini\"\n        }),\n        content: \"Click to expand/close\",\n        inverted: true\n      })), __jsx(Transition, {\n        visible: this.state.visible,\n        animation: \"scale\",\n        duration: 500\n      }, __jsx(List, {\n        divided: true,\n        size: \"huge\"\n      }, this.renderTransactions())), __jsx(Modal, {\n        open: this.state.topUpModalOpen,\n        size: \"small\"\n      }, __jsx(Header, {\n        icon: \"ethereum\",\n        content: \"Topping Up EQT(s)\"\n      }), __jsx(Modal.Content, null, __jsx(Form, {\n        error: !!this.state.errorMessage,\n        style: {\n          marginTop: '10px'\n        }\n      }, __jsx(Form.Field, {\n        required: true\n      }, __jsx(\"label\", null, \"Top Up Amount (1 EQT = \", this.state.tokenPrice * 1e-18, \" Ether)\"), __jsx(Input, {\n        label: \"EQT(s)\",\n        labelPosition: \"right\",\n        placeholder: \"Enter EQT Value\",\n        value: this.state.topUpAmount,\n        onChange: event => this.setState({\n          topUpAmount: event.target.value\n        })\n      }))), __jsx(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.errorMessage,\n        hidden: !this.state.error\n      })), __jsx(Modal.Actions, null, __jsx(Button, {\n        color: \"red\",\n        onClick: () => {\n          this.setState({\n            topUpModalOpen: false\n          });\n        }\n      }, __jsx(Icon, {\n        name: \"remove\"\n      }), \" Cancel\"), __jsx(Button, {\n        color: \"green\",\n        onClick: this.topUp,\n        loading: this.state.toppingUp\n      }, __jsx(Icon, {\n        name: \"checkmark\"\n      }), \" Top Up\"), __jsx(Button, {\n        color: \"green\",\n        onClick: this.exchange,\n        loading: this.state.exchanging\n      }, __jsx(Icon, {\n        name: \"exchange\"\n      }), \" Exchange With Points\")))), __jsx(TimeOutModal, {\n        timeout: this.state.timeout\n      }));\n    } else {\n      return __jsx(Layout, {\n        accountType: this.state.accountType\n      }, __jsx(AccountIssueModal, {\n        loading: this.state.loading,\n        login: this.state.login\n      }));\n    }\n  }\n\n}\n\nexport default userProfile;","map":null,"metadata":{},"sourceType":"module"}