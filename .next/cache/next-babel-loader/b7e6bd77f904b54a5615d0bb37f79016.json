{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Button, Form, Container, Divider, Input, Segment, Message, Icon, Modal, Header, Loader } from 'semantic-ui-react';\nimport LoginLayout from '../components/LoginLayout';\nimport web3 from '../ethereum/web3';\nimport Profile from '../ethereum/profile';\nimport factory from '../ethereum/factory';\nimport EthQuestionToken from '../ethereum/token';\nimport EthQuestionTokenSale from '../ethereum/tokenSale';\nimport credentials from '../ethereum/credentials';\nimport { Router } from '../routes';\nimport { validate, logging } from '../utils/functions';\n\nvar passwordHash = require('password-hash');\n\nclass RegisterPage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      emailAddress: '',\n      password: '',\n      loading: false,\n      showKeys: false,\n      errorMessage: ''\n    });\n\n    _defineProperty(this, \"onSubmit\", async () => {\n      this.setState({\n        loading: true,\n        errorMessage: ''\n      }); // Check for valid NTU Student Email Address, Existence of Email Address and EthWallet\n\n      try {\n        let validEmail = validate(this.state.emailAddress);\n        let emailNotExist = await credentials.methods.emailNotExist(this.state.emailAddress).call();\n\n        if (validEmail && !emailNotExist) {\n          if (this.state.emailAddress === \"admin\") {\n            const accounts = await web3.eth.getAccounts();\n            let hashedPassword = passwordHash.generate(this.state.password);\n            await factory.methods // Create Admin\n            .createAdmin(credentials._address, this.state.emailAddress, hashedPassword).send({\n              from: accounts[0],\n              gasPrice: \"0\"\n            });\n            document.cookie = `wallet=${accounts[0]}; path=/`;\n          } else {\n            // Create a new Profile\n            let wallet = await web3.eth.accounts.create();\n            let hashedPassword = passwordHash.generate(this.state.password);\n            await web3.eth.personal.importRawKey(wallet['privateKey'].slice(2), this.state.password);\n            await web3.eth.personal.unlockAccount(wallet['address'], this.state.password, 3600);\n            let logTransaction = logging(\"Credited 10 EQT(s) for first time User\");\n            await EthQuestionTokenSale.methods;\n            await factory.methods.createProfile(credentials._address, this.state.emailAddress, hashedPassword, EthQuestionToken._address, EthQuestionTokenSale._address, logTransaction).send({\n              from: wallet['address'],\n              gasPrice: \"0\"\n            });\n            document.cookie = `wallet=${wallet['address']}; path=/`;\n            this.setState({\n              publicKey: wallet['address'],\n              privateKey: wallet['privateKey']\n            });\n          }\n\n          document.cookie = `login=${true}; path=/`;\n          this.setState({\n            loading: false,\n            showKeys: true\n          });\n        } else {\n          this.setState({\n            errorMessage: \"Invalid Email Address or Email Address Already In Used\"\n          });\n          this.setState({\n            loading: false\n          });\n        }\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n        this.setState({\n          loading: false\n        });\n      }\n    });\n  }\n\n  async componentDidMount() {\n    // Delete any existing Cookies\n    document.cookie = `login=${false}; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT`;\n    document.cookie = `wallet=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT`;\n  }\n\n  renderForm() {\n    return __jsx(Form, {\n      error: !!this.state.errorMessage\n    }, __jsx(Segment, {\n      raised: true,\n      textAlign: \"center\"\n    }, \"This will create a password-protected account using your NTU email address and have it linked to cryptocurrency wallet created by the system.\"), __jsx(Form.Field, null, __jsx(\"label\", null, \"NTU Student Email Address\"), __jsx(Input, {\n      placeholder: \"example@e.ntu.edu.sg\",\n      value: this.state.emailAddress,\n      onChange: event => this.setState({\n        emailAddress: event.target.value\n      })\n    })), __jsx(Form.Field, null, __jsx(\"label\", null, \"Password\"), __jsx(Input, {\n      placeholder: \"Password\",\n      type: \"password\",\n      value: this.state.password,\n      onChange: event => this.setState({\n        password: event.target.value\n      })\n    })), __jsx(Message, {\n      error: true,\n      header: \"Oops!\",\n      content: this.state.errorMessage\n    }), __jsx(Modal, {\n      open: this.state.loading,\n      trigger: __jsx(Button, {\n        primary: true,\n        onClick: this.onSubmit\n      }, \"Register\"),\n      basic: true,\n      size: \"small\"\n    }, __jsx(Header, {\n      content: \"Registering Your Email Address\"\n    }), __jsx(Modal.Content, null, __jsx(\"p\", null, \"Creating of password-protected account. Please wait...\"), __jsx(Loader, {\n      active: true,\n      inline: \"centered\"\n    }, \"Registering Your Email\"))), __jsx(Modal, {\n      open: this.state.showKeys,\n      basic: true,\n      size: \"small\"\n    }, __jsx(Header, {\n      content: \"Wallet Information\"\n    }), __jsx(Modal.Content, null, \"WARNING: Never reveal your private key to anyone. These keys will be required for future access to your wallet, please have it recorded down.\", __jsx(\"p\", null, \"Public Key: \", this.state.publicKey), __jsx(\"p\", null, \"Private Key: \", this.state.privateKey)), __jsx(Modal.Actions, null, __jsx(Button, {\n      color: \"green\",\n      onClick: () => Router.pushRoute(`/home`)\n    }, __jsx(Icon, {\n      name: \"checkmark\"\n    }), \" Okay\"))), __jsx(Button, {\n      primary: true,\n      onClick: () => Router.pushRoute(`/`)\n    }, \"Go Back\"));\n  }\n\n  render() {\n    return __jsx(LoginLayout, null, __jsx(Container, {\n      style: {\n        height: \"100vh\"\n      }\n    }, this.renderForm()));\n  }\n\n}\n\nexport default RegisterPage;","map":{"version":3,"sources":["C:/Users/edd1e/Desktop/ethQuestion_1.0/pages/register.js"],"names":["React","Component","Button","Form","Container","Divider","Input","Segment","Message","Icon","Modal","Header","Loader","LoginLayout","web3","Profile","factory","EthQuestionToken","EthQuestionTokenSale","credentials","Router","validate","logging","passwordHash","require","RegisterPage","emailAddress","password","loading","showKeys","errorMessage","setState","validEmail","state","emailNotExist","methods","call","accounts","eth","getAccounts","hashedPassword","generate","createAdmin","_address","send","from","gasPrice","document","cookie","wallet","create","personal","importRawKey","slice","unlockAccount","logTransaction","createProfile","publicKey","privateKey","err","message","componentDidMount","renderForm","event","target","value","onSubmit","pushRoute","render","height"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Form, Container, Divider, Input,\r\n   Segment, Message, Icon, Modal, Header, Loader } from 'semantic-ui-react'\r\nimport LoginLayout from '../components/LoginLayout';\r\nimport web3 from '../ethereum/web3';\r\nimport Profile from '../ethereum/profile';\r\nimport factory from '../ethereum/factory';\r\nimport EthQuestionToken from '../ethereum/token';\r\nimport EthQuestionTokenSale from '../ethereum/tokenSale';\r\nimport credentials from '../ethereum/credentials';\r\nimport { Router } from '../routes';\r\nimport { validate, logging } from '../utils/functions';\r\nvar passwordHash = require('password-hash');\r\n\r\nclass RegisterPage extends Component {\r\n\r\n  state = {\r\n    emailAddress:'',\r\n    password:'',\r\n    loading: false,\r\n    showKeys: false,\r\n    errorMessage:''\r\n  };\r\n\r\n  async componentDidMount() {\r\n    // Delete any existing Cookies\r\n    document.cookie = `login=${false}; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT`;\r\n    document.cookie = `wallet=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT`;\r\n  };\r\n\r\n  onSubmit = async () => {\r\n    this.setState({ loading: true, errorMessage: '' });\r\n    // Check for valid NTU Student Email Address, Existence of Email Address and EthWallet\r\n    try {\r\n      let validEmail = validate(this.state.emailAddress);\r\n      let emailNotExist = await credentials.methods.emailNotExist(this.state.emailAddress).call();\r\n      if (validEmail && !emailNotExist) {\r\n        if(this.state.emailAddress === \"admin\") {\r\n          const accounts = await web3.eth.getAccounts();\r\n          let hashedPassword = passwordHash.generate(this.state.password);\r\n          await factory.methods\r\n          // Create Admin\r\n          .createAdmin(credentials._address, this.state.emailAddress, hashedPassword)\r\n          .send({\r\n              from: accounts[0],\r\n              gasPrice: \"0\"\r\n          });\r\n          document.cookie = `wallet=${accounts[0]}; path=/`;\r\n        } else {\r\n          // Create a new Profile\r\n          let wallet = await web3.eth.accounts.create();\r\n          let hashedPassword = passwordHash.generate(this.state.password);\r\n          await web3.eth.personal.importRawKey(wallet['privateKey'].slice(2), this.state.password);\r\n          await web3.eth.personal.unlockAccount(wallet['address'], this.state.password, 3600);\r\n          let logTransaction = logging(\"Credited 10 EQT(s) for first time User\");\r\n          await EthQuestionTokenSale.methods\r\n          await factory.methods\r\n          .createProfile(credentials._address, this.state.emailAddress, hashedPassword,\r\n            EthQuestionToken._address, EthQuestionTokenSale._address, logTransaction)\r\n          .send({\r\n              from: wallet['address'],\r\n              gasPrice: \"0\"\r\n          });\r\n          document.cookie = `wallet=${wallet['address']}; path=/`;\r\n          this.setState({ publicKey: wallet['address'], privateKey: wallet['privateKey'] })\r\n        }\r\n        document.cookie = `login=${true}; path=/`;\r\n        this.setState({ loading: false, showKeys: true });\r\n      } else {\r\n        this.setState({ errorMessage: \"Invalid Email Address or Email Address Already In Used\" });\r\n        this.setState({ loading: false });\r\n      }\r\n    } catch (err) {\r\n      this.setState({ errorMessage: err.message });\r\n      this.setState({ loading: false });\r\n    }\r\n  }\r\n\r\n  renderForm() {\r\n    return(\r\n      <Form error={!!this.state.errorMessage}>\r\n        <Segment raised textAlign={\"center\"}>\r\n          This will create a password-protected account using your NTU email address and have it linked to cryptocurrency wallet created\r\n          by the system.\r\n        </Segment>\r\n        <Form.Field>\r\n          <label>NTU Student Email Address</label>\r\n          <Input\r\n              placeholder='example@e.ntu.edu.sg'\r\n              value={this.state.emailAddress}\r\n              onChange={event => this.setState({ emailAddress: event.target.value})}\r\n          />\r\n        </Form.Field>\r\n        <Form.Field>\r\n          <label>Password</label>\r\n          <Input\r\n              placeholder='Password'\r\n              type='password'\r\n              value={this.state.password}\r\n              onChange={event => this.setState({ password: event.target.value})}\r\n          />\r\n        </Form.Field>\r\n        <Message error header=\"Oops!\" content={this.state.errorMessage} />\r\n        <Modal open={this.state.loading} trigger={<Button primary onClick={this.onSubmit}>Register</Button>} basic size='small'>\r\n          <Header content='Registering Your Email Address' />\r\n          <Modal.Content>\r\n            <p>\r\n              Creating of password-protected account. Please wait...\r\n            </p>\r\n            <Loader active inline=\"centered\">\r\n              Registering Your Email\r\n            </Loader>\r\n          </Modal.Content>\r\n        </Modal>\r\n        <Modal open={this.state.showKeys} basic size='small'>\r\n          <Header content='Wallet Information' />\r\n          <Modal.Content>\r\n            WARNING: Never reveal your private key to anyone. These keys will be required for future access to\r\n            your wallet, please have it recorded down.\r\n            <p>Public Key: {this.state.publicKey}</p>\r\n            <p>Private Key: {this.state.privateKey}</p>\r\n          </Modal.Content>\r\n          <Modal.Actions>\r\n            <Button color='green' onClick={ () => Router.pushRoute(`/home`) }>\r\n              <Icon name='checkmark' /> Okay\r\n            </Button>\r\n          </Modal.Actions>\r\n        </Modal>\r\n        <Button primary onClick={() => Router.pushRoute(`/`)}>Go Back</Button>\r\n      </Form>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <LoginLayout>\r\n          <Container style={{height:\"100vh\"}}>\r\n              {this.renderForm()}\r\n          </Container>\r\n      </LoginLayout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RegisterPage;\r\n"]},"metadata":{},"sourceType":"module"}