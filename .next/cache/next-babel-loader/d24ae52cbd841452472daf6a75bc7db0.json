{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Head from 'next/head';\nimport React, { Component } from 'react';\nimport MobileDetect from 'mobile-detect';\nimport { Container, Responsive, Sidebar, Divider } from 'semantic-ui-react';\nimport { getWidthFactory } from '../utils/device';\nimport DesktopHeader from './DesktopHeader';\nimport MobileHeader from \"./MobileHeader\";\nimport Footer from './Footer';\n\nclass DesktopContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {});\n  }\n\n  render() {\n    const {\n      accountType,\n      page,\n      getWidth,\n      contextRef,\n      children\n    } = this.props;\n    return __jsx(Responsive, {\n      fireOnMount: true,\n      getWidth: getWidth,\n      minWidth: Responsive.onlyTablet.minWidth\n    }, __jsx(DesktopHeader, {\n      accountType: accountType,\n      contextRef: contextRef,\n      page: page\n    }, __jsx(Container, {\n      style: {\n        minHeight: \"100vh\",\n        width: \"100vw\"\n      }\n    }, children)));\n  }\n\n}\n\nclass MobileContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      sidebarOpened: false\n    });\n\n    _defineProperty(this, \"handleSidebarHide\", () => this.setState({\n      sidebarOpened: false\n    }));\n\n    _defineProperty(this, \"handleToggle\", () => this.setState({\n      sidebarOpened: true\n    }));\n  }\n\n  render() {\n    const {\n      accountType,\n      getWidth,\n      contextRef,\n      children\n    } = this.props;\n    return __jsx(Responsive, {\n      fireOnMount: true,\n      as: Sidebar.Pushable,\n      getWidth: getWidth,\n      maxWidth: Responsive.onlyMobile.maxWidth\n    }, __jsx(MobileHeader, {\n      contextRef: contextRef,\n      accountType: accountType,\n      handleSidebarHide: this.handleSidebarHide,\n      handleToggle: this.handleToggle,\n      sidebarOpened: this.state.sidebarOpened\n    }, __jsx(Container, {\n      style: {\n        paddingTop: \"10em\",\n        minHeight: \"100vh\",\n        width: \"100vw\"\n      }\n    }, children)));\n  }\n\n}\n\nclass Layout extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleContextRef\", contextRef => this.setState({\n      contextRef\n    }));\n  }\n\n  static async getInitialProps(props) {\n    let isMobileFromSSR = false;\n\n    if (props.req) {\n      const device = props.req.headers[\"user-agent\"];\n      const md = new MobileDetect(device);\n      isMobileFromSSR = !!md.mobile();\n    }\n\n    return {\n      isMobileFromSSR\n    };\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"//cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\"\n    }), __jsx(\"link\", {\n      rel: \"shortcut icon\",\n      href: \"/static/ethIcon.ico\"\n    }), __jsx(\"meta\", {\n      name: \"viewport\",\n      content: \"width=device-width, initial-scale=1\"\n    }), __jsx(\"title\", null, \"Block-Chain Based Question Answering System\")), __jsx(\"div\", {\n      ref: this.handleContextRef\n    }, __jsx(DesktopContainer, {\n      accountType: this.props.accountType,\n      getWidth: getWidthFactory(this.props.isMobileFromSSR),\n      page: this.props.page\n    }, this.props.children), __jsx(MobileContainer, {\n      accountType: this.props.accountType,\n      getWidth: getWidthFactory(this.props.isMobileFromSSR)\n    }, this.props.children)), __jsx(Divider, {\n      hidden: true\n    }), __jsx(Footer, null));\n  }\n\n}\n\nexport default Layout;","map":null,"metadata":{},"sourceType":"module"}