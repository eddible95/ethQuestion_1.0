{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Button, Form, Container, Divider, Input, Embed, Segment, Message, Icon, Modal, Header, Loader, Grid } from 'semantic-ui-react';\nimport LoginLayout from '../components/LoginLayout';\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\nimport credentials from '../ethereum/credentials';\nimport { Router } from '../routes';\nimport { validate } from '../utils/functions';\nimport cookies from 'next-cookies';\n\nvar passwordHash = require('password-hash');\n\nclass LoginPage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      emailAddress: '',\n      password: '',\n      loading: false,\n      errorMessage: ''\n    });\n\n    _defineProperty(this, \"onSubmit\", async () => {\n      this.setState({\n        loading: true,\n        errorMessage: ''\n      }); // Check for valid NTU Student Email Address\n\n      if (validate(this.state.emailAddress)) {\n        try {\n          const _passwordHash = await credentials.methods.getPasswordHash(this.state.emailAddress).call(); // Authenticate the Email Address and ensure Email Address is not blacklisted\n\n\n          if (passwordHash.verify(this.state.password, _passwordHash) && !(await credentials.methods.emailNotBlackList(this.state.emailAddress).call())) {\n            const _walletAddress = await credentials.methods.getBinding;\n\n            const account = await credentials.methods.getEthWallet(this.state.emailAddress).call();\n            await web3.eth.personal.unlockAccount(account, this.state.password, 3600);\n            document.cookie = `login=${true}; path=/`;\n            document.cookie = `wallet=${account}; path=/`;\n            Router.pushRoute(`/home`); // Automatic redirect the user.\n          } else {\n            this.setState({\n              errorMessage: \"Wrong Email Address or Email Address Blacklisted\"\n            });\n            this.setState({\n              loading: false\n            });\n          }\n        } catch (err) {\n          this.setState({\n            errorMessage: err.message\n          });\n          this.setState({\n            loading: false\n          });\n        }\n      } else {\n        this.setState({\n          errorMessage: \"Invalid Email Address\"\n        });\n        this.setState({\n          loading: false\n        });\n      }\n    });\n  }\n\n  async componentDidMount() {\n    // Delete any existing Cookies\n    document.cookie = `login=${false}; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT`;\n    document.cookie = `wallet=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT`;\n  }\n\n  renderForm() {\n    return __jsx(Grid, {\n      textAlign: \"center\",\n      style: {\n        height: '40%'\n      },\n      verticalAlign: \"middle\"\n    }, __jsx(Grid.Column, {\n      style: {\n        maxWidth: 450\n      }\n    }, __jsx(Header, {\n      as: \"h2\",\n      textAlign: \"center\"\n    }, __jsx(Icon, {\n      name: \"ethereum\"\n    }), \" Login to your account\"), __jsx(Form, {\n      size: \"large\",\n      error: !!this.state.errorMessage\n    }, __jsx(Segment, {\n      stacked: true\n    }, __jsx(Form.Field, null, __jsx(\"label\", null, \"NTU Student Email Address\"), __jsx(Input, {\n      icon: \"user\",\n      iconPosition: \"left\",\n      placeholder: \"example@e.ntu.edu.sg\",\n      value: this.state.emailAddress,\n      onChange: event => this.setState({\n        emailAddress: event.target.value\n      })\n    })), __jsx(Form.Field, null, __jsx(Input, {\n      icon: \"key\",\n      iconPosition: \"left\",\n      placeholder: \"Password\",\n      type: \"password\",\n      value: this.state.password,\n      onChange: event => this.setState({\n        password: event.target.value\n      })\n    })), __jsx(Modal, {\n      open: this.state.loading,\n      trigger: __jsx(Button, {\n        color: \"blue\",\n        fluid: true,\n        size: \"large\",\n        onClick: this.onSubmit\n      }, \"Login\"),\n      basic: true,\n      size: \"small\"\n    }, __jsx(Header, {\n      icon: \"ethereum\",\n      content: \"Verifying Your Email Address\"\n    }), __jsx(Modal.Content, null, __jsx(Loader, {\n      active: true,\n      inline: \"centered\"\n    }, \"Authenticating Credentials\"))), __jsx(Message, {\n      error: true,\n      header: \"Oops!\",\n      content: this.state.errorMessage\n    }))), __jsx(Message, null, \"Hi there, first time here? Click here to\", __jsx(Modal, {\n      trigger: __jsx(\"a\", {\n        href: \"/register\"\n      }, \" register\"),\n      basic: true,\n      size: \"small\"\n    }, __jsx(Header, {\n      icon: \"ethereum\",\n      content: \"Please Hang On While We Redirect You\"\n    }), __jsx(Modal.Content, null, __jsx(Loader, {\n      active: true,\n      inline: \"centered\"\n    }, \"Redirecting to Registration\"))))));\n  }\n\n  render() {\n    return __jsx(LoginLayout, null, __jsx(React.Fragment, null, this.renderForm(), __jsx(Divider, {\n      hidden: true\n    }), __jsx(Container, null, __jsx(Header, {\n      as: \"h2\",\n      textAlign: \"center\"\n    }, __jsx(Icon, {\n      name: \"video\"\n    }), \" Watch Video Guide\"), __jsx(Embed, {\n      id: \"jImWp6P62FQ\",\n      source: \"youtube\",\n      aspectRatio: \"16:9\"\n    }))));\n  }\n\n}\n\nexport default LoginPage;","map":null,"metadata":{},"sourceType":"module"}