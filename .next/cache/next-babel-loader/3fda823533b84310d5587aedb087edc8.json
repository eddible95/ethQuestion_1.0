{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport MobileDetect from 'mobile-detect';\nimport _ from 'lodash';\nimport { Button, Header, Table, Statistic, Rating, Grid, Loader, List, Popup, Divider, Container, Icon, Label, Progress, Segment, Modal, Responsive, Checkbox, Dropdown } from 'semantic-ui-react';\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport { getWidthFactory } from '../utils/device';\nimport factory from '../ethereum/factory';\nimport credentials from '../ethereum/credentials';\nimport Question from '../ethereum/question';\nimport Profile from '../ethereum/profile';\nimport Layout from '../components/Layout';\nimport { Link, Router } from '../routes';\nimport web3 from '../ethereum/web3';\nimport { search, sortingQuestions } from '../utils/functions';\nimport cookies from 'next-cookies';\n\nclass HomePage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      login: false,\n      accountType: null,\n      tags: [],\n      topTags: [],\n      loading: true,\n      sortBy: null,\n      data: [],\n      summaries: [],\n      questionLimit: 30,\n      questionLimitChoice: [],\n      isSSR: false,\n      isMining: false\n    };\n  }\n\n  static async getInitialProps(props) {\n    let isMobileFromSSR = false;\n    let queryValue = props.query.value;\n\n    if (props.req) {\n      const device = props.req.headers[\"user-agent\"];\n      const md = new MobileDetect(device);\n      isMobileFromSSR = !!md.mobile();\n    }\n\n    return {\n      isMobileFromSSR,\n      queryValue,\n      isLogin: cookies(props).login || '',\n      account: cookies(props).wallet || ''\n    };\n  }\n\n  async componentDidUpdate(prevProps) {\n    if (this.props != prevProps) {\n      this.fetchQuestionData();\n    }\n  }\n\n  async componentDidMount() {\n    if (typeof web3 === 'undefined') {\n      this.setState({\n        loading: false\n      });\n      return;\n    }\n\n    let login = false;\n\n    if (this.props.isLogin) {\n      login = true; // Get Account Type\n\n      let profileAddress = await factory.methods.getProfile(this.props.account).call();\n      let profile = Profile(profileAddress);\n      let accountType = await profile.methods.getAccountType().call();\n      accountType == 0 ? accountType = \"Admin\" : accountType = \"User\";\n      await this.fetchQuestionData();\n      this.setState({\n        login: login\n      });\n      this.setState({\n        accountType: accountType\n      });\n    }\n\n    this.setState({\n      loading: false\n    });\n  }\n\n  async fetchQuestionData() {\n    // Retrieve an array of addresses of questions deployed\n    let deployedQuestions = await factory.methods.getDeployedQuestions().call();\n    let deployedQuestionsCount = deployedQuestions.length;\n    this.setState({\n      deployedQuestionsCount: deployedQuestionsCount\n    }); // Retrieve the summaries of all deployed questions\n\n    let summaries = [];\n    let searchItem; //filter the questions based on search value\n\n    if (this.props.queryValue != undefined && this.props.queryValue != 'favicon.ico') {\n      searchItem = decodeURIComponent(this.props.queryValue);\n      deployedQuestions = await search(searchItem, deployedQuestions);\n      deployedQuestionsCount = deployedQuestions.length;\n    }\n\n    for (let i = 0; i < deployedQuestionsCount; i++) {\n      let question = Question(deployedQuestions[i]);\n      let summary = await question.methods.getSummary().call(); // Filter out flagged questions\n\n      if (!summary[9]) {\n        summaries[i] = summary;\n        let answerList = await question.methods.getAnswerList().call();\n        summaries[i][10] = answerList.length;\n        summaries[i][11] = deployedQuestions[i];\n      }\n    }\n\n    summaries = summaries.reverse(); // Displays questions in interval of 30\n\n    let questionLimitChoice = [30];\n    let choice = Math.floor(summaries.length / 30);\n\n    for (let i = 1; i <= choice; i++) {\n      questionLimitChoice.push(30 * (i + 1));\n    } // Get the top 10 used tags\n\n\n    let tags = {};\n    summaries = summaries.slice(0, this.state.questionLimit);\n    summaries.forEach(summary => {\n      summary[8].forEach(tag => {\n        if (tags[tag] == undefined) {\n          tags[tag] = 1;\n        } else {\n          tags[tag] = tags[tag] + 1;\n        }\n      });\n    });\n    let sortedTags = Object.keys(tags).map(function (key) {\n      return [key, tags[key]];\n    }); // Sort the array based on the second element\n\n    sortedTags.sort(function (first, second) {\n      return second[1] - first[1];\n    }); // Array of all tags\n\n    let tagList = [];\n    sortedTags.forEach(tag => {\n      tagList.push(tag[0]);\n    }); // Array with only the first 10 items\n\n    tags = [];\n    sortedTags.slice(0, 10).forEach(tag => {\n      tags.push(tag[0]);\n    });\n    let isMining = await web3.eth.isMining();\n    let blockNumber = await web3.eth.getBlockNumber();\n    let users = await factory.methods.getEthWallets().call();\n    this.setState({\n      isMining: isMining,\n      blockNumber: blockNumber,\n      users: users.length\n    });\n    this.setState({\n      topTags: tags\n    });\n    this.setState({\n      tags: tagList\n    });\n    this.setState({\n      summaries: summaries\n    });\n    this.setState({\n      questionLimitChoice: questionLimitChoice\n    });\n  }\n\n  renderQuestionHeader() {\n    return __jsx(Table.Row, null, __jsx(Table.HeaderCell, {\n      textAlign: \"center\",\n      width: 2\n    }, __jsx(\"span\", {\n      style: {\n        fontSize: 15,\n        color: '#6A737C'\n      }\n    }, \"Current Phase\")), __jsx(Table.HeaderCell, {\n      textAlign: \"center\",\n      width: 2\n    }, __jsx(\"span\", {\n      style: {\n        fontSize: 15,\n        color: '#6A737C'\n      }\n    }, \"Answers Submitted\")), __jsx(Table.HeaderCell, {\n      textAlign: \"center\",\n      width: 2\n    }, __jsx(\"span\", {\n      style: {\n        fontSize: 15,\n        color: '#6A737C'\n      }\n    }, \"Reward\")), __jsx(Table.HeaderCell, {\n      textAlign: \"center\"\n    }, __jsx(\"span\", {\n      style: {\n        fontSize: 15,\n        color: '#6A737C'\n      }\n    }, \"Question Title\")));\n  } // Renders out the list of question\n\n\n  renderQuestionList() {\n    let summaries = this.state.summaries;\n    summaries = sortingQuestions(summaries, this.state.sortBy);\n    return summaries.map((summary, index) => {\n      const questionState = summary[4];\n      const tagList = summary[8];\n      return __jsx(Table.Row, {\n        key: index\n      }, __jsx(Table.Cell, {\n        textAlign: \"center\",\n        width: 2\n      }, questionState == 0 ? __jsx(Statistic, {\n        size: \"mini\",\n        color: \"red\"\n      }, __jsx(Statistic.Value, null, __jsx(\"span\", {\n        style: {\n          fontSize: 15,\n          color: 'red'\n        }\n      }, \" Answering\")), __jsx(Statistic.Label, null, __jsx(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Phase\"))) : questionState == 1 ? __jsx(Statistic, {\n        size: \"mini\",\n        color: \"red\"\n      }, __jsx(Statistic.Value, null, __jsx(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#C9C633'\n        }\n      }, \" Voting\")), __jsx(Statistic.Label, null, __jsx(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Phase\"))) : __jsx(Statistic, {\n        size: \"mini\",\n        color: \"red\"\n      }, __jsx(Statistic.Value, null, __jsx(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#10EE44'\n        }\n      }, \" Rewarded\")), __jsx(Statistic.Label, null, __jsx(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Phase\")))), __jsx(Table.Cell, {\n        textAlign: \"center\",\n        width: 2\n      }, __jsx(Statistic, {\n        size: \"mini\",\n        color: \"red\"\n      }, __jsx(Statistic.Value, null, __jsx(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, summary[10])), __jsx(Statistic.Label, null, __jsx(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"answer(s)\")))), __jsx(Table.Cell, {\n        textAlign: \"center\",\n        width: 2\n      }, __jsx(Statistic, {\n        size: \"mini\",\n        color: \"red\"\n      }, __jsx(Statistic.Value, null, __jsx(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, summary[2] * 1e-4)), __jsx(Statistic.Label, null, __jsx(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"EQT(s)\")))), __jsx(Table.Cell, {\n        textAlign: \"left\"\n      }, __jsx(Grid.Row, {\n        textAlign: \"left\"\n      }, __jsx(\"span\", {\n        style: {\n          fontSize: 18,\n          color: '#6A737C',\n          cursor: 'pointer'\n        },\n        onClick: () => Router.pushRoute(`/questions/${summary[11]}`)\n      }, __jsx(\"a\", null, summary[0]))), this.renderTag(tagList, \"mini\")));\n    });\n  }\n\n  renderMobileQuestionList() {\n    let summaries = this.state.summaries;\n    summaries = sortingQuestions(summaries, this.state.sortBy);\n    return summaries.map((summary, index) => {\n      const tags = summary[8];\n      const questionState = summary[4];\n      const tagList = summary[8];\n      return __jsx(List.Item, {\n        key: index\n      }, __jsx(List.Icon, {\n        name: \"question circle\",\n        size: \"large\",\n        verticalAlign: \"middle\"\n      }), __jsx(List.Content, null, __jsx(List.Header, {\n        as: \"a\",\n        onClick: () => Router.pushRoute(`/questions/${summary[11]}`)\n      }, summary[0]), __jsx(Grid, null, __jsx(Grid.Column, {\n        width: 10\n      }, __jsx(List.Description, null, \"Number of Answer(s): \" + summary[10]), __jsx(List.Description, null, \"Reward: \" + summary[2] * 1e-4 + \" EQT(s)\"), this.renderTag(tags, \"mini\")), __jsx(Grid.Column, {\n        width: 4\n      }, questionState == 0 ? __jsx(List.Description, null, __jsx(\"b\", null, __jsx(\"font\", {\n        color: \"red\"\n      }, \"ANSWERING PHASE\"))) : questionState == 1 ? __jsx(List.Description, null, __jsx(\"b\", null, __jsx(\"font\", {\n        color: \"#C9C633\"\n      }, \"VOTING PHASE\"))) : __jsx(List.Description, null, __jsx(\"b\", null, __jsx(\"font\", {\n        color: \"#10EE44\"\n      }, \"REWARDED PHASE\")))))), __jsx(Divider, {\n        hidden: true\n      }));\n    });\n  } // Render each tag individually for each question\n\n\n  renderTag(tagList, tagSize) {\n    const tagColours = [\"red\", \"olive\", \"blue\", \"teal\", \"green\"];\n    return tagList.map((tag, index) => {\n      return __jsx(Label, {\n        as: \"a\",\n        onClick: () => Router.pushRoute(`/${'search/' + encodeURIComponent(tag)}`),\n        tag: true,\n        size: tagSize,\n        key: index,\n        color: tagColours[index % 5]\n      }, tag);\n    });\n  }\n\n  renderTopTags() {\n    return __jsx(Segment, null, __jsx(Header, {\n      as: \"h3\",\n      textAlign: \"center\"\n    }, __jsx(Icon, {\n      name: \"tags\"\n    }), \"Top 10 Tags\"), this.renderTag(this.state.topTags, \"medium\"));\n  }\n\n  renderAbout() {\n    return __jsx(Segment, null, __jsx(Header, {\n      as: \"h3\",\n      textAlign: \"center\"\n    }, __jsx(Icon, {\n      name: \"question\"\n    }), \"What Are Question Phases\"), __jsx(\"span\", {\n      style: {\n        fontSize: 18,\n        color: 'red'\n      }\n    }, \"ANSWERING\"), __jsx(\"p\", {\n      style: {\n        fontSize: 15\n      }\n    }, \"You can submit answers but answers will not be shown\"), __jsx(\"span\", {\n      style: {\n        fontSize: 18,\n        color: '#C9C633'\n      }\n    }, \"VOTING\"), __jsx(\"p\", {\n      style: {\n        fontSize: 15\n      }\n    }, \"You can only approve answers submitted\"), __jsx(\"span\", {\n      style: {\n        fontSize: 18,\n        color: '#10EE44'\n      }\n    }, \"REWARDED\"), __jsx(\"p\", {\n      style: {\n        fontSize: 15\n      }\n    }, \"Someone has already earned the reward for the question\"));\n  }\n\n  renderQuestionStatistics() {\n    return __jsx(Segment, null, __jsx(Statistic.Group, {\n      horizontal: true,\n      color: \"red\"\n    }, __jsx(Statistic, null, __jsx(Statistic.Value, null, this.state.deployedQuestionsCount), __jsx(Statistic.Label, null, \"Questions Asked\"))), __jsx(Statistic.Group, {\n      horizontal: true,\n      color: \"yellow\"\n    }, __jsx(Statistic, null, __jsx(Statistic.Value, null, this.state.users), __jsx(Statistic.Label, null, \"Active Users\"))));\n  }\n\n  renderBlockChainStatistics() {\n    return __jsx(Segment, null, __jsx(Header, {\n      as: \"h3\",\n      textAlign: \"center\"\n    }, __jsx(Icon, {\n      name: \"ethereum\"\n    }), \"Block-Chain Status\"), this.state.isMining ? __jsx(Statistic.Value, null, __jsx(\"span\", {\n      style: {\n        fontSize: 18,\n        color: 'green'\n      }\n    }, \"Currently Mining\")) : __jsx(Statistic.Value, null, __jsx(\"span\", {\n      style: {\n        fontSize: 18,\n        color: 'red'\n      }\n    }, \"Currently Not Mining\")), __jsx(Statistic.Group, {\n      horizontal: true,\n      color: \"green\"\n    }, __jsx(Statistic, null, __jsx(Statistic.Value, null, this.state.blockNumber), __jsx(Statistic.Label, null, \"Blocks Mined\"))), \"*When blockchain is not mining, do not create any transaction\");\n  }\n\n  renderSortSettings() {\n    const options = ['Ascending Phase', 'Descending Phase', 'Ascending Answers', 'Descending Answers', 'Ascending Rewards', 'Descending Rewards'];\n    return __jsx(\"span\", null, __jsx(Dropdown, {\n      text: \"Sorting Questions\",\n      multiple: true\n    }, __jsx(Dropdown.Menu, null, __jsx(Dropdown.Header, {\n      icon: \"filter\",\n      content: \"Sorting Options\"\n    }), __jsx(Dropdown.Menu, {\n      scrolling: true\n    }, options.map((tag, index) => __jsx(Dropdown.Item, {\n      key: index,\n      text: tag,\n      onClick: () => this.setState({\n        sortBy: index\n      })\n    }))))));\n  }\n\n  renderFilterSettings() {\n    const tagColours = [\"red\", \"olive\", \"blue\", \"teal\", \"green\"];\n    return __jsx(\"span\", null, __jsx(Dropdown, {\n      text: \"Filter Questions\",\n      multiple: true\n    }, __jsx(Dropdown.Menu, null, __jsx(Dropdown.Header, {\n      icon: \"tags\",\n      content: \"Tag Label\"\n    }), __jsx(Dropdown.Menu, {\n      scrolling: true\n    }, this.state.tags.map((tag, index) => __jsx(Dropdown.Item, {\n      key: index,\n      text: tag,\n      label: {\n        color: tagColours[index % 6],\n        empty: true,\n        circular: true\n      },\n      onClick: () => Router.pushRoute(`/${'search/' + encodeURIComponent(tag)}`)\n    }))))));\n  }\n\n  renderQuestionLimitSettings() {\n    return __jsx(Dropdown, {\n      text: \"Viewing Limit\",\n      multiple: true\n    }, __jsx(Dropdown.Menu, null, __jsx(Dropdown.Header, {\n      icon: \"list\",\n      content: \"Question Limit\"\n    }), __jsx(Dropdown.Menu, {\n      scrolling: true\n    }, this.state.questionLimitChoice.map((choice, index) => __jsx(Dropdown.Item, {\n      key: index,\n      text: choice,\n      onClick: async () => {\n        await this.setState({\n          questionLimit: choice\n        });\n        this.fetchQuestionData();\n      }\n    })))));\n  }\n\n  render() {\n    if (this.state.login) {\n      return __jsx(Layout, {\n        accountType: this.state.accountType,\n        page: \"Home\"\n      }, __jsx(Responsive, {\n        fireOnMount: true,\n        getWidth: getWidthFactory(this.props.isMobileFromSSR),\n        minWidth: Responsive.onlyTablet.minWidth\n      }, __jsx(Divider, {\n        hidden: true\n      }), __jsx(Grid, {\n        centered: true\n      }, __jsx(Grid.Column, {\n        width: 10\n      }, __jsx(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"Questions Asked\"), __jsx(Segment, {\n        textAlign: \"center\"\n      }, this.renderSortSettings(), this.renderFilterSettings(), this.renderQuestionLimitSettings(), __jsx(Button, {\n        onClick: () => {\n          this.setState({\n            sortBy: ''\n          });\n          Router.pushRoute(`/home`);\n        }\n      }, \"Clear Fliter/Sort\")), __jsx(Table, null, __jsx(Table.Header, null, this.renderQuestionHeader()), __jsx(Table.Body, null, this.renderQuestionList())), __jsx(Divider, {\n        hidden: true\n      }), __jsx(\"div\", {\n        style: {\n          marginTop: 20\n        }\n      }, \"Found \", this.state.summaries.length, \" Item(s).\")), __jsx(Grid.Column, {\n        width: 3\n      }, this.renderAbout(), this.renderQuestionStatistics(), this.renderTopTags(), this.renderBlockChainStatistics()))), __jsx(Responsive, {\n        fireOnMount: true,\n        getWidth: getWidthFactory(this.props.isMobileFromSSR),\n        maxWidth: Responsive.onlyMobile.maxWidth\n      }, __jsx(Divider, {\n        hidden: true\n      }), __jsx(Grid, {\n        centered: true\n      }, __jsx(Grid.Column, null, __jsx(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"Questions Asked\"), __jsx(Segment, {\n        textAlign: \"center\"\n      }, this.renderSortSettings(), this.renderFilterSettings(), this.renderQuestionLimitSettings()), __jsx(Button, {\n        onClick: () => {\n          this.setState({\n            sortBy: ''\n          });\n          Router.pushRoute(`/home`);\n        }\n      }, \"Clear Fliter/Sort\"), __jsx(Divider, {\n        hidden: true\n      }), __jsx(List, {\n        divided: true,\n        relaxed: true\n      }, this.renderMobileQuestionList()), __jsx(Divider, {\n        hidden: true\n      }), __jsx(\"div\", {\n        style: {\n          marginTop: 20\n        }\n      }, \"Found \", this.state.summaries.length, \" Item(s).\")))));\n    } else {\n      return __jsx(Layout, {\n        accountType: this.state.accountType\n      }, __jsx(AccountIssueModal, {\n        loading: this.state.loading,\n        login: this.state.login\n      }));\n    }\n  }\n\n}\n\nexport default HomePage;","map":null,"metadata":{},"sourceType":"module"}