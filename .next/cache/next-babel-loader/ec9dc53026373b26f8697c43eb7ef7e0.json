{"ast":null,"code":"import Question from '../ethereum/question';\n\nconst Fuse = require(\"fuse.js\"); // Validate Email Address Format\n\n\nconst validate = emailAddress => {\n  if (emailAddress === \"admin\") {\n    return true;\n  } else {\n    const re = /\\S+@e\\.ntu\\.edu\\.sg$/;\n    return re.test(emailAddress);\n  }\n}; // Provides common logging method for logging every transactions\n\n\nconst logging = message => {\n  let today = new Date();\n  let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  let date = months[today.getMonth()] + \" \" + today.getDate() + \" \" + today.getFullYear();\n  let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n  let dateTime = date + ' ' + time + \": \" + message;\n  return dateTime;\n}; // Search Algorithm\n\n\nasync function search(value, questions) {\n  let list = [];\n\n  for (let i = 0; i < questions.length; i++) {\n    var summary = await Question(questions[i]).methods.getSummary().call();\n    list.push({\n      'address': questions[i],\n      'title': summary[0],\n      'content': summary[1],\n      'tags': summary[8]\n    });\n  }\n\n  let options = {\n    id: \"address\",\n    threshold: 0.1,\n    shouldSort: true,\n    tokenize: true,\n    keys: [{\n      name: 'title',\n      weight: 0.3\n    }, {\n      name: 'content',\n      weight: 0.4\n    }, {\n      name: 'tags',\n      weight: 0.3\n    }]\n  };\n  let fuse = new Fuse(list, options);\n  const result = fuse.search(value);\n  return result;\n} // Checks required fields are filled up\n\n\nconst checkFieldEmpty = field => {\n  return field === \"\" ? false : true;\n}; // Checks time-related fields are filled up properly\n\n\nconst checkTimeField = field => {\n  return field > 0 ? true : false;\n}; // Checks ETQ fields are filled up properly\n\n\nconst checkRewardField = field => {\n  return field >= 1 ? true : false;\n}; // Convert to lower case letters in a string\n\n\nconst lowerCase = item => {\n  for (let i = 0; i < item.length; i++) {\n    item[i] = item[i].toLowerCase();\n  }\n\n  return item;\n};\n\nconst sortingQuestions = (summary, sortBy) => {\n  switch (sortBy) {\n    case 0:\n      summary.sort(function (a, b) {\n        return a[4] - b[4];\n      });\n      break;\n\n    case 1:\n      summary.sort(function (a, b) {\n        return b[4] - a[4];\n      });\n      break;\n\n    case 2:\n      summary.sort(function (a, b) {\n        return a[10] - b[10];\n      });\n      break;\n\n    case 3:\n      summary.sort(function (a, b) {\n        return b[10] - a[10];\n      });\n      break;\n\n    case 4:\n      summary.sort(function (a, b) {\n        return a[2] - b[2];\n      });\n      break;\n\n    case 5:\n      summary.sort(function (a, b) {\n        return b[2] - a[2];\n      });\n      break;\n\n    default:\n      break;\n  }\n\n  return summary;\n};\n\nconst sortingAnswers = (answers, sorted) => {\n  if (sorted) {\n    answers.sort(function (a, b) {\n      return a[4] - b[4];\n    });\n  } else {\n    answers.sort(function (a, b) {\n      return b[4] - a[4];\n    });\n  }\n\n  return answers;\n};\n\nexport { validate, logging, search, checkFieldEmpty, checkTimeField, checkRewardField, lowerCase, sortingQuestions, sortingAnswers };","map":null,"metadata":{},"sourceType":"module"}