{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { Button, Form, Container, Divider, Input, Embed, Segment, Message, Icon, Modal, Header, Loader, Grid } from 'semantic-ui-react';\nimport LoginLayout from '../components/LoginLayout';\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\nimport credentials from '../ethereum/credentials';\nimport { Router } from '../routes';\nimport { validate } from '../utils/functions';\nimport cookies from 'next-cookies';\n\nvar passwordHash = require('password-hash');\n\nvar LoginPage = /*#__PURE__*/function (_Component) {\n  _inherits(LoginPage, _Component);\n\n  var _super = _createSuper(LoginPage);\n\n  function LoginPage() {\n    var _this;\n\n    _classCallCheck(this, LoginPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      emailAddress: '',\n      password: '',\n      loading: false,\n      errorMessage: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", function _callee() {\n      var _passwordHash, _walletAddress, account;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              }); // Check for valid NTU Student Email Address\n\n\n              if (!validate(_this.state.emailAddress)) {\n                _context.next = 36;\n                break;\n              }\n\n              _context.prev = 2;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(credentials.methods.getPasswordHash(_this.state.emailAddress).call());\n\n            case 5:\n              _passwordHash = _context.sent;\n              console.log(_passwordHash); // Authenticate the Email Address and ensure Email Address is not blacklisted\n\n              _context.t0 = passwordHash.verify(_this.state.password, _passwordHash);\n\n              if (!_context.t0) {\n                _context.next = 12;\n                break;\n              }\n\n              _context.next = 11;\n              return _regeneratorRuntime.awrap(credentials.methods.emailNotBlackList(_this.state.emailAddress).call());\n\n            case 11:\n              _context.t0 = !_context.sent;\n\n            case 12:\n              if (!_context.t0) {\n                _context.next = 26;\n                break;\n              }\n\n              _context.next = 15;\n              return _regeneratorRuntime.awrap(credentials.methods.getBinding);\n\n            case 15:\n              _walletAddress = _context.sent;\n              _context.next = 18;\n              return _regeneratorRuntime.awrap(credentials.methods.getEthWallet(_this.state.emailAddress).call());\n\n            case 18:\n              account = _context.sent;\n              _context.next = 21;\n              return _regeneratorRuntime.awrap(web3.eth.personal.unlockAccount(account, _this.state.password, 3600));\n\n            case 21:\n              document.cookie = \"login=\".concat(true, \"; path=/\");\n              document.cookie = \"wallet=\".concat(account, \"; path=/\");\n              Router.pushRoute(\"/home\"); // Automatic redirect the user.\n\n              _context.next = 28;\n              break;\n\n            case 26:\n              _this.setState({\n                errorMessage: \"Wrong Email Address or Email Address Blacklisted\"\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 28:\n              _context.next = 34;\n              break;\n\n            case 30:\n              _context.prev = 30;\n              _context.t1 = _context[\"catch\"](2);\n\n              _this.setState({\n                errorMessage: _context.t1.message\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 34:\n              _context.next = 38;\n              break;\n\n            case 36:\n              _this.setState({\n                errorMessage: \"Invalid Email Address\"\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 38:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[2, 30]], Promise);\n    });\n\n    return _this;\n  }\n\n  _createClass(LoginPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              // Delete any existing Cookies\n              document.cookie = \"login=\".concat(false, \"; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT\");\n              document.cookie = \"wallet=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT\";\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"renderForm\",\n    value: function renderForm() {\n      var _this2 = this;\n\n      return __jsx(Grid, {\n        textAlign: \"center\",\n        style: {\n          height: '40%'\n        },\n        verticalAlign: \"middle\"\n      }, __jsx(Grid.Column, {\n        style: {\n          maxWidth: 450\n        }\n      }, __jsx(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, __jsx(Icon, {\n        name: \"ethereum\"\n      }), \" Login to your account\"), __jsx(Form, {\n        size: \"large\",\n        error: !!this.state.errorMessage\n      }, __jsx(Segment, {\n        stacked: true\n      }, __jsx(Form.Field, null, __jsx(\"label\", null, \"NTU Student Email Address\"), __jsx(Input, {\n        icon: \"user\",\n        iconPosition: \"left\",\n        placeholder: \"example@e.ntu.edu.sg\",\n        value: this.state.emailAddress,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            emailAddress: event.target.value\n          });\n        }\n      })), __jsx(Form.Field, null, __jsx(Input, {\n        icon: \"key\",\n        iconPosition: \"left\",\n        placeholder: \"Password\",\n        type: \"password\",\n        value: this.state.password,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            password: event.target.value\n          });\n        }\n      })), __jsx(Modal, {\n        open: this.state.loading,\n        trigger: __jsx(Button, {\n          color: \"blue\",\n          fluid: true,\n          size: \"large\",\n          onClick: this.onSubmit\n        }, \"Login\"),\n        basic: true,\n        size: \"small\"\n      }, __jsx(Header, {\n        icon: \"ethereum\",\n        content: \"Verifying Your Email Address\"\n      }), __jsx(Modal.Content, null, __jsx(Loader, {\n        active: true,\n        inline: \"centered\"\n      }, \"Authenticating Credentials\"))), __jsx(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.errorMessage\n      }))), __jsx(Message, null, \"Hi there, first time here? Click here to\", __jsx(Modal, {\n        trigger: __jsx(\"a\", {\n          href: \"/register\"\n        }, \" register\"),\n        basic: true,\n        size: \"small\"\n      }, __jsx(Header, {\n        icon: \"ethereum\",\n        content: \"Please Hang On While We Redirect You\"\n      }), __jsx(Modal.Content, null, __jsx(Loader, {\n        active: true,\n        inline: \"centered\"\n      }, \"Redirecting to Registration\"))))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(LoginLayout, null, __jsx(React.Fragment, null, this.renderForm(), __jsx(Divider, {\n        hidden: true\n      }), __jsx(Container, null, __jsx(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, __jsx(Icon, {\n        name: \"video\"\n      }), \" Watch Video Guide\"), __jsx(Embed, {\n        id: \"jImWp6P62FQ\",\n        source: \"youtube\",\n        aspectRatio: \"16:9\"\n      }))));\n    }\n  }]);\n\n  return LoginPage;\n}(Component);\n\nexport default LoginPage;","map":{"version":3,"sources":["C:/Users/edd1e/Desktop/ethQuestion_1.0/pages/login.js"],"names":["React","Component","Button","Form","Container","Divider","Input","Embed","Segment","Message","Icon","Modal","Header","Loader","Grid","LoginLayout","web3","factory","credentials","Router","validate","cookies","passwordHash","require","LoginPage","emailAddress","password","loading","errorMessage","setState","state","methods","getPasswordHash","call","_passwordHash","console","log","verify","emailNotBlackList","getBinding","_walletAddress","getEthWallet","account","eth","personal","unlockAccount","document","cookie","pushRoute","message","height","maxWidth","event","target","value","onSubmit","renderForm"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,SAAvB,EAAkCC,OAAlC,EAA2CC,KAA3C,EAAkDC,KAAlD,EACGC,OADH,EACYC,OADZ,EACqBC,IADrB,EAC2BC,KAD3B,EACkCC,MADlC,EAC0CC,MAD1C,EACkDC,IADlD,QAC8D,mBAD9D;AAEA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,OAAP,MAAoB,cAApB;;AACA,IAAIC,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;IAEMC,S;;;;;;;;;;;;;;;;4DAEI;AACNC,MAAAA,YAAY,EAAC,EADP;AAENC,MAAAA,QAAQ,EAAC,EAFH;AAGNC,MAAAA,OAAO,EAAE,KAHH;AAINC,MAAAA,YAAY,EAAC;AAJP,K;;+DAaG;AAAA;;AAAA;AAAA;AAAA;AAAA;AACT,oBAAKC,QAAL,CAAc;AAAEF,gBAAAA,OAAO,EAAE,IAAX;AAAiBC,gBAAAA,YAAY,EAAE;AAA/B,eAAd,EADS,CAET;;;AAFS,mBAGLR,QAAQ,CAAC,MAAKU,KAAL,CAAWL,YAAZ,CAHH;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,+CAKuBP,WAAW,CAACa,OAAZ,CAAoBC,eAApB,CAAoC,MAAKF,KAAL,CAAWL,YAA/C,EAA6DQ,IAA7D,EALvB;;AAAA;AAKCC,cAAAA,aALD;AAMLC,cAAAA,OAAO,CAACC,GAAR,CAAYF,aAAZ,EANK,CAOL;;AAPK,4BAQDZ,YAAY,CAACe,MAAb,CAAoB,MAAKP,KAAL,CAAWJ,QAA/B,EAAyCQ,aAAzC,CARC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAQiEhB,WAAW,CAACa,OAAZ,CAAoBO,iBAApB,CAAsC,MAAKR,KAAL,CAAWL,YAAjD,EAA+DQ,IAA/D,EARjE;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAS0Bf,WAAW,CAACa,OAAZ,CAAoBQ,UAT9C;;AAAA;AASGC,cAAAA,cATH;AAAA;AAAA,+CAUmBtB,WAAW,CAACa,OAAZ,CAAoBU,YAApB,CAAiC,MAAKX,KAAL,CAAWL,YAA5C,EAA0DQ,IAA1D,EAVnB;;AAAA;AAUGS,cAAAA,OAVH;AAAA;AAAA,+CAWG1B,IAAI,CAAC2B,GAAL,CAASC,QAAT,CAAkBC,aAAlB,CAAgCH,OAAhC,EAAyC,MAAKZ,KAAL,CAAWJ,QAApD,EAA8D,IAA9D,CAXH;;AAAA;AAYHoB,cAAAA,QAAQ,CAACC,MAAT,mBAA2B,IAA3B;AACAD,cAAAA,QAAQ,CAACC,MAAT,oBAA4BL,OAA5B;AACAvB,cAAAA,MAAM,CAAC6B,SAAP,UAdG,CAcwB;;AAdxB;AAAA;;AAAA;AAiBH,oBAAKnB,QAAL,CAAc;AAAED,gBAAAA,YAAY,EAAE;AAAhB,eAAd;;AACA,oBAAKC,QAAL,CAAc;AAAEF,gBAAAA,OAAO,EAAE;AAAX,eAAd;;AAlBG;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAqBL,oBAAKE,QAAL,CAAc;AAAED,gBAAAA,YAAY,EAAE,YAAIqB;AAApB,eAAd;;AACA,oBAAKpB,QAAL,CAAc;AAAEF,gBAAAA,OAAO,EAAE;AAAX,eAAd;;AAtBK;AAAA;AAAA;;AAAA;AAyBP,oBAAKE,QAAL,CAAc;AAAED,gBAAAA,YAAY,EAAE;AAAhB,eAAd;;AACA,oBAAKC,QAAL,CAAc;AAAEF,gBAAAA,OAAO,EAAE;AAAX,eAAd;;AA1BO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;;;;;;AALT;AACAmB,cAAAA,QAAQ,CAACC,MAAT,mBAA2B,KAA3B;AACAD,cAAAA,QAAQ,CAACC,MAAT;;;;;;;;;;;iCAiCW;AAAA;;AACX,aACE,MAAC,IAAD;AAAM,QAAA,SAAS,EAAC,QAAhB;AAAyB,QAAA,KAAK,EAAE;AAAEG,UAAAA,MAAM,EAAE;AAAV,SAAhC;AAAmD,QAAA,aAAa,EAAC;AAAjE,SACE,MAAC,IAAD,CAAM,MAAN;AAAa,QAAA,KAAK,EAAE;AAAEC,UAAAA,QAAQ,EAAE;AAAZ;AAApB,SACE,MAAC,MAAD;AAAQ,QAAA,EAAE,EAAC,IAAX;AAAgB,QAAA,SAAS,EAAC;AAA1B,SACE,MAAC,IAAD;AAAM,QAAA,IAAI,EAAC;AAAX,QADF,2BADF,EAIE,MAAC,IAAD;AAAM,QAAA,IAAI,EAAC,OAAX;AAAmB,QAAA,KAAK,EAAE,CAAC,CAAC,KAAKrB,KAAL,CAAWF;AAAvC,SACE,MAAC,OAAD;AAAS,QAAA,OAAO;AAAhB,SACE,MAAC,IAAD,CAAM,KAAN,QACE,iDADF,EAEE,MAAC,KAAD;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,YAAY,EAAC,MAFjB;AAGI,QAAA,WAAW,EAAC,sBAHhB;AAII,QAAA,KAAK,EAAE,KAAKE,KAAL,CAAWL,YAJtB;AAKI,QAAA,QAAQ,EAAE,kBAAA2B,KAAK;AAAA,iBAAI,MAAI,CAACvB,QAAL,CAAc;AAAEJ,YAAAA,YAAY,EAAE2B,KAAK,CAACC,MAAN,CAAaC;AAA7B,WAAd,CAAJ;AAAA;AALnB,QAFF,CADF,EAWE,MAAC,IAAD,CAAM,KAAN,QACE,MAAC,KAAD;AACI,QAAA,IAAI,EAAC,KADT;AAEI,QAAA,YAAY,EAAC,MAFjB;AAGI,QAAA,WAAW,EAAC,UAHhB;AAII,QAAA,IAAI,EAAC,UAJT;AAKI,QAAA,KAAK,EAAE,KAAKxB,KAAL,CAAWJ,QALtB;AAMI,QAAA,QAAQ,EAAE,kBAAA0B,KAAK;AAAA,iBAAI,MAAI,CAACvB,QAAL,CAAc;AAAEH,YAAAA,QAAQ,EAAE0B,KAAK,CAACC,MAAN,CAAaC;AAAzB,WAAd,CAAJ;AAAA;AANnB,QADF,CAXF,EAqBE,MAAC,KAAD;AAAO,QAAA,IAAI,EAAE,KAAKxB,KAAL,CAAWH,OAAxB;AAAiC,QAAA,OAAO,EAAE,MAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,MAAd;AAAqB,UAAA,KAAK,MAA1B;AAA2B,UAAA,IAAI,EAAC,OAAhC;AAAwC,UAAA,OAAO,EAAE,KAAK4B;AAAtD,mBAA1C;AAA0H,QAAA,KAAK,MAA/H;AAAgI,QAAA,IAAI,EAAC;AAArI,SACE,MAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,UAAb;AAAwB,QAAA,OAAO,EAAC;AAAhC,QADF,EAEE,MAAC,KAAD,CAAO,OAAP,QACE,MAAC,MAAD;AAAQ,QAAA,MAAM,MAAd;AAAe,QAAA,MAAM,EAAC;AAAtB,sCADF,CAFF,CArBF,EA6BE,MAAC,OAAD;AAAS,QAAA,KAAK,MAAd;AAAe,QAAA,MAAM,EAAC,OAAtB;AAA8B,QAAA,OAAO,EAAE,KAAKzB,KAAL,CAAWF;AAAlD,QA7BF,CADF,CAJF,EAqCE,MAAC,OAAD,oDAEE,MAAC,KAAD;AAAO,QAAA,OAAO,EAAE;AAAG,UAAA,IAAI,EAAC;AAAR,uBAAhB;AAAmD,QAAA,KAAK,MAAxD;AAAyD,QAAA,IAAI,EAAC;AAA9D,SACE,MAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,UAAb;AAAwB,QAAA,OAAO,EAAC;AAAhC,QADF,EAEE,MAAC,KAAD,CAAO,OAAP,QACE,MAAC,MAAD;AAAQ,QAAA,MAAM,MAAd;AAAe,QAAA,MAAM,EAAC;AAAtB,uCADF,CAFF,CAFF,CArCF,CADF,CADF;AAqDD;;;6BAEQ;AACP,aACE,MAAC,WAAD,QACI,MAAC,KAAD,CAAO,QAAP,QACG,KAAK4B,UAAL,EADH,EAEE,MAAC,OAAD;AAAS,QAAA,MAAM;AAAf,QAFF,EAGE,MAAC,SAAD,QACE,MAAC,MAAD;AAAQ,QAAA,EAAE,EAAC,IAAX;AAAgB,QAAA,SAAS,EAAC;AAA1B,SACE,MAAC,IAAD;AAAM,QAAA,IAAI,EAAC;AAAX,QADF,uBADF,EAIE,MAAC,KAAD;AACE,QAAA,EAAE,EAAC,aADL;AAEE,QAAA,MAAM,EAAC,SAFT;AAGE,QAAA,WAAW,EAAC;AAHd,QAJF,CAHF,CADJ,CADF;AAkBD;;;;EAxHqBvD,S;;AA2HxB,eAAeuB,SAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Form, Container, Divider, Input, Embed,\r\n   Segment, Message, Icon, Modal, Header, Loader, Grid } from 'semantic-ui-react'\r\nimport LoginLayout from '../components/LoginLayout';\r\nimport web3 from '../ethereum/web3';\r\nimport factory from '../ethereum/factory';\r\nimport credentials from '../ethereum/credentials';\r\nimport { Router } from '../routes';\r\nimport { validate } from '../utils/functions';\r\nimport cookies from 'next-cookies';\r\nvar passwordHash = require('password-hash');\r\n\r\nclass LoginPage extends Component {\r\n\r\n  state = {\r\n    emailAddress:'',\r\n    password:'',\r\n    loading: false,\r\n    errorMessage:''\r\n  };\r\n\r\n  async componentDidMount() {\r\n    // Delete any existing Cookies\r\n    document.cookie = `login=${false}; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT`;\r\n    document.cookie = `wallet=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT`;\r\n  };\r\n\r\n  onSubmit = async () => {\r\n    this.setState({ loading: true, errorMessage: '' });\r\n    // Check for valid NTU Student Email Address\r\n    if (validate(this.state.emailAddress)){\r\n      try {\r\n        const _passwordHash = await credentials.methods.getPasswordHash(this.state.emailAddress).call();\r\n        console.log(_passwordHash);\r\n        // Authenticate the Email Address and ensure Email Address is not blacklisted\r\n        if (passwordHash.verify(this.state.password, _passwordHash) && !await credentials.methods.emailNotBlackList(this.state.emailAddress).call()){\r\n          const _walletAddress = await credentials.methods.getBinding\r\n          const account = await credentials.methods.getEthWallet(this.state.emailAddress).call();\r\n          await web3.eth.personal.unlockAccount(account, this.state.password, 3600);\r\n          document.cookie = `login=${true}; path=/`;\r\n          document.cookie = `wallet=${account}; path=/`;\r\n          Router.pushRoute(`/home`); // Automatic redirect the user.\r\n        }\r\n        else {\r\n          this.setState({ errorMessage: \"Wrong Email Address or Email Address Blacklisted\" });\r\n          this.setState({ loading: false });\r\n        }\r\n      } catch (err) {\r\n        this.setState({ errorMessage: err.message });\r\n        this.setState({ loading: false });\r\n      }\r\n    } else {\r\n      this.setState({ errorMessage: \"Invalid Email Address\" });\r\n      this.setState({ loading: false });\r\n    }\r\n  };\r\n\r\n  renderForm() {\r\n    return(\r\n      <Grid textAlign='center' style={{ height: '40%' }} verticalAlign='middle'>\r\n        <Grid.Column style={{ maxWidth: 450 }}>\r\n          <Header as='h2' textAlign='center'>\r\n            <Icon name='ethereum' /> Login to your account\r\n          </Header>\r\n          <Form size='large' error={!!this.state.errorMessage}>\r\n            <Segment stacked>\r\n              <Form.Field>\r\n                <label>NTU Student Email Address</label>\r\n                <Input\r\n                    icon='user'\r\n                    iconPosition='left'\r\n                    placeholder='example@e.ntu.edu.sg'\r\n                    value={this.state.emailAddress}\r\n                    onChange={event => this.setState({ emailAddress: event.target.value})}\r\n                />\r\n              </Form.Field>\r\n              <Form.Field>\r\n                <Input\r\n                    icon='key'\r\n                    iconPosition='left'\r\n                    placeholder='Password'\r\n                    type='password'\r\n                    value={this.state.password}\r\n                    onChange={event => this.setState({ password: event.target.value})}\r\n                />\r\n              </Form.Field>\r\n              <Modal open={this.state.loading} trigger={<Button color='blue' fluid size='large' onClick={this.onSubmit}>Login</Button>} basic size='small'>\r\n                <Header icon='ethereum' content='Verifying Your Email Address' />\r\n                <Modal.Content>\r\n                  <Loader active inline=\"centered\">\r\n                    Authenticating Credentials\r\n                  </Loader>\r\n                </Modal.Content>\r\n              </Modal>\r\n              <Message error header=\"Oops!\" content={this.state.errorMessage} />\r\n            </Segment>\r\n          </Form>\r\n          <Message>\r\n            Hi there, first time here? Click here to\r\n            <Modal trigger={<a href=\"/register\"> register</a>} basic size='small'>\r\n              <Header icon='ethereum' content='Please Hang On While We Redirect You' />\r\n              <Modal.Content>\r\n                <Loader active inline=\"centered\">\r\n                  Redirecting to Registration\r\n                </Loader>\r\n              </Modal.Content>\r\n            </Modal>\r\n          </Message>\r\n        </Grid.Column>\r\n    </Grid>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <LoginLayout>\r\n          <React.Fragment>\r\n            {this.renderForm()}\r\n            <Divider hidden/>\r\n            <Container>\r\n              <Header as='h2' textAlign='center'>\r\n                <Icon name='video' /> Watch Video Guide\r\n              </Header>\r\n              <Embed\r\n                id='jImWp6P62FQ'\r\n                source='youtube'\r\n                aspectRatio='16:9'\r\n              />\r\n            </Container>\r\n          </React.Fragment>\r\n      </LoginLayout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginPage;\r\n"]},"metadata":{},"sourceType":"module"}