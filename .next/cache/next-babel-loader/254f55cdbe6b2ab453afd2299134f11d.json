{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport _ from 'lodash';\nimport { Segment, Container, Divider, Header, Modal, Button, Loader, Icon, Table } from 'semantic-ui-react';\nimport Layout from '../components/Layout';\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\nimport Profile from '../ethereum/profile';\nimport cookies from 'next-cookies';\n\nvar LeaderboardPage = /*#__PURE__*/function (_Component) {\n  _inherits(LeaderboardPage, _Component);\n\n  var _super = _createSuper(LeaderboardPage);\n\n  function LeaderboardPage(props) {\n    var _this;\n\n    _classCallCheck(this, LeaderboardPage);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSort\", function (clickedColumn) {\n      return function () {\n        var _this$state = _this.state,\n            column = _this$state.column,\n            leaderboardData = _this$state.leaderboardData,\n            direction = _this$state.direction;\n\n        if (column !== clickedColumn) {\n          _this.setState({\n            column: clickedColumn,\n            leaderboardData: _.sortBy(leaderboardData, [clickedColumn]),\n            direction: 'ascending'\n          });\n\n          return;\n        }\n\n        _this.setState({\n          leaderboardData: leaderboardData.reverse(),\n          direction: direction === 'ascending' ? 'descending' : 'ascending'\n        });\n      };\n    });\n\n    _this.state = {\n      login: false,\n      loading: true,\n      accountType: null,\n      column: null,\n      direction: null,\n      leaderboardData: []\n    };\n    return _this;\n  }\n\n  _createClass(LeaderboardPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var login, profileAddress, profile, accountType, ethWallet, accountPointMapping, i, points;\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(typeof web3 === 'undefined')) {\n                _context.next = 3;\n                break;\n              }\n\n              this.setState({\n                loading: false\n              });\n              return _context.abrupt(\"return\");\n\n            case 3:\n              login = false;\n\n              if (!this.props.isLogin) {\n                _context.next = 34;\n                break;\n              }\n\n              login = true; // Get Account Type\n\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(factory.methods.getProfile(this.props.account).call());\n\n            case 8:\n              profileAddress = _context.sent;\n              profile = Profile(profileAddress);\n              _context.next = 12;\n              return _regeneratorRuntime.awrap(profile.methods.getAccountType().call());\n\n            case 12:\n              accountType = _context.sent;\n              accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"; // Retireve an array of addresses of ethWallets registered\n\n              _context.next = 16;\n              return _regeneratorRuntime.awrap(factory.methods.getEthWallets().call());\n\n            case 16:\n              ethWallet = _context.sent;\n              accountPointMapping = [];\n              i = 0;\n\n            case 19:\n              if (!(i < ethWallet.length)) {\n                _context.next = 31;\n                break;\n              }\n\n              _context.next = 22;\n              return _regeneratorRuntime.awrap(factory.methods.getProfile(ethWallet[i]).call());\n\n            case 22:\n              profileAddress = _context.sent;\n              profile = Profile(profileAddress);\n              _context.next = 26;\n              return _regeneratorRuntime.awrap(profile.methods.getPoints().call());\n\n            case 26:\n              points = _context.sent;\n              accountPointMapping.push({\n                account: ethWallet[i],\n                points: parseInt(points)\n              });\n\n            case 28:\n              i++;\n              _context.next = 19;\n              break;\n\n            case 31:\n              // Set the states required for the Leaderboard and ensure it is descending by default\n              this.setState({\n                leaderboardData: _.sortBy(accountPointMapping, ['points']).reverse()\n              });\n              this.setState({\n                login: login\n              });\n              this.setState({\n                accountType: accountType\n              });\n\n            case 34:\n              this.setState({\n                loading: false\n              });\n\n            case 35:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    } // Function to handle the sorting of leaderboard\n\n  }, {\n    key: \"renderLeaderBoard\",\n    value: function renderLeaderBoard() {\n      var _this$state2 = this.state,\n          column = _this$state2.column,\n          data = _this$state2.data,\n          direction = _this$state2.direction;\n      return __jsx(Container, null, __jsx(Table, {\n        basic: \"very\",\n        celled: true,\n        sortable: true\n      }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, {\n        textAlign: \"center\"\n      }, \"Account\"), __jsx(Table.HeaderCell, {\n        textAlign: \"center\",\n        sorted: column === 'points' ? direction : null,\n        onClick: this.handleSort('points')\n      }, \"Point(s)\"))), __jsx(Table.Body, null, this.renderUserList())));\n    }\n  }, {\n    key: \"renderUserList\",\n    value: function renderUserList() {\n      return this.state.leaderboardData.map(function (item, index) {\n        return __jsx(Table.Row, {\n          key: index\n        }, __jsx(Table.Cell, {\n          textAlign: \"center\"\n        }, item.account), __jsx(Table.Cell, {\n          textAlign: \"center\"\n        }, item.points));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.login) {\n        return __jsx(Layout, {\n          accountType: this.state.accountType,\n          page: 'Leaderboard'\n        }, __jsx(Container, null, __jsx(Divider, {\n          hidden: true\n        }), __jsx(Segment, {\n          raised: true,\n          textAlign: \"left\"\n        }, __jsx(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, __jsx(Icon, {\n          name: \"chess king\"\n        }), \"Current Leaderboard Standings\")), this.renderLeaderBoard(), __jsx(Divider, null), __jsx(\"p\", {\n          style: {\n            fontSize: '20px'\n          }\n        }, __jsx(Icon, {\n          name: \"question\"\n        }), \"How are points awarded?\"), __jsx(Divider, null), __jsx(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, __jsx(\"b\", null, \"When you ask a question:\"), \" 5 Points\"), __jsx(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, __jsx(\"b\", null, \"When you are rewarded for your answer:\"), \" 4 Points\"), __jsx(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, __jsx(\"b\", null, \"When you submit an answer:\"), \" 2 Points\"), __jsx(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, __jsx(\"b\", null, \"When the answer you approved gets awarded:\"), \" 2 Points\"), __jsx(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, __jsx(\"b\", null, \"When you approve an answer:\"), \" 1 Point\"), __jsx(Divider, null), __jsx(\"p\", {\n          style: {\n            fontSize: '20px'\n          }\n        }, __jsx(Icon, {\n          name: \"question\"\n        }), \"What can I do with my points?\"), __jsx(Divider, null), __jsx(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, \"Upon reaching \", __jsx(\"b\", null, \"100 points\"), \", you can exchange for \", __jsx(\"b\", null, \"5 EQTs\")), __jsx(Divider, null), __jsx(\"p\", {\n          style: {\n            fontSize: '20px'\n          }\n        }, __jsx(Icon, {\n          name: \"question\"\n        }), \"What is EthQuestionToken (EQT)\"), __jsx(Divider, null), __jsx(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, \"Cryptocurrency that is used within the Question Answering System and can be exchanged using Ether(s). Each user is given \", __jsx(\"b\", null, \"10 EQTs\"), \" upon signing up. User can be rewarded additional EQTs by providing answers with the highest approvals for each question.\")));\n      } else {\n        return __jsx(Layout, {\n          accountType: this.state.accountType\n        }, __jsx(AccountIssueModal, {\n          loading: this.state.loading,\n          login: this.state.login\n        }));\n      }\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      return _regeneratorRuntime.async(function getInitialProps$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", {\n                isLogin: cookies(props).login || '',\n                account: cookies(props).wallet || ''\n              });\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return LeaderboardPage;\n}(Component);\n\nexport default LeaderboardPage;","map":{"version":3,"sources":["C:/Users/edd1e/Desktop/ethQuestion_1.0/pages/leaderboard.js"],"names":["React","Component","AccountIssueModal","_","Segment","Container","Divider","Header","Modal","Button","Loader","Icon","Table","Layout","web3","factory","Profile","cookies","LeaderboardPage","props","clickedColumn","state","column","leaderboardData","direction","setState","sortBy","reverse","login","loading","accountType","isLogin","methods","getProfile","account","call","profileAddress","profile","getAccountType","getEthWallets","ethWallet","accountPointMapping","i","length","getPoints","points","push","parseInt","data","handleSort","renderUserList","map","item","index","renderLeaderBoard","fontSize","wallet"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport AccountIssueModal from '../components/AccountIssueModal';\r\nimport _ from 'lodash';\r\nimport { Segment, Container, Divider, Header, Modal,\r\n  Button, Loader, Icon, Table } from 'semantic-ui-react';\r\nimport Layout from '../components/Layout';\r\nimport web3 from '../ethereum/web3';\r\nimport factory from '../ethereum/factory';\r\nimport Profile from '../ethereum/profile';\r\nimport cookies from 'next-cookies';\r\n\r\nclass LeaderboardPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      login: false,\r\n      loading: true,\r\n      accountType: null,\r\n      column: null,\r\n      direction: null,\r\n      leaderboardData: []\r\n    };\r\n  }\r\n\r\n  static async getInitialProps(props) {\r\n    return { isLogin: cookies(props).login || '' , account: cookies(props).wallet || '' };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (typeof web3 === 'undefined') {\r\n      this.setState({ loading: false })\r\n      return\r\n    }\r\n    let login = false;\r\n    if (this.props.isLogin) {\r\n      login = true;\r\n      // Get Account Type\r\n      let profileAddress = await factory.methods.getProfile(this.props.account).call();\r\n      let profile = Profile(profileAddress);\r\n      let accountType = await profile.methods.getAccountType().call();\r\n      accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"\r\n\r\n      // Retireve an array of addresses of ethWallets registered\r\n      let ethWallet = await factory.methods.getEthWallets().call();\r\n      let accountPointMapping = [];\r\n\r\n      for (let i=0; i<ethWallet.length; i++) {\r\n        profileAddress = await factory.methods.getProfile(ethWallet[i]).call();\r\n        profile = Profile(profileAddress);\r\n        let points = await profile.methods.getPoints().call();\r\n        accountPointMapping.push({\r\n          account: ethWallet[i],\r\n          points: parseInt(points)\r\n        });\r\n      }\r\n      // Set the states required for the Leaderboard and ensure it is descending by default\r\n      this.setState( { leaderboardData: _.sortBy(accountPointMapping, ['points']).reverse() });\r\n      this.setState( { login: login });\r\n      this.setState( { accountType: accountType });\r\n    }\r\n    this.setState( { loading: false });\r\n  }\r\n\r\n  // Function to handle the sorting of leaderboard\r\n  handleSort = (clickedColumn) => () => {\r\n    const { column, leaderboardData, direction } = this.state\r\n    if (column !== clickedColumn) {\r\n      this.setState({\r\n        column: clickedColumn,\r\n        leaderboardData: _.sortBy(leaderboardData, [clickedColumn]),\r\n        direction: 'ascending',\r\n      })\r\n      return\r\n    }\r\n    this.setState({\r\n      leaderboardData: leaderboardData.reverse(),\r\n      direction: direction === 'ascending' ? 'descending' : 'ascending',\r\n    })\r\n  }\r\n\r\n  renderLeaderBoard() {\r\n    const { column, data, direction } = this.state\r\n    return (\r\n      <Container>\r\n        <Table basic='very' celled sortable>\r\n          <Table.Header>\r\n            <Table.Row>\r\n              <Table.HeaderCell textAlign='center'>Account</Table.HeaderCell>\r\n              <Table.HeaderCell\r\n                textAlign='center'\r\n                sorted={column === 'points' ? direction : null}\r\n                onClick={this.handleSort('points')}>\r\n              Point(s)\r\n              </Table.HeaderCell>\r\n            </Table.Row>\r\n          </Table.Header>\r\n          <Table.Body>\r\n            {this.renderUserList()}\r\n          </Table.Body>\r\n        </Table>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  renderUserList() {\r\n    return this.state.leaderboardData.map((item, index) => {\r\n      return (\r\n        <Table.Row key={index}>\r\n          <Table.Cell textAlign='center'>\r\n            {item.account}\r\n          </Table.Cell>\r\n          <Table.Cell textAlign='center'>\r\n            {item.points}\r\n          </Table.Cell>\r\n        </Table.Row>\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.login) {\r\n      return (\r\n        <Layout accountType={this.state.accountType} page={'Leaderboard'}>\r\n          <Container>\r\n            <Divider hidden/>\r\n            <Segment raised textAlign='left'>\r\n              <Header as='h2' textAlign='center'>\r\n                <Icon name=\"chess king\"/>Current Leaderboard Standings\r\n              </Header>\r\n            </Segment>\r\n            {this.renderLeaderBoard()}\r\n            <Divider />\r\n            <p style={{fontSize:'20px'}}>\r\n              <Icon name=\"question\"/>How are points awarded?\r\n            </p>\r\n            <Divider />\r\n            <p style={{fontSize:'16px'}}><b>When you ask a question:</b> 5 Points</p>\r\n            <p style={{fontSize:'16px'}}><b>When you are rewarded for your answer:</b> 4 Points</p>\r\n            <p style={{fontSize:'16px'}}><b>When you submit an answer:</b> 2 Points</p>\r\n            <p style={{fontSize:'16px'}}><b>When the answer you approved gets awarded:</b> 2 Points</p>\r\n            <p style={{fontSize:'16px'}}><b>When you approve an answer:</b> 1 Point</p>\r\n            <Divider />\r\n            <p style={{fontSize:'20px'}}>\r\n              <Icon name=\"question\"/>What can I do with my points?\r\n            </p>\r\n            <Divider />\r\n            <p style={{fontSize:'16px'}}>Upon reaching <b>100 points</b>, you can exchange for <b>5 EQTs</b></p>\r\n            <Divider />\r\n            <p style={{fontSize:'20px'}}>\r\n              <Icon name=\"question\"/>What is EthQuestionToken (EQT)\r\n            </p>\r\n            <Divider />\r\n            <p style={{fontSize:'16px'}}>\r\n              Cryptocurrency that is used within the Question Answering System and can be exchanged using Ether(s).\r\n              Each user is given <b>10 EQTs</b> upon signing up. User can be rewarded additional EQTs by providing answers with the highest approvals\r\n              for each question.\r\n            </p>\r\n          </Container>\r\n        </Layout>\r\n      )\r\n    } else {\r\n      return (\r\n        <Layout accountType={this.state.accountType}>\r\n          <AccountIssueModal loading={this.state.loading} login={this.state.login} />\r\n        </Layout>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default LeaderboardPage;\r\n"]},"metadata":{},"sourceType":"module"}