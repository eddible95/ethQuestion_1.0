{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport _ from 'lodash';\nimport { Segment, Container, Divider, Header, Modal, Button, Loader, Icon, Table } from 'semantic-ui-react';\nimport Layout from '../components/Layout';\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\nimport Profile from '../ethereum/profile';\nimport cookies from 'next-cookies';\n\nvar LeaderboardPage = /*#__PURE__*/function (_Component) {\n  _inherits(LeaderboardPage, _Component);\n\n  var _super = _createSuper(LeaderboardPage);\n\n  function LeaderboardPage(props) {\n    var _this;\n\n    _classCallCheck(this, LeaderboardPage);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSort\", function (clickedColumn) {\n      return function () {\n        var _this$state = _this.state,\n            column = _this$state.column,\n            leaderboardData = _this$state.leaderboardData,\n            direction = _this$state.direction;\n\n        if (column !== clickedColumn) {\n          _this.setState({\n            column: clickedColumn,\n            leaderboardData: _.sortBy(leaderboardData, [clickedColumn]),\n            direction: 'ascending'\n          });\n\n          return;\n        }\n\n        _this.setState({\n          leaderboardData: leaderboardData.reverse(),\n          direction: direction === 'ascending' ? 'descending' : 'ascending'\n        });\n      };\n    });\n\n    _this.state = {\n      login: false,\n      loading: true,\n      accountType: null,\n      column: null,\n      direction: null,\n      leaderboardData: []\n    };\n    return _this;\n  }\n\n  _createClass(LeaderboardPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var login, profileAddress, profile, accountType, ethWallet, accountPointMapping, i, points;\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(typeof web3 === 'undefined')) {\n                _context.next = 3;\n                break;\n              }\n\n              this.setState({\n                loading: false\n              });\n              return _context.abrupt(\"return\");\n\n            case 3:\n              login = false;\n\n              if (!this.props.isLogin) {\n                _context.next = 34;\n                break;\n              }\n\n              login = true; // Get Account Type\n\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(factory.methods.getProfile(this.props.account).call());\n\n            case 8:\n              profileAddress = _context.sent;\n              profile = Profile(profileAddress);\n              _context.next = 12;\n              return _regeneratorRuntime.awrap(profile.methods.getAccountType().call());\n\n            case 12:\n              accountType = _context.sent;\n              accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"; // Retireve an array of addresses of ethWallets registered\n\n              _context.next = 16;\n              return _regeneratorRuntime.awrap(factory.methods.getEthWallets().call());\n\n            case 16:\n              ethWallet = _context.sent;\n              accountPointMapping = [];\n              i = 0;\n\n            case 19:\n              if (!(i < ethWallet.length)) {\n                _context.next = 31;\n                break;\n              }\n\n              _context.next = 22;\n              return _regeneratorRuntime.awrap(factory.methods.getProfile(ethWallet[i]).call());\n\n            case 22:\n              profileAddress = _context.sent;\n              profile = Profile(profileAddress);\n              _context.next = 26;\n              return _regeneratorRuntime.awrap(profile.methods.getPoints().call());\n\n            case 26:\n              points = _context.sent;\n              accountPointMapping.push({\n                account: ethWallet[i],\n                points: parseInt(points)\n              });\n\n            case 28:\n              i++;\n              _context.next = 19;\n              break;\n\n            case 31:\n              // Set the states required for the Leaderboard and ensure it is descending by default\n              this.setState({\n                leaderboardData: _.sortBy(accountPointMapping, ['points']).reverse()\n              });\n              this.setState({\n                login: login\n              });\n              this.setState({\n                accountType: accountType\n              });\n\n            case 34:\n              this.setState({\n                loading: false\n              });\n\n            case 35:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    } // Function to handle the sorting of leaderboard\n\n  }, {\n    key: \"renderLeaderBoard\",\n    value: function renderLeaderBoard() {\n      var _this$state2 = this.state,\n          column = _this$state2.column,\n          data = _this$state2.data,\n          direction = _this$state2.direction;\n      return __jsx(Container, null, __jsx(Table, {\n        basic: \"very\",\n        celled: true,\n        sortable: true\n      }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, {\n        textAlign: \"center\"\n      }, \"Account\"), __jsx(Table.HeaderCell, {\n        textAlign: \"center\",\n        sorted: column === 'points' ? direction : null,\n        onClick: this.handleSort('points')\n      }, \"Point(s)\"))), __jsx(Table.Body, null, this.renderUserList())));\n    }\n  }, {\n    key: \"renderUserList\",\n    value: function renderUserList() {\n      return this.state.leaderboardData.map(function (item, index) {\n        return __jsx(Table.Row, {\n          key: index\n        }, __jsx(Table.Cell, {\n          textAlign: \"center\"\n        }, item.account), __jsx(Table.Cell, {\n          textAlign: \"center\"\n        }, item.points));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.login) {\n        return __jsx(Layout, {\n          accountType: this.state.accountType,\n          page: 'Leaderboard'\n        }, __jsx(Container, null, __jsx(Divider, {\n          hidden: true\n        }), __jsx(Segment, {\n          raised: true,\n          textAlign: \"left\"\n        }, __jsx(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, __jsx(Icon, {\n          name: \"chess king\"\n        }), \"Current Leaderboard Standings\")), this.renderLeaderBoard(), __jsx(Divider, null), __jsx(\"p\", {\n          style: {\n            fontSize: '20px'\n          }\n        }, __jsx(Icon, {\n          name: \"question\"\n        }), \"How are points awarded?\"), __jsx(Divider, null), __jsx(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, __jsx(\"b\", null, \"When you ask a question:\"), \" 5 Points\"), __jsx(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, __jsx(\"b\", null, \"When you are rewarded for your answer:\"), \" 4 Points\"), __jsx(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, __jsx(\"b\", null, \"When you submit an answer:\"), \" 2 Points\"), __jsx(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, __jsx(\"b\", null, \"When the answer you approved gets awarded:\"), \" 2 Points\"), __jsx(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, __jsx(\"b\", null, \"When you approve an answer:\"), \" 1 Point\"), __jsx(Divider, null), __jsx(\"p\", {\n          style: {\n            fontSize: '20px'\n          }\n        }, __jsx(Icon, {\n          name: \"question\"\n        }), \"What can I do with my points?\"), __jsx(Divider, null), __jsx(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, \"Upon reaching \", __jsx(\"b\", null, \"100 points\"), \", you can exchange for \", __jsx(\"b\", null, \"5 EQTs\")), __jsx(Divider, null), __jsx(\"p\", {\n          style: {\n            fontSize: '20px'\n          }\n        }, __jsx(Icon, {\n          name: \"question\"\n        }), \"What is EthQuestionToken (EQT)\"), __jsx(Divider, null), __jsx(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, \"Cryptocurrency that is used within the Question Answering System and can be exchanged using Ether(s). Each user is given \", __jsx(\"b\", null, \"10 EQTs\"), \" upon signing up. User can be rewarded additional EQTs by providing answers with the highest approvals for each question.\")));\n      } else {\n        return __jsx(Layout, {\n          accountType: this.state.accountType\n        }, __jsx(AccountIssueModal, {\n          loading: this.state.loading,\n          login: this.state.login\n        }));\n      }\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      return _regeneratorRuntime.async(function getInitialProps$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", {\n                isLogin: cookies(props).login || '',\n                account: cookies(props).wallet || ''\n              });\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return LeaderboardPage;\n}(Component);\n\nexport default LeaderboardPage;","map":null,"metadata":{},"sourceType":"module"}