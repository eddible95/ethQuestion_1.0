{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { Button, Card, Segment, Container, List, Transition, Popup, Modal, Header, Icon, Divider, Form, Input, Message } from \"semantic-ui-react\";\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport TimeOutModal from '../components/TimeOutModal';\nimport web3 from '../ethereum/web3';\nimport Layout from '../components/Layout';\nimport factory from '../ethereum/factory';\nimport credentials from '../ethereum/credentials';\nimport EthQuestionToken from '../ethereum/token';\nimport EthQuestionTokenSale from '../ethereum/tokenSale';\nimport Profile from '../ethereum/profile';\nimport { Router } from '../routes';\nimport { checkRewardField, logging } from '../utils/functions';\nimport cookies from 'next-cookies';\n\nvar userProfile = /*#__PURE__*/function (_Component) {\n  _inherits(userProfile, _Component);\n\n  var _super = _createSuper(userProfile);\n\n  function userProfile(props) {\n    var _this;\n\n    _classCallCheck(this, userProfile);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleVisibility\", function () {\n      return _this.setState(function (prevState) {\n        return {\n          visible: !prevState.visible\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"topUp\", function _callee() {\n      var account, profileAddress, logTransaction;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                toppingUp: true,\n                errorMessage: ''\n              });\n\n              if (!checkRewardField(_this.state.topUpAmount)) {\n                _context.next = 21;\n                break;\n              }\n\n              _context.prev = 2;\n              account = _this.state.account;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(factory.methods.getProfile(account).call());\n\n            case 6:\n              profileAddress = _context.sent;\n              logTransaction = logging(\"Top Up: \" + _this.state.topUpAmount + \" EQT(s)\");\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(EthQuestionTokenSale.methods.buyTokens(_this.state.topUpAmount * 1e4, EthQuestionToken._address, profileAddress, logTransaction).send({\n                from: account,\n                value: _this.state.topUpAmount * 1e4 * _this.state.tokenPrice,\n                gasPrice: '0'\n              }));\n\n            case 10:\n              Router.pushRoute('/home'); // Automatic redirect the user.\n\n              _context.next = 19;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](2);\n\n              if (_context.t0.message == \"Returned error: authentication needed: password or unlock\") {\n                _this.setState({\n                  timeout: true\n                });\n              }\n\n              _this.setState({\n                errorMessage: _context.t0.message\n              });\n\n              _this.setState({\n                error: true\n              });\n\n              _this.setState({\n                toppingUp: false\n              });\n\n            case 19:\n              _context.next = 24;\n              break;\n\n            case 21:\n              _this.setState({\n                errorMessage: \"Required Field(s) Empty or Invalid Input\"\n              });\n\n              _this.setState({\n                error: true\n              });\n\n              _this.setState({\n                toppingUp: false\n              });\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[2, 13]], Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"exchange\", function _callee2() {\n      var account, profileAddress, logTransaction;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _this.setState({\n                exchanging: true,\n                errorMessage: ''\n              });\n\n              _context2.prev = 1;\n              account = _this.state.account;\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(factory.methods.getProfile(account).call());\n\n            case 5:\n              profileAddress = _context2.sent;\n              logTransaction = logging(\"Exchange: 100 Points for 5 EQT(s)\");\n              _context2.next = 9;\n              return _regeneratorRuntime.awrap(EthQuestionTokenSale.methods.exchangeTokens(EthQuestionToken._address, profileAddress, logTransaction).send({\n                from: account,\n                gasPrice: '0'\n              }));\n\n            case 9:\n              Router.pushRoute('/home'); // Automatic redirect the user.\n\n              _context2.next = 17;\n              break;\n\n            case 12:\n              _context2.prev = 12;\n              _context2.t0 = _context2[\"catch\"](1);\n\n              if (_context2.t0.message == \"Returned error: authentication needed: password or unlock\") {\n                _this.setState({\n                  timeout: true\n                });\n              } else {\n                _this.setState({\n                  errorMessage: _context2.t0.message + \" Insufficient Points\"\n                });\n              }\n\n              _this.setState({\n                error: true\n              });\n\n              _this.setState({\n                exchanging: false\n              });\n\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[1, 12]], Promise);\n    });\n\n    _this.state = {\n      visible: false,\n      login: false,\n      loading: true,\n      timeout: false,\n      accountType: null,\n      account: null,\n      token: null,\n      emailAddress: null,\n      points: null,\n      transactions: [],\n      topUpModalOpen: false,\n      topUp: false,\n      topUpAmount: '',\n      error: false,\n      errorMessage: '',\n      tokenPrice: '',\n      exchanging: false\n    };\n    return _this;\n  }\n\n  _createClass(userProfile, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var login, account, profileAddress, profile, emailAddress, token, etherBalance, points, transactions, tokenPrice, accountType;\n      return _regeneratorRuntime.async(function componentDidMount$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(typeof web3 === 'undefined')) {\n                _context3.next = 3;\n                break;\n              }\n\n              this.setState({\n                loading: false\n              });\n              return _context3.abrupt(\"return\");\n\n            case 3:\n              login = false;\n\n              if (!this.props.isLogin) {\n                _context3.next = 35;\n                break;\n              }\n\n              login = true; // Get profile data\n\n              account = this.props.account;\n              _context3.next = 9;\n              return _regeneratorRuntime.awrap(factory.methods.getProfile(account).call());\n\n            case 9:\n              profileAddress = _context3.sent;\n              profile = Profile(profileAddress);\n              _context3.next = 13;\n              return _regeneratorRuntime.awrap(credentials.methods.getBinding(account).call());\n\n            case 13:\n              emailAddress = _context3.sent;\n              _context3.next = 16;\n              return _regeneratorRuntime.awrap(EthQuestionToken.methods.balanceOf(account).call());\n\n            case 16:\n              _context3.t0 = _context3.sent;\n              token = (_context3.t0 * 1e-4).toFixed(4);\n              _context3.next = 20;\n              return _regeneratorRuntime.awrap(web3.eth.getBalance(account));\n\n            case 20:\n              etherBalance = _context3.sent;\n              _context3.next = 23;\n              return _regeneratorRuntime.awrap(profile.methods.getPoints().call());\n\n            case 23:\n              points = _context3.sent;\n              _context3.next = 26;\n              return _regeneratorRuntime.awrap(profile.methods.getTransactions().call());\n\n            case 26:\n              transactions = _context3.sent;\n              _context3.next = 29;\n              return _regeneratorRuntime.awrap(EthQuestionTokenSale.methods.getTokenPrice().call());\n\n            case 29:\n              tokenPrice = _context3.sent;\n              _context3.next = 32;\n              return _regeneratorRuntime.awrap(profile.methods.getAccountType().call());\n\n            case 32:\n              accountType = _context3.sent;\n              accountType == 0 ? accountType = \"Admin\" : accountType = \"User\";\n              this.setState({\n                accountType: accountType,\n                account: account,\n                token: token,\n                etherBalance: etherBalance,\n                emailAddress: emailAddress,\n                points: points,\n                transactions: transactions,\n                login: true,\n                tokenPrice: tokenPrice\n              });\n\n            case 35:\n              this.setState({\n                loading: false\n              });\n\n            case 36:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"renderTransactions\",\n    value: function renderTransactions() {\n      var transactions = this.state.transactions;\n      return transactions.map(function (transaction, index) {\n        return __jsx(List.Item, {\n          key: index\n        }, __jsx(List.Icon, {\n          name: \"calendar outline\",\n          size: \"large\",\n          verticalAlign: \"middle\"\n        }), __jsx(List.Content, null, transaction));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.state.login) {\n        return __jsx(Layout, {\n          accountType: this.state.accountType,\n          page: \"Profile\"\n        }, __jsx(Divider, {\n          hidden: true\n        }), __jsx(Container, null, __jsx(Card, {\n          color: \"red\",\n          centered: true,\n          fluid: true\n        }, __jsx(Card.Content, null, __jsx(Header, {\n          as: \"h1\",\n          textAlign: \"center\"\n        }, __jsx(Icon, {\n          name: \"user\",\n          circular: true\n        })), __jsx(Card.Header, {\n          textAlign: \"center\"\n        }, \"Account Details:\", __jsx(\"div\", {\n          style: {\n            color: \"red\",\n            fontSize: \"small\",\n            wordWrap: \"break-word\"\n          }\n        }, this.state.account)), __jsx(Card.Meta, {\n          textAlign: \"center\"\n        }, __jsx(\"b\", null, this.state.accountType)), __jsx(Card.Description, {\n          textAlign: \"center\"\n        }, __jsx(\"b\", null, \"EQT Balance:\"), \" \", this.state.token, __jsx(Popup, {\n          trigger: __jsx(Button, {\n            icon: \"ethereum\",\n            onClick: function onClick() {\n              _this2.setState({\n                topUpModalOpen: true,\n                topUpAmount: '',\n                error: false,\n                errorMessage: ''\n              });\n            },\n            floated: \"right\",\n            size: \"mini\",\n            color: \"green\"\n          }),\n          content: \"Top Up EQT(s)\",\n          inverted: true\n        })), __jsx(Card.Description, {\n          textAlign: \"center\"\n        }, __jsx(\"b\", null, \"Ether Balance:\"), \" \", this.state.etherBalance), __jsx(Card.Description, {\n          textAlign: \"center\"\n        }, __jsx(\"b\", null, \"Points Accumulated:\"), \" \", this.state.points), __jsx(Card.Description, {\n          textAlign: \"center\"\n        }, __jsx(\"b\", null, \"Valid Email Address:\"), \" \", this.state.emailAddress)))), __jsx(Divider, {\n          hidden: true\n        }), __jsx(Container, null, __jsx(Segment, {\n          textAlign: \"center\"\n        }, __jsx(\"b\", {\n          style: {\n            fontSize: \"20px\"\n          }\n        }, \"Transaction History\"), __jsx(Popup, {\n          trigger: __jsx(Button, {\n            icon: this.state.visible ? \"minus\" : \"plus\",\n            onClick: this.toggleVisibility,\n            floated: \"right\",\n            size: \"mini\"\n          }),\n          content: \"Click to expand/close\",\n          inverted: true\n        })), __jsx(Transition, {\n          visible: this.state.visible,\n          animation: \"scale\",\n          duration: 500\n        }, __jsx(List, {\n          divided: true,\n          size: \"huge\"\n        }, this.renderTransactions())), __jsx(Modal, {\n          open: this.state.topUpModalOpen,\n          size: \"small\"\n        }, __jsx(Header, {\n          icon: \"ethereum\",\n          content: \"Topping Up EQT(s)\"\n        }), __jsx(Modal.Content, null, __jsx(Form, {\n          error: !!this.state.errorMessage,\n          style: {\n            marginTop: '10px'\n          }\n        }, __jsx(Form.Field, {\n          required: true\n        }, __jsx(\"label\", null, \"Top Up Amount (1 EQT = \", this.state.tokenPrice * 1e-18, \" Ether)\"), __jsx(Input, {\n          label: \"EQT(s)\",\n          labelPosition: \"right\",\n          placeholder: \"Enter EQT Value\",\n          value: this.state.topUpAmount,\n          onChange: function onChange(event) {\n            return _this2.setState({\n              topUpAmount: event.target.value\n            });\n          }\n        }))), __jsx(Message, {\n          error: true,\n          header: \"Oops!\",\n          content: this.state.errorMessage,\n          hidden: !this.state.error\n        })), __jsx(Modal.Actions, null, __jsx(Button, {\n          color: \"red\",\n          onClick: function onClick() {\n            _this2.setState({\n              topUpModalOpen: false\n            });\n          }\n        }, __jsx(Icon, {\n          name: \"remove\"\n        }), \" Cancel\"), __jsx(Button, {\n          color: \"green\",\n          onClick: this.topUp,\n          loading: this.state.toppingUp\n        }, __jsx(Icon, {\n          name: \"checkmark\"\n        }), \" Top Up\"), __jsx(Button, {\n          color: \"green\",\n          onClick: this.exchange,\n          loading: this.state.exchanging\n        }, __jsx(Icon, {\n          name: \"exchange\"\n        }), \" Exchange With Points\")))), __jsx(TimeOutModal, {\n          timeout: this.state.timeout\n        }));\n      } else {\n        return __jsx(Layout, {\n          accountType: this.state.accountType\n        }, __jsx(AccountIssueModal, {\n          loading: this.state.loading,\n          login: this.state.login\n        }));\n      }\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      return _regeneratorRuntime.async(function getInitialProps$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", {\n                isLogin: cookies(props).login || '',\n                account: cookies(props).wallet || ''\n              });\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return userProfile;\n}(Component);\n\nexport default userProfile;","map":null,"metadata":{},"sourceType":"module"}