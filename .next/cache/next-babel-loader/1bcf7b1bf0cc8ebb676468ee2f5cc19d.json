{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport MobileDetect from 'mobile-detect';\nimport { Container, Segment, Header, Divider, Responsive, Button, Icon, TextArea, Modal, Loader, Message, Form, Grid, Label, Progress } from \"semantic-ui-react\";\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport TimeOutModal from '../components/TimeOutModal';\nimport Layout from '../components/Layout';\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\nimport Profile from '../ethereum/profile';\nimport credentials from '../ethereum/credentials';\nimport feedback from '../ethereum/feedback';\nimport { getWidthFactory } from '../utils/device';\nimport { checkFieldEmpty } from '../utils/functions';\nimport { Router } from '../routes';\nimport cookies from 'next-cookies';\n\nvar FeedbackPage = /*#__PURE__*/function (_Component) {\n  _inherits(FeedbackPage, _Component);\n\n  var _super = _createSuper(FeedbackPage);\n\n  function FeedbackPage(props) {\n    var _this;\n\n    _classCallCheck(this, FeedbackPage);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", function _callee() {\n      var account, emailAddress, comments;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              }); // Ensures all fields are filled\n\n\n              if (!(checkFieldEmpty(_this.state.like) && checkFieldEmpty(_this.state.usefulness) && checkFieldEmpty(_this.state.easy))) {\n                _context.next = 20;\n                break;\n              }\n\n              _context.prev = 2;\n              account = _this.props.account;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(credentials.methods.getBinding(account).call());\n\n            case 6:\n              emailAddress = _context.sent;\n              comments = \"Comments provided by \" + emailAddress + \": \" + _this.state.comments;\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(feedback.methods.updateFeedback(_this.state.like, _this.state.usefulness, _this.state.easy, comments).send({\n                from: account,\n                gasPrice: '0'\n              }));\n\n            case 10:\n              Router.pushRoute('/home'); // Automatic redirect the user.\n\n              _context.next = 17;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](2);\n\n              if (_context.t0.message == \"Returned error: authentication needed: password or unlock\") {\n                _this.setState({\n                  timeout: true\n                });\n              }\n\n              _this.setState({\n                errorMessage: _context.t0.message\n              });\n\n            case 17:\n              _this.setState({\n                loading: false\n              });\n\n              _context.next = 22;\n              break;\n\n            case 20:\n              _this.setState({\n                errorMessage: \"Required Field(s) Empty\"\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[2, 13]], Promise);\n    });\n\n    _this.state = {\n      like: \"\",\n      usefulness: \"\",\n      easy: \"\",\n      comments: \"\",\n      loading: false,\n      errorMessage: \"\",\n      login: false,\n      resourceLoading: true,\n      timeout: false,\n      accountType: null,\n      statistics: []\n    };\n    return _this;\n  }\n\n  _createClass(FeedbackPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var login, profileAddress, profile, accountType, statistics;\n      return _regeneratorRuntime.async(function componentDidMount$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(typeof web3 === 'undefined')) {\n                _context2.next = 3;\n                break;\n              }\n\n              this.setState({\n                loading: false\n              });\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              login = false;\n\n              if (!this.props.isLogin) {\n                _context2.next = 20;\n                break;\n              }\n\n              login = true; // Get Account Type\n\n              _context2.next = 8;\n              return _regeneratorRuntime.awrap(factory.methods.getProfile(this.props.account).call());\n\n            case 8:\n              profileAddress = _context2.sent;\n              profile = Profile(profileAddress);\n              _context2.next = 12;\n              return _regeneratorRuntime.awrap(profile.methods.getAccountType().call());\n\n            case 12:\n              accountType = _context2.sent;\n              accountType == 0 ? accountType = \"Admin\" : accountType = \"User\";\n              _context2.next = 16;\n              return _regeneratorRuntime.awrap(feedback.methods.getSummaryStatistics().call());\n\n            case 16:\n              statistics = _context2.sent;\n              this.setState({\n                login: login\n              });\n              this.setState({\n                accountType: accountType\n              });\n              this.setState({\n                statistics: statistics\n              });\n\n            case 20:\n              this.setState({\n                resourceLoading: false\n              });\n\n            case 21:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    } // Submit the question to be stored on the Ethereum Blockchain\n\n  }, {\n    key: \"renderStatistic\",\n    value: function renderStatistic() {\n      var numOfLikes = this.state.statistics[0];\n      var numOfDislikes = this.state.statistics[1];\n      var numOfUseful = this.state.statistics[2];\n      var numOfNotUseful = this.state.statistics[3];\n      var numOfEasy = this.state.statistics[4];\n      var numOfNotEasy = this.state.statistics[5];\n      var totalRatings = Number(numOfLikes) + Number(numOfDislikes);\n      return __jsx(Segment, null, __jsx(Header, {\n        as: \"h3\",\n        textAlign: \"center\"\n      }, __jsx(Icon, {\n        name: \"chart bar outline\"\n      }), \"Summary Statistics of System\"), __jsx(\"p\", {\n        style: {\n          textAlign: 'center'\n        }\n      }, __jsx(\"b\", null, \"Total Rating(s):\"), \" \", totalRatings), __jsx(Grid, {\n        centered: true,\n        columns: 2\n      }, __jsx(Grid.Column, {\n        style: {\n          paddingLeft: \"10px\",\n          paddingRight: \"0\",\n          width: \"30%\"\n        }\n      }, __jsx(Label, {\n        horizontal: true\n      }, \"Likes\")), __jsx(Grid.Column, {\n        style: {\n          paddingLeft: \"0\",\n          paddingRight: \"10px\",\n          width: \"70%\"\n        }\n      }, __jsx(Progress, {\n        color: \"green\",\n        value: numOfLikes,\n        total: totalRatings,\n        progress: \"percent\",\n        precision: 2,\n        style: {\n          margin: \"0\"\n        }\n      })), __jsx(Grid.Column, {\n        style: {\n          paddingLeft: \"10px\",\n          paddingRight: \"0\",\n          width: \"30%\"\n        }\n      }, __jsx(Label, {\n        horizontal: true\n      }, \"Useful\")), __jsx(Grid.Column, {\n        style: {\n          paddingLeft: \"0\",\n          paddingRight: \"10px\",\n          width: \"70%\"\n        }\n      }, __jsx(Progress, {\n        color: \"green\",\n        value: numOfUseful,\n        total: totalRatings,\n        progress: \"percent\",\n        precision: 2,\n        style: {\n          margin: \"0\"\n        }\n      })), __jsx(Grid.Column, {\n        style: {\n          paddingLeft: \"10px\",\n          paddingRight: \"0\",\n          width: \"30%\"\n        }\n      }, __jsx(Label, {\n        horizontal: true\n      }, \"Easy To Use\")), __jsx(Grid.Column, {\n        style: {\n          paddingLeft: \"0\",\n          paddingRight: \"10px\",\n          width: \"70%\"\n        }\n      }, __jsx(Progress, {\n        color: \"green\",\n        value: numOfEasy,\n        total: totalRatings,\n        progress: \"percent\",\n        precision: 2,\n        style: {\n          margin: \"0\"\n        }\n      }))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.state.login) {\n        return __jsx(Layout, {\n          accountType: this.state.accountType,\n          page: \"Feedback\"\n        }, __jsx(Divider, {\n          hidden: true\n        }), __jsx(Container, {\n          style: {\n            width: \"70vw\"\n          }\n        }, __jsx(Segment, {\n          raised: true\n        }, __jsx(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"Collection of Feedback For System\"))), __jsx(Divider, {\n          hidden: true\n        }), __jsx(Grid, {\n          centered: true\n        }, __jsx(Grid.Column, {\n          width: 8\n        }, __jsx(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, \"Please provided feedback via the Google Form below:\"), __jsx(\"a\", {\n          style: {\n            display: \"table-cell\"\n          },\n          href: \"https://forms.gle/g4MstrdxWFLtcC6V6\",\n          target: \"_blank\"\n        }, \"Link to Google Form\"), __jsx(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, \"Do you like the system?\"), __jsx(\"p\", null, \"Selected Choice: \", __jsx(\"b\", null, this.state.like.toString())), __jsx(Button, {\n          icon: true,\n          labelPosition: \"left\",\n          color: \"green\",\n          compact: true,\n          onClick: function onClick() {\n            _this2.setState({\n              like: true\n            });\n          }\n        }, __jsx(Icon, {\n          name: \"thumbs up outline\"\n        }), \"Yes\"), __jsx(Button, {\n          icon: true,\n          labelPosition: \"left\",\n          color: \"red\",\n          compact: true,\n          onClick: function onClick() {\n            _this2.setState({\n              like: false\n            });\n          }\n        }, __jsx(Icon, {\n          name: \"thumbs down outline\"\n        }), \"No\"), __jsx(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, \"Do you find the system useful?\"), __jsx(\"p\", null, \"Selected Choice: \", __jsx(\"b\", null, this.state.usefulness.toString())), __jsx(Button, {\n          icon: true,\n          labelPosition: \"left\",\n          color: \"green\",\n          compact: true,\n          onClick: function onClick() {\n            _this2.setState({\n              usefulness: true\n            });\n          }\n        }, __jsx(Icon, {\n          name: \"thumbs up outline\"\n        }), \"Yes\"), __jsx(Button, {\n          icon: true,\n          labelPosition: \"left\",\n          color: \"red\",\n          compact: true,\n          onClick: function onClick() {\n            _this2.setState({\n              usefulness: false\n            });\n          }\n        }, __jsx(Icon, {\n          name: \"thumbs down outline\"\n        }), \"No\"), __jsx(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, \"Do you find the system easy to use?\"), __jsx(\"p\", null, \"Selected Choice: \", __jsx(\"b\", null, this.state.easy.toString())), __jsx(Button, {\n          icon: true,\n          labelPosition: \"left\",\n          color: \"green\",\n          compact: true,\n          onClick: function onClick() {\n            _this2.setState({\n              easy: true\n            });\n          }\n        }, __jsx(Icon, {\n          name: \"thumbs up outline\"\n        }), \"Yes\"), __jsx(Button, {\n          icon: true,\n          labelPosition: \"left\",\n          color: \"red\",\n          compact: true,\n          onClick: function onClick() {\n            _this2.setState({\n              easy: false\n            });\n          }\n        }, __jsx(Icon, {\n          name: \"thumbs down outline\"\n        }), \"No\"), __jsx(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, \"Any suggestions for improvments or other comments?\"), __jsx(Form, {\n          error: !!this.state.errorMessage,\n          style: {\n            marginTop: '10px'\n          }\n        }, __jsx(Form.Field, null, __jsx(TextArea, {\n          placeholder: \"Tell us more\",\n          style: {\n            width: \"100%\",\n            height: \"20%\"\n          },\n          value: this.state.comments,\n          onChange: function onChange(event) {\n            return _this2.setState({\n              comments: event.target.value\n            });\n          }\n        })), __jsx(Message, {\n          error: true,\n          header: \"Oops!\",\n          content: this.state.errorMessage\n        })), __jsx(Divider, {\n          hidden: true\n        }), __jsx(Modal, {\n          open: this.state.loading,\n          trigger: __jsx(Button, {\n            primary: true,\n            onClick: this.onSubmit\n          }, \"Submit Feedback\"),\n          basic: true,\n          size: \"small\"\n        }, __jsx(Header, {\n          content: \"Submitting Feedback\"\n        }), __jsx(Modal.Content, null, __jsx(\"p\", null, \"Please wait patiently as the system submits your feedback to the blockchain. Upon successful submission, you will be redirected to the Home Page.\"), __jsx(Loader, {\n          active: true,\n          inline: \"centered\"\n        }, \"Loading\")))), __jsx(Grid.Column, {\n          width: 4\n        }, __jsx(Responsive, {\n          fireOnMount: true,\n          getWidth: getWidthFactory(this.props.isMobileFromSSR),\n          minWidth: Responsive.onlyTablet.minWidth\n        }, this.renderStatistic()))), __jsx(TimeOutModal, {\n          timeout: this.state.timeout\n        }));\n      } else {\n        return __jsx(Layout, {\n          accountType: this.state.accountType\n        }, __jsx(AccountIssueModal, {\n          loading: this.state.resourceLoading,\n          login: this.state.login\n        }));\n      }\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      var isMobileFromSSR, device, md;\n      return _regeneratorRuntime.async(function getInitialProps$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              isMobileFromSSR = false;\n\n              if (props.req) {\n                device = props.req.headers[\"user-agent\"];\n                md = new MobileDetect(device);\n                isMobileFromSSR = !!md.mobile();\n              }\n\n              return _context3.abrupt(\"return\", {\n                isMobileFromSSR: isMobileFromSSR,\n                isLogin: cookies(props).login || '',\n                account: cookies(props).wallet || ''\n              });\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return FeedbackPage;\n}(Component);\n\nexport default FeedbackPage;","map":null,"metadata":{},"sourceType":"module"}