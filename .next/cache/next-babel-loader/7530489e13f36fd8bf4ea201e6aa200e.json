{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport _ from 'lodash';\nimport { Segment, Container, Divider, Header, Modal, Button, Loader, Icon, Table } from 'semantic-ui-react';\nimport Layout from '../components/Layout';\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\nimport Profile from '../ethereum/profile';\nimport cookies from 'next-cookies';\n\nclass LeaderboardPage extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleSort\", clickedColumn => () => {\n      const {\n        column,\n        leaderboardData,\n        direction\n      } = this.state;\n\n      if (column !== clickedColumn) {\n        this.setState({\n          column: clickedColumn,\n          leaderboardData: _.sortBy(leaderboardData, [clickedColumn]),\n          direction: 'ascending'\n        });\n        return;\n      }\n\n      this.setState({\n        leaderboardData: leaderboardData.reverse(),\n        direction: direction === 'ascending' ? 'descending' : 'ascending'\n      });\n    });\n\n    this.state = {\n      login: false,\n      loading: true,\n      accountType: null,\n      column: null,\n      direction: null,\n      leaderboardData: []\n    };\n  }\n\n  static async getInitialProps(props) {\n    return {\n      isLogin: cookies(props).login || '',\n      account: cookies(props).wallet || ''\n    };\n  }\n\n  async componentDidMount() {\n    if (typeof web3 === 'undefined') {\n      this.setState({\n        loading: false\n      });\n      return;\n    }\n\n    let login = false;\n\n    if (this.props.isLogin) {\n      login = true; // Get Account Type\n\n      let profileAddress = await factory.methods.getProfile(this.props.account).call();\n      let profile = Profile(profileAddress);\n      let accountType = await profile.methods.getAccountType().call();\n      accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"; // Retireve an array of addresses of ethWallets registered\n\n      let ethWallet = await factory.methods.getEthWallets().call();\n      let accountPointMapping = [];\n\n      for (let i = 0; i < ethWallet.length; i++) {\n        profileAddress = await factory.methods.getProfile(ethWallet[i]).call();\n        profile = Profile(profileAddress);\n        let points = await profile.methods.getPoints().call();\n        accountPointMapping.push({\n          account: ethWallet[i],\n          points: parseInt(points)\n        });\n      } // Set the states required for the Leaderboard and ensure it is descending by default\n\n\n      this.setState({\n        leaderboardData: _.sortBy(accountPointMapping, ['points']).reverse()\n      });\n      this.setState({\n        login: login\n      });\n      this.setState({\n        accountType: accountType\n      });\n    }\n\n    this.setState({\n      loading: false\n    });\n  } // Function to handle the sorting of leaderboard\n\n\n  renderLeaderBoard() {\n    const {\n      column,\n      data,\n      direction\n    } = this.state;\n    return __jsx(Container, null, __jsx(Table, {\n      basic: \"very\",\n      celled: true,\n      sortable: true\n    }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, {\n      textAlign: \"center\"\n    }, \"Account\"), __jsx(Table.HeaderCell, {\n      textAlign: \"center\",\n      sorted: column === 'points' ? direction : null,\n      onClick: this.handleSort('points')\n    }, \"Point(s)\"))), __jsx(Table.Body, null, this.renderUserList())));\n  }\n\n  renderUserList() {\n    return this.state.leaderboardData.map((item, index) => {\n      return __jsx(Table.Row, {\n        key: index\n      }, __jsx(Table.Cell, {\n        textAlign: \"center\"\n      }, item.account), __jsx(Table.Cell, {\n        textAlign: \"center\"\n      }, item.points));\n    });\n  }\n\n  render() {\n    if (this.state.login) {\n      return __jsx(Layout, {\n        accountType: this.state.accountType,\n        page: 'Leaderboard'\n      }, __jsx(Container, null, __jsx(Divider, {\n        hidden: true\n      }), __jsx(Segment, {\n        raised: true,\n        textAlign: \"left\"\n      }, __jsx(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, __jsx(Icon, {\n        name: \"chess king\"\n      }), \"Current Leaderboard Standings\")), this.renderLeaderBoard(), __jsx(Divider, null), __jsx(\"p\", {\n        style: {\n          fontSize: '20px'\n        }\n      }, __jsx(Icon, {\n        name: \"question\"\n      }), \"How are points awarded?\"), __jsx(Divider, null), __jsx(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, __jsx(\"b\", null, \"When you ask a question:\"), \" 5 Points\"), __jsx(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, __jsx(\"b\", null, \"When you are rewarded for your answer:\"), \" 4 Points\"), __jsx(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, __jsx(\"b\", null, \"When you submit an answer:\"), \" 2 Points\"), __jsx(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, __jsx(\"b\", null, \"When the answer you approved gets awarded:\"), \" 2 Points\"), __jsx(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, __jsx(\"b\", null, \"When you approve an answer:\"), \" 1 Point\"), __jsx(Divider, null), __jsx(\"p\", {\n        style: {\n          fontSize: '20px'\n        }\n      }, __jsx(Icon, {\n        name: \"question\"\n      }), \"What can I do with my points?\"), __jsx(Divider, null), __jsx(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, \"Upon reaching \", __jsx(\"b\", null, \"100 points\"), \", you can exchange for \", __jsx(\"b\", null, \"5 EQTs\")), __jsx(Divider, null), __jsx(\"p\", {\n        style: {\n          fontSize: '20px'\n        }\n      }, __jsx(Icon, {\n        name: \"question\"\n      }), \"What is EthQuestionToken (EQT)\"), __jsx(Divider, null), __jsx(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, \"Cryptocurrency that is used within the Question Answering System and can be exchanged using Ether(s). Each user is given \", __jsx(\"b\", null, \"10 EQTs\"), \" upon signing up. User can be rewarded additional EQTs by providing answers with the highest approvals for each question.\")));\n    } else {\n      return __jsx(Layout, {\n        accountType: this.state.accountType\n      }, __jsx(AccountIssueModal, {\n        loading: this.state.loading,\n        login: this.state.login\n      }));\n    }\n  }\n\n}\n\nexport default LeaderboardPage;","map":{"version":3,"sources":["C:/Users/edd1e/Desktop/ethQuestion_1.0/pages/leaderboard.js"],"names":["React","Component","AccountIssueModal","_","Segment","Container","Divider","Header","Modal","Button","Loader","Icon","Table","Layout","web3","factory","Profile","cookies","LeaderboardPage","constructor","props","clickedColumn","column","leaderboardData","direction","state","setState","sortBy","reverse","login","loading","accountType","getInitialProps","isLogin","account","wallet","componentDidMount","profileAddress","methods","getProfile","call","profile","getAccountType","ethWallet","getEthWallets","accountPointMapping","i","length","points","getPoints","push","parseInt","renderLeaderBoard","data","handleSort","renderUserList","map","item","index","render","fontSize"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport AccountIssueModal from '../components/AccountIssueModal';\r\nimport _ from 'lodash';\r\nimport { Segment, Container, Divider, Header, Modal,\r\n  Button, Loader, Icon, Table } from 'semantic-ui-react';\r\nimport Layout from '../components/Layout';\r\nimport web3 from '../ethereum/web3';\r\nimport factory from '../ethereum/factory';\r\nimport Profile from '../ethereum/profile';\r\nimport cookies from 'next-cookies';\r\n\r\nclass LeaderboardPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      login: false,\r\n      loading: true,\r\n      accountType: null,\r\n      column: null,\r\n      direction: null,\r\n      leaderboardData: []\r\n    };\r\n  }\r\n\r\n  static async getInitialProps(props) {\r\n    return { isLogin: cookies(props).login || '' , account: cookies(props).wallet || '' };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (typeof web3 === 'undefined') {\r\n      this.setState({ loading: false })\r\n      return\r\n    }\r\n    let login = false;\r\n    if (this.props.isLogin) {\r\n      login = true;\r\n      // Get Account Type\r\n      let profileAddress = await factory.methods.getProfile(this.props.account).call();\r\n      let profile = Profile(profileAddress);\r\n      let accountType = await profile.methods.getAccountType().call();\r\n      accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"\r\n\r\n      // Retireve an array of addresses of ethWallets registered\r\n      let ethWallet = await factory.methods.getEthWallets().call();\r\n      let accountPointMapping = [];\r\n\r\n      for (let i=0; i<ethWallet.length; i++) {\r\n        profileAddress = await factory.methods.getProfile(ethWallet[i]).call();\r\n        profile = Profile(profileAddress);\r\n        let points = await profile.methods.getPoints().call();\r\n        accountPointMapping.push({\r\n          account: ethWallet[i],\r\n          points: parseInt(points)\r\n        });\r\n      }\r\n      // Set the states required for the Leaderboard and ensure it is descending by default\r\n      this.setState( { leaderboardData: _.sortBy(accountPointMapping, ['points']).reverse() });\r\n      this.setState( { login: login });\r\n      this.setState( { accountType: accountType });\r\n    }\r\n    this.setState( { loading: false });\r\n  }\r\n\r\n  // Function to handle the sorting of leaderboard\r\n  handleSort = (clickedColumn) => () => {\r\n    const { column, leaderboardData, direction } = this.state\r\n    if (column !== clickedColumn) {\r\n      this.setState({\r\n        column: clickedColumn,\r\n        leaderboardData: _.sortBy(leaderboardData, [clickedColumn]),\r\n        direction: 'ascending',\r\n      })\r\n      return\r\n    }\r\n    this.setState({\r\n      leaderboardData: leaderboardData.reverse(),\r\n      direction: direction === 'ascending' ? 'descending' : 'ascending',\r\n    })\r\n  }\r\n\r\n  renderLeaderBoard() {\r\n    const { column, data, direction } = this.state\r\n    return (\r\n      <Container>\r\n        <Table basic='very' celled sortable>\r\n          <Table.Header>\r\n            <Table.Row>\r\n              <Table.HeaderCell textAlign='center'>Account</Table.HeaderCell>\r\n              <Table.HeaderCell\r\n                textAlign='center'\r\n                sorted={column === 'points' ? direction : null}\r\n                onClick={this.handleSort('points')}>\r\n              Point(s)\r\n              </Table.HeaderCell>\r\n            </Table.Row>\r\n          </Table.Header>\r\n          <Table.Body>\r\n            {this.renderUserList()}\r\n          </Table.Body>\r\n        </Table>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  renderUserList() {\r\n    return this.state.leaderboardData.map((item, index) => {\r\n      return (\r\n        <Table.Row key={index}>\r\n          <Table.Cell textAlign='center'>\r\n            {item.account}\r\n          </Table.Cell>\r\n          <Table.Cell textAlign='center'>\r\n            {item.points}\r\n          </Table.Cell>\r\n        </Table.Row>\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.login) {\r\n      return (\r\n        <Layout accountType={this.state.accountType} page={'Leaderboard'}>\r\n          <Container>\r\n            <Divider hidden/>\r\n            <Segment raised textAlign='left'>\r\n              <Header as='h2' textAlign='center'>\r\n                <Icon name=\"chess king\"/>Current Leaderboard Standings\r\n              </Header>\r\n            </Segment>\r\n            {this.renderLeaderBoard()}\r\n            <Divider />\r\n            <p style={{fontSize:'20px'}}>\r\n              <Icon name=\"question\"/>How are points awarded?\r\n            </p>\r\n            <Divider />\r\n            <p style={{fontSize:'16px'}}><b>When you ask a question:</b> 5 Points</p>\r\n            <p style={{fontSize:'16px'}}><b>When you are rewarded for your answer:</b> 4 Points</p>\r\n            <p style={{fontSize:'16px'}}><b>When you submit an answer:</b> 2 Points</p>\r\n            <p style={{fontSize:'16px'}}><b>When the answer you approved gets awarded:</b> 2 Points</p>\r\n            <p style={{fontSize:'16px'}}><b>When you approve an answer:</b> 1 Point</p>\r\n            <Divider />\r\n            <p style={{fontSize:'20px'}}>\r\n              <Icon name=\"question\"/>What can I do with my points?\r\n            </p>\r\n            <Divider />\r\n            <p style={{fontSize:'16px'}}>Upon reaching <b>100 points</b>, you can exchange for <b>5 EQTs</b></p>\r\n            <Divider />\r\n            <p style={{fontSize:'20px'}}>\r\n              <Icon name=\"question\"/>What is EthQuestionToken (EQT)\r\n            </p>\r\n            <Divider />\r\n            <p style={{fontSize:'16px'}}>\r\n              Cryptocurrency that is used within the Question Answering System and can be exchanged using Ether(s).\r\n              Each user is given <b>10 EQTs</b> upon signing up. User can be rewarded additional EQTs by providing answers with the highest approvals\r\n              for each question.\r\n            </p>\r\n          </Container>\r\n        </Layout>\r\n      )\r\n    } else {\r\n      return (\r\n        <Layout accountType={this.state.accountType}>\r\n          <AccountIssueModal loading={this.state.loading} login={this.state.login} />\r\n        </Layout>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default LeaderboardPage;\r\n"]},"metadata":{},"sourceType":"module"}