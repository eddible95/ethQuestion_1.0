{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport MobileDetect from 'mobile-detect';\nimport _ from 'lodash';\nimport { Button, Header, Table, Statistic, Rating, Grid, Loader, List, Popup, Divider, Container, Icon, Label, Progress, Segment, Modal, Responsive, Checkbox, Dropdown } from 'semantic-ui-react';\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport { getWidthFactory } from '../utils/device';\nimport factory from '../ethereum/factory';\nimport credentials from '../ethereum/credentials';\nimport Question from '../ethereum/question';\nimport Profile from '../ethereum/profile';\nimport Layout from '../components/Layout';\nimport { Link, Router } from '../routes';\nimport web3 from '../ethereum/web3';\nimport { search, sortingQuestions } from '../utils/functions';\nimport cookies from 'next-cookies';\n\nclass HomePage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      login: false,\n      accountType: null,\n      tags: [],\n      topTags: [],\n      loading: true,\n      sortBy: null,\n      data: [],\n      summaries: [],\n      questionLimit: 30,\n      questionLimitChoice: [],\n      isSSR: false,\n      isMining: false\n    };\n  }\n\n  static async getInitialProps(props) {\n    let isMobileFromSSR = false;\n    let queryValue = props.query.value;\n\n    if (props.req) {\n      const device = props.req.headers[\"user-agent\"];\n      const md = new MobileDetect(device);\n      isMobileFromSSR = !!md.mobile();\n    }\n\n    return {\n      isMobileFromSSR,\n      queryValue,\n      isLogin: cookies(props).login || '',\n      account: cookies(props).wallet || ''\n    };\n  }\n\n  async componentDidUpdate(prevProps) {\n    if (this.props != prevProps) {\n      this.fetchQuestionData();\n    }\n  }\n\n  async componentDidMount() {\n    if (typeof web3 === 'undefined') {\n      this.setState({\n        loading: false\n      });\n      return;\n    }\n\n    let login = false;\n\n    if (this.props.isLogin) {\n      login = true; // Get Account Type\n\n      let profileAddress = await factory.methods.getProfile(this.props.account).call();\n      let profile = Profile(profileAddress);\n      let accountType = await profile.methods.getAccountType().call();\n      accountType == 0 ? accountType = \"Admin\" : accountType = \"User\";\n      await this.fetchQuestionData();\n      this.setState({\n        login: login\n      });\n      this.setState({\n        accountType: accountType\n      });\n    }\n\n    this.setState({\n      loading: false\n    });\n  }\n\n  async fetchQuestionData() {\n    // Retrieve an array of addresses of questions deployed\n    let deployedQuestions = await factory.methods.getDeployedQuestions().call();\n    let deployedQuestionsCount = deployedQuestions.length;\n    this.setState({\n      deployedQuestionsCount: deployedQuestionsCount\n    }); // Retrieve the summaries of all deployed questions\n\n    let summaries = [];\n    let searchItem; //filter the questions based on search value\n\n    if (this.props.queryValue != undefined && this.props.queryValue != 'favicon.ico') {\n      searchItem = decodeURIComponent(this.props.queryValue);\n      deployedQuestions = await search(searchItem, deployedQuestions);\n      deployedQuestionsCount = deployedQuestions.length;\n    }\n\n    for (let i = 0; i < deployedQuestionsCount; i++) {\n      let question = Question(deployedQuestions[i]);\n      let summary = await question.methods.getSummary().call(); // Filter out flagged questions\n\n      if (!summary[9]) {\n        summaries[i] = summary;\n        let answerList = await question.methods.getAnswerList().call();\n        summaries[i][10] = answerList.length;\n        summaries[i][11] = deployedQuestions[i];\n      }\n    }\n\n    summaries = summaries.reverse(); // Displays questions in interval of 30\n\n    let questionLimitChoice = [30];\n    let choice = Math.floor(summaries.length / 30);\n\n    for (let i = 1; i <= choice; i++) {\n      questionLimitChoice.push(30 * (i + 1));\n    } // Get the top 10 used tags\n\n\n    let tags = {};\n    summaries = summaries.slice(0, this.state.questionLimit);\n    summaries.forEach(summary => {\n      summary[8].forEach(tag => {\n        if (tags[tag] == undefined) {\n          tags[tag] = 1;\n        } else {\n          tags[tag] = tags[tag] + 1;\n        }\n      });\n    });\n    let sortedTags = Object.keys(tags).map(function (key) {\n      return [key, tags[key]];\n    }); // Sort the array based on the second element\n\n    sortedTags.sort(function (first, second) {\n      return second[1] - first[1];\n    }); // Array of all tags\n\n    let tagList = [];\n    sortedTags.forEach(tag => {\n      tagList.push(tag[0]);\n    }); // Array with only the first 10 items\n\n    tags = [];\n    sortedTags.slice(0, 10).forEach(tag => {\n      tags.push(tag[0]);\n    });\n    let isMining = await web3.eth.isMining();\n    let blockNumber = await web3.eth.getBlockNumber();\n    let users = await factory.methods.getEthWallets().call();\n    this.setState({\n      isMining: isMining,\n      blockNumber: blockNumber,\n      users: users.length\n    });\n    this.setState({\n      topTags: tags\n    });\n    this.setState({\n      tags: tagList\n    });\n    this.setState({\n      summaries: summaries\n    });\n    this.setState({\n      questionLimitChoice: questionLimitChoice\n    });\n  }\n\n  renderQuestionHeader() {\n    return __jsx(Table.Row, null, __jsx(Table.HeaderCell, {\n      textAlign: \"center\",\n      width: 2\n    }, __jsx(\"span\", {\n      style: {\n        fontSize: 15,\n        color: '#6A737C'\n      }\n    }, \"Current Phase\")), __jsx(Table.HeaderCell, {\n      textAlign: \"center\",\n      width: 2\n    }, __jsx(\"span\", {\n      style: {\n        fontSize: 15,\n        color: '#6A737C'\n      }\n    }, \"Answers Submitted\")), __jsx(Table.HeaderCell, {\n      textAlign: \"center\",\n      width: 2\n    }, __jsx(\"span\", {\n      style: {\n        fontSize: 15,\n        color: '#6A737C'\n      }\n    }, \"Reward\")), __jsx(Table.HeaderCell, {\n      textAlign: \"center\"\n    }, __jsx(\"span\", {\n      style: {\n        fontSize: 15,\n        color: '#6A737C'\n      }\n    }, \"Question Title\")));\n  } // Renders out the list of question\n\n\n  renderQuestionList() {\n    let summaries = this.state.summaries;\n    summaries = sortingQuestions(summaries, this.state.sortBy);\n    return summaries.map((summary, index) => {\n      const questionState = summary[4];\n      const tagList = summary[8];\n      return __jsx(Table.Row, {\n        key: index\n      }, __jsx(Table.Cell, {\n        textAlign: \"center\",\n        width: 2\n      }, questionState == 0 ? __jsx(Statistic, {\n        size: \"mini\",\n        color: \"red\"\n      }, __jsx(Statistic.Value, null, __jsx(\"span\", {\n        style: {\n          fontSize: 15,\n          color: 'red'\n        }\n      }, \" Answering\")), __jsx(Statistic.Label, null, __jsx(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Phase\"))) : questionState == 1 ? __jsx(Statistic, {\n        size: \"mini\",\n        color: \"red\"\n      }, __jsx(Statistic.Value, null, __jsx(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#C9C633'\n        }\n      }, \" Voting\")), __jsx(Statistic.Label, null, __jsx(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Phase\"))) : __jsx(Statistic, {\n        size: \"mini\",\n        color: \"red\"\n      }, __jsx(Statistic.Value, null, __jsx(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#10EE44'\n        }\n      }, \" Rewarded\")), __jsx(Statistic.Label, null, __jsx(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Phase\")))), __jsx(Table.Cell, {\n        textAlign: \"center\",\n        width: 2\n      }, __jsx(Statistic, {\n        size: \"mini\",\n        color: \"red\"\n      }, __jsx(Statistic.Value, null, __jsx(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, summary[10])), __jsx(Statistic.Label, null, __jsx(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"answer(s)\")))), __jsx(Table.Cell, {\n        textAlign: \"center\",\n        width: 2\n      }, __jsx(Statistic, {\n        size: \"mini\",\n        color: \"red\"\n      }, __jsx(Statistic.Value, null, __jsx(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, summary[2] * 1e-4)), __jsx(Statistic.Label, null, __jsx(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"EQT(s)\")))), __jsx(Table.Cell, {\n        textAlign: \"left\"\n      }, __jsx(Grid.Row, {\n        textAlign: \"left\"\n      }, __jsx(\"span\", {\n        style: {\n          fontSize: 18,\n          color: '#6A737C',\n          cursor: 'pointer'\n        },\n        onClick: () => Router.pushRoute(`/questions/${summary[11]}`)\n      }, __jsx(\"a\", null, summary[0]))), this.renderTag(tagList, \"mini\")));\n    });\n  }\n\n  renderMobileQuestionList() {\n    let summaries = this.state.summaries;\n    summaries = sortingQuestions(summaries, this.state.sortBy);\n    return summaries.map((summary, index) => {\n      const tags = summary[8];\n      const questionState = summary[4];\n      const tagList = summary[8];\n      return __jsx(List.Item, {\n        key: index\n      }, __jsx(List.Icon, {\n        name: \"question circle\",\n        size: \"large\",\n        verticalAlign: \"middle\"\n      }), __jsx(List.Content, null, __jsx(List.Header, {\n        as: \"a\",\n        onClick: () => Router.pushRoute(`/questions/${summary[11]}`)\n      }, summary[0]), __jsx(Grid, null, __jsx(Grid.Column, {\n        width: 10\n      }, __jsx(List.Description, null, \"Number of Answer(s): \" + summary[10]), __jsx(List.Description, null, \"Reward: \" + summary[2] * 1e-4 + \" EQT(s)\"), this.renderTag(tags, \"mini\")), __jsx(Grid.Column, {\n        width: 4\n      }, questionState == 0 ? __jsx(List.Description, null, __jsx(\"b\", null, __jsx(\"font\", {\n        color: \"red\"\n      }, \"ANSWERING PHASE\"))) : questionState == 1 ? __jsx(List.Description, null, __jsx(\"b\", null, __jsx(\"font\", {\n        color: \"#C9C633\"\n      }, \"VOTING PHASE\"))) : __jsx(List.Description, null, __jsx(\"b\", null, __jsx(\"font\", {\n        color: \"#10EE44\"\n      }, \"REWARDED PHASE\")))))), __jsx(Divider, {\n        hidden: true\n      }));\n    });\n  } // Render each tag individually for each question\n\n\n  renderTag(tagList, tagSize) {\n    const tagColours = [\"red\", \"olive\", \"blue\", \"teal\", \"green\"];\n    return tagList.map((tag, index) => {\n      return __jsx(Label, {\n        as: \"a\",\n        onClick: () => Router.pushRoute(`/${'search/' + encodeURIComponent(tag)}`),\n        tag: true,\n        size: tagSize,\n        key: index,\n        color: tagColours[index % 5]\n      }, tag);\n    });\n  }\n\n  renderTopTags() {\n    return __jsx(Segment, null, __jsx(Header, {\n      as: \"h3\",\n      textAlign: \"center\"\n    }, __jsx(Icon, {\n      name: \"tags\"\n    }), \"Top 10 Tags\"), this.renderTag(this.state.topTags, \"medium\"));\n  }\n\n  renderAbout() {\n    return __jsx(Segment, null, __jsx(Header, {\n      as: \"h3\",\n      textAlign: \"center\"\n    }, __jsx(Icon, {\n      name: \"question\"\n    }), \"What Are Question Phases\"), __jsx(\"span\", {\n      style: {\n        fontSize: 18,\n        color: 'red'\n      }\n    }, \"ANSWERING\"), __jsx(\"p\", {\n      style: {\n        fontSize: 15\n      }\n    }, \"You can submit answers but answers will not be shown\"), __jsx(\"span\", {\n      style: {\n        fontSize: 18,\n        color: '#C9C633'\n      }\n    }, \"VOTING\"), __jsx(\"p\", {\n      style: {\n        fontSize: 15\n      }\n    }, \"You can only approve answers submitted\"), __jsx(\"span\", {\n      style: {\n        fontSize: 18,\n        color: '#10EE44'\n      }\n    }, \"REWARDED\"), __jsx(\"p\", {\n      style: {\n        fontSize: 15\n      }\n    }, \"Someone has already earned the reward for the question\"));\n  }\n\n  renderQuestionStatistics() {\n    return __jsx(Segment, null, __jsx(Statistic.Group, {\n      horizontal: true,\n      color: \"red\"\n    }, __jsx(Statistic, null, __jsx(Statistic.Value, null, this.state.deployedQuestionsCount), __jsx(Statistic.Label, null, \"Questions Asked\"))), __jsx(Statistic.Group, {\n      horizontal: true,\n      color: \"yellow\"\n    }, __jsx(Statistic, null, __jsx(Statistic.Value, null, this.state.users), __jsx(Statistic.Label, null, \"Active Users\"))));\n  }\n\n  renderBlockChainStatistics() {\n    return __jsx(Segment, null, __jsx(Header, {\n      as: \"h3\",\n      textAlign: \"center\"\n    }, __jsx(Icon, {\n      name: \"ethereum\"\n    }), \"Block-Chain Status\"), this.state.isMining ? __jsx(Statistic.Value, null, __jsx(\"span\", {\n      style: {\n        fontSize: 18,\n        color: 'green'\n      }\n    }, \"Currently Mining\")) : __jsx(Statistic.Value, null, __jsx(\"span\", {\n      style: {\n        fontSize: 18,\n        color: 'red'\n      }\n    }, \"Currently Not Mining\")), __jsx(Statistic.Group, {\n      horizontal: true,\n      color: \"green\"\n    }, __jsx(Statistic, null, __jsx(Statistic.Value, null, this.state.blockNumber), __jsx(Statistic.Label, null, \"Blocks Mined\"))), \"*When blockchain is not mining, do not create any transaction\");\n  }\n\n  renderSortSettings() {\n    const options = ['Ascending Phase', 'Descending Phase', 'Ascending Answers', 'Descending Answers', 'Ascending Rewards', 'Descending Rewards'];\n    return __jsx(\"span\", null, __jsx(Dropdown, {\n      text: \"Sorting Questions\",\n      multiple: true\n    }, __jsx(Dropdown.Menu, null, __jsx(Dropdown.Header, {\n      icon: \"filter\",\n      content: \"Sorting Options\"\n    }), __jsx(Dropdown.Menu, {\n      scrolling: true\n    }, options.map((tag, index) => __jsx(Dropdown.Item, {\n      key: index,\n      text: tag,\n      onClick: () => this.setState({\n        sortBy: index\n      })\n    }))))));\n  }\n\n  renderFilterSettings() {\n    const tagColours = [\"red\", \"olive\", \"blue\", \"teal\", \"green\"];\n    return __jsx(\"span\", null, __jsx(Dropdown, {\n      text: \"Filter Questions\",\n      multiple: true\n    }, __jsx(Dropdown.Menu, null, __jsx(Dropdown.Header, {\n      icon: \"tags\",\n      content: \"Tag Label\"\n    }), __jsx(Dropdown.Menu, {\n      scrolling: true\n    }, this.state.tags.map((tag, index) => __jsx(Dropdown.Item, {\n      key: index,\n      text: tag,\n      label: {\n        color: tagColours[index % 6],\n        empty: true,\n        circular: true\n      },\n      onClick: () => Router.pushRoute(`/${'search/' + encodeURIComponent(tag)}`)\n    }))))));\n  }\n\n  renderQuestionLimitSettings() {\n    return __jsx(Dropdown, {\n      text: \"Viewing Limit\",\n      multiple: true\n    }, __jsx(Dropdown.Menu, null, __jsx(Dropdown.Header, {\n      icon: \"list\",\n      content: \"Question Limit\"\n    }), __jsx(Dropdown.Menu, {\n      scrolling: true\n    }, this.state.questionLimitChoice.map((choice, index) => __jsx(Dropdown.Item, {\n      key: index,\n      text: choice,\n      onClick: async () => {\n        await this.setState({\n          questionLimit: choice\n        });\n        this.fetchQuestionData();\n      }\n    })))));\n  }\n\n  render() {\n    if (this.state.login) {\n      return __jsx(Layout, {\n        accountType: this.state.accountType,\n        page: \"Home\"\n      }, __jsx(Responsive, {\n        fireOnMount: true,\n        getWidth: getWidthFactory(this.props.isMobileFromSSR),\n        minWidth: Responsive.onlyTablet.minWidth\n      }, __jsx(Divider, {\n        hidden: true\n      }), __jsx(Grid, {\n        centered: true\n      }, __jsx(Grid.Column, {\n        width: 10\n      }, __jsx(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"Questions Asked\"), __jsx(Segment, {\n        textAlign: \"center\"\n      }, this.renderSortSettings(), this.renderFilterSettings(), this.renderQuestionLimitSettings(), __jsx(Button, {\n        onClick: () => {\n          this.setState({\n            sortBy: ''\n          });\n          Router.pushRoute(`/home`);\n        }\n      }, \"Clear Fliter/Sort\")), __jsx(Table, null, __jsx(Table.Header, null, this.renderQuestionHeader()), __jsx(Table.Body, null, this.renderQuestionList())), __jsx(Divider, {\n        hidden: true\n      }), __jsx(\"div\", {\n        style: {\n          marginTop: 20\n        }\n      }, \"Found \", this.state.summaries.length, \" Item(s).\")), __jsx(Grid.Column, {\n        width: 3\n      }, this.renderAbout(), this.renderQuestionStatistics(), this.renderTopTags(), this.renderBlockChainStatistics()))), __jsx(Responsive, {\n        fireOnMount: true,\n        getWidth: getWidthFactory(this.props.isMobileFromSSR),\n        maxWidth: Responsive.onlyMobile.maxWidth\n      }, __jsx(Divider, {\n        hidden: true\n      }), __jsx(Grid, {\n        centered: true\n      }, __jsx(Grid.Column, null, __jsx(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"Questions Asked\"), __jsx(Segment, {\n        textAlign: \"center\"\n      }, this.renderSortSettings(), this.renderFilterSettings(), this.renderQuestionLimitSettings()), __jsx(Button, {\n        onClick: () => {\n          this.setState({\n            sortBy: ''\n          });\n          Router.pushRoute(`/home`);\n        }\n      }, \"Clear Fliter/Sort\"), __jsx(Divider, {\n        hidden: true\n      }), __jsx(List, {\n        divided: true,\n        relaxed: true\n      }, this.renderMobileQuestionList()), __jsx(Divider, {\n        hidden: true\n      }), __jsx(\"div\", {\n        style: {\n          marginTop: 20\n        }\n      }, \"Found \", this.state.summaries.length, \" Item(s).\")))));\n    } else {\n      return __jsx(Layout, {\n        accountType: this.state.accountType\n      }, __jsx(AccountIssueModal, {\n        loading: this.state.loading,\n        login: this.state.login\n      }));\n    }\n  }\n\n}\n\nexport default HomePage;","map":{"version":3,"sources":["C:/Users/edd1e/Desktop/ethQuestion_1.0/pages/home.js"],"names":["React","Component","MobileDetect","_","Button","Header","Table","Statistic","Rating","Grid","Loader","List","Popup","Divider","Container","Icon","Label","Progress","Segment","Modal","Responsive","Checkbox","Dropdown","AccountIssueModal","getWidthFactory","factory","credentials","Question","Profile","Layout","Link","Router","web3","search","sortingQuestions","cookies","HomePage","constructor","props","state","login","accountType","tags","topTags","loading","sortBy","data","summaries","questionLimit","questionLimitChoice","isSSR","isMining","getInitialProps","isMobileFromSSR","queryValue","query","value","req","device","headers","md","mobile","isLogin","account","wallet","componentDidUpdate","prevProps","fetchQuestionData","componentDidMount","setState","profileAddress","methods","getProfile","call","profile","getAccountType","deployedQuestions","getDeployedQuestions","deployedQuestionsCount","length","searchItem","undefined","decodeURIComponent","i","question","summary","getSummary","answerList","getAnswerList","reverse","choice","Math","floor","push","slice","forEach","tag","sortedTags","Object","keys","map","key","sort","first","second","tagList","eth","blockNumber","getBlockNumber","users","getEthWallets","renderQuestionHeader","fontSize","color","renderQuestionList","index","questionState","cursor","pushRoute","renderTag","renderMobileQuestionList","tagSize","tagColours","encodeURIComponent","renderTopTags","renderAbout","renderQuestionStatistics","renderBlockChainStatistics","renderSortSettings","options","renderFilterSettings","empty","circular","renderQuestionLimitSettings","render","onlyTablet","minWidth","marginTop","onlyMobile","maxWidth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport MobileDetect from 'mobile-detect';\r\nimport _ from 'lodash';\r\nimport { Button, Header, Table, Statistic, Rating, Grid, Loader, List, Popup,\r\n   Divider, Container, Icon, Label, Progress, Segment, Modal, Responsive, Checkbox, Dropdown } from 'semantic-ui-react';\r\nimport AccountIssueModal from '../components/AccountIssueModal';\r\nimport { getWidthFactory } from '../utils/device';\r\nimport factory from '../ethereum/factory';\r\nimport credentials from '../ethereum/credentials';\r\nimport Question from '../ethereum/question';\r\nimport Profile from '../ethereum/profile';\r\nimport Layout from '../components/Layout';\r\nimport {Link, Router} from '../routes';\r\nimport web3 from '../ethereum/web3';\r\nimport { search, sortingQuestions } from '../utils/functions';\r\nimport cookies from 'next-cookies';\r\n\r\nclass HomePage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      login: false,\r\n      accountType: null,\r\n      tags: [],\r\n      topTags: [],\r\n      loading: true,\r\n      sortBy:null,\r\n      data: [],\r\n      summaries: [],\r\n      questionLimit: 30,\r\n      questionLimitChoice: [],\r\n      isSSR: false,\r\n      isMining: false\r\n    };\r\n  }\r\n\r\n  static async getInitialProps(props) {\r\n    let isMobileFromSSR = false;\r\n    let queryValue = props.query.value;\r\n    if(props.req) {\r\n      const device = props.req.headers[\"user-agent\"];\r\n      const md = new MobileDetect(device);\r\n      isMobileFromSSR = !!md.mobile();\r\n    }\r\n    return { isMobileFromSSR, queryValue, isLogin: cookies(props).login || '' , account: cookies(props).wallet || ''};\r\n  }\r\n\r\n  async componentDidUpdate(prevProps) {\r\n    if(this.props != prevProps) {\r\n      this.fetchQuestionData()\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (typeof web3 === 'undefined') {\r\n      this.setState({ loading: false })\r\n      return\r\n    }\r\n    let login = false;\r\n    if (this.props.isLogin) {\r\n      login = true;\r\n      // Get Account Type\r\n      let profileAddress = await factory.methods.getProfile(this.props.account).call();\r\n      let profile = Profile(profileAddress);\r\n      let accountType = await profile.methods.getAccountType().call();\r\n      accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"\r\n      await this.fetchQuestionData();\r\n      this.setState( { login: login });\r\n      this.setState( { accountType: accountType });\r\n    }\r\n    this.setState( { loading: false });\r\n  }\r\n\r\n  async fetchQuestionData() {\r\n    // Retrieve an array of addresses of questions deployed\r\n    let deployedQuestions = await factory.methods.getDeployedQuestions().call();\r\n    let deployedQuestionsCount = deployedQuestions.length;\r\n    this.setState({ deployedQuestionsCount: deployedQuestionsCount });\r\n\r\n    // Retrieve the summaries of all deployed questions\r\n    let summaries = [];\r\n    let searchItem;\r\n    //filter the questions based on search value\r\n    if (this.props.queryValue != undefined && this.props.queryValue != 'favicon.ico') {\r\n        searchItem = decodeURIComponent(this.props.queryValue);\r\n        deployedQuestions = await search(searchItem,deployedQuestions);\r\n        deployedQuestionsCount = deployedQuestions.length;\r\n    }\r\n\r\n    for(let i=0; i<deployedQuestionsCount; i++) {\r\n      let question = Question(deployedQuestions[i]);\r\n      let summary = await question.methods.getSummary().call();\r\n      // Filter out flagged questions\r\n      if (!summary[9]) {\r\n        summaries[i] = summary;\r\n        let answerList = await question.methods.getAnswerList().call();\r\n        summaries[i][10] = answerList.length;\r\n        summaries[i][11] = deployedQuestions[i];\r\n      }\r\n    }\r\n    summaries = summaries.reverse()\r\n    // Displays questions in interval of 30\r\n    let questionLimitChoice = [30]\r\n    let choice = Math.floor(summaries.length/30)\r\n    for (let i=1; i<=choice; i++) {\r\n      questionLimitChoice.push(30*(i+1))\r\n    }\r\n\r\n    // Get the top 10 used tags\r\n    let tags = {};\r\n    summaries = summaries.slice(0, this.state.questionLimit)\r\n    summaries.forEach(summary =>{\r\n      summary[8].forEach(tag => {\r\n        if (tags[tag] == undefined) {\r\n          tags[tag] = 1;\r\n        } else {\r\n          tags[tag] = tags[tag] + 1;\r\n        }\r\n      })\r\n    })\r\n    let sortedTags = Object.keys(tags).map(function(key) {\r\n      return [key, tags[key]];\r\n    });\r\n\r\n    // Sort the array based on the second element\r\n    sortedTags.sort(function(first, second) {\r\n      return second[1] - first[1];\r\n    });\r\n\r\n    // Array of all tags\r\n    let tagList = [];\r\n    sortedTags.forEach(tag=> {\r\n      tagList.push(tag[0])\r\n    })\r\n\r\n    // Array with only the first 10 items\r\n    tags = [];\r\n    sortedTags.slice(0, 10).forEach(tag => {\r\n      tags.push(tag[0])\r\n    })\r\n    let isMining = await web3.eth.isMining();\r\n    let blockNumber = await web3.eth.getBlockNumber();\r\n    let users = await factory.methods.getEthWallets().call();\r\n    this.setState({ isMining: isMining, blockNumber: blockNumber, users: users.length });\r\n    this.setState({ topTags: tags });\r\n    this.setState({ tags: tagList });\r\n    this.setState({ summaries: summaries });\r\n    this.setState({ questionLimitChoice: questionLimitChoice });\r\n  }\r\n\r\n  renderQuestionHeader() {\r\n    return(\r\n      <Table.Row>\r\n        <Table.HeaderCell textAlign='center' width={2}><span style={{fontSize: 15, color: '#6A737C'}}>Current Phase</span></Table.HeaderCell>\r\n        <Table.HeaderCell textAlign='center' width={2}><span style={{fontSize: 15, color: '#6A737C'}}>Answers Submitted</span></Table.HeaderCell>\r\n        <Table.HeaderCell textAlign='center' width={2}><span style={{fontSize: 15, color: '#6A737C'}}>Reward</span></Table.HeaderCell>\r\n        <Table.HeaderCell textAlign='center'><span style={{fontSize: 15, color: '#6A737C'}}>Question Title</span></Table.HeaderCell>\r\n      </Table.Row>\r\n    );\r\n  }\r\n\r\n  // Renders out the list of question\r\n  renderQuestionList() {\r\n    let summaries = this.state.summaries\r\n    summaries = sortingQuestions(summaries, this.state.sortBy);\r\n    return summaries.map((summary, index) => {\r\n      const questionState = summary[4];\r\n      const tagList = summary[8];\r\n      return <Table.Row key={index}>\r\n        <Table.Cell textAlign='center' width={2}>\r\n            {\r\n              questionState == 0 ? <Statistic size='mini' color='red'>\r\n                              <Statistic.Value><span\r\n                                  style={{fontSize: 15, color: 'red'}}> Answering\r\n                                              </span></Statistic.Value>\r\n                              <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>Phase</span></Statistic.Label>\r\n                          </Statistic>\r\n                        : questionState == 1 ?\r\n                        <Statistic size='mini' color='red'>\r\n                              <Statistic.Value><span\r\n                                  style={{fontSize: 15, color: '#C9C633'}}> Voting\r\n                                              </span></Statistic.Value>\r\n                              <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>Phase</span></Statistic.Label>\r\n                          </Statistic>\r\n                        :<Statistic size='mini' color='red'>\r\n                              <Statistic.Value><span\r\n                                  style={{fontSize: 15, color: '#10EE44'}}> Rewarded\r\n                                              </span></Statistic.Value>\r\n                              <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>Phase</span></Statistic.Label>\r\n                          </Statistic>\r\n            }\r\n          </Table.Cell>\r\n          <Table.Cell textAlign='center' width={2}>\r\n              <Statistic size='mini' color='red'>\r\n                  <Statistic.Value><span style={{fontSize: 15, color: '#6A737C'}}>{summary[10]}</span></Statistic.Value>\r\n                  <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>answer(s)</span></Statistic.Label>\r\n              </Statistic>\r\n          </Table.Cell>\r\n          <Table.Cell textAlign='center' width={2}>\r\n              <Statistic size='mini' color='red'>\r\n                  <Statistic.Value><span style={{fontSize: 15, color: '#6A737C'}}>{summary[2]*1e-4}</span></Statistic.Value>\r\n                  <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>EQT(s)</span></Statistic.Label>\r\n              </Statistic>\r\n          </Table.Cell>\r\n          <Table.Cell textAlign='left'>\r\n              <Grid.Row textAlign='left'>\r\n                  <span style={{fontSize: 18, color: '#6A737C', cursor: 'pointer'}} onClick={() => Router.pushRoute(`/questions/${summary[11]}`)}><a>{summary[0]}</a></span>\r\n              </Grid.Row>\r\n              {this.renderTag(tagList, \"mini\")}\r\n          </Table.Cell>\r\n      </Table.Row>\r\n    });\r\n  }\r\n\r\n  renderMobileQuestionList() {\r\n    let summaries = this.state.summaries\r\n    summaries = sortingQuestions(summaries, this.state.sortBy);\r\n    return summaries.map((summary, index) => {\r\n      const tags = summary[8];\r\n      const questionState = summary[4];\r\n      const tagList = summary[8];\r\n      return <List.Item key={index}>\r\n              <List.Icon name='question circle' size='large' verticalAlign='middle' />\r\n              <List.Content>\r\n                <List.Header as='a' onClick={() => Router.pushRoute(`/questions/${summary[11]}`)}>{summary[0]}</List.Header>\r\n                <Grid>\r\n                <Grid.Column width={10}>\r\n                  <List.Description>{\"Number of Answer(s): \" + summary[10]}</List.Description>\r\n                  <List.Description>{\"Reward: \" + summary[2]*1e-4 + \" EQT(s)\" }</List.Description>\r\n                  {this.renderTag(tags, \"mini\")}\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                  {questionState == 0 ? <List.Description><b><font color='red'>{\"ANSWERING PHASE\"}</font></b></List.Description> : questionState == 1\r\n                  ? <List.Description><b><font color='#C9C633'>{\"VOTING PHASE\"}</font></b></List.Description>\r\n                  : <List.Description><b><font color='#10EE44'>{\"REWARDED PHASE\"}</font></b></List.Description> }\r\n                </Grid.Column>\r\n                </Grid>\r\n              </List.Content>\r\n              <Divider hidden/>\r\n            </List.Item>\r\n    });\r\n  }\r\n\r\n  // Render each tag individually for each question\r\n  renderTag(tagList, tagSize) {\r\n    const tagColours = [\"red\", \"olive\", \"blue\", \"teal\", \"green\"];\r\n    return tagList.map((tag, index) => {\r\n      return(\r\n        <Label as='a' onClick={() => Router.pushRoute(`/${'search/'+encodeURIComponent(tag)}`)}\r\n          tag size={tagSize} key={index} color={tagColours[index%5]}>\r\n          {tag}\r\n        </Label>\r\n      )\r\n    });\r\n  }\r\n\r\n  renderTopTags() {\r\n    return (\r\n      <Segment>\r\n        <Header as='h3' textAlign=\"center\">\r\n          <Icon name=\"tags\"/>Top 10 Tags\r\n        </Header>\r\n        {this.renderTag(this.state.topTags, \"medium\")}\r\n      </Segment>\r\n    );\r\n  }\r\n\r\n  renderAbout() {\r\n    return (\r\n      <Segment>\r\n        <Header as='h3' textAlign=\"center\">\r\n          <Icon name=\"question\"/>What Are Question Phases\r\n        </Header>\r\n        <span style={{fontSize: 18, color: 'red'}}>ANSWERING</span>\r\n        <p style={{fontSize: 15}}>You can submit answers but answers will not be shown</p>\r\n        <span style={{fontSize: 18, color: '#C9C633'}}>VOTING</span>\r\n        <p style={{fontSize: 15}}>You can only approve answers submitted</p>\r\n        <span style={{fontSize: 18, color: '#10EE44'}}>REWARDED</span>\r\n        <p style={{fontSize: 15}}>Someone has already earned the reward for the question</p>\r\n      </Segment>\r\n    );\r\n  }\r\n\r\n  renderQuestionStatistics() {\r\n    return (\r\n      <Segment>\r\n        <Statistic.Group horizontal color='red'>\r\n          <Statistic>\r\n            <Statistic.Value>{this.state.deployedQuestionsCount}</Statistic.Value>\r\n            <Statistic.Label>Questions Asked</Statistic.Label>\r\n          </Statistic>\r\n        </Statistic.Group>\r\n        <Statistic.Group horizontal color='yellow'>\r\n          <Statistic>\r\n            <Statistic.Value>{this.state.users}</Statistic.Value>\r\n            <Statistic.Label>Active Users</Statistic.Label>\r\n          </Statistic>\r\n        </Statistic.Group>\r\n      </Segment>\r\n    );\r\n  }\r\n\r\n  renderBlockChainStatistics() {\r\n    return (\r\n      <Segment>\r\n        <Header as='h3' textAlign=\"center\">\r\n          <Icon name=\"ethereum\"/>Block-Chain Status\r\n        </Header>\r\n        {this.state.isMining ? <Statistic.Value><span\r\n            style={{fontSize: 18, color: 'green'}}>Currently Mining\r\n                        </span></Statistic.Value> : <Statistic.Value><span\r\n            style={{fontSize: 18, color: 'red'}}>Currently Not Mining\r\n                        </span></Statistic.Value>\r\n        }\r\n        <Statistic.Group horizontal color='green'>\r\n          <Statistic>\r\n            <Statistic.Value>{this.state.blockNumber}</Statistic.Value>\r\n            <Statistic.Label>Blocks Mined</Statistic.Label>\r\n          </Statistic>\r\n        </Statistic.Group>\r\n        *When blockchain is not mining, do not create any transaction\r\n      </Segment>\r\n    );\r\n  }\r\n\r\n  renderSortSettings() {\r\n    const options = ['Ascending Phase', 'Descending Phase', 'Ascending Answers',\r\n                     'Descending Answers', 'Ascending Rewards', 'Descending Rewards'];\r\n    return (\r\n      <span>\r\n        <Dropdown text='Sorting Questions' multiple>\r\n          <Dropdown.Menu>\r\n            <Dropdown.Header icon='filter' content='Sorting Options' />\r\n            <Dropdown.Menu scrolling>\r\n              {options.map((tag, index) => (\r\n                <Dropdown.Item key={index}\r\n                               text={tag}\r\n                               onClick={() => this.setState({ sortBy : index })}/>\r\n              ))}\r\n            </Dropdown.Menu>\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  renderFilterSettings() {\r\n    const tagColours = [\"red\", \"olive\", \"blue\", \"teal\", \"green\"];\r\n    return (\r\n      <span>\r\n        <Dropdown text='Filter Questions' multiple>\r\n          <Dropdown.Menu>\r\n            <Dropdown.Header icon='tags' content='Tag Label' />\r\n            <Dropdown.Menu scrolling>\r\n              {this.state.tags.map((tag, index) => (\r\n                <Dropdown.Item key={index}\r\n                               text={tag}\r\n                               label={{color: tagColours[index%6], empty: true, circular: true}}\r\n                               onClick={() => Router.pushRoute(`/${'search/'+encodeURIComponent(tag)}`)} />\r\n              ))}\r\n            </Dropdown.Menu>\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  renderQuestionLimitSettings() {\r\n    return(\r\n      <Dropdown text='Viewing Limit' multiple>\r\n        <Dropdown.Menu>\r\n          <Dropdown.Header icon='list' content='Question Limit' />\r\n          <Dropdown.Menu scrolling>\r\n            {this.state.questionLimitChoice.map((choice, index) => (\r\n              <Dropdown.Item key={index}\r\n                             text={choice}\r\n                             onClick={async () => {\r\n                               await this.setState({ questionLimit : choice});\r\n                               this.fetchQuestionData()\r\n                             }} />\r\n            ))}\r\n          </Dropdown.Menu>\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (this.state.login) {\r\n      return (\r\n        <Layout accountType={this.state.accountType} page={\"Home\"}>\r\n          <Responsive fireOnMount getWidth={getWidthFactory(this.props.isMobileFromSSR)} minWidth={Responsive.onlyTablet.minWidth}>\r\n            <Divider hidden/>\r\n            <Grid centered>\r\n              <Grid.Column width={10}>\r\n                <Header as='h2' textAlign='center'>\r\n                    Questions Asked\r\n                </Header>\r\n                <Segment textAlign='center'>\r\n                  {this.renderSortSettings()}\r\n                  {this.renderFilterSettings()}\r\n                  {this.renderQuestionLimitSettings()}\r\n                  <Button onClick={ () => {\r\n                      this.setState({ sortBy: ''});\r\n                      Router.pushRoute(`/home`);\r\n                  }}>Clear Fliter/Sort</Button>\r\n                </Segment>\r\n                <Table>\r\n                  <Table.Header>\r\n                    {this.renderQuestionHeader()}\r\n                  </Table.Header>\r\n                  <Table.Body>\r\n                    {this.renderQuestionList()}\r\n                  </Table.Body>\r\n                </Table>\r\n                <Divider hidden/>\r\n                <div style={{ marginTop: 20 }}>Found {this.state.summaries.length} Item(s).</div>\r\n              </Grid.Column>\r\n              <Grid.Column width={3}>\r\n                {this.renderAbout()}\r\n                {this.renderQuestionStatistics()}\r\n                {this.renderTopTags()}\r\n                {this.renderBlockChainStatistics()}\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Responsive>\r\n\r\n          <Responsive fireOnMount getWidth={getWidthFactory(this.props.isMobileFromSSR)} maxWidth={Responsive.onlyMobile.maxWidth}>\r\n            <Divider hidden/>\r\n            <Grid centered>\r\n              <Grid.Column>\r\n                <Header as='h2' textAlign='center'>\r\n                    Questions Asked\r\n                </Header>\r\n                <Segment textAlign='center'>\r\n                  {this.renderSortSettings()}\r\n                  {this.renderFilterSettings()}\r\n                  {this.renderQuestionLimitSettings()}\r\n                </Segment>\r\n                <Button onClick={ () => {\r\n                    this.setState({ sortBy: ''});\r\n                    Router.pushRoute(`/home`);\r\n                }}>Clear Fliter/Sort</Button>\r\n                <Divider hidden/>\r\n                <List divided relaxed>\r\n                  {this.renderMobileQuestionList()}\r\n                </List>\r\n                <Divider hidden/>\r\n                <div style={{ marginTop: 20 }}>Found {this.state.summaries.length} Item(s).</div>\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Responsive>\r\n        </Layout>\r\n      );\r\n    } else {\r\n      return (\r\n        <Layout accountType={this.state.accountType}>\r\n          <AccountIssueModal loading={this.state.loading} login={this.state.login} />\r\n        </Layout>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}