{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport moment from 'moment';\nimport React, { Component } from 'react';\nimport Countdown from 'react-countdown-now';\nimport { Context, Text } from 'react-mathjax2';\nimport { Table, Popup, Button, Container, Form, Header, Comment, Segment, Message, Divider, Icon, Label, Modal, Loader, Image, Grid } from 'semantic-ui-react';\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport TimeOutModal from '../components/TimeOutModal';\nimport ErrorModal from '../components/ErrorModal';\nimport LoadingModal from '../components/LoadingModal';\nimport web3 from '../ethereum/web3';\nimport Question from '../ethereum/question';\nimport EthQuestionToken from '../ethereum/token';\nimport credentials from '../ethereum/credentials';\nimport Profile from '../ethereum/profile';\nimport factory from '../ethereum/factory';\nimport Layout from '../components/Layout';\nimport Footer from '../components/Footer';\nimport { Link, Router } from '../routes';\nimport { getIpfsHash } from '../utils/ipfs';\nimport { logging, checkFieldEmpty, sortingAnswers } from \"../utils/functions\";\nimport cookies from 'next-cookies';\n\nclass QuestionRow extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"votePhase\", async () => {\n      try {\n        if (this.state.questionState == 0) {\n          const accounts = await web3.eth.getAccounts();\n          const question = Question(this.state.questionAddress); // Ensure that only Creator of Question can access this function\n\n          const account = this.props.account;\n\n          if (account == (await question.methods.getCreator().call())) {\n            this.setState({\n              changeToVoting: true\n            });\n            let logTransaction = logging(\"Change to Voting Phase for Question Titled: \" + this.state.summary[0]);\n            await factory.methods.changeQuestionPhase(this.state.questionAddress, logTransaction).send({\n              from: account,\n              gasPrice: '0'\n            });\n            Router.pushRoute(`/questions/${this.state.questionAddress}`);\n          } else {\n            this.setState({\n              ownerError: true\n            });\n          }\n        }\n      } catch (err) {\n        if (err.message == \"Returned error: authentication needed: password or unlock\") {\n          this.setState({\n            timeout: true\n          });\n        }\n\n        this.setState({\n          errorMessage: err.message\n        });\n      }\n\n      this.setState({\n        changeToVoting: false\n      });\n    });\n\n    _defineProperty(this, \"rewardPhase\", async () => {\n      try {\n        if (this.state.questionState == 1) {\n          const accounts = await web3.eth.getAccounts();\n          const question = Question(this.state.questionAddress); // Ensure that only Creator of Question can access this function\n\n          const account = this.props.account;\n\n          if (account == (await question.methods.getCreator().call())) {\n            this.setState({\n              changeToRewarded: true\n            });\n            let logTransaction = logging(\"Awarded \" + this.state.summary[2] * 1e-4 + \" EQT(s) as reward for Question Titled: \" + this.state.summary[0]);\n            let rewardMessage = logging(\"Rewarded \" + this.state.summary[2] * 1e-4 + \" EQT(s) for most approved answer\");\n            let voteMessage = logging(\"Rewarded EQT(s) for approving the most approved answer\");\n            let refundMessage = logging(\"Refunded \" + this.state.summary[2] * 1e-4 + \" EQT(s) as there are no answers or answers with approvals\");\n            await factory.methods.shareTokenAt(this.state.questionAddress, logTransaction, rewardMessage, voteMessage, refundMessage, EthQuestionToken._address).send({\n              from: account,\n              gasPrice: '0'\n            });\n            Router.pushRoute(`/questions/${this.state.questionAddress}`);\n          } else {\n            this.setState({\n              ownerError: true\n            });\n          }\n        }\n      } catch (err) {\n        if (err.message == \"Returned error: authentication needed: password or unlock\") {\n          this.setState({\n            timeout: true\n          });\n        }\n\n        this.setState({\n          errorMessage: err.message\n        });\n      }\n\n      this.setState({\n        changeToRewarded: false\n      });\n    });\n\n    _defineProperty(this, \"fixBalance\", async () => {\n      try {\n        const accounts = await web3.eth.getAccounts();\n        const question = Question(this.state.questionAddress); // Ensure that only Creator of Question can access this function\n\n        const account = this.props.account;\n\n        if (account == (await question.methods.getCreator().call())) {\n          this.setState({\n            fixError: true\n          });\n          let balance = this.state.summary[2] - (await EthQuestionToken.methods.balanceOf(this.state.questionAddress).call());\n          await EthQuestionToken.methods.transfer(this.state.questionAddress, balance).send({\n            from: account,\n            gasPrice: '0'\n          });\n          Router.pushRoute(`/home`);\n        } else {\n          this.setState({\n            ownerError: true\n          });\n        }\n      } catch (err) {\n        if (err.message == \"Returned error: authentication needed: password or unlock\") {\n          this.setState({\n            timeout: true\n          });\n        }\n\n        this.setState({\n          errorMessage: err.message\n        });\n      }\n\n      this.setState({\n        fixError: false\n      });\n    });\n\n    _defineProperty(this, \"timeExtension\", async () => {\n      try {\n        const accounts = await web3.eth.getAccounts();\n        const question = Question(this.state.questionAddress); // Ensure that only Creator of Question can access this function\n\n        const account = this.props.account;\n\n        if (account == (await question.methods.getCreator().call())) {\n          this.setState({\n            timeExtension: true\n          });\n          let logTransaction = logging(\"Duration Extended for Question Titled: \" + this.state.summary[0]);\n          await factory.methods.timeExtension(this.state.questionAddress, logTransaction).send({\n            from: account,\n            gasPrice: '0'\n          });\n          Router.pushRoute(`/questions/${this.state.questionAddress}`);\n        } else {\n          this.setState({\n            ownerError: true\n          });\n        }\n      } catch (err) {\n        if (err.message == \"Returned error: authentication needed: password or unlock\") {\n          this.setState({\n            timeExtension: false\n          });\n          this.setState({\n            timeout: true\n          });\n        }\n\n        this.setState({\n          errorMessage: err.message\n        });\n      }\n\n      this.setState({\n        timeExtension: false\n      });\n    });\n\n    _defineProperty(this, \"increaseReward\", async () => {\n      try {\n        const accounts = await web3.eth.getAccounts();\n        const question = Question(this.state.questionAddress); // Ensure that only Creator of Question can access this function\n\n        const account = this.props.account;\n\n        if (account == (await question.methods.getCreator().call())) {\n          this.setState({\n            changeReward: true\n          });\n          let logTransaction = logging(\"Increase Reward by 1 EQT(s) for Question Titled: \" + this.state.summary[0]);\n          await factory.methods.increaseReward(this.state.questionAddress, logTransaction, EthQuestionToken._address).send({\n            from: account,\n            gasPrice: '0'\n          });\n          await EthQuestionToken.methods.transfer(this.state.questionAddress, 10e3).send({\n            from: account,\n            gasPrice: '0'\n          });\n          Router.pushRoute(`/questions/${this.state.questionAddress}`);\n        } else {\n          this.setState({\n            ownerError: true\n          });\n        }\n      } catch (err) {\n        if (err.message == \"Returned error: authentication needed: password or unlock\") {\n          this.setState({\n            timeout: true\n          });\n        }\n\n        this.setState({\n          errorMessage: err.message\n        });\n      }\n\n      this.setState({\n        changeReward: false\n      });\n    });\n\n    _defineProperty(this, \"onSubmitAnswer\", async () => {\n      this.setState({\n        loading: true,\n        errorMessage: ''\n      });\n\n      if (checkFieldEmpty(this.state.answer)) {\n        try {\n          const question = Question(this.state.questionAddress); // Ensure that creator of question cannot provide answers\n\n          const account = this.props.account;\n\n          if (account != (await question.methods.getCreator().call()) && !(await question.methods.checkIfAnswered(account).call())) {\n            // Logs the transactions\n            let logTransaction = logging(\"Submitted Answer for Question Titled: \" + this.state.summary[0]); // Create new answer\n\n            await factory.methods.createAnswer(this.state.questionAddress, this.state.answer, this.state.fileHashes_array, this.state.fileNames_array, logTransaction).send({\n              from: account,\n              gasPrice: '0'\n            });\n            Router.pushRoute(`/questions/${this.state.questionAddress}`);\n          } else {\n            this.setState({\n              loading: false,\n              errorMessage: \"You cannot provide answer for your own question or already provided answer.\"\n            });\n          }\n        } catch (err) {\n          if (err.message == \"Returned error: authentication needed: password or unlock\") {\n            this.setState({\n              timeout: true\n            });\n          }\n\n          this.setState({\n            errorMessage: err.message\n          });\n        }\n      } else {\n        this.setState({\n          loading: false,\n          errorMessage: \"Answer Field Empty\"\n        });\n      }\n\n      this.setState({\n        loading: false,\n        answer: ''\n      });\n    });\n\n    _defineProperty(this, \"approveAnswer\", async answerer => {\n      this.setState({\n        voting: true\n      });\n      const account = this.props.account;\n      const question = await Question(this.state.questionAddress);\n      const profile = await factory.methods.getProfile(account).call();\n      const answerList = await question.methods.getAnswerList().call();\n      let index;\n\n      for (let i = 0; i < answerList.length; i++) {\n        if (answerList[i][2] == answerer) {\n          index = i;\n        }\n      } //Ensure that voter is not the answerer\n\n\n      try {\n        if (account != answerer) {\n          // Cannot vote twice\n          if (!(await question.methods.checkVoter(index, profile).call())) {\n            //No cost for voting after the voting phase\n            if ((await question.methods.state().call()) != 2) {\n              await EthQuestionToken.methods.transfer((await this.state.questionAddress), 10e3).send({\n                from: account,\n                gasPrice: '0'\n              });\n            }\n\n            let logTransaction = logging(\"Approved An Answer for Question Titled: \" + this.state.summary[0]);\n            await factory.methods.approveAnswer(this.state.questionAddress, index, logTransaction).send({\n              from: account,\n              gasPrice: '0'\n            });\n            Router.pushRoute(`/questions/${this.state.questionAddress}`);\n          } else {\n            this.setState({\n              voteMultipleError: true\n            });\n          }\n        } else {\n          this.setState({\n            voteError: true\n          });\n        }\n      } catch (err) {\n        if (err.message == \"Returned error: authentication needed: password or unlock\") {\n          this.setState({\n            timeout: true\n          });\n        }\n\n        this.setState({\n          errorMessage: err.message\n        });\n      }\n\n      this.setState({\n        voting: false\n      });\n    });\n\n    _defineProperty(this, \"onFileSelected\", async () => {\n      // Access JavaScript FileReader() method for conversion to buffer\n      const reader = new FileReader();\n      const file = this.fileInput.files[0];\n      this.setState({\n        fileLoading: true\n      });\n\n      if (file instanceof Blob) {\n        let {\n          files_array,\n          fileNames_array,\n          fileHashes_array\n        } = this.state;\n        files_array.push(file);\n        fileNames_array.push(file.name);\n        this.setState({\n          files_array: files_array,\n          fileNames_array: fileNames_array\n        });\n        console.log(\"fileNames_array: \", fileNames_array);\n\n        reader.onloadend = async () => {\n          await this.setState({\n            fileUrl: reader.result,\n            fileLoading: true,\n            buffer: Buffer.from(reader.result) // File is converted to a buffer for upload to IPFS\n\n          });\n          const fileHash = this.state.buffer ? await getIpfsHash(file) : '0';\n          fileHashes_array.push(fileHash);\n          this.setState({\n            fileHashes_array: fileHashes_array\n          });\n          console.log(\"fileHashes_array: \", fileHashes_array);\n          this.setState({\n            fileLoading: false\n          });\n        };\n\n        reader.readAsDataURL(file);\n      }\n    });\n\n    _defineProperty(this, \"onFileRemoved\", file => {\n      var i = 0;\n      let {\n        files_array,\n        fileHashes_array,\n        fileNames_array\n      } = this.state;\n      console.log('file: ', file);\n\n      for (i = 0; i < files_array.length; i++) {\n        if (file === files_array[i]) {\n          files_array.splice(i, 1);\n          fileNames_array.splice(i, 1);\n          fileHashes_array.splice(i, 1);\n          break;\n        }\n      }\n\n      this.setState({\n        files_array: files_array,\n        fileNames_array: fileNames_array,\n        fileHashes_array: fileHashes_array\n      });\n      console.log('fileNames_array', fileNames_array);\n      console.log(\"fileHashes_array: \", fileHashes_array);\n    });\n\n    this.state = {\n      questionAddress: '',\n      questionState: '',\n      summary: [],\n      time: '',\n      answerList: [],\n      avatarListIcon: [],\n      votingTime: '',\n      voting: false,\n      answer: '',\n      errorMessage: '',\n      loading: false,\n      voteError: false,\n      ownerError: false,\n      voteMultipleError: false,\n      changeToVoting: false,\n      changeToRewarded: false,\n      timeExtension: false,\n      changeReward: false,\n      fileLoading: false,\n      buffer: null,\n      files_array: [],\n      fileHashes_array: [],\n      fileNames_array: [],\n      login: false,\n      timeout: false,\n      resourceLoading: true,\n      accountType: null,\n      balanceError: false,\n      fixError: false,\n      sorted: false\n    };\n  }\n\n  static async getInitialProps(props) {\n    // Retrieve question data\n    let questionAddress = props.query.value;\n    return {\n      questionAddress,\n      isLogin: cookies(props).login || '',\n      account: cookies(props).wallet || ''\n    };\n  }\n\n  async componentDidMount() {\n    if (typeof web3 === 'undefined') {\n      this.setState({\n        resourceLoading: false\n      });\n      return;\n    }\n\n    let login = false;\n\n    if (this.props.isLogin) {\n      login = true; // Get Account Type\n\n      const account = this.props.account;\n      let profileAddress = await factory.methods.getProfile(account).call();\n      let profile = Profile(profileAddress);\n      let accountType = await profile.methods.getAccountType().call();\n      accountType == 0 ? accountType = \"Admin\" : accountType = \"User\";\n      await this.fetchQuestionData();\n      this.setState({\n        login: login,\n        accountType: accountType\n      });\n    }\n\n    this.setState({\n      resourceLoading: false\n    });\n  }\n\n  async componentDidUpdate(prevProps) {\n    if (this.props != prevProps) {\n      this.fetchQuestionData();\n    }\n  }\n\n  async fetchQuestionData() {\n    let error = false;\n    const questionAddress = this.props.questionAddress;\n    const question = Question(questionAddress); // Fetch Question Information\n\n    const summary = await question.methods.getSummary().call();\n    const time = await question.methods.getTime().call();\n    const answerList = await question.methods.getAnswerList().call(); // Fetch Avatar Icons\n\n    const iconList = ['alligator', 'anteater', 'armadillo', 'auroch', 'axolotl', 'badger', 'bat', 'beaver', 'buffalo', 'camel', 'capybara', 'chameleon', 'cheetah', 'chinchilla', 'chipmunk', 'chupacabra', 'cormorant', 'coyote', 'crow', 'dingo', 'dinosaur', 'dolphin', 'duck', 'elephant', 'ferret', 'fox', 'frog', 'giraffe', 'gopher', 'grizzly', 'hedgehog', 'hippo', 'hyena', 'ibex', 'ifrit', 'iguana', 'jackal', 'kangaroo', 'koala', 'kraken', 'lemur', 'leopard', 'liger', 'llama', 'manatee', 'mink', 'monkey', 'moose', 'narwhal', 'orangutan', 'otter', 'panda', 'penguin', 'platypus', 'pumpkin', 'python', 'quagga', 'rabbit', 'raccoon', 'rhino', 'sheep', 'shrew', 'skunk', 'squirrel', 'tiger', 'turtle', 'walrus', 'wolf', 'wolverine', 'wombat'];\n    const avatarListIcon = iconList.map(item => {\n      return 'https://ssl.gstatic.com/docs/common/profile/' + item + '_lg.png';\n    }); // Check for balance error\n\n    (await EthQuestionToken.methods.balanceOf(questionAddress).call()) != summary[2] ? error = true : error = false;\n    this.setState({\n      questionAddress: questionAddress,\n      questionState: summary[4],\n      summary: summary,\n      time: time,\n      avatarListIcon: avatarListIcon,\n      answerList: answerList.reverse(),\n      votingTime: time[3],\n      balanceError: error\n    });\n  }\n\n  // Render each tag individually for each question\n  renderTag(tagList, tagSize) {\n    const tagColours = [\"red\", \"olive\", \"blue\", \"teal\", \"green\"];\n    return tagList.map((tag, index) => {\n      let id = index % 5;\n      return __jsx(Label, {\n        as: \"a\",\n        onClick: () => Router.pushRoute(`/${'search/' + encodeURIComponent(tag)}`),\n        tag: true,\n        size: tagSize,\n        key: index,\n        color: tagColours[id]\n      }, tag);\n    });\n  }\n\n  renderQuestion() {\n    const summary = this.state.summary;\n    const time = this.state.time;\n    var currentTime = new Date().getTime();\n    var maxDuration = (parseFloat(summary[3]) / 60 / 60).toFixed(2).toString().toString();\n    var publishTime = moment.unix(time[0]).format('dddd, Do MMMM YYYY, h:mm:ss a');\n    var votingTime = moment.unix(this.state.votingTime).format('dddd, Do MMMM YYYY, h:mm:ss a');\n    var publishTimeMs = moment.unix(time[0]).valueOf();\n    var maxDurationMs = moment.unix(time[2]).valueOf();\n    var votingTimeMs = moment.unix(this.state.votingTime).valueOf();\n    let remainingTime = 0;\n\n    if (this.state.questionState == 0) {\n      remainingTime = publishTimeMs + maxDurationMs - currentTime;\n\n      if (remainingTime < 0) {\n        remainingTime = 0;\n      }\n    } else {\n      remainingTime = votingTimeMs + maxDurationMs - currentTime;\n\n      if (remainingTime < 0) {\n        remainingTime = 0;\n      }\n    }\n\n    return __jsx(React.Fragment, null, __jsx(Table, {\n      definition: true\n    }, __jsx(Table.Body, null, __jsx(Table.Row, null, __jsx(Table.Cell, {\n      width: 2\n    }, \"Question Title\"), __jsx(Table.Cell, {\n      style: {\n        fontSize: 20,\n        lineHeight: '1.5'\n      }\n    }, summary[0])), __jsx(Table.Row, null, __jsx(Table.Cell, {\n      width: 2\n    }, \"Description\"), __jsx(Table.Cell, {\n      style: {\n        fontSize: 20,\n        lineHeight: '1.5'\n      }\n    }, __jsx(Context, {\n      input: \"tex\",\n      onLoad: () => console.log(\"Loaded MathJax script!\"),\n      onError: (MathJax, error) => {\n        console.warn(error);\n        console.log(\"Encountered a MathJax error, re-attempting a typeset!\");\n        MathJax.Hub.Queue(MathJax.Hub.Typeset());\n      },\n      options: {\n        asciimath2jax: {\n          useMathMLspacing: true,\n          delimiters: [[\"$$\", \"$$\"]],\n          preview: \"none\"\n        }\n      }\n    }, __jsx(Text, {\n      text: summary[1]\n    })))), __jsx(Table.Row, null, __jsx(Table.Cell, {\n      width: 2\n    }, \"Tags\"), __jsx(Table.Cell, null, this.renderTag(summary[8], \"small\"))), __jsx(Table.Row, null, __jsx(Table.Cell, null, \"Reward (EQT)\"), __jsx(Table.Cell, {\n      style: {\n        fontSize: 20\n      }\n    }, summary[2] * 1e-4, this.state.questionState == 0 ? __jsx(Popup, {\n      trigger: __jsx(Button, {\n        style: {\n          float: 'right',\n          verticalAlign: 'middle'\n        },\n        icon: \"ethereum\",\n        color: \"black\",\n        onClick: this.increaseReward\n      }),\n      content: \"Increase Reward\",\n      position: \"bottom right\",\n      inverted: true\n    }) : __jsx(Popup, {\n      trigger: __jsx(Button, {\n        style: {\n          float: 'right',\n          verticalAlign: 'middle'\n        },\n        icon: \"ethereum\",\n        color: \"black\",\n        disabled: true\n      }),\n      position: \"bottom right\",\n      inverted: true\n    }))), __jsx(Table.Row, null, __jsx(Table.Cell, null, \"Publish Time\"), __jsx(Table.Cell, {\n      style: {\n        fontSize: 20\n      }\n    }, publishTime)), __jsx(Table.Row, null, __jsx(Table.Cell, null, \"Answering Duration (hours)\"), __jsx(Table.Cell, {\n      style: {\n        fontSize: 20\n      }\n    }, __jsx(\"span\", {\n      style: {\n        verticalAlign: 'middle',\n        lineHeight: '33px'\n      }\n    }, maxDuration), this.state.questionState == 0 && remainingTime > 0 ? __jsx(Popup, {\n      trigger: __jsx(Button, {\n        style: {\n          float: 'right',\n          verticalAlign: 'middle'\n        },\n        icon: \"clock\",\n        color: \"violet\"\n      }),\n      content: __jsx(\"span\", null, __jsx(\"span\", null, \"Remaining time - \"), __jsx(Countdown, {\n        date: Date.now() + remainingTime\n      })),\n      position: \"bottom right\",\n      inverted: true\n    }) : this.state.questionState == 0 && remainingTime == 0 ? __jsx(Popup, {\n      trigger: __jsx(Button, {\n        style: {\n          float: 'right',\n          verticalAlign: 'middle'\n        },\n        icon: \"clock\",\n        color: \"red\"\n      }),\n      flowing: true,\n      hoverable: true\n    }, __jsx(Grid, {\n      centered: true,\n      divided: true,\n      columns: 2\n    }, __jsx(Grid.Column, {\n      textAlign: \"center\"\n    }, __jsx(\"p\", null, \"Extends the validity of question by 1 hour\"), __jsx(Button, {\n      onClick: this.timeExtension\n    }, \"Extend Deadline\")), this.state.balanceError == true ? __jsx(Grid.Column, {\n      textAlign: \"center\"\n    }, __jsx(\"p\", null, \"Reward Balance Error\"), __jsx(Button, {\n      onClick: this.fixBalance\n    }, \"Fix Balance\")) : __jsx(Grid.Column, {\n      textAlign: \"center\"\n    }, __jsx(\"p\", null, \"Proceed to the voting phase\"), __jsx(Button, {\n      onClick: this.votePhase\n    }, \"Voting Phase\")))) : __jsx(Popup, {\n      trigger: __jsx(Button, {\n        style: {\n          float: 'right',\n          verticalAlign: 'middle'\n        },\n        icon: \"clock\",\n        color: \"red\",\n        disabled: true\n      }),\n      position: \"bottom right\",\n      inverted: true\n    }))), __jsx(Table.Row, null, __jsx(Table.Cell, null, \"Voting Duration (hours)\"), __jsx(Table.Cell, {\n      style: {\n        fontSize: 20\n      }\n    }, __jsx(\"span\", {\n      style: {\n        verticalAlign: 'middle',\n        lineHeight: '33px'\n      }\n    }, maxDuration), this.state.questionState == 1 && remainingTime > 0 ? __jsx(Popup, {\n      trigger: __jsx(Button, {\n        style: {\n          float: 'right',\n          verticalAlign: 'middle'\n        },\n        icon: \"clock\",\n        color: \"violet\"\n      }),\n      content: __jsx(\"span\", null, __jsx(\"span\", null, \"Remaining time - \"), __jsx(Countdown, {\n        date: Date.now() + remainingTime\n      })),\n      position: \"bottom right\",\n      inverted: true\n    }) : this.state.questionState == 1 && remainingTime == 0 ? __jsx(Popup, {\n      trigger: __jsx(Button, {\n        style: {\n          float: 'right',\n          verticalAlign: 'middle'\n        },\n        icon: \"clock\",\n        color: \"red\",\n        onClick: this.rewardPhase\n      }),\n      content: \"Reward\",\n      position: \"bottom right\",\n      inverted: true\n    }) : this.state.questionState == 0 ? __jsx(Popup, {\n      trigger: __jsx(Button, {\n        style: {\n          float: 'right',\n          verticalAlign: 'middle'\n        },\n        icon: \"clock\",\n        color: \"red\",\n        disabled: true\n      }),\n      position: \"bottom right\",\n      inverted: true\n    }) : __jsx(Popup, {\n      trigger: __jsx(Button, {\n        style: {\n          float: 'right',\n          verticalAlign: 'middle'\n        },\n        icon: \"clock\",\n        color: \"red\",\n        disabled: true\n      }),\n      position: \"bottom right\",\n      inverted: true\n    }))))));\n  }\n\n  renderAnswers() {\n    let answers = this.state.answerList;\n    answers = sortingAnswers(answers, this.state.sorted); // Answering Phase no answers are shown\n\n    if (this.state.questionState != 0) {\n      return answers.map((answer, index) => {\n        var answeredTime = moment.unix(answer[5]).format('Do MMMM YYYY, h:mm a');\n        var id = index % 70;\n        return __jsx(Comment, {\n          key: index\n        }, __jsx(Comment.Avatar, {\n          src: this.state.avatarListIcon[id],\n          style: {\n            backgroundColor: '#8D8741'\n          }\n        }), __jsx(Comment.Content, null, __jsx(Comment.Author, {\n          as: \"a\"\n        }, answer[2]), __jsx(Comment.Metadata, null, __jsx(\"div\", null, answeredTime)), __jsx(\"br\", null), answer[1] ? __jsx(\"b\", null, __jsx(\"font\", {\n          color: \"red\"\n        }, __jsx(Icon, {\n          name: \"certificate\"\n        }), \"Rewarded\")) : null, this.state.questionState == 2 ? __jsx(Comment.Metadata, null, __jsx(\"div\", null, __jsx(Icon, {\n          name: \"thumbs up\"\n        }), answer[4])) : __jsx(Comment.Metadata, null, __jsx(\"div\", null, __jsx(Icon, {\n          name: \"thumbs up\"\n        }), \"0\")), __jsx(Comment.Text, null, __jsx(Context, {\n          input: \"tex\",\n          onLoad: () => console.log(\"Loaded MathJax script!\"),\n          onError: (MathJax, error) => {\n            console.warn(error);\n            console.log(\"Encountered a MathJax error, re-attempting a typeset!\");\n            MathJax.Hub.Queue(MathJax.Hub.Typeset());\n          },\n          options: {\n            asciimath2jax: {\n              useMathMLspacing: true,\n              delimiters: [[\"$$\", \"$$\"]],\n              preview: \"none\"\n            }\n          }\n        }, __jsx(Text, {\n          text: answer[0]\n        })), answer[7].map((imageName, index) => __jsx(\"div\", {\n          style: {\n            marginBottom: '10px'\n          },\n          key: index\n        }, __jsx(Image, {\n          src: \"https://ipfs.io/ipfs/\" + answer[8][index],\n          centered: true\n        })))), __jsx(Comment.Actions, null, __jsx(Comment.Action, null, __jsx(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"thumbs up\",\n          onClick: () => this.approveAnswer(answer[2]),\n          size: \"tiny\",\n          content: \"Approve Answer\",\n          color: \"green\"\n        })))));\n      });\n    }\n  }\n\n  renderFiles() {\n    let fileHashes = this.state.summary[5];\n    let fileNames = this.state.summary[6];\n\n    if (fileHashes.length != 0) {\n      return __jsx(Segment, {\n        placeholder: true\n      }, __jsx(\"center\", null, __jsx(\"p\", null, \"Image(s) Uploaded\"), fileNames.map((fileName, index) => __jsx(\"div\", {\n        style: {\n          marginBottom: '10px'\n        },\n        key: index\n      }, __jsx(Image, {\n        src: \"https://ipfs.io/ipfs/\" + fileHashes[index],\n        size: \"massive\"\n      }), __jsx(Divider, {\n        hidden: true\n      }), __jsx(\"p\", null, \" To download: \"), __jsx(Label, {\n        as: \"a\",\n        size: \"big\",\n        href: \"https://ipfs.io/ipfs/\" + fileHashes[index]\n      }, __jsx(Icon, {\n        name: \"download\"\n      }), fileName)))));\n    }\n  }\n\n  renderAnswersForm() {\n    let {\n      files_array\n    } = this.state;\n    let elmFiles = null;\n\n    if (files_array !== null) {\n      elmFiles = files_array.map((item, index) => __jsx(Label, {\n        as: \"a\",\n        key: index,\n        size: \"big\"\n      }, item.name, __jsx(Icon, {\n        name: \"delete\",\n        onClick: () => this.onFileRemoved(item)\n      })));\n    }\n\n    return __jsx(Form, {\n      error: !!this.state.errorMessage\n    }, __jsx(Form.TextArea, {\n      placeholder: \"Enter Answers\",\n      value: this.state.answer,\n      onChange: event => this.setState({\n        answer: event.target.value\n      })\n    }), __jsx(Message, {\n      error: true,\n      header: \"Oops!\",\n      content: this.state.errorMessage\n    }), __jsx(Form.Field, null, this.renderFilesUpload(elmFiles)), __jsx(Modal, {\n      open: this.state.loading,\n      trigger: __jsx(Button, {\n        content: \"Submit Answers\",\n        onClick: this.onSubmitAnswer,\n        loading: this.state.loading,\n        labelPosition: \"left\",\n        icon: \"edit\",\n        primary: true\n      }),\n      basic: true,\n      size: \"small\"\n    }, __jsx(Header, {\n      content: \"Posting New Answers\"\n    }), __jsx(Modal.Content, null, __jsx(\"p\", null, \"Please wait patiently as the system is submitting your answer to the blockchain.\"), __jsx(Loader, {\n      active: true,\n      inline: \"centered\"\n    }, \"Loading\"))));\n  }\n\n  renderFilesUpload(files) {\n    let {\n      files_array\n    } = this.state;\n\n    if (this.state.files_array.length == 0) {\n      return __jsx(Container, null, __jsx(\"input\", {\n        style: {\n          display: 'none'\n        },\n        type: \"file\",\n        onChange: () => this.onFileSelected(),\n        ref: fileInput => this.fileInput = fileInput\n      }), __jsx(Button, {\n        primary: true,\n        onClick: () => this.fileInput.click(),\n        loading: this.state.fileLoading\n      }, \"Upload Image\"));\n    } else {\n      return __jsx(Segment, {\n        placeholder: true\n      }, __jsx(\"center\", null, __jsx(\"div\", {\n        style: {\n          marginBottom: '20px'\n        }\n      }, files), __jsx(\"input\", {\n        style: {\n          display: 'none'\n        },\n        type: \"file\",\n        onChange: () => this.onFileSelected(),\n        ref: fileInput => this.fileInput = fileInput\n      }), __jsx(Button, {\n        primary: true,\n        onClick: () => this.fileInput.click(),\n        loading: this.state.fileLoading\n      }, \"Upload Files\")));\n    }\n  }\n\n  render() {\n    if (this.state.login) {\n      return __jsx(Layout, {\n        accountType: this.state.accountType\n      }, __jsx(Container, null, __jsx(Divider, {\n        hidden: true\n      }), this.renderQuestion(), __jsx(Divider, {\n        hidden: true\n      }), this.renderFiles(), this.state.questionState == 1 ? __jsx(Container, null, __jsx(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"Voting In Progress\"), __jsx(\"p\", {\n        style: {\n          textAlign: 'center',\n          fontSize: 20\n        }\n      }, \"No answers can be submitted\"), __jsx(Divider, null)) : __jsx(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"Submit Your Answers Here\"), this.state.questionState == 1 ? null : __jsx(Container, null, __jsx(\"p\", null, __jsx(\"b\", null, \"Note:\"), \" To include math equations, delimit the latex format with $$.\"), __jsx(\"a\", {\n        style: {\n          display: \"table-cell\"\n        },\n        href: \"https://www.codecogs.com/latex/eqneditor.php\",\n        target: \"_blank\"\n      }, \"Link to Supported Latex Editor\")), this.state.questionState == 1 ? null : this.renderAnswersForm(), __jsx(Button, {\n        icon: this.state.sorted ? \"sort numeric down\" : \"sort numeric up\",\n        onClick: () => {\n          this.setState({\n            sorted: !this.state.sorted\n          });\n        },\n        floated: \"right\",\n        size: \"mini\"\n      }), __jsx(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"Answer(s) Submitted: \", this.state.answerList.length), __jsx(Divider, null), __jsx(Comment.Group, {\n        size: \"large\"\n      }, this.renderAnswers()), __jsx(ErrorModal, {\n        error: this.state.voteError,\n        title: 'Cannot Approve Own Answers',\n        content: \"You have selected to approve the answer you have provided. Please only approve answers provided by others.\",\n        questionAddress: this.state.questionAddress,\n        stateChange: () => {\n          this.setState({\n            voteError: false\n          });\n        }\n      }), __jsx(ErrorModal, {\n        error: this.state.ownerError,\n        title: 'Only Available For Owner Of Question',\n        content: \"You cannot change the state of the question as you are not the owner.\",\n        questionAddress: this.state.questionAddress,\n        stateChange: () => {\n          this.setState({\n            ownerError: false\n          });\n        }\n      }), __jsx(ErrorModal, {\n        error: this.state.voteMultipleError,\n        title: 'Answer Already Approved',\n        content: \"You cannot approve the same answer more than once. Please approve another answer.\",\n        questionAddress: this.state.questionAddress,\n        stateChange: () => {\n          this.setState({\n            voteMultipleError: false\n          });\n        }\n      }), __jsx(ErrorModal, {\n        error: this.state.voteMultipleError,\n        title: 'Answer Already Approved',\n        content: \"You cannot approve the same answer more than once. Please approve another answer.\",\n        questionAddress: this.state.questionAddress,\n        stateChange: () => {\n          this.setState({\n            voteMultipleError: false\n          });\n        }\n      }), __jsx(LoadingModal, {\n        trigger: this.state.changeToVoting,\n        title: 'Changing Question State to Voting Phase',\n        content: \"Please wait patiently as the system changes your question state.\",\n        loader: \"Changing Question State\"\n      }), __jsx(LoadingModal, {\n        trigger: this.state.changeToRewarded,\n        title: 'Changing Question State to Rewarded Phase',\n        content: \"Please wait patiently as the system changes your question state.\",\n        loader: \"Changing Question State\"\n      }), __jsx(LoadingModal, {\n        trigger: this.state.timeExtension,\n        title: 'Extending Question Deadline',\n        content: \"Please wait patiently as the system extends the duration of your question.\",\n        loader: \"Extending Deadline\"\n      }), __jsx(LoadingModal, {\n        trigger: this.state.changeReward,\n        title: 'Increasing Reward',\n        content: \"Please wait patiently as the system increases the reward of your question.\",\n        loader: \"Increasing Reward\"\n      }), __jsx(LoadingModal, {\n        trigger: this.state.voting,\n        title: 'Approving Answer',\n        content: \"Please wait patiently as the system submits your approval.\",\n        loader: \"Approving\"\n      }), __jsx(LoadingModal, {\n        trigger: this.state.fixError,\n        title: 'Fixing Balance Error',\n        content: \"Please wait as the system fixes the balance error of your question.\",\n        loader: \"Fixing Balance\"\n      }), __jsx(TimeOutModal, {\n        timeout: this.state.timeout\n      })));\n    } else {\n      return __jsx(Layout, {\n        accountType: this.state.accountType\n      }, __jsx(AccountIssueModal, {\n        loading: this.state.resourceLoading,\n        login: this.state.login\n      }));\n    }\n  }\n\n}\n\nexport default QuestionRow;","map":{"version":3,"sources":["C:/Users/edd1e/Desktop/ethQuestion_1.0/pages/showQuestion.js"],"names":["moment","React","Component","Countdown","Context","Text","Table","Popup","Button","Container","Form","Header","Comment","Segment","Message","Divider","Icon","Label","Modal","Loader","Image","Grid","AccountIssueModal","TimeOutModal","ErrorModal","LoadingModal","web3","Question","EthQuestionToken","credentials","Profile","factory","Layout","Footer","Link","Router","getIpfsHash","logging","checkFieldEmpty","sortingAnswers","cookies","QuestionRow","constructor","props","state","questionState","accounts","eth","getAccounts","question","questionAddress","account","methods","getCreator","call","setState","changeToVoting","logTransaction","summary","changeQuestionPhase","send","from","gasPrice","pushRoute","ownerError","err","message","timeout","errorMessage","changeToRewarded","rewardMessage","voteMessage","refundMessage","shareTokenAt","_address","fixError","balance","balanceOf","transfer","timeExtension","changeReward","increaseReward","loading","answer","checkIfAnswered","createAnswer","fileHashes_array","fileNames_array","answerer","voting","profile","getProfile","answerList","getAnswerList","index","i","length","checkVoter","approveAnswer","voteMultipleError","voteError","reader","FileReader","file","fileInput","files","fileLoading","Blob","files_array","push","name","console","log","onloadend","fileUrl","result","buffer","Buffer","fileHash","readAsDataURL","splice","time","avatarListIcon","votingTime","login","resourceLoading","accountType","balanceError","sorted","getInitialProps","query","value","isLogin","wallet","componentDidMount","profileAddress","getAccountType","fetchQuestionData","componentDidUpdate","prevProps","error","getSummary","getTime","iconList","map","item","reverse","renderTag","tagList","tagSize","tagColours","tag","id","encodeURIComponent","renderQuestion","currentTime","Date","maxDuration","parseFloat","toFixed","toString","publishTime","unix","format","publishTimeMs","valueOf","maxDurationMs","votingTimeMs","remainingTime","fontSize","lineHeight","MathJax","warn","Hub","Queue","Typeset","asciimath2jax","useMathMLspacing","delimiters","preview","float","verticalAlign","now","fixBalance","votePhase","rewardPhase","renderAnswers","answers","answeredTime","backgroundColor","imageName","marginBottom","renderFiles","fileHashes","fileNames","fileName","renderAnswersForm","elmFiles","onFileRemoved","event","target","renderFilesUpload","onSubmitAnswer","display","onFileSelected","click","render","textAlign"],"mappings":"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","sourcesContent":["import moment from 'moment';\r\nimport React, { Component } from 'react';\r\nimport Countdown from 'react-countdown-now';\r\nimport { Context, Text } from 'react-mathjax2';\r\nimport { Table, Popup, Button, Container, Form, Header, Comment,\r\n  Segment, Message, Divider, Icon, Label, Modal, Loader, Image, Grid } from 'semantic-ui-react';\r\nimport AccountIssueModal from '../components/AccountIssueModal';\r\nimport TimeOutModal from '../components/TimeOutModal';\r\nimport ErrorModal from '../components/ErrorModal';\r\nimport LoadingModal from '../components/LoadingModal';\r\nimport web3 from '../ethereum/web3';\r\nimport Question from '../ethereum/question';\r\nimport EthQuestionToken from '../ethereum/token';\r\nimport credentials from '../ethereum/credentials';\r\nimport Profile from '../ethereum/profile'\r\nimport factory from '../ethereum/factory';\r\nimport Layout from '../components/Layout';\r\nimport Footer from '../components/Footer';\r\nimport { Link, Router } from '../routes';\r\nimport { getIpfsHash } from '../utils/ipfs';\r\nimport { logging, checkFieldEmpty, sortingAnswers } from \"../utils/functions\";\r\nimport cookies from 'next-cookies';\r\n\r\nclass QuestionRow extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      questionAddress: '',\r\n      questionState: '',\r\n      summary: [],\r\n      time: '',\r\n      answerList: [],\r\n      avatarListIcon: [],\r\n      votingTime:'',\r\n      voting: false,\r\n      answer:'',\r\n      errorMessage: '',\r\n      loading: false,\r\n      voteError: false,\r\n      ownerError: false,\r\n      voteMultipleError: false,\r\n      changeToVoting: false,\r\n      changeToRewarded: false,\r\n      timeExtension: false,\r\n      changeReward: false,\r\n      fileLoading: false,\r\n      buffer: null,\r\n      files_array: [],\r\n      fileHashes_array: [],\r\n      fileNames_array: [],\r\n      login: false,\r\n      timeout: false,\r\n      resourceLoading: true,\r\n      accountType: null,\r\n      balanceError: false,\r\n      fixError: false,\r\n      sorted: false\r\n    };\r\n  }\r\n\r\n  static async getInitialProps(props) {\r\n    // Retrieve question data\r\n    let questionAddress = props.query.value;\r\n    return { questionAddress, isLogin: cookies(props).login || '', account: cookies(props).wallet || '' };\r\n  };\r\n\r\n  async componentDidMount() {\r\n    if (typeof web3 === 'undefined') {\r\n      this.setState({ resourceLoading: false })\r\n      return\r\n    }\r\n    let login = false;\r\n    if (this.props.isLogin) {\r\n      login = true;\r\n      // Get Account Type\r\n      const account = this.props.account;\r\n      let profileAddress = await factory.methods.getProfile(account).call();\r\n      let profile = Profile(profileAddress);\r\n      let accountType = await profile.methods.getAccountType().call();\r\n      accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"\r\n      await this.fetchQuestionData();\r\n      this.setState({ login: login,\r\n                      accountType: accountType });\r\n    }\r\n    this.setState({ resourceLoading: false })\r\n  }\r\n\r\n  async componentDidUpdate(prevProps) {\r\n    if(this.props != prevProps) {\r\n      this.fetchQuestionData()\r\n    }\r\n  }\r\n\r\n  async fetchQuestionData() {\r\n    let error = false;\r\n    const questionAddress = this.props.questionAddress;\r\n    const question = Question(questionAddress);\r\n    // Fetch Question Information\r\n    const summary = await question.methods.getSummary().call();\r\n    const time = await question.methods.getTime().call();\r\n    const answerList = await question.methods.getAnswerList().call();\r\n    // Fetch Avatar Icons\r\n    const iconList = ['alligator', 'anteater', 'armadillo', 'auroch', 'axolotl',\r\n        'badger', 'bat', 'beaver', 'buffalo', 'camel', 'capybara',\r\n        'chameleon', 'cheetah', 'chinchilla', 'chipmunk', 'chupacabra',\r\n        'cormorant', 'coyote', 'crow', 'dingo', 'dinosaur', 'dolphin',\r\n        'duck', 'elephant', 'ferret', 'fox', 'frog', 'giraffe', 'gopher',\r\n        'grizzly', 'hedgehog', 'hippo', 'hyena', 'ibex', 'ifrit', 'iguana',\r\n        'jackal', 'kangaroo', 'koala', 'kraken', 'lemur', 'leopard',\r\n        'liger', 'llama', 'manatee', 'mink', 'monkey', 'moose', 'narwhal',\r\n        'orangutan', 'otter', 'panda', 'penguin', 'platypus',\r\n        'pumpkin', 'python', 'quagga', 'rabbit', 'raccoon', 'rhino',\r\n        'sheep', 'shrew', 'skunk', 'squirrel', 'tiger', 'turtle', 'walrus',\r\n        'wolf', 'wolverine', 'wombat'];\r\n    const avatarListIcon = iconList.map((item)=>{\r\n        return 'https://ssl.gstatic.com/docs/common/profile/' + item + '_lg.png';\r\n    });\r\n    // Check for balance error\r\n    await EthQuestionToken.methods.balanceOf(questionAddress).call() != summary[2] ? error = true : error = false\r\n    this.setState({\r\n      questionAddress: questionAddress,\r\n      questionState: summary[4],\r\n      summary: summary,\r\n      time: time,\r\n      avatarListIcon: avatarListIcon,\r\n      answerList: answerList.reverse(),\r\n      votingTime: time[3],\r\n      balanceError: error\r\n    });\r\n  }\r\n\r\n  votePhase = async () => {\r\n    try {\r\n      if(this.state.questionState == 0) {\r\n        const accounts = await web3.eth.getAccounts();\r\n        const question = Question(this.state.questionAddress);\r\n        // Ensure that only Creator of Question can access this function\r\n        const account = this.props.account;\r\n        if (account == await question.methods.getCreator().call()){\r\n          this.setState({ changeToVoting: true});\r\n          let logTransaction = logging(\"Change to Voting Phase for Question Titled: \" + this.state.summary[0]);\r\n          await factory.methods.changeQuestionPhase(this.state.questionAddress, logTransaction).send(\r\n            { from: account,\r\n              gasPrice: '0'\r\n            });\r\n          Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n        } else {\r\n          this.setState({ ownerError: true});\r\n        }\r\n      }\r\n    } catch (err) {\r\n        if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n          this.setState({ timeout: true });\r\n        }\r\n        this.setState({ errorMessage: err.message });\r\n    }\r\n    this.setState({ changeToVoting: false});\r\n  }\r\n\r\n  rewardPhase = async () => {\r\n    try {\r\n      if(this.state.questionState == 1) {\r\n        const accounts = await web3.eth.getAccounts();\r\n        const question = Question(this.state.questionAddress);\r\n        // Ensure that only Creator of Question can access this function\r\n        const account = this.props.account;\r\n        if (account == await question.methods.getCreator().call()){\r\n          this.setState({ changeToRewarded: true});\r\n          let logTransaction = logging(\"Awarded \" + this.state.summary[2]*1e-4 + \" EQT(s) as reward for Question Titled: \" + this.state.summary[0]);\r\n          let rewardMessage = logging(\"Rewarded \" + this.state.summary[2]*1e-4 + \" EQT(s) for most approved answer\");\r\n          let voteMessage = logging(\"Rewarded EQT(s) for approving the most approved answer\");\r\n          let refundMessage = logging(\"Refunded \" + this.state.summary[2]*1e-4 + \" EQT(s) as there are no answers or answers with approvals\");\r\n          await factory.methods\r\n          .shareTokenAt(this.state.questionAddress, logTransaction, rewardMessage, voteMessage, refundMessage, EthQuestionToken._address)\r\n          .send({\r\n              from: account,\r\n              gasPrice: '0'\r\n          });\r\n          Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n        } else {\r\n          this.setState({ ownerError: true});\r\n        }\r\n      }\r\n    } catch (err) {\r\n      if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n        this.setState({ timeout: true });\r\n      }\r\n      this.setState({ errorMessage: err.message });\r\n    }\r\n    this.setState({ changeToRewarded: false});\r\n  };\r\n\r\n  fixBalance = async () => {\r\n    try {\r\n      const accounts = await web3.eth.getAccounts();\r\n      const question = Question(this.state.questionAddress);\r\n      // Ensure that only Creator of Question can access this function\r\n      const account = this.props.account;\r\n      if (account == await question.methods.getCreator().call()){\r\n        this.setState({ fixError: true});\r\n        let balance = this.state.summary[2] - await EthQuestionToken.methods.balanceOf(this.state.questionAddress).call()\r\n        await EthQuestionToken.methods.transfer(this.state.questionAddress, balance)\r\n        .send({\r\n          from: account,\r\n          gasPrice: '0'\r\n        })\r\n        Router.pushRoute(`/home`)\r\n      } else {\r\n        this.setState({ ownerError: true});\r\n      }\r\n    } catch (err) {\r\n      if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n        this.setState({ timeout: true });\r\n      }\r\n      this.setState({ errorMessage: err.message });\r\n    }\r\n    this.setState({ fixError: false})\r\n  }\r\n\r\n  timeExtension = async () => {\r\n    try {\r\n      const accounts = await web3.eth.getAccounts();\r\n      const question = Question(this.state.questionAddress);\r\n      // Ensure that only Creator of Question can access this function\r\n      const account = this.props.account;\r\n      if (account == await question.methods.getCreator().call()){\r\n        this.setState({ timeExtension: true});\r\n        let logTransaction = logging(\"Duration Extended for Question Titled: \" + this.state.summary[0]);\r\n        await factory.methods.timeExtension(this.state.questionAddress, logTransaction).send({\r\n          from: account,\r\n          gasPrice: '0'\r\n        });\r\n        Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n      } else {\r\n        this.setState({ ownerError: true});\r\n      }\r\n    } catch (err) {\r\n      if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n        this.setState({ timeExtension: false });\r\n        this.setState({ timeout: true });\r\n      }\r\n      this.setState({ errorMessage: err.message });\r\n    }\r\n    this.setState({ timeExtension: false})\r\n  }\r\n\r\n  increaseReward = async () => {\r\n    try {\r\n      const accounts = await web3.eth.getAccounts();\r\n      const question = Question(this.state.questionAddress);\r\n      // Ensure that only Creator of Question can access this function\r\n      const account = this.props.account;\r\n      if (account == await question.methods.getCreator().call()){\r\n        this.setState({ changeReward: true});\r\n        let logTransaction = logging(\"Increase Reward by 1 EQT(s) for Question Titled: \" + this.state.summary[0]);\r\n        await factory.methods.increaseReward(this.state.questionAddress, logTransaction, EthQuestionToken._address).send({\r\n          from: account,\r\n          gasPrice: '0'\r\n        });\r\n        await EthQuestionToken.methods.transfer(this.state.questionAddress, 10e3).send({\r\n          from: account,\r\n          gasPrice: '0'\r\n        })\r\n        Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n      } else {\r\n        this.setState({ ownerError: true});\r\n      }\r\n    } catch (err) {\r\n      if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n        this.setState({ timeout: true });\r\n      }\r\n      this.setState({ errorMessage: err.message });\r\n    }\r\n    this.setState({ changeReward: false})\r\n  }\r\n\r\n  onSubmitAnswer = async () => {\r\n    this.setState({ loading: true, errorMessage: '' });\r\n    if (checkFieldEmpty(this.state.answer)){\r\n      try {\r\n          const question = Question(this.state.questionAddress);\r\n          // Ensure that creator of question cannot provide answers\r\n          const account = this.props.account;\r\n          if (account != await question.methods.getCreator().call() && !await question.methods.checkIfAnswered(account).call()) {\r\n            // Logs the transactions\r\n            let logTransaction = logging(\"Submitted Answer for Question Titled: \" + this.state.summary[0]);\r\n            // Create new answer\r\n            await factory.methods\r\n            .createAnswer(this.state.questionAddress, this.state.answer, this.state.fileHashes_array, this.state.fileNames_array, logTransaction)\r\n            .send({\r\n                from: account,\r\n                gasPrice: '0'\r\n            });\r\n            Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n          } else {\r\n            this.setState({ loading: false, errorMessage: \"You cannot provide answer for your own question or already provided answer.\"})\r\n          }\r\n      } catch (err) {\r\n          if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n            this.setState({ timeout: true });\r\n          }\r\n          this.setState({ errorMessage: err.message });\r\n      }\r\n    } else {\r\n      this.setState({loading: false, errorMessage: \"Answer Field Empty\"})\r\n    }\r\n    this.setState({ loading: false, answer:'' });\r\n  };\r\n\r\n  approveAnswer = async(answerer) => {\r\n    this.setState({ voting: true })\r\n    const account = this.props.account;\r\n    const question = await Question(this.state.questionAddress);\r\n    const profile = await factory.methods.getProfile(account).call();\r\n    const answerList = await question.methods.getAnswerList().call();\r\n    let index;\r\n    for (let i=0; i<answerList.length; i++) {\r\n      if (answerList[i][2] == answerer) {\r\n        index = i;\r\n      }\r\n    }\r\n    //Ensure that voter is not the answerer\r\n    try {\r\n      if (account != answerer){\r\n        // Cannot vote twice\r\n        if (! await question.methods.checkVoter(index, profile).call()) {\r\n          //No cost for voting after the voting phase\r\n          if (await question.methods.state().call() != 2) {\r\n            await EthQuestionToken.methods.transfer(await this.state.questionAddress, 10e3)\r\n            .send({\r\n                from: account,\r\n                gasPrice: '0'\r\n            })\r\n          }\r\n          let logTransaction = logging(\"Approved An Answer for Question Titled: \" + this.state.summary[0]);\r\n          await factory.methods\r\n          .approveAnswer(this.state.questionAddress, index, logTransaction)\r\n          .send({\r\n              from: account,\r\n              gasPrice: '0'\r\n          });\r\n          Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n        } else {\r\n          this.setState({ voteMultipleError: true});\r\n        }\r\n      } else {\r\n        this.setState({ voteError: true});\r\n      }\r\n    } catch (err) {\r\n      if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n        this.setState({ timeout: true });\r\n      }\r\n      this.setState({ errorMessage: err.message });\r\n    }\r\n    this.setState({ voting: false })\r\n  };\r\n\r\n  // Select a file to upload\r\n  onFileSelected = async () => {\r\n      // Access JavaScript FileReader() method for conversion to buffer\r\n      const reader = new FileReader();\r\n      const file = this.fileInput.files[0];\r\n      this.setState({fileLoading: true});\r\n      if (file instanceof Blob ) {\r\n          let {files_array, fileNames_array, fileHashes_array} = this.state;\r\n          files_array.push(file);\r\n          fileNames_array.push(file.name);\r\n          this.setState({\r\n              files_array: files_array,\r\n              fileNames_array: fileNames_array\r\n          });\r\n          console.log(\"fileNames_array: \", fileNames_array);\r\n          reader.onloadend = async () => {\r\n              await this.setState({\r\n                  fileUrl: reader.result,\r\n                  fileLoading: true,\r\n                  buffer: Buffer.from(reader.result) // File is converted to a buffer for upload to IPFS\r\n              });\r\n              const fileHash = this.state.buffer ? (await getIpfsHash(file)) : '0';\r\n              fileHashes_array.push(fileHash);\r\n              this.setState({ fileHashes_array: fileHashes_array });\r\n              console.log(\"fileHashes_array: \", fileHashes_array);\r\n              this.setState({fileLoading: false});\r\n          }\r\n          reader.readAsDataURL(file);\r\n      }\r\n  }\r\n\r\n  // Remove a previously selected file to upload\r\n  onFileRemoved = (file) => {\r\n      var i = 0;\r\n      let {files_array, fileHashes_array, fileNames_array} = this.state;\r\n      console.log('file: ', file);\r\n      for (i = 0 ; i < files_array.length ; i++) {\r\n          if (file === files_array[i]) {\r\n              files_array.splice(i, 1);\r\n              fileNames_array.splice(i, 1);\r\n              fileHashes_array.splice(i, 1);\r\n              break;\r\n          }\r\n      }\r\n      this.setState({\r\n          files_array: files_array,\r\n          fileNames_array: fileNames_array,\r\n          fileHashes_array: fileHashes_array\r\n      });\r\n      console.log('fileNames_array', fileNames_array);\r\n      console.log(\"fileHashes_array: \", fileHashes_array);\r\n  }\r\n\r\n  // Render each tag individually for each question\r\n  renderTag(tagList, tagSize) {\r\n    const tagColours = [\"red\", \"olive\", \"blue\", \"teal\", \"green\"];\r\n    return tagList.map((tag, index) => {\r\n      let id = index % 5;\r\n      return(\r\n        <Label as='a' onClick={() => Router.pushRoute(`/${'search/'+encodeURIComponent(tag)}`)}\r\n          tag size={tagSize} key={index} color={tagColours[id]}>\r\n          {tag}\r\n        </Label>\r\n      )\r\n    });\r\n  }\r\n\r\n  renderQuestion() {\r\n      const summary = this.state.summary;\r\n      const time = this.state.time;\r\n      var currentTime = (new Date).getTime();\r\n      var maxDuration =(parseFloat(summary[3]) / 60 / 60).toFixed(2).toString().toString();\r\n      var publishTime = moment.unix(time[0]).format('dddd, Do MMMM YYYY, h:mm:ss a');\r\n      var votingTime = moment.unix(this.state.votingTime).format('dddd, Do MMMM YYYY, h:mm:ss a');\r\n      var publishTimeMs = moment.unix(time[0]).valueOf();\r\n      var maxDurationMs = moment.unix(time[2]).valueOf();\r\n      var votingTimeMs = moment.unix(this.state.votingTime).valueOf();\r\n\r\n      let remainingTime = 0;\r\n      if (this.state.questionState == 0) {\r\n        remainingTime = publishTimeMs + maxDurationMs - currentTime;\r\n        if (remainingTime < 0) {\r\n            remainingTime = 0;\r\n        }\r\n      } else {\r\n        remainingTime = votingTimeMs + maxDurationMs - currentTime;\r\n        if (remainingTime < 0) {\r\n            remainingTime = 0;\r\n        }\r\n      }\r\n\r\n      return (\r\n        <React.Fragment>\r\n          <Table definition>\r\n            <Table.Body>\r\n              <Table.Row>\r\n                <Table.Cell width={2}>Question Title</Table.Cell>\r\n                <Table.Cell style={{fontSize: 20, lineHeight: '1.5'}}>\r\n                    {summary[0]}\r\n                </Table.Cell>\r\n              </Table.Row>\r\n              <Table.Row>\r\n                <Table.Cell width={2}>Description</Table.Cell>\r\n                <Table.Cell style={{fontSize: 20, lineHeight: '1.5'}}>\r\n                    <Context\r\n                        input='tex'\r\n                        onLoad={ () => console.log(\"Loaded MathJax script!\") }\r\n                        onError={ (MathJax, error) => {\r\n                            console.warn(error);\r\n                            console.log(\"Encountered a MathJax error, re-attempting a typeset!\");\r\n                            MathJax.Hub.Queue(\r\n                              MathJax.Hub.Typeset()\r\n                            );\r\n                        } }\r\n                        options={{\r\n                            asciimath2jax: {\r\n                                 useMathMLspacing: true,\r\n                                 delimiters: [[\"$$\",\"$$\"]],\r\n                                 preview: \"none\",\r\n                            }\r\n                        }}>\r\n                        <Text text={summary[1]}/>\r\n                    </Context>\r\n                  </Table.Cell>\r\n                </Table.Row>\r\n                <Table.Row>\r\n                  <Table.Cell width={2}>Tags</Table.Cell>\r\n                  <Table.Cell>\r\n                    {this.renderTag(summary[8], \"small\")}\r\n                  </Table.Cell>\r\n                </Table.Row>\r\n                <Table.Row>\r\n                  <Table.Cell>Reward (EQT)</Table.Cell>\r\n                  <Table.Cell style={{fontSize: 20}}>{summary[2]*1e-4}\r\n                  {this.state.questionState == 0\r\n                      ?  <Popup\r\n                          trigger={\r\n                              <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                      icon='ethereum'\r\n                                      color=\"black\"\r\n                                      onClick={this.increaseReward}\r\n                                        />\r\n                          }\r\n                          content={\"Increase Reward\"}\r\n                          position='bottom right'\r\n                          inverted />\r\n                      :  <Popup\r\n                          trigger={\r\n                              <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                      icon='ethereum'\r\n                                      color=\"black\"\r\n                                      disabled\r\n                              />\r\n                          }\r\n                          position='bottom right'\r\n                          inverted />\r\n                  }\r\n                  </Table.Cell>\r\n                </Table.Row>\r\n                <Table.Row>\r\n                  <Table.Cell>Publish Time</Table.Cell>\r\n                  <Table.Cell style={{fontSize: 20}}>{publishTime}</Table.Cell>\r\n                </Table.Row>\r\n                <Table.Row>\r\n                  <Table.Cell>Answering Duration (hours)</Table.Cell>\r\n                  <Table.Cell style={{fontSize: 20}}>\r\n                      <span style={{verticalAlign: 'middle', lineHeight: '33px'}}>\r\n                          {maxDuration}\r\n                      </span>\r\n                      {this.state.questionState == 0 && remainingTime > 0\r\n                          ? <Popup\r\n                              trigger={\r\n                                  <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                          icon='clock'\r\n                                          color=\"violet\"\r\n                                  />}\r\n                              content={\r\n                                  <span>\r\n                                  <span>Remaining time - </span>\r\n                                  <Countdown date={Date.now() + remainingTime}>\r\n                                  </Countdown>\r\n                              </span>}\r\n                              position='bottom right'\r\n                              inverted />\r\n                          : this.state.questionState == 0 && remainingTime == 0\r\n                          ? <Popup trigger={<Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                    icon='clock'\r\n                                                    color=\"red\"/>}\r\n                                  flowing hoverable>\r\n                              <Grid centered divided columns={2}>\r\n                                <Grid.Column textAlign='center'>\r\n                                  <p>Extends the validity of question by 1 hour</p>\r\n                                  <Button onClick={this.timeExtension}>Extend Deadline</Button>\r\n                                </Grid.Column>\r\n                                {this.state.balanceError == true ?\r\n                                  <Grid.Column textAlign='center'>\r\n                                    <p>Reward Balance Error</p>\r\n                                    <Button onClick={this.fixBalance}>Fix Balance</Button>\r\n                                  </Grid.Column> :\r\n                                  <Grid.Column textAlign='center'>\r\n                                    <p>Proceed to the voting phase</p>\r\n                                    <Button onClick={this.votePhase}>Voting Phase</Button>\r\n                                  </Grid.Column> }\r\n                              </Grid>\r\n                            </Popup>\r\n                          : <Popup\r\n                              trigger={\r\n                                  <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                          icon='clock'\r\n                                          color=\"red\"\r\n                                          disabled\r\n                                  />\r\n                              }\r\n                              position='bottom right'\r\n                              inverted />\r\n                        }\r\n                    </Table.Cell>\r\n                  </Table.Row>\r\n                  <Table.Row>\r\n                    <Table.Cell>Voting Duration (hours)</Table.Cell>\r\n                    <Table.Cell style={{fontSize: 20}}>\r\n                      <span style={{verticalAlign: 'middle', lineHeight: '33px'}}>\r\n                          {maxDuration}\r\n                      </span>\r\n                      {this.state.questionState == 1 && remainingTime > 0\r\n                          ? <Popup\r\n                              trigger={\r\n                                  <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                          icon='clock'\r\n                                          color=\"violet\"\r\n                                  />}\r\n                              content={\r\n                                  <span>\r\n                                  <span>Remaining time - </span>\r\n                                  <Countdown date={Date.now() + remainingTime}>\r\n                                  </Countdown>\r\n                              </span>}\r\n                              position='bottom right'\r\n                              inverted />\r\n                          : this.state.questionState == 1 && remainingTime == 0\r\n                          ? <Popup\r\n                              trigger={\r\n                                  <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                          icon='clock'\r\n                                          color=\"red\"\r\n                                          onClick={this.rewardPhase}\r\n                                            />\r\n                              }\r\n                              content={\"Reward\"}\r\n                              position='bottom right'\r\n                              inverted />\r\n                          : this.state.questionState == 0\r\n                          ? <Popup\r\n                              trigger={\r\n                                  <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                          icon='clock'\r\n                                          color=\"red\"\r\n                                          disabled\r\n                                  />\r\n                              }\r\n                              position='bottom right'\r\n                              inverted />\r\n                          : <Popup\r\n                              trigger={\r\n                                  <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                          icon='clock'\r\n                                          color=\"red\"\r\n                                          disabled\r\n                                            />\r\n                              }\r\n                              position='bottom right'\r\n                              inverted />\r\n                      }\r\n                    </Table.Cell>\r\n                </Table.Row>\r\n              </Table.Body>\r\n            </Table>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n\r\n  renderAnswers() {\r\n    let answers = this.state.answerList\r\n    answers = sortingAnswers(answers, this.state.sorted);\r\n    // Answering Phase no answers are shown\r\n    if (this.state.questionState != 0){\r\n      return answers.map((answer, index) => {\r\n          var answeredTime = moment.unix(answer[5]).format('Do MMMM YYYY, h:mm a');\r\n          var id = index % 70;\r\n          return <Comment key={index}>\r\n              <Comment.Avatar src={this.state.avatarListIcon[id]} style={{backgroundColor: '#8D8741'}}/>\r\n              <Comment.Content>\r\n                <Comment.Author as='a'>{answer[2]}</Comment.Author>\r\n                <Comment.Metadata>\r\n                  <div>{answeredTime}</div>\r\n                </Comment.Metadata>\r\n                <br/>\r\n                {answer[1] ? <b><font color='red'><Icon name='certificate'/>Rewarded</font></b> : null}\r\n                {this.state.questionState == 2\r\n                  ? <Comment.Metadata>\r\n                    <div><Icon name='thumbs up' />{answer[4]}</div>\r\n                    </Comment.Metadata>\r\n                  : <Comment.Metadata>\r\n                    <div><Icon name='thumbs up' />0</div>\r\n                    </Comment.Metadata>\r\n                }\r\n                <Comment.Text>\r\n                  <Context\r\n                      input='tex'\r\n                      onLoad={ () => console.log(\"Loaded MathJax script!\") }\r\n                      onError={ (MathJax, error) => {\r\n                          console.warn(error);\r\n                          console.log(\"Encountered a MathJax error, re-attempting a typeset!\");\r\n                          MathJax.Hub.Queue(\r\n                            MathJax.Hub.Typeset()\r\n                          );\r\n                      } }\r\n                      options={{\r\n                          asciimath2jax: {\r\n                               useMathMLspacing: true,\r\n                               delimiters: [[\"$$\",\"$$\"]],\r\n                               preview: \"none\",\r\n                          }\r\n                      }}>\r\n                      <Text text={answer[0]}/>\r\n                  </Context>\r\n                  {answer[7].map((imageName, index) =>\r\n                      <div style={{marginBottom: '10px'}} key={index}>\r\n                          <Image src={\"https://ipfs.io/ipfs/\"+answer[8][index]} centered={true}/>\r\n                      </div>\r\n                  )}\r\n                </Comment.Text>\r\n                <Comment.Actions>\r\n                  <Comment.Action>\r\n                    <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                            icon='thumbs up'\r\n                            onClick={() => this.approveAnswer(answer[2])}\r\n                            size='tiny'\r\n                            content='Approve Answer'\r\n                            color='green'\r\n                    />\r\n                      </Comment.Action>\r\n                </Comment.Actions>\r\n              </Comment.Content>\r\n            </Comment>\r\n      });\r\n    }\r\n  }\r\n\r\n  renderFiles () {\r\n    let fileHashes = this.state.summary[5];\r\n    let fileNames = this.state.summary[6];\r\n\r\n    if (fileHashes.length != 0) {\r\n        return(\r\n            <Segment placeholder>\r\n                <center>\r\n                    <p>Image(s) Uploaded</p>\r\n                    {fileNames.map((fileName, index) =>\r\n                        <div style={{marginBottom: '10px'}} key={index}>\r\n                            <Image src={\"https://ipfs.io/ipfs/\"+fileHashes[index]} size='massive'/>\r\n                            <Divider hidden/>\r\n                            <p> To download: </p>\r\n                            <Label as='a' size='big' href={\"https://ipfs.io/ipfs/\"+fileHashes[index]}>\r\n                                <Icon name='download' />\r\n                                {fileName}\r\n                            </Label>\r\n                        </div>\r\n                    )}\r\n                </center>\r\n            </Segment>\r\n        );\r\n    }\r\n  }\r\n\r\n  renderAnswersForm() {\r\n    let {files_array} = this.state;\r\n    let elmFiles = null;\r\n\r\n    if (files_array !== null) {\r\n        elmFiles = files_array.map((item, index) =>\r\n            <Label as='a' key={index} size='big'>\r\n                {item.name}\r\n                <Icon name='delete'\r\n                      onClick={() => this.onFileRemoved(item)} />\r\n            </Label>\r\n        );\r\n    }\r\n    return(\r\n      <Form error={!!this.state.errorMessage}>\r\n        <Form.TextArea\r\n          placeholder=\"Enter Answers\"\r\n          value={this.state.answer}\r\n          onChange={event => this.setState({ answer: event.target.value })}\r\n        />\r\n        <Message error header=\"Oops!\" content={this.state.errorMessage} />\r\n        <Form.Field>\r\n          {this.renderFilesUpload(elmFiles)}\r\n        </Form.Field>\r\n        <Modal open={this.state.loading}\r\n               trigger={ <Button content='Submit Answers' onClick={this.onSubmitAnswer} loading={this.state.loading} labelPosition='left' icon='edit' primary />}\r\n               basic size='small'>\r\n          <Header content='Posting New Answers' />\r\n          <Modal.Content>\r\n            <p>\r\n              Please wait patiently as the system is submitting your answer to the blockchain.\r\n            </p>\r\n            <Loader active inline=\"centered\">\r\n              Loading\r\n            </Loader>\r\n          </Modal.Content>\r\n        </Modal>\r\n      </Form>\r\n    );\r\n  }\r\n\r\n  renderFilesUpload(files) {\r\n    let {files_array} = this.state;\r\n    if(this.state.files_array.length == 0){\r\n      return (\r\n        <Container>\r\n          <input\r\n              style={{ display: 'none' }}\r\n              type='file'\r\n              onChange={() => this.onFileSelected()}\r\n              ref={fileInput => this.fileInput = fileInput}/>\r\n          <Button primary onClick={() => this.fileInput.click()} loading={this.state.fileLoading}>Upload Image</Button>\r\n        </Container>\r\n      )\r\n    } else {\r\n      return (\r\n        <Segment placeholder>\r\n          <center>\r\n              <div style={{marginBottom: '20px'}}>\r\n                  {files}\r\n              </div>\r\n              <input\r\n                  style={{ display: 'none' }}\r\n                  type='file'\r\n                  onChange={() => this.onFileSelected()}\r\n                  ref={fileInput => this.fileInput = fileInput}/>\r\n              <Button primary onClick={() => this.fileInput.click()} loading={this.state.fileLoading}>Upload Files</Button>\r\n          </center>\r\n        </Segment>\r\n      )\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (this.state.login) {\r\n      return (\r\n        <Layout accountType={this.state.accountType}>\r\n          <Container>\r\n            <Divider hidden/>\r\n            {this.renderQuestion()}\r\n            <Divider hidden/>\r\n            {this.renderFiles()}\r\n            {this.state.questionState == 1 ?\r\n              <Container>\r\n                <Header as='h2' textAlign='center'>\r\n                  Voting In Progress\r\n                </Header>\r\n                <p style={{textAlign:'center', fontSize: 20}}>No answers can be submitted</p>\r\n                <Divider/>\r\n              </Container>\r\n               :\r\n              <Header as='h2' textAlign='center'>\r\n                  Submit Your Answers Here\r\n              </Header>\r\n            }\r\n            {this.state.questionState == 1 ? null :\r\n              <Container>\r\n                <p><b>Note:</b> To include math equations, delimit the latex format with $$.</p>\r\n                <a style={{display: \"table-cell\"}} href=\"https://www.codecogs.com/latex/eqneditor.php\" target=\"_blank\">Link to Supported Latex Editor</a>\r\n              </Container>\r\n            }\r\n            {this.state.questionState == 1 ? null : this.renderAnswersForm()}\r\n            <Button\r\n              icon={this.state.sorted ? \"sort numeric down\" : \"sort numeric up\"}\r\n              onClick={ () => { this.setState({ sorted: !this.state.sorted }) }}\r\n              floated=\"right\"\r\n              size=\"mini\"\r\n            />\r\n            <Header as='h2' textAlign='center'>\r\n              Answer(s) Submitted: {this.state.answerList.length}\r\n            </Header>\r\n            <Divider />\r\n            <Comment.Group size='large'>\r\n            {this.renderAnswers()}\r\n            </Comment.Group>\r\n            <ErrorModal error={this.state.voteError}\r\n                        title={'Cannot Approve Own Answers'}\r\n                        content={\"You have selected to approve the answer you have provided. Please only approve answers provided by others.\"}\r\n                        questionAddress={this.state.questionAddress}\r\n                        stateChange={() => {this.setState({ voteError: false })}} />\r\n\r\n            <ErrorModal error={this.state.ownerError}\r\n                        title={'Only Available For Owner Of Question'}\r\n                        content={\"You cannot change the state of the question as you are not the owner.\"}\r\n                        questionAddress={this.state.questionAddress}\r\n                        stateChange={() => {this.setState({ ownerError: false })}} />\r\n\r\n            <ErrorModal error={this.state.voteMultipleError}\r\n                        title={'Answer Already Approved'}\r\n                        content={\"You cannot approve the same answer more than once. Please approve another answer.\"}\r\n                        questionAddress={this.state.questionAddress}\r\n                        stateChange={() => {this.setState({ voteMultipleError: false })}} />\r\n\r\n            <ErrorModal error={this.state.voteMultipleError}\r\n                        title={'Answer Already Approved'}\r\n                        content={\"You cannot approve the same answer more than once. Please approve another answer.\"}\r\n                        questionAddress={this.state.questionAddress}\r\n                        stateChange={() => {this.setState({ voteMultipleError: false })}} />\r\n\r\n            <LoadingModal trigger={this.state.changeToVoting}\r\n                          title={'Changing Question State to Voting Phase'}\r\n                          content={\"Please wait patiently as the system changes your question state.\"}\r\n                          loader={\"Changing Question State\"}/>\r\n\r\n            <LoadingModal trigger={this.state.changeToRewarded}\r\n                          title={'Changing Question State to Rewarded Phase'}\r\n                          content={\"Please wait patiently as the system changes your question state.\"}\r\n                          loader={\"Changing Question State\"}/>\r\n\r\n            <LoadingModal trigger={this.state.timeExtension}\r\n                          title={'Extending Question Deadline'}\r\n                          content={\"Please wait patiently as the system extends the duration of your question.\"}\r\n                          loader={\"Extending Deadline\"}/>\r\n\r\n            <LoadingModal trigger={this.state.changeReward}\r\n                          title={'Increasing Reward'}\r\n                          content={\"Please wait patiently as the system increases the reward of your question.\"}\r\n                          loader={\"Increasing Reward\"}/>\r\n\r\n            <LoadingModal trigger={this.state.voting}\r\n                          title={'Approving Answer'}\r\n                          content={\"Please wait patiently as the system submits your approval.\"}\r\n                          loader={\"Approving\"}/>\r\n\r\n            <LoadingModal trigger={this.state.fixError}\r\n                          title={'Fixing Balance Error'}\r\n                          content={\"Please wait as the system fixes the balance error of your question.\"}\r\n                          loader={\"Fixing Balance\"}/>\r\n            <TimeOutModal timeout={this.state.timeout} />\r\n          </Container>\r\n        </Layout>\r\n      );\r\n    } else {\r\n      return (\r\n        <Layout accountType={this.state.accountType}>\r\n          <AccountIssueModal loading={this.state.resourceLoading} login={this.state.login} />\r\n        </Layout>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default QuestionRow;\r\n"]},"metadata":{},"sourceType":"module"}