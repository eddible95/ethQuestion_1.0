{"version":3,"file":"static/webpack/static\\development\\pages\\showQuestion.js.5c1de20a2552a5f80664.hot-update.js","sources":["webpack:///./pages/showQuestion.js"],"sourcesContent":["import moment from 'moment';\r\nimport React, { Component } from 'react';\r\nimport Countdown from 'react-countdown-now';\r\nimport { Context, Text } from 'react-mathjax2';\r\nimport { Table, Popup, Button, Container, Form, Header, Comment,\r\n  Segment, Message, Divider, Icon, Label, Modal, Loader, Image, Grid } from 'semantic-ui-react';\r\nimport AccountIssueModal from '../components/AccountIssueModal';\r\nimport TimeOutModal from '../components/TimeOutModal';\r\nimport ErrorModal from '../components/ErrorModal';\r\nimport LoadingModal from '../components/LoadingModal';\r\nimport web3 from '../ethereum/web3';\r\nimport Question from '../ethereum/question';\r\nimport EthQuestionToken from '../ethereum/token';\r\nimport credentials from '../ethereum/credentials';\r\nimport Profile from '../ethereum/profile'\r\nimport factory from '../ethereum/factory';\r\nimport Layout from '../components/Layout';\r\nimport Footer from '../components/Footer';\r\nimport { Link, Router } from '../routes';\r\nimport { getIpfsHash } from '../utils/ipfs';\r\nimport { logging, checkFieldEmpty, sortingAnswers } from \"../utils/functions\";\r\nimport cookies from 'next-cookies';\r\n\r\nclass QuestionRow extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      questionAddress: '',\r\n      questionState: '',\r\n      summary: [],\r\n      time: '',\r\n      answerList: [],\r\n      avatarListIcon: [],\r\n      votingTime:'',\r\n      voting: false,\r\n      answer:'',\r\n      errorMessage: '',\r\n      loading: false,\r\n      voteError: false,\r\n      ownerError: false,\r\n      voteMultipleError: false,\r\n      changeToVoting: false,\r\n      changeToRewarded: false,\r\n      timeExtension: false,\r\n      changeReward: false,\r\n      fileLoading: false,\r\n      buffer: null,\r\n      files_array: [],\r\n      fileHashes_array: [],\r\n      fileNames_array: [],\r\n      login: false,\r\n      timeout: false,\r\n      resourceLoading: true,\r\n      accountType: null,\r\n      balanceError: false,\r\n      fixError: false,\r\n      sorted: false\r\n    };\r\n  }\r\n\r\n  static async getInitialProps(props) {\r\n    // Retrieve question data\r\n    let questionAddress = props.query.value;\r\n    return { questionAddress, isLogin: cookies(props).login || '', account: cookies(props).wallet || '' };\r\n  };\r\n\r\n  async componentDidMount() {\r\n    if (typeof web3 === 'undefined') {\r\n      this.setState({ resourceLoading: false })\r\n      return\r\n    }\r\n    let login = false;\r\n    if (this.props.isLogin) {\r\n      login = true;\r\n      // Get Account Type\r\n      const account = this.props.account;\r\n      let profileAddress = await factory.methods.getProfile(account).call();\r\n      let profile = Profile(profileAddress);\r\n      let accountType = await profile.methods.getAccountType().call();\r\n      accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"\r\n      await this.fetchQuestionData();\r\n      this.setState({ login: login,\r\n                      accountType: accountType });\r\n    }\r\n    this.setState({ resourceLoading: false })\r\n  }\r\n\r\n  async componentDidUpdate(prevProps) {\r\n    if(this.props != prevProps) {\r\n      this.fetchQuestionData()\r\n    }\r\n  }\r\n\r\n  async fetchQuestionData() {\r\n    let error = false;\r\n    const questionAddress = this.props.questionAddress;\r\n    const question = Question(questionAddress);\r\n    // Fetch Question Information\r\n    const summary = await question.methods.getSummary().call();\r\n    const time = await question.methods.getTime().call();\r\n    const answerList = await question.methods.getAnswerList().call();\r\n    // Fetch Avatar Icons\r\n    const iconList = ['alligator', 'anteater', 'armadillo', 'auroch', 'axolotl',\r\n        'badger', 'bat', 'beaver', 'buffalo', 'camel', 'capybara',\r\n        'chameleon', 'cheetah', 'chinchilla', 'chipmunk', 'chupacabra',\r\n        'cormorant', 'coyote', 'crow', 'dingo', 'dinosaur', 'dolphin',\r\n        'duck', 'elephant', 'ferret', 'fox', 'frog', 'giraffe', 'gopher',\r\n        'grizzly', 'hedgehog', 'hippo', 'hyena', 'ibex', 'ifrit', 'iguana',\r\n        'jackal', 'kangaroo', 'koala', 'kraken', 'lemur', 'leopard',\r\n        'liger', 'llama', 'manatee', 'mink', 'monkey', 'moose', 'narwhal',\r\n        'orangutan', 'otter', 'panda', 'penguin', 'platypus',\r\n        'pumpkin', 'python', 'quagga', 'rabbit', 'raccoon', 'rhino',\r\n        'sheep', 'shrew', 'skunk', 'squirrel', 'tiger', 'turtle', 'walrus',\r\n        'wolf', 'wolverine', 'wombat'];\r\n    const avatarListIcon = iconList.map((item)=>{\r\n        return 'https://ssl.gstatic.com/docs/common/profile/' + item + '_lg.png';\r\n    });\r\n    // Check for balance error\r\n    await EthQuestionToken.methods.balanceOf(questionAddress).call() != summary[2] ? error = true : error = false\r\n    this.setState({\r\n      questionAddress: questionAddress,\r\n      questionState: summary[4],\r\n      summary: summary,\r\n      time: time,\r\n      avatarListIcon: avatarListIcon,\r\n      answerList: answerList.reverse(),\r\n      votingTime: time[3],\r\n      balanceError: error\r\n    });\r\n  }\r\n\r\n  votePhase = async () => {\r\n    try {\r\n      if(this.state.questionState == 0) {\r\n        const accounts = await web3.eth.getAccounts();\r\n        const question = Question(this.state.questionAddress);\r\n        // Ensure that only Creator of Question can access this function\r\n        const account = this.props.account;\r\n        if (account == await question.methods.getCreator().call()){\r\n          this.setState({ changeToVoting: true});\r\n          let logTransaction = logging(\"Change to Voting Phase for Question Titled: \" + this.state.summary[0]);\r\n          await factory.methods.changeQuestionPhase(this.state.questionAddress, logTransaction).send(\r\n            { from: account,\r\n              gasPrice: '0'\r\n            });\r\n          Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n        } else {\r\n          this.setState({ ownerError: true});\r\n        }\r\n      }\r\n    } catch (err) {\r\n        if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n          this.setState({ timeout: true });\r\n        }\r\n        this.setState({ errorMessage: err.message });\r\n    }\r\n    this.setState({ changeToVoting: false});\r\n  }\r\n\r\n  rewardPhase = async () => {\r\n    try {\r\n      if(this.state.questionState == 1) {\r\n        const accounts = await web3.eth.getAccounts();\r\n        const question = Question(this.state.questionAddress);\r\n        // Ensure that only Creator of Question can access this function\r\n        const account = this.props.account;\r\n        if (account == await question.methods.getCreator().call()){\r\n          this.setState({ changeToRewarded: true});\r\n          let logTransaction = logging(\"Awarded \" + this.state.summary[2]*1e-4 + \" EQT(s) as reward for Question Titled: \" + this.state.summary[0]);\r\n          let rewardMessage = logging(\"Rewarded \" + this.state.summary[2]*1e-4 + \" EQT(s) for most approved answer\");\r\n          let voteMessage = logging(\"Rewarded EQT(s) for approving the most approved answer\");\r\n          let refundMessage = logging(\"Refunded \" + this.state.summary[2]*1e-4 + \" EQT(s) as there are no answers or answers with approvals\");\r\n          await factory.methods\r\n          .shareTokenAt(this.state.questionAddress, logTransaction, rewardMessage, voteMessage, refundMessage, EthQuestionToken._address)\r\n          .send({\r\n              from: account,\r\n              gasPrice: '0'\r\n          });\r\n          Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n        } else {\r\n          this.setState({ ownerError: true});\r\n        }\r\n      }\r\n    } catch (err) {\r\n      if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n        this.setState({ timeout: true });\r\n      }\r\n      this.setState({ errorMessage: err.message });\r\n    }\r\n    this.setState({ changeToRewarded: false});\r\n  };\r\n\r\n  fixBalance = async () => {\r\n    try {\r\n      const accounts = await web3.eth.getAccounts();\r\n      const question = Question(this.state.questionAddress);\r\n      // Ensure that only Creator of Question can access this function\r\n      const account = this.props.account;\r\n      if (account == await question.methods.getCreator().call()){\r\n        this.setState({ fixError: true});\r\n        let balance = this.state.summary[2] - await EthQuestionToken.methods.balanceOf(this.state.questionAddress).call()\r\n        await EthQuestionToken.methods.transfer(this.state.questionAddress, balance)\r\n        .send({\r\n          from: account,\r\n          gasPrice: '0'\r\n        })\r\n        Router.pushRoute(`/home`)\r\n      } else {\r\n        this.setState({ ownerError: true});\r\n      }\r\n    } catch (err) {\r\n      if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n        this.setState({ timeout: true });\r\n      }\r\n      this.setState({ errorMessage: err.message });\r\n    }\r\n    this.setState({ fixError: false})\r\n  }\r\n\r\n  timeExtension = async () => {\r\n    try {\r\n      const accounts = await web3.eth.getAccounts();\r\n      const question = Question(this.state.questionAddress);\r\n      // Ensure that only Creator of Question can access this function\r\n      const account = this.props.account;\r\n      if (account == await question.methods.getCreator().call()){\r\n        this.setState({ timeExtension: true});\r\n        let logTransaction = logging(\"Duration Extended for Question Titled: \" + this.state.summary[0]);\r\n        await factory.methods.timeExtension(this.state.questionAddress, logTransaction).send({\r\n          from: account,\r\n          gasPrice: '0'\r\n        });\r\n        Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n      } else {\r\n        this.setState({ ownerError: true});\r\n      }\r\n    } catch (err) {\r\n      if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n        this.setState({ timeExtension: false });\r\n        this.setState({ timeout: true });\r\n      }\r\n      this.setState({ errorMessage: err.message });\r\n    }\r\n    this.setState({ timeExtension: false})\r\n  }\r\n\r\n  increaseReward = async () => {\r\n    try {\r\n      const accounts = await web3.eth.getAccounts();\r\n      const question = Question(this.state.questionAddress);\r\n      // Ensure that only Creator of Question can access this function\r\n      const account = this.props.account;\r\n      if (account == await question.methods.getCreator().call()){\r\n        this.setState({ changeReward: true});\r\n        let logTransaction = logging(\"Increase Reward by 1 EQT(s) for Question Titled: \" + this.state.summary[0]);\r\n        await factory.methods.increaseReward(this.state.questionAddress, logTransaction, EthQuestionToken._address).send({\r\n          from: account,\r\n          gasPrice: '0'\r\n        });\r\n        await EthQuestionToken.methods.transfer(this.state.questionAddress, 10e3).send({\r\n          from: account,\r\n          gasPrice: '0'\r\n        })\r\n        Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n      } else {\r\n        this.setState({ ownerError: true});\r\n      }\r\n    } catch (err) {\r\n      if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n        this.setState({ timeout: true });\r\n      }\r\n      this.setState({ errorMessage: err.message });\r\n    }\r\n    this.setState({ changeReward: false})\r\n  }\r\n\r\n  onSubmitAnswer = async () => {\r\n    this.setState({ loading: true, errorMessage: '' });\r\n    if (checkFieldEmpty(this.state.answer)){\r\n      try {\r\n          const question = Question(this.state.questionAddress);\r\n          // Ensure that creator of question cannot provide answers\r\n          const account = this.props.account;\r\n          if (account != await question.methods.getCreator().call() && !await question.methods.checkIfAnswered(account).call()) {\r\n            // Logs the transactions\r\n            let logTransaction = logging(\"Submitted Answer for Question Titled: \" + this.state.summary[0]);\r\n            // Create new answer\r\n            await factory.methods\r\n            .createAnswer(this.state.questionAddress, this.state.answer, this.state.fileHashes_array, this.state.fileNames_array, logTransaction)\r\n            .send({\r\n                from: account,\r\n                gasPrice: '0'\r\n            });\r\n            Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n          } else {\r\n            this.setState({ loading: false, errorMessage: \"You cannot provide answer for your own question or already provided answer.\"})\r\n          }\r\n      } catch (err) {\r\n          if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n            this.setState({ timeout: true });\r\n          }\r\n          this.setState({ errorMessage: err.message });\r\n      }\r\n    } else {\r\n      this.setState({loading: false, errorMessage: \"Answer Field Empty\"})\r\n    }\r\n    this.setState({ loading: false, answer:'' });\r\n  };\r\n\r\n  approveAnswer = async(answerer) => {\r\n    this.setState({ voting: true })\r\n    const account = this.props.account;\r\n    const question = await Question(this.state.questionAddress);\r\n    const profile = await factory.methods.getProfile(account).call();\r\n    const answerList = await question.methods.getAnswerList().call();\r\n    let index;\r\n    for (let i=0; i<answerList.length; i++) {\r\n      if (answerList[i][2] == answerer) {\r\n        index = i;\r\n      }\r\n    }\r\n    //Ensure that voter is not the answerer\r\n    try {\r\n      if (account != answerer){\r\n        // Cannot vote twice\r\n        if (! await question.methods.checkVoter(index, profile).call()) {\r\n          //No cost for voting after the voting phase\r\n          if (await question.methods.state().call() != 2) {\r\n            await EthQuestionToken.methods.transfer(await this.state.questionAddress, 10e3)\r\n            .send({\r\n                from: account,\r\n                gasPrice: '0'\r\n            })\r\n          }\r\n          let logTransaction = logging(\"Approved An Answer for Question Titled: \" + this.state.summary[0]);\r\n          await factory.methods\r\n          .approveAnswer(this.state.questionAddress, index, logTransaction)\r\n          .send({\r\n              from: account,\r\n              gasPrice: '0'\r\n          });\r\n          Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n        } else {\r\n          this.setState({ voteMultipleError: true});\r\n        }\r\n      } else {\r\n        this.setState({ voteError: true});\r\n      }\r\n    } catch (err) {\r\n      if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n        this.setState({ timeout: true });\r\n      }\r\n      this.setState({ errorMessage: err.message });\r\n    }\r\n    this.setState({ voting: false })\r\n  };\r\n\r\n  // Select a file to upload\r\n  onFileSelected = async () => {\r\n      // Access JavaScript FileReader() method for conversion to buffer\r\n      const reader = new FileReader();\r\n      const file = this.fileInput.files[0];\r\n      this.setState({fileLoading: true});\r\n      if (file instanceof Blob ) {\r\n          let {files_array, fileNames_array, fileHashes_array} = this.state;\r\n          files_array.push(file);\r\n          fileNames_array.push(file.name);\r\n          this.setState({\r\n              files_array: files_array,\r\n              fileNames_array: fileNames_array\r\n          });\r\n          console.log(\"fileNames_array: \", fileNames_array);\r\n          reader.onloadend = async () => {\r\n              await this.setState({\r\n                  fileUrl: reader.result,\r\n                  fileLoading: true,\r\n                  buffer: Buffer.from(reader.result) // File is converted to a buffer for upload to IPFS\r\n              });\r\n              const fileHash = this.state.buffer ? (await getIpfsHash(file)) : '0';\r\n              fileHashes_array.push(fileHash);\r\n              this.setState({ fileHashes_array: fileHashes_array });\r\n              console.log(\"fileHashes_array: \", fileHashes_array);\r\n              this.setState({fileLoading: false});\r\n          }\r\n          reader.readAsDataURL(file);\r\n      }\r\n  }\r\n\r\n  // Remove a previously selected file to upload\r\n  onFileRemoved = (file) => {\r\n      var i = 0;\r\n      let {files_array, fileHashes_array, fileNames_array} = this.state;\r\n      console.log('file: ', file);\r\n      for (i = 0 ; i < files_array.length ; i++) {\r\n          if (file === files_array[i]) {\r\n              files_array.splice(i, 1);\r\n              fileNames_array.splice(i, 1);\r\n              fileHashes_array.splice(i, 1);\r\n              break;\r\n          }\r\n      }\r\n      this.setState({\r\n          files_array: files_array,\r\n          fileNames_array: fileNames_array,\r\n          fileHashes_array: fileHashes_array\r\n      });\r\n      console.log('fileNames_array', fileNames_array);\r\n      console.log(\"fileHashes_array: \", fileHashes_array);\r\n  }\r\n\r\n  // Render each tag individually for each question\r\n  renderTag(tagList, tagSize) {\r\n    const tagColours = [\"red\", \"olive\", \"blue\", \"teal\", \"green\"];\r\n    return tagList.map((tag, index) => {\r\n      let id = index % 5;\r\n      return(\r\n        <Label as='a' onClick={() => Router.pushRoute(`/${'search/'+encodeURIComponent(tag)}`)}\r\n          tag size={tagSize} key={index} color={tagColours[id]}>\r\n          {tag}\r\n        </Label>\r\n      )\r\n    });\r\n  }\r\n\r\n  renderQuestion() {\r\n      const summary = this.state.summary;\r\n      const time = this.state.time;\r\n      var currentTime = (new Date).getTime();\r\n      var maxDuration =(parseFloat(summary[3]) / 60 / 60).toFixed(2).toString().toString();\r\n      var publishTime = moment.unix(time[0]).format('dddd, Do MMMM YYYY, h:mm:ss a');\r\n      var votingTime = moment.unix(this.state.votingTime).format('dddd, Do MMMM YYYY, h:mm:ss a');\r\n      var publishTimeMs = moment.unix(time[0]).valueOf();\r\n      var maxDurationMs = moment.unix(time[2]).valueOf();\r\n      var votingTimeMs = moment.unix(this.state.votingTime).valueOf();\r\n\r\n      let remainingTime = 0;\r\n      if (this.state.questionState == 0) {\r\n        remainingTime = publishTimeMs + maxDurationMs - currentTime;\r\n        if (remainingTime < 0) {\r\n            remainingTime = 0;\r\n        }\r\n      } else {\r\n        remainingTime = votingTimeMs + maxDurationMs - currentTime;\r\n        if (remainingTime < 0) {\r\n            remainingTime = 0;\r\n        }\r\n      }\r\n\r\n      return (\r\n        <React.Fragment>\r\n          <Table definition>\r\n            <Table.Body>\r\n              <Table.Row>\r\n                <Table.Cell width={2}>Question Title</Table.Cell>\r\n                <Table.Cell style={{fontSize: '20px', lineHeight: '1.5'}}>\r\n                    {summary[0]}\r\n                </Table.Cell>\r\n              </Table.Row>\r\n              <Table.Row>\r\n                <Table.Cell width={2}>Description</Table.Cell>\r\n                <Table.Cell style={{fontSize: '20px', lineHeight: '1.5'}}>\r\n                    <Context\r\n                        input='tex'\r\n                        onLoad={ () => console.log(\"Loaded MathJax script!\") }\r\n                        onError={ (MathJax, error) => {\r\n                            console.warn(error);\r\n                            console.log(\"Encountered a MathJax error, re-attempting a typeset!\");\r\n                            MathJax.Hub.Queue(\r\n                              MathJax.Hub.Typeset()\r\n                            );\r\n                        } }\r\n                        options={{\r\n                            asciimath2jax: {\r\n                                 useMathMLspacing: true,\r\n                                 delimiters: [[\"$$\",\"$$\"]],\r\n                                 preview: \"none\",\r\n                            }\r\n                        }}>\r\n                        <Text text={summary[1]}/>\r\n                    </Context>\r\n                  </Table.Cell>\r\n                </Table.Row>\r\n                <Table.Row>\r\n                  <Table.Cell width={2}>Tags</Table.Cell>\r\n                  <Table.Cell>\r\n                    {this.renderTag(summary[8], \"small\")}\r\n                  </Table.Cell>\r\n                </Table.Row>\r\n                <Table.Row>\r\n                  <Table.Cell>Reward (EQT)</Table.Cell>\r\n                  <Table.Cell style={{fontSize: '20px'}}>{summary[2]*1e-4}\r\n                  {this.state.questionState == 0\r\n                      ?  <Popup\r\n                          trigger={\r\n                              <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                      icon='ethereum'\r\n                                      color=\"black\"\r\n                                      onClick={this.increaseReward}\r\n                                        />\r\n                          }\r\n                          content={\"Increase Reward\"}\r\n                          position='bottom right'\r\n                          inverted />\r\n                      :  <Popup\r\n                          trigger={\r\n                              <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                      icon='ethereum'\r\n                                      color=\"black\"\r\n                                      disabled\r\n                              />\r\n                          }\r\n                          position='bottom right'\r\n                          inverted />\r\n                  }\r\n                  </Table.Cell>\r\n                </Table.Row>\r\n                <Table.Row>\r\n                  <Table.Cell>Publish Time</Table.Cell>\r\n                  <Table.Cell style={{fontSize: '20px'}}>{publishTime}</Table.Cell>\r\n                </Table.Row>\r\n                <Table.Row>\r\n                  <Table.Cell>Answering Duration (hours)</Table.Cell>\r\n                  <Table.Cell style={{fontSize: '20px'}}>\r\n                      <span style={{verticalAlign: 'middle', lineHeight: '33px'}}>\r\n                          {maxDuration}\r\n                      </span>\r\n                      {this.state.questionState == 0 && remainingTime > 0\r\n                          ? <Popup\r\n                              trigger={\r\n                                  <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                          icon='clock'\r\n                                          color=\"violet\"\r\n                                  />}\r\n                              content={\r\n                                  <span>\r\n                                  <span>Remaining time - </span>\r\n                                  <Countdown date={Date.now() + remainingTime}>\r\n                                  </Countdown>\r\n                              </span>}\r\n                              position='bottom right'\r\n                              inverted />\r\n                          : this.state.questionState == 0 && remainingTime == 0\r\n                          ? <Popup trigger={<Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                    icon='clock'\r\n                                                    color=\"red\"/>}\r\n                                  flowing hoverable>\r\n                              <Grid centered divided columns={2}>\r\n                                <Grid.Column textAlign='center'>\r\n                                  <p>Extends the validity of question by 1 hour</p>\r\n                                  <Button onClick={this.timeExtension}>Extend Deadline</Button>\r\n                                </Grid.Column>\r\n                                {this.state.balanceError == true ?\r\n                                  <Grid.Column textAlign='center'>\r\n                                    <p>Reward Balance Error</p>\r\n                                    <Button onClick={this.fixBalance}>Fix Balance</Button>\r\n                                  </Grid.Column> :\r\n                                  <Grid.Column textAlign='center'>\r\n                                    <p>Proceed to the voting phase</p>\r\n                                    <Button onClick={this.votePhase}>Voting Phase</Button>\r\n                                  </Grid.Column> }\r\n                              </Grid>\r\n                            </Popup>\r\n                          : <Popup\r\n                              trigger={\r\n                                  <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                          icon='clock'\r\n                                          color=\"red\"\r\n                                          disabled\r\n                                  />\r\n                              }\r\n                              position='bottom right'\r\n                              inverted />\r\n                        }\r\n                    </Table.Cell>\r\n                  </Table.Row>\r\n                  <Table.Row>\r\n                    <Table.Cell>Voting Duration (hours)</Table.Cell>\r\n                    <Table.Cell style={{fontSize: '20px'}}>\r\n                      <span style={{verticalAlign: 'middle', lineHeight: '33px'}}>\r\n                          {maxDuration}\r\n                      </span>\r\n                      {this.state.questionState == 1 && remainingTime > 0\r\n                          ? <Popup\r\n                              trigger={\r\n                                  <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                          icon='clock'\r\n                                          color=\"violet\"\r\n                                  />}\r\n                              content={\r\n                                  <span>\r\n                                  <span>Remaining time - </span>\r\n                                  <Countdown date={Date.now() + remainingTime}>\r\n                                  </Countdown>\r\n                              </span>}\r\n                              position='bottom right'\r\n                              inverted />\r\n                          : this.state.questionState == 1 && remainingTime == 0\r\n                          ? <Popup\r\n                              trigger={\r\n                                  <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                          icon='clock'\r\n                                          color=\"red\"\r\n                                          onClick={this.rewardPhase}\r\n                                            />\r\n                              }\r\n                              content={\"Reward\"}\r\n                              position='bottom right'\r\n                              inverted />\r\n                          : this.state.questionState == 0\r\n                          ? <Popup\r\n                              trigger={\r\n                                  <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                          icon='clock'\r\n                                          color=\"red\"\r\n                                          disabled\r\n                                  />\r\n                              }\r\n                              position='bottom right'\r\n                              inverted />\r\n                          : <Popup\r\n                              trigger={\r\n                                  <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                          icon='clock'\r\n                                          color=\"red\"\r\n                                          disabled\r\n                                            />\r\n                              }\r\n                              position='bottom right'\r\n                              inverted />\r\n                      }\r\n                    </Table.Cell>\r\n                </Table.Row>\r\n              </Table.Body>\r\n            </Table>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n\r\n  renderAnswers() {\r\n    let answers = this.state.answerList\r\n    answers = sortingAnswers(answers, this.state.sorted);\r\n    // Answering Phase no answers are shown\r\n    if (this.state.questionState != 0){\r\n      return answers.map((answer, index) => {\r\n          var answeredTime = moment.unix(answer[5]).format('Do MMMM YYYY, h:mm a');\r\n          var id = index % 70;\r\n          return <Comment key={index}>\r\n              <Comment.Avatar src={this.state.avatarListIcon[id]} style={{backgroundColor: '#8D8741'}}/>\r\n              <Comment.Content>\r\n                <Comment.Author as='a'>{answer[2]}</Comment.Author>\r\n                <Comment.Metadata>\r\n                  <div>{answeredTime}</div>\r\n                </Comment.Metadata>\r\n                <br/>\r\n                {answer[1] ? <b><font color='red'><Icon name='certificate'/>Rewarded</font></b> : null}\r\n                {this.state.questionState == 2\r\n                  ? <Comment.Metadata>\r\n                    <div><Icon name='thumbs up' />{answer[4]}</div>\r\n                    </Comment.Metadata>\r\n                  : <Comment.Metadata>\r\n                    <div><Icon name='thumbs up' />0</div>\r\n                    </Comment.Metadata>\r\n                }\r\n                <Comment.Text>\r\n                  <Context\r\n                      input='tex'\r\n                      onLoad={ () => console.log(\"Loaded MathJax script!\") }\r\n                      onError={ (MathJax, error) => {\r\n                          console.warn(error);\r\n                          console.log(\"Encountered a MathJax error, re-attempting a typeset!\");\r\n                          MathJax.Hub.Queue(\r\n                            MathJax.Hub.Typeset()\r\n                          );\r\n                      } }\r\n                      options={{\r\n                          asciimath2jax: {\r\n                               useMathMLspacing: true,\r\n                               delimiters: [[\"$$\",\"$$\"]],\r\n                               preview: \"none\",\r\n                          }\r\n                      }}>\r\n                      <Text text={answer[0]}/>\r\n                  </Context>\r\n                  {answer[7].map((imageName, index) =>\r\n                      <div style={{marginBottom: '10px'}} key={index}>\r\n                          <Image src={\"https://ipfs.io/ipfs/\"+answer[8][index]} centered={true}/>\r\n                      </div>\r\n                  )}\r\n                </Comment.Text>\r\n                <Comment.Actions>\r\n                  <Comment.Action>\r\n                    <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                            icon='thumbs up'\r\n                            onClick={() => this.approveAnswer(answer[2])}\r\n                            size='tiny'\r\n                            content='Approve Answer'\r\n                            color='green'\r\n                    />\r\n                      </Comment.Action>\r\n                </Comment.Actions>\r\n              </Comment.Content>\r\n            </Comment>\r\n      });\r\n    }\r\n  }\r\n\r\n  renderFiles () {\r\n    let fileHashes = this.state.summary[5];\r\n    let fileNames = this.state.summary[6];\r\n\r\n    if (fileHashes.length == 0) {\r\n        return(\r\n            <Segment placeholder>\r\n                <Header icon>\r\n                    <Icon name='images outline' />\r\n                    No images are uploaded for this question\r\n                </Header>\r\n            </Segment>\r\n        );\r\n    } else {\r\n        return(\r\n            <Segment placeholder>\r\n                <center>\r\n                    <p>Image(s) Uploaded</p>\r\n                    {fileNames.map((fileName, index) =>\r\n                        <div style={{marginBottom: '10px'}} key={index}>\r\n                            <Image src={\"https://ipfs.io/ipfs/\"+fileHashes[index]} />\r\n                            <Divider hidden/>\r\n                            <p> To download: </p>\r\n                            <Label as='a' size='big' href={\"https://ipfs.io/ipfs/\"+fileHashes[index]}>\r\n                                <Icon name='download' />\r\n                                {fileName}\r\n                            </Label>\r\n                        </div>\r\n                    )}\r\n                </center>\r\n            </Segment>\r\n        );\r\n    }\r\n  }\r\n\r\n  renderAnswersForm() {\r\n    let {files_array} = this.state;\r\n    let elmFiles = null;\r\n\r\n    if (files_array !== null) {\r\n        elmFiles = files_array.map((item, index) =>\r\n            <Label as='a' key={index} size='big'>\r\n                {item.name}\r\n                <Icon name='delete'\r\n                      onClick={() => this.onFileRemoved(item)} />\r\n            </Label>\r\n        );\r\n    }\r\n    return(\r\n      <Form error={!!this.state.errorMessage}>\r\n        <Form.TextArea\r\n          placeholder=\"Enter Answers\"\r\n          value={this.state.answer}\r\n          onChange={event => this.setState({ answer: event.target.value })}\r\n        />\r\n        <Message error header=\"Oops!\" content={this.state.errorMessage} />\r\n        <Form.Field>\r\n          {this.renderFilesUpload(elmFiles)}\r\n        </Form.Field>\r\n        <Modal open={this.state.loading} trigger={ this.state.questionState == 1 ? <Button content='Submit Answers' disabled labelPosition='left' icon='edit' primary />\r\n            : <Button content='Submit Answers' onClick={this.onSubmitAnswer} loading={this.state.loading} labelPosition='left' icon='edit' primary />} basic size='small'>\r\n          <Header content='Posting New Answers' />\r\n          <Modal.Content>\r\n            <p>\r\n              Please Confirm the MetaMask Transaction Request to submit your Answers to the Block-Chain Network.\r\n              Upon successful submission, you will be redirected back to the Question Page. This process might take awhile.\r\n            </p>\r\n            <Loader active inline=\"centered\">\r\n              Loading\r\n            </Loader>\r\n          </Modal.Content>\r\n        </Modal>\r\n      </Form>\r\n    );\r\n  }\r\n\r\n  renderFilesUpload(files) {\r\n    let {files_array} = this.state;\r\n    if(this.state.files_array.length == 0){\r\n      return (\r\n        <Segment placeholder>\r\n          <Button primary onClick={() => this.fileInput.click()} loading={this.state.fileLoading}>Upload Image</Button>\r\n        </Segment>\r\n      )\r\n    } else {\r\n      return (\r\n        <Segment placeholder>\r\n          <center>\r\n              <div style={{marginBottom: '20px'}}>\r\n                  {files}\r\n              </div>\r\n              <input\r\n                  style={{ display: 'none' }}\r\n                  type='file'\r\n                  onChange={() => this.onFileSelected()}\r\n                  ref={fileInput => this.fileInput = fileInput}/>\r\n              <Button primary onClick={() => this.fileInput.click()} loading={this.state.fileLoading}>Upload Files</Button>\r\n          </center>\r\n        </Segment>\r\n      )\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (this.state.login) {\r\n      return (\r\n        <Layout accountType={this.state.accountType}>\r\n          <Container>\r\n            <Divider hidden/>\r\n            {this.renderQuestion()}\r\n            <Divider />\r\n            {this.renderFiles()}\r\n            <Header as='h2' textAlign='center'>\r\n                Submit Your Answers Here\r\n            </Header>\r\n            <p><b>Note:</b> To include math equations, delimit the latex format with $$.</p>\r\n            <a style={{display: \"table-cell\"}} href=\"https://www.codecogs.com/latex/eqneditor.php\" target=\"_blank\">Link to Supported Latex Editor</a>\r\n            {this.renderAnswersForm()}\r\n            <Button\r\n              icon={this.state.sorted ? \"sort numeric down\" : \"sort numeric up\"}\r\n              onClick={ () => { this.setState({ sorted: !this.state.sorted }) }}\r\n              floated=\"right\"\r\n              size=\"mini\"\r\n            />\r\n            <Header as='h2' textAlign='center'>\r\n              Answer(s) Submitted: {this.state.answerList.length}\r\n            </Header>\r\n            <Divider />\r\n            <Comment.Group size='large'>\r\n            {this.renderAnswers()}\r\n            </Comment.Group>\r\n            <ErrorModal error={this.state.voteError}\r\n                        title={'Cannot Approve Own Answers'}\r\n                        content={\"You have selected to approve the answer you have provided. Please only approve answers provided by others.\"}\r\n                        questionAddress={this.state.questionAddress}\r\n                        stateChange={() => {this.setState({ voteError: false })}} />\r\n\r\n            <ErrorModal error={this.state.ownerError}\r\n                        title={'Only Available For Owner Of Question'}\r\n                        content={\"You cannot change the state of the question as you are not the owner.\"}\r\n                        questionAddress={this.state.questionAddress}\r\n                        stateChange={() => {this.setState({ ownerError: false })}} />\r\n\r\n            <ErrorModal error={this.state.voteMultipleError}\r\n                        title={'Answer Already Approved'}\r\n                        content={\"You cannot approve the same answer more than once. Please approve another answer.\"}\r\n                        questionAddress={this.state.questionAddress}\r\n                        stateChange={() => {this.setState({ voteMultipleError: false })}} />\r\n\r\n            <ErrorModal error={this.state.voteMultipleError}\r\n                        title={'Answer Already Approved'}\r\n                        content={\"You cannot approve the same answer more than once. Please approve another answer.\"}\r\n                        questionAddress={this.state.questionAddress}\r\n                        stateChange={() => {this.setState({ voteMultipleError: false })}} />\r\n\r\n            <LoadingModal trigger={this.state.changeToVoting}\r\n                          title={'Changing Question State to Voting Phase'}\r\n                          content={\"Please Confirm the MetaMask Transaction Request to change question state to Voting Phase.\"}\r\n                          loader={\"Changing Question State\"}/>\r\n\r\n            <LoadingModal trigger={this.state.changeToRewarded}\r\n                          title={'Changing Question State to Rewarded Phase'}\r\n                          content={\"Please Confirm the MetaMask Transaction Request to change question state to Rewarded Phase.\"}\r\n                          loader={\"Changing Question State\"}/>\r\n\r\n            <LoadingModal trigger={this.state.timeExtension}\r\n                          title={'Extending Question Deadline'}\r\n                          content={\"Please Confirm the MetaMask Transaction Request to extend the duration of the question.\"}\r\n                          loader={\"Extending Deadline\"}/>\r\n\r\n            <LoadingModal trigger={this.state.changeReward}\r\n                          title={'Increasing Reward'}\r\n                          content={\"Please Confirm the MetaMask Transaction Request to increase reward.\"}\r\n                          loader={\"Increasing Reward\"}/>\r\n\r\n            <LoadingModal trigger={this.state.voting}\r\n                          title={'Approving Answer'}\r\n                          content={\"Please Confirm the MetaMask Transaction Request to approve an answer. You cannot change your choice upon submission.\"}\r\n                          loader={\"Approving\"}/>\r\n\r\n            <LoadingModal trigger={this.state.fixError}\r\n                          title={'Fixing Balance Error'}\r\n                          content={\"Please Confirm the MetaMask Transaction Request to fix the balance error.\"}\r\n                          loader={\"Fixing Balance\"}/>\r\n            <TimeOutModal timeout={this.state.timeout} />\r\n          </Container>\r\n        </Layout>\r\n      );\r\n    } else {\r\n      return (\r\n        <Layout accountType={this.state.accountType}>\r\n          <AccountIssueModal loading={this.state.resourceLoading} login={this.state.login} />\r\n        </Layout>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default QuestionRow;\r\n"],"mappings":"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AACA;AAtCA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAuCA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AA5CA;AA6CA;AAAA;AAAA;AACA;AA9CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA9RA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AA8UA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AA5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA/UA;AA8WA;AADA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AA/XA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AAFA;AAkCA;AACA;;;;;;;;;;;;AAQA;;;;;AACA;AAAA;AAAA;;;;AAGA;AACA;AAAA;;;;;AACA;AACA;AACA;;AACA;AACA;;AADA;AACA;;AACA;AACA;;AADA;AACA;;AACA;AACA;;AAAA;AAAA;AACA;AADA;AACA;;AAEA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;AACA;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","sourceRoot":""}