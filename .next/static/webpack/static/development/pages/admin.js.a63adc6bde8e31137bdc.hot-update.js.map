{"version":3,"file":"static/webpack/static\\development\\pages\\admin.js.a63adc6bde8e31137bdc.hot-update.js","sources":["webpack:///./pages/admin.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { Container, Segment, Header, Divider, Button, Popup, Form, Input,\r\n   Icon, Dropdown, Table, Modal, Loader, Message, Transition, Grid } from \"semantic-ui-react\";\r\nimport Layout from '../components/Layout';\r\nimport LoadingModal from '../components/LoadingModal';\r\nimport AccountIssueModal from '../components/AccountIssueModal';\r\nimport TimeOutModal from '../components/TimeOutModal';\r\nimport {Router} from '../routes';\r\nimport { logging, checkRewardField } from '../utils/functions';\r\nimport web3 from '../ethereum/web3';\r\nimport factory from '../ethereum/factory';\r\nimport Profile from '../ethereum/profile';\r\nimport Question from '../ethereum/question';\r\nimport feedback from '../ethereum/feedback';\r\nimport EthQuestionToken from '../ethereum/token';\r\nimport EthQuestionTokenSale from '../ethereum/tokenSale'\r\nimport credentials from '../ethereum/credentials';\r\nimport { exportQuestion, exportComments } from '../utils/pdf';\r\nimport cookies from 'next-cookies';\r\n\r\nclass AdminPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      account: null,\r\n      error: false,\r\n      loading: false,\r\n      loadingResource: true,\r\n      timeout: false,\r\n      deployedQuestionsCount: null,\r\n      deployedQuestions: [],\r\n      ethWalletEmailAddressBinding: [],\r\n      questionAddressTitleBinding: [],\r\n      tokenPrice: null,\r\n      tokenBalance: null,\r\n      etherBalance: null,\r\n      errorMessage: '',\r\n      accountType: null,\r\n      userVisible: false,\r\n      questionOptions: [],\r\n      questionNumber: null,\r\n      questionVisible: false,\r\n      newTokenPrice: '',\r\n      topUpAmount: '',\r\n      tokenManagementVisible: false\r\n    };\r\n  }\r\n\r\n  static async getInitialProps(props) {\r\n    return { isLogin: cookies(props).login || '', account: cookies(props).wallet || '' };\r\n  }\r\n\r\n  async componentDidUpdate(prevProps) {\r\n    if(this.props != prevProps) {\r\n      this.fetchData()\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (typeof web3 === 'undefined') {\r\n      this.setState({ loading: false })\r\n      return\r\n    }\r\n    let login = false;\r\n    if (this.props.isLogin) {\r\n      login = true;\r\n      // Get Account Type\r\n      const account = this.props.account;\r\n      let profileAddress = await factory.methods.getProfile(account).call();\r\n      let profile = Profile(profileAddress);\r\n      let accountType = await profile.methods.getAccountType().call();\r\n      accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"\r\n      if(accountType != \"Admin\") {\r\n        login = false;\r\n      }\r\n\r\n      await this.fetchData();\r\n      // Get Question Deployed\r\n      let questionOptions = [];\r\n      for (let i = 0; i < this.state.deployedQuestionsCount; i++) {\r\n          let question = Question(this.state.deployedQuestions[i])\r\n          let summary = await question.methods.getSummary().call();\r\n          questionOptions.push({\r\n              key: i+1,\r\n              text: summary[0],\r\n              value: i+1\r\n          });\r\n      }\r\n      this.setState( { questionOptions: questionOptions });\r\n      this.setState( { account: account })\r\n      this.setState( { login: login });\r\n      this.setState( { accountType: accountType });\r\n    }\r\n    this.setState( { loadingResource: false });\r\n  }\r\n\r\n  async fetchData() {\r\n    // Retrieve an array of addresses of questions deployed\r\n    let deployedQuestions = await factory.methods.getDeployedQuestions().call();\r\n    let deployedQuestionsCount = deployedQuestions.length;\r\n    let questionAddressTitleBinding = []\r\n    for(let i=0; i<deployedQuestionsCount; i++) {\r\n      let question = Question(deployedQuestions[i]);\r\n      let summary = await question.methods.getSummary().call();\r\n      questionAddressTitleBinding.push({\r\n        questionAddress: deployedQuestions[i],\r\n        title: summary[0],\r\n        flagged: summary[9]\r\n      })\r\n    }\r\n\r\n    // Retrieve an array of EthWallets and Email Addresses\r\n    let ethWallets = await factory.methods.getEthWallets().call();\r\n    let ethWalletEmailAddressBinding = [];\r\n    for (let i=0; i < ethWallets.length; i++) {\r\n      let emailAddress = await credentials.methods.getBinding(ethWallets[i]).call();\r\n      let status = await credentials.methods.emailNotBlackList(emailAddress).call();\r\n      ethWalletEmailAddressBinding.push({\r\n        ethWallet: ethWallets[i],\r\n        emailAddress: emailAddress,\r\n        status: status\r\n      })\r\n    }\r\n\r\n    let tokenPrice = await EthQuestionTokenSale.methods.getTokenPrice().call();\r\n    let tokenBalance = await EthQuestionToken.methods.balanceOf(EthQuestionTokenSale._address).call();\r\n    let etherBalance = await EthQuestionTokenSale.methods.getEtherBalance().call();\r\n    this.setState({\r\n      deployedQuestionsCount: deployedQuestionsCount,\r\n      deployedQuestions: deployedQuestions,\r\n      ethWalletEmailAddressBinding: ethWalletEmailAddressBinding,\r\n      questionAddressTitleBinding: questionAddressTitleBinding,\r\n      tokenPrice: tokenPrice,\r\n      tokenBalance: tokenBalance,\r\n      etherBalance: etherBalance\r\n    })\r\n  }\r\n\r\n  export = async () => {\r\n    // Check that a question must be selected\r\n    if (this.state.questionNumber != null) {\r\n      // Retrieve all the data of selected question\r\n      let questionNumber = Number(this.state.questionNumber) - 1;\r\n      let question = Question(this.state.deployedQuestions[questionNumber])\r\n      let summary = await question.methods.getSummary().call();\r\n      let answerList = await question.methods.getAnswerList().call();\r\n      await exportQuestion(summary, answerList);\r\n    }\r\n  }\r\n\r\n  exportFeedback = async () => {\r\n    // Retrieve all comments\r\n    let comments = await feedback.methods.getComments().call();\r\n    await exportComments(comments);\r\n  }\r\n\r\n  getUserTableData = () => {\r\n    return this.state.ethWalletEmailAddressBinding.map((item, index) => {\r\n      return <Table.Row key={index}>\r\n        <Table.Cell>{item.ethWallet}</Table.Cell>\r\n        <Table.Cell>{item.emailAddress}</Table.Cell>\r\n        <Table.Cell>{item.status ? \"Blacklisted\" : \"Active\"}</Table.Cell>\r\n        <Table.Cell>\r\n        {\r\n          item.status ? <Button onClick={() => this.unblacklist(item.emailAddress)} color=\"green\" size=\"mini\" icon>\r\n            <Icon name=\"add user\" />\r\n          </Button> :\r\n          <Button onClick={() => this.blacklist(item.emailAddress)} color=\"red\" size=\"mini\" icon>\r\n            <Icon name=\"remove user\" />\r\n          </Button>\r\n        }\r\n        </Table.Cell>\r\n        <Table.Cell>\r\n          <Button onClick={() => this.dispense(item.ethWallet)} color=\"green\" size=\"mini\" icon>\r\n            <Icon name=\"ethereum\" />\r\n          </Button>\r\n        </Table.Cell>\r\n      </Table.Row>;\r\n    })\r\n  }\r\n\r\n  blacklist = async (emailAddress) => {\r\n    this.setState({ loading: true, errorMessage: ''});\r\n    try {\r\n      const account = this.state.account;\r\n      await credentials.methods\r\n      .blacklistEmail(emailAddress)\r\n      .send({\r\n          from: account,\r\n          gasPrice: '0'\r\n      });\r\n      Router.pushRoute('/admin'); // Automatic redirect the user.\r\n    } catch (err) {\r\n      if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n        this.setState({ timeout: true });\r\n      }\r\n      this.setState({ errorMessage: err.message });\r\n      this.setState({ error: true})\r\n    }\r\n    this.setState({ loading: false})\r\n  }\r\n\r\n  unblacklist = async (emailAddress) => {\r\n    this.setState({ loading: true, errorMessage: ''});\r\n    try {\r\n      const account = this.state.account;\r\n      await credentials.methods\r\n      .unBlacklistEmail(emailAddress)\r\n      .send({\r\n          from: account,\r\n          gasPrice: '0'\r\n      });\r\n    } catch (err) {\r\n      if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n        this.setState({ timeout: true });\r\n      }\r\n      this.setState({ errorMessage: err.message });\r\n      this.setState({ error: true})\r\n    }\r\n    this.setState({ loading: false})\r\n  }\r\n\r\n  dispense = async (ethWallet) => {\r\n    this.setState({ loading: true, errorMessage: ''});\r\n    try {\r\n      const account = this.state.account;\r\n      await EthQuestionToken.methods\r\n      .transfer(ethWallet, 10e4)\r\n      .send({\r\n          from: account,\r\n          gasPrice: '0'\r\n      });\r\n      // Log transaction\r\n      const profileAddress = await factory.methods.getProfile(ethWallet).call();\r\n      const profile = Profile(profileAddress);\r\n      let logTransaction = logging(\"Awarded 10 EQT(s) for first time user\");\r\n      await profile.methods.logTransaction(logTransaction)\r\n      .send({\r\n          from: account,\r\n          gasPrice: '0'\r\n      });\r\n    } catch (err) {\r\n      if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n        this.setState({ timeout: true });\r\n      }\r\n      this.setState({ errorMessage: err.message });\r\n      this.setState({ error: true})\r\n    }\r\n    this.setState({ loading: false})\r\n  }\r\n\r\n  getQuestionTableData = () => {\r\n    return this.state.questionAddressTitleBinding.map((item, index) => {\r\n      return <Table.Row key={index}>\r\n        <Table.Cell>{item.questionAddress}</Table.Cell>\r\n        <Table.Cell>{item.title}</Table.Cell>\r\n        <Table.Cell>{item.flagged ? \"Flagged\" : \"Active\"}</Table.Cell>\r\n        <Table.Cell>\r\n        {\r\n          item.flagged ? <Button onClick={() => this.undoDeleteQuestion(item.questionAddress)} color=\"green\" size=\"mini\" icon>\r\n            <Icon name=\"undo\" />\r\n          </Button> :\r\n          <Button onClick={() => this.deleteQuestion(item.questionAddress)} color=\"red\" size=\"mini\" icon>\r\n            <Icon name=\"flag\" />\r\n          </Button>\r\n        }\r\n        </Table.Cell>\r\n      </Table.Row>;\r\n    })\r\n  }\r\n\r\n  deleteQuestion = async (questionAddress, title) => {\r\n    this.setState({ loading: true, errorMessage: ''});\r\n    try {\r\n      const account = this.state.account;\r\n      let logTransaction = logging(\"Deleted Question Titled: \" + title);\r\n      await factory.methods\r\n      .deleteQuestion(questionAddress, logTransaction)\r\n      .send({\r\n          from: account,\r\n          gasPrice: '0'\r\n      });\r\n      Router.pushRoute('/admin'); // Automatic redirect the user.\r\n    } catch (err) {\r\n      if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n        this.setState({ timeout: true });\r\n      }\r\n      this.setState({ errorMessage: err.message });\r\n      this.setState({ error: true})\r\n    }\r\n    this.setState({ loading: false})\r\n  }\r\n\r\n  undoDeleteQuestion = async (questionAddress, title) => {\r\n    this.setState({ loading: true, errorMessage: ''});\r\n    try {\r\n      const account = this.state.account;\r\n      let logTransaction = logging(\"Undo Deletion Of Question Titled: \" + title);\r\n      await factory.methods\r\n      .undoDeleteQuestion(questionAddress, logTransaction)\r\n      .send({\r\n          from: account,\r\n          gasPrice: '0'\r\n      });\r\n      Router.pushRoute('/admin'); // Automatic redirect the user.\r\n    } catch (err) {\r\n      if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n        this.setState({ timeout: true });\r\n      }\r\n      this.setState({ errorMessage: err.message });\r\n      this.setState({ error: true})\r\n    }\r\n    this.setState({ loading: false})\r\n  }\r\n\r\n  topUp = async () => {\r\n    this.setState({ loading: true, errorMessage: ''});\r\n    if (checkRewardField(this.state.topUpAmount)) {\r\n      try {\r\n        const account = this.state.account;\r\n        await web3.eth.personal.unlockAccount(account, \"password\", 600);\r\n        await EthQuestionToken.methods\r\n        .transfer(EthQuestionTokenSale._address, this.state.topUpAmount*1e4)\r\n        .send({\r\n            from: account,\r\n            gasPrice: '0'\r\n        });\r\n        // Log transaction\r\n        const profileAddress = await factory.methods.getProfile(account).call();\r\n        const profile = Profile(profileAddress);\r\n        let logTransaction = logging(\"Added \" + this.state.topUpAmount + \" EQT(s) for exchange\");\r\n        await profile.methods.logTransaction(logTransaction)\r\n        .send({\r\n            from: account,\r\n            gasPrice: '0'\r\n        });\r\n        Router.pushRoute('/admin'); // Automatic redirect the user.\r\n      } catch (err) {\r\n        if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n          this.setState({ timeout: true });\r\n        }\r\n        this.setState({ errorMessage: err.message });\r\n        this.setState({ error: true})\r\n        this.setState({ loading: false})\r\n      }\r\n    } else {\r\n      this.setState({ errorMessage: \"Required Field(s) Empty or Invalid Input\" });\r\n      this.setState({ error: true})\r\n      this.setState({ loading: false });\r\n    }\r\n    this.setState({ loading: false})\r\n  }\r\n\r\n  collectEther = async () => {\r\n    this.setState({ loading: true, errorMessage: ''});\r\n    try {\r\n      const account = this.state.account\r\n      const profileAddress = await factory.methods.getProfile(account).call();\r\n      let logTransaction = logging(\"Collect Ether from exchange of EQT(s)\");\r\n      await EthQuestionTokenSale.methods\r\n      .endSale(EthQuestionToken._address, profileAddress, logTransaction)\r\n      .send({\r\n          from: account,\r\n          gasPrice: '0'\r\n      });\r\n      Router.pushRoute('/admin'); // Automatic redirect the user.\r\n    } catch (err) {\r\n      if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n        this.setState({ timeout: true });\r\n      }\r\n      this.setState({ errorMessage: err.message });\r\n      this.setState({ error: true})\r\n      this.setState({ loading: false})\r\n    }\r\n    this.setState({ loading: false})\r\n  }\r\n\r\n  changeTokenPrice = async () => {\r\n    this.setState({ loading: true, errorMessage: ''});\r\n    if (checkRewardField(this.state.newTokenPrice)) {\r\n      try {\r\n        const account = this.state.account\r\n        const profileAddress = await factory.methods.getProfile(account).call();\r\n        let logTransaction = logging(\"Changed Token Price to \" + this.state.newTokenPrice + \" wei per EQT.\");\r\n        await EthQuestionTokenSale.methods\r\n        .changeTokenPrice(this.state.newTokenPrice, profileAddress, logTransaction)\r\n        .send({\r\n            from: account,\r\n            gasPrice: '0'\r\n        });\r\n        Router.pushRoute('/admin'); // Automatic redirect the user.\r\n      } catch (err) {\r\n        if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n          this.setState({ timeout: true });\r\n        }\r\n        this.setState({ errorMessage: err.message });\r\n        this.setState({ error: true})\r\n        this.setState({ loading: false})\r\n      }\r\n    } else {\r\n      this.setState({ errorMessage: \"Required Field(s) Empty or Invalid Input\" });\r\n      this.setState({ error: true})\r\n      this.setState({ loading: false });\r\n    }\r\n    this.setState({ loading: false})\r\n  }\r\n\r\n  toggleUserTableVisibility = () =>\r\n    this.setState((prevState) => ({ userVisible: !prevState.userVisible }))\r\n\r\n  toggleQuestionTableVisibility = () =>\r\n    this.setState((prevState) => ({ questionVisible: !prevState.questionVisible }))\r\n\r\n  toggleTokenManagementVisibility = () =>\r\n      this.setState((prevState) => ({ tokenManagementVisible: !prevState.tokenManagementVisible }))\r\n\r\n  renderExport() {\r\n    return <React.Fragment>\r\n      <Segment raised textAlign='left'>\r\n        <Header as='h2' textAlign='center'>\r\n          Exporting Questions & Answers As PDF\r\n        </Header>\r\n      </Segment>\r\n\r\n      <Divider hidden/>\r\n\r\n      <p style={{fontSize:'16px'}}>\r\n        Select the question to export the question and it's corresponding answers\r\n      </p>\r\n      <Dropdown clearable\r\n                options={this.state.questionOptions}\r\n                selection\r\n                placeholder='Select the question to export'\r\n                value={this.state.questionNumber}\r\n                onChange={ (e, { value }) => this.setState({ questionNumber: value })}/>\r\n      <Button icon labelPosition='left' color=\"red\" onClick={this.export} style={{left:\"20px\"}}>\r\n        <Icon name='download'/>\r\n        Export As PDF\r\n      </Button>\r\n\r\n      <Divider hidden/>\r\n\r\n      <Segment raised textAlign='left'>\r\n        <Header as='h2' textAlign='center'>\r\n          Exporting Feedback\r\n        </Header>\r\n      </Segment>\r\n      <Button icon labelPosition='left' color=\"red\" onClick={this.exportFeedback} style={{left:\"20px\"}}>\r\n        <Icon name='download'/>\r\n        Export As PDF\r\n      </Button>\r\n    </React.Fragment>\r\n  }\r\n\r\n  renderEQTSettings() {\r\n    return <React.Fragment>\r\n      <Segment raised textAlign='center'>\r\n        <b style={{fontSize:\"20px\"}}>EthQuestionTokens (EQT) Exchange Settings</b>\r\n        <Popup\r\n          trigger={\r\n            <Button\r\n              icon={this.state.tokenManagementVisible ? \"minus\" : \"plus\"}\r\n              onClick={this.toggleTokenManagementVisibility}\r\n              floated=\"right\"\r\n              size=\"mini\"\r\n            />\r\n          }\r\n          content={\"Click to expand/close\"}\r\n          inverted/>\r\n      </Segment>\r\n      <Transition visible={this.state.tokenManagementVisible} animation='scale' duration={500}>\r\n      <Grid container={true}>\r\n        <Grid.Row>\r\n          <p style={{fontSize:'16px'}}>\r\n            Balance Available For Exchange: <b>{this.state.tokenBalance*1e-4} EQT(s)</b>\r\n          </p>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Form error={!!this.state.errorMessage} style={{ marginTop: '10px' }}>\r\n            <Form.Field required={true}>\r\n                <label>Top Up Amount</label>\r\n                <Input\r\n                    label=\"EQT(s)\"\r\n                    labelPosition=\"right\"\r\n                    placeholder='Enter EQT Value'\r\n                    value={this.state.topUpAmount}\r\n                    onChange={event => this.setState({ topUpAmount: event.target.value })}\r\n                />\r\n            </Form.Field>\r\n          </Form>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Button icon labelPosition='left' color=\"red\" onClick={this.topUp}>\r\n            <Icon name='dollar sign'/>\r\n            Top Up Balance\r\n          </Button>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <p style={{fontSize:'16px'}}>\r\n            Ether Collected From Exchange: <b>{this.state.etherBalance*1e-18} Ether(s)</b>\r\n          </p>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Button icon labelPosition='left' color=\"red\" onClick={this.collectEther}>\r\n            <Icon name='ethereum'/>\r\n            Collect Ether\r\n          </Button>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <p style={{fontSize:'16px'}}>\r\n            Current Token Price: <b>{this.state.tokenPrice*1e-18} Ether(s)</b>\r\n          </p>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Form error={!!this.state.errorMessage} style={{ marginTop: '10px' }}>\r\n            <Form.Field required={true}>\r\n                <label>Token Price</label>\r\n                <Input\r\n                    label=\"Wei\"\r\n                    labelPosition=\"right\"\r\n                    placeholder='New Token Price'\r\n                    value={this.state.newTokenPrice}\r\n                    onChange={event => this.setState({ newTokenPrice: event.target.value })}\r\n                />\r\n            </Form.Field>\r\n          </Form>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Button icon labelPosition='left' color=\"red\" onClick={this.changeTokenPrice}>\r\n            <Icon name='ethereum'/>\r\n            Change Token Price\r\n          </Button>\r\n        </Grid.Row>\r\n      </Grid>\r\n      </Transition>\r\n      <Divider hidden/>\r\n    </React.Fragment>\r\n  }\r\n\r\n  renderUserManagement() {\r\n    return <React.Fragment>\r\n      <Segment raised textAlign='center'>\r\n        <b style={{fontSize:\"20px\"}}>Users Management</b>\r\n        <Popup\r\n          trigger={\r\n            <Button\r\n              icon={this.state.userVisible ? \"minus\" : \"plus\"}\r\n              onClick={this.toggleUserTableVisibility}\r\n              floated=\"right\"\r\n              size=\"mini\"\r\n            />\r\n          }\r\n          content={\"Click to expand/close\"}\r\n          inverted/>\r\n      </Segment>\r\n\r\n      <Divider hidden/>\r\n\r\n      <Transition visible={this.state.userVisible} animation='scale' duration={500}>\r\n        <Segment>\r\n          <Header><Icon name='user' circular/>Registered Users</Header>\r\n            <Table compact celled stackable>\r\n              <Table.Header fullWidth>\r\n                <Table.Row>\r\n                  <Table.HeaderCell width={2}>Ethereum Wallet</Table.HeaderCell>\r\n                  <Table.HeaderCell width={3}>Email</Table.HeaderCell>\r\n                  <Table.HeaderCell width={2}>Status</Table.HeaderCell>\r\n                  <Table.HeaderCell width={2}>Blacklist</Table.HeaderCell>\r\n                  <Table.HeaderCell width={2}>Dispense Tokens</Table.HeaderCell>\r\n                </Table.Row>\r\n              </Table.Header>\r\n              <Table.Body>{this.getUserTableData()}</Table.Body>\r\n              <Table.Footer fullWidth>\r\n                <Table.Row>\r\n                  <Table.HeaderCell colSpan={5} />\r\n                </Table.Row>\r\n              </Table.Footer>\r\n            </Table>\r\n        </Segment>\r\n      </Transition>\r\n\r\n      <Divider hidden/>\r\n\r\n      <Segment raised textAlign='center'>\r\n        <b style={{fontSize:\"20px\"}}>Removing Question</b>\r\n        <Popup\r\n          trigger={\r\n            <Button\r\n              icon={this.state.questionVisible ? \"minus\" : \"plus\"}\r\n              onClick={this.toggleQuestionTableVisibility}\r\n              floated=\"right\"\r\n              size=\"mini\"\r\n            />\r\n          }\r\n          content={\"Click to expand/close\"}\r\n          inverted/>\r\n      </Segment>\r\n    </React.Fragment>\r\n  }\r\n\r\n  renderQuestionSettings() {\r\n    return <React.Fragment>\r\n      <Transition visible={this.state.questionVisible} animation='scale' duration={500}>\r\n        <Segment>\r\n          <Header><Icon name='question circle' circular/>Questions Posted</Header>\r\n            <Table compact celled stackable>\r\n              <Table.Header fullWidth>\r\n                <Table.Row>\r\n                  <Table.HeaderCell width={2}>Question Address</Table.HeaderCell>\r\n                  <Table.HeaderCell width={3}>Title</Table.HeaderCell>\r\n                  <Table.HeaderCell width={2}>Status</Table.HeaderCell>\r\n                  <Table.HeaderCell width={2}>Actions</Table.HeaderCell>\r\n                </Table.Row>\r\n              </Table.Header>\r\n              <Table.Body>{this.getQuestionTableData()}</Table.Body>\r\n              <Table.Footer fullWidth>\r\n                <Table.Row>\r\n                  <Table.HeaderCell colSpan={5} />\r\n                </Table.Row>\r\n              </Table.Footer>\r\n            </Table>\r\n        </Segment>\r\n      </Transition>\r\n    </React.Fragment>\r\n  }\r\n\r\n  render() {\r\n    if (this.state.login) {\r\n      return (\r\n        <Layout accountType={this.state.accountType} page={\"Admin\"}>\r\n          <Container>\r\n            <Divider hidden/>\r\n            {this.renderExport()}\r\n            {this.renderEQTSettings()}\r\n            <Message error header=\"Oops!\" content={this.state.errorMessage} hidden={!this.state.error}/>\r\n            {this.renderUserManagement()}\r\n            <Divider hidden/>\r\n            {this.renderQuestionSettings()}\r\n            <Divider hidden/>\r\n            <LoadingModal trigger={this.state.loading}\r\n                          title={'Performing Admin Actions'}\r\n                          content={\"Please Confirm the MetaMask Transaction Request. This process might take awhile.\"}\r\n                          loader={\"Loading\"}/>\r\n            </Container>\r\n            <TimeOutModal timeout={this.state.timeout} />\r\n        </Layout>\r\n      );\r\n    } else {\r\n      return (\r\n        <Layout accountType={this.state.accountType}>\r\n          <AccountIssueModal loading={this.state.loadingResource} login={this.state.login} />\r\n        </Layout>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default AdminPage;\r\n"],"mappings":"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AAA;AAUA;AACA;AAFA;AACA;AAVA;AAaA;AACA;AAdA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAcA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AArBA;AAAA;AAAA;AACA;AADA;AAuBA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AA1BA;AA2BA;AAAA;AAAA;AACA;AA5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AArWA;AAkYA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AAnYA;AAqYA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AAtYA;AAwYA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AAvYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAFA;AAyBA;AACA;;;;;;AAKA;;;;;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;AACA;AAAA;AAAA;;;;AAGA;AACA;AAAA;;;;;AACA;AACA;AACA;;AACA;AACA;;AADA;AACA;;AACA;AACA;;AADA;AACA;AACA;AAAA;AACA;AACA;AACA;;AACA;AACA;;AAAA;AACA;AACA;AACA;;AADA;;;;;AACA;;AACA;AACA;;AADA;AACA;AACA;AACA;AACA;AAHA;AACA;;AAJA;;;;;AASA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;;AADA;AACA;AACA;AACA;AACA;;AADA;;;;;AACA;;AACA;AACA;;AADA;AACA;AACA;AACA;AACA;AAHA;AACA;;AAJA;;;;;;AAWA;AACA;;AADA;AACA;AACA;AACA;;AADA;;;;;;AACA;AACA;;AADA;;AACA;AACA;;AADA;AACA;AACA;AACA;AACA;AAHA;AACA;;AAJA;;;;;;AAUA;AACA;;AADA;;AACA;AACA;;AADA;;AACA;AACA;;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;;;;;;;;;;;;;;;;;AAgaA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAEA;AAAA;AAOA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAVA;AAaA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAEA;AAAA;AAOA;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;;;;;;AA9lBA;;;;;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AA9BA;AACA;AA4nBA;;;;A","sourceRoot":""}