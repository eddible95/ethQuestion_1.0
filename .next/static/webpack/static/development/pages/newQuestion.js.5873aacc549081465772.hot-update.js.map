{"version":3,"file":"static/webpack/static\\development\\pages\\newQuestion.js.5873aacc549081465772.hot-update.js","sources":["webpack:///./pages/newQuestion.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { Form, Button, Input, Message, Dropdown, Header,\r\n  Icon, Segment, Container, TextArea, Divider, Label, Modal, Loader } from 'semantic-ui-react';\r\nimport AccountIssueModal from '../components/AccountIssueModal';\r\nimport TimeOutModal from '../components/TimeOutModal';\r\nimport Layout from '../components/Layout';\r\nimport factory from '../ethereum/factory';\r\nimport Question from '../ethereum/question';\r\nimport Profile from '../ethereum/profile';\r\nimport web3 from '../ethereum/web3';\r\nimport EthQuestionToken from '../ethereum/token';\r\nimport credentials from '../ethereum/credentials';\r\nimport { Router } from '../routes';\r\nimport { getIpfsHash } from '../utils/ipfs';\r\nimport { logging, checkFieldEmpty, checkTimeField, checkRewardField, lowerCase } from '../utils/functions';\r\nimport cookies from 'next-cookies';\r\n\r\nclass NewQuestion extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n          questionTitle: '',\r\n          content:'',\r\n          tag: [],\r\n          tagOptions: [],\r\n          reward:'',\r\n          maxDuration:'',\r\n          errorMessage: '',\r\n          loading: false,\r\n          fileLoading: false,\r\n          buffer: null,\r\n          files_array: [],\r\n          fileHashes_array: [],\r\n          fileNames_array: [],\r\n          login: false,\r\n          resourceLoading: true,\r\n          timeout: false,\r\n          accountType: null\r\n      };\r\n    }\r\n\r\n    static async getInitialProps(props) {\r\n      return { isLogin: cookies(props).login || '' , account: cookies(props).wallet || '' };\r\n    }\r\n\r\n    async componentDidMount() {\r\n      if (typeof web3 === 'undefined') {\r\n        this.setState({ loading: false })\r\n        return\r\n      }\r\n      let login = false;\r\n      if (this.props.isLogin) {\r\n        login = true;\r\n        // Get Account Type\r\n        let profileAddress = await factory.methods.getProfile(this.props.account).call();\r\n        let profile = Profile(profileAddress);\r\n        let accountType = await profile.methods.getAccountType().call();\r\n        accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"\r\n\r\n        // Retrieve previously used tags and ether balance\r\n        let deployedQuestions = await factory.methods.getDeployedQuestions().call();\r\n        let deployedQuestionsCount = deployedQuestions.length;\r\n        let tags = [];\r\n        let tagOptions = [];\r\n\r\n        for (let i=0; i<deployedQuestionsCount; i++) {\r\n          let question = Question(deployedQuestions[i])\r\n          let summary = await question.methods.getSummary().call();\r\n          tags = [...tags, ...summary[8]]\r\n        }\r\n        // Remove duplicated tags and select recently used tags\r\n        tags = [...new Set(tags)]\r\n        tags = tags.reverse().slice(0,30);\r\n\r\n        for (let i = 0; i<tags.length; i++) {\r\n            tagOptions.push({\r\n                key: i,\r\n                text: tags[i],\r\n                value: tags[i]\r\n            });\r\n        }\r\n\r\n        this.setState( { login: login,\r\n                         accountType: accountType,\r\n                         tagOptions: tagOptions });\r\n      }\r\n      this.setState( { resourceLoading: false });\r\n    }\r\n\r\n    // Submit the question to be stored on the Ethereum Blockchain\r\n    onSubmit = async () => {\r\n        this.setState({ loading: true, errorMessage: '' });\r\n        // Ensures all fields are filled\r\n        if (checkFieldEmpty(this.state.questionTitle) && checkFieldEmpty(this.state.content) && checkRewardField(this.state.reward) && checkTimeField(this.state.maxDuration)){\r\n          try {\r\n              const account = this.props.account;\r\n              // Logs the transactions\r\n              let logTransaction = logging(\"Created New Question: \" + this.state.questionTitle + \" [\" + this.state.reward + \" EQT(s) as reward]\");\r\n              // Create new question\r\n              await factory.methods\r\n              .createQuestion(this.state.questionTitle, this.state.content, lowerCase(this.state.tag), Number(this.state.reward)*10e3, parseFloat(this.state.maxDuration) * 60 * 60,\r\n                this.state.fileHashes_array, this.state.fileNames_array, logTransaction, EthQuestionToken._address)\r\n              .send({\r\n                  from: account,\r\n                  gasPrice: '0'\r\n              });\r\n              // Transfer EQT into question contract\r\n              const address = await factory.methods.getLastDeployedQuestion().call();\r\n              await EthQuestionToken.methods.transfer(address, Number(this.state.reward)*10e3)\r\n              .send({\r\n                  from: account,\r\n                  gasPrice: '0'\r\n              });\r\n              Router.pushRoute('/home'); // Automatic redirect the user.\r\n          } catch (err) {\r\n              if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n                this.setState({ loading: false });\r\n                this.setState({ timeout: true });\r\n              }\r\n              this.setState({ errorMessage: err.message + \" Or check if you have sufficient EQT(s)\"});\r\n          }\r\n          this.setState({ loading: false });\r\n        } else {\r\n          this.setState({ errorMessage: \"Required Field(s) Empty or Invalid Input\" });\r\n          this.setState({ loading: false });\r\n        }\r\n    };\r\n\r\n    // Select a file to upload\r\n    onFileSelected = async () => {\r\n        // Access JavaScript FileReader() method for conversion to buffer\r\n        const reader = new FileReader();\r\n        const file = this.fileInput.files[0];\r\n        this.setState({fileLoading: true});\r\n        if (file instanceof Blob ) {\r\n            let {files_array, fileNames_array, fileHashes_array} = this.state;\r\n            files_array.push(file);\r\n            fileNames_array.push(file.name);\r\n            this.setState({\r\n                files_array: files_array,\r\n                fileNames_array: fileNames_array\r\n            });\r\n            console.log(\"fileNames_array: \", fileNames_array);\r\n            reader.onloadend = async () => {\r\n                await this.setState({\r\n                    fileUrl: reader.result,\r\n                    fileLoading: true,\r\n                    buffer: Buffer.from(reader.result) // File is converted to a buffer for upload to IPFS\r\n                });\r\n                const fileHash = this.state.buffer ? (await getIpfsHash(file)) : '0';\r\n                fileHashes_array.push(fileHash);\r\n                this.setState({ fileHashes_array: fileHashes_array });\r\n                console.log(\"fileHashes_array: \", fileHashes_array);\r\n                this.setState({fileLoading: false});\r\n            }\r\n            reader.readAsDataURL(file);\r\n        }\r\n    }\r\n\r\n    // Remove a previously selected file to upload\r\n    onFileRemoved = (file) => {\r\n        var i = 0;\r\n        let {files_array, fileHashes_array, fileNames_array} = this.state;\r\n        console.log('file: ', file);\r\n        for (i = 0 ; i < files_array.length ; i++) {\r\n            if (file === files_array[i]) {\r\n                files_array.splice(i, 1);\r\n                fileNames_array.splice(i, 1);\r\n                fileHashes_array.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n        this.setState({\r\n            files_array: files_array,\r\n            fileNames_array: fileNames_array,\r\n            fileHashes_array: fileHashes_array\r\n        });\r\n        console.log('fileNames_array', fileNames_array);\r\n        console.log(\"fileHashes_array: \", fileHashes_array);\r\n    }\r\n\r\n    handleAddition = (e, { value }) => {\r\n      this.setState({ tagOptions: [{ text: value, value }, ...this.state.tagOptions] });\r\n    }\r\n\r\n    renderFilesUpload(files) {\r\n      let {files_array} = this.state;\r\n      if(this.state.files_array.length == 0){\r\n        return (\r\n          <Segment placeholder>\r\n            <Header icon>\r\n              <Icon name='images outline' />\r\n              No images are uploaded for this question\r\n            </Header>\r\n            <input\r\n                style={{ display: 'none' }}\r\n                type='file'\r\n                onChange={() => this.onFileSelected()}\r\n                ref={fileInput => this.fileInput = fileInput}/>\r\n            <Button primary onClick={() => this.fileInput.click()} loading={this.state.fileLoading}>Upload Image</Button>\r\n          </Segment>\r\n        )\r\n      } else {\r\n        return (\r\n          <Segment placeholder>\r\n            <center>\r\n                <div style={{marginBottom: '20px'}}>\r\n                    {files}\r\n                </div>\r\n                <input\r\n                    style={{ display: 'none' }}\r\n                    type='file'\r\n                    onChange={() => this.onFileSelected()}\r\n                    ref={fileInput => this.fileInput = fileInput}/>\r\n                <Button primary onClick={() => this.fileInput.click()} loading={this.state.fileLoading}>Upload Files</Button>\r\n            </center>\r\n          </Segment>\r\n        )\r\n      }\r\n    };\r\n\r\n    render() {\r\n      if (this.state.login) {\r\n        let {files_array} = this.state;\r\n        let elmFiles = null;\r\n\r\n        if (files_array !== null) {\r\n          elmFiles = files_array.map((item, index) =>\r\n              <Label as='a' key={index} size='big'>\r\n                  {item.name}\r\n                  <Icon name='delete'\r\n                        onClick={() => this.onFileRemoved(item)} />\r\n              </Label>\r\n          );\r\n        }\r\n        return (\r\n          <Layout accountType={this.state.accountType} page={\"New\"}>\r\n              <Container>\r\n                <Divider hidden/>\r\n                <Segment textAlign='center' as='h3'>Creating Of New Question</Segment>\r\n                <Form error={!!this.state.errorMessage} style={{ marginTop: '10px' }}>\r\n                    <Form.Field required={true}>\r\n                        <label>Question Title</label>\r\n                        <Input\r\n                            placeholder=\"Enter Title\"\r\n                            value={this.state.questionTitle}\r\n                            onChange={event => this.setState({ questionTitle: event.target.value })}\r\n                        />\r\n                    </Form.Field>\r\n                    <Form.Field required={true}>\r\n                        <label>Question Description (To include math questions, delimit the latex format with $$)</label>\r\n                        <Label>Example: This is my equation: $$1 \\triangleright 1 \\bigcirc  \\bigcirc $$</Label>\r\n                        <a style={{display: \"table-cell\"}} href=\"https://www.codecogs.com/latex/eqneditor.php\" target=\"_blank\">Link to Supported Latex Editor</a>\r\n                        <TextArea\r\n                            placeholder=\"Enter Description\"\r\n                            value={this.state.content}\r\n                            onChange={event => this.setState({ content: event.target.value })}\r\n                        />\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label>Tags</label>\r\n                        <Dropdown clearable\r\n                                  options={this.state.tagOptions}\r\n                                  selection\r\n                                  multiple\r\n                                  allowAdditions\r\n                                  search\r\n                                  placeholder='Select from recently used tags or create your own tags'\r\n                                  value={this.state.tag}\r\n                                  onChange={ (e, { value }) => this.setState({ tag: value })}\r\n                                  onAddItem={this.handleAddition} />\r\n\r\n                    </Form.Field>\r\n                    <Form.Field required={true}>\r\n                        <label>EQT(s)</label>\r\n                        <Input\r\n                            label=\"EQT(s)\"\r\n                            labelPosition=\"right\"\r\n                            placeholder='Enter your value of reward'\r\n                            value={this.state.reward}\r\n                            onChange={event => this.setState({ reward: event.target.value })}\r\n                        />\r\n                    </Form.Field>\r\n                    <Form.Field required={true}>\r\n                        <label>Maximum Duration</label>\r\n                        <Input\r\n                            label=\"hour(s)\"\r\n                            labelPosition=\"right\"\r\n                            placeholder='Enter the duration for the question to be valid'\r\n                            value={this.state.maxDuration}\r\n                            onChange={event => this.setState({ maxDuration: event.target.value })}\r\n                        />\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      {this.renderFilesUpload(elmFiles)}\r\n                    </Form.Field>\r\n                    <Message error header=\"Oops!\" content={this.state.errorMessage} />\r\n                    <Modal open={this.state.loading} trigger={<Button primary onClick={this.onSubmit}>Submit Question</Button>} basic size='small'>\r\n                      <Header content='Posting New Question' />\r\n                      <Modal.Content>\r\n                        <p>\r\n                          System is submitting your question to the blockchain. Upon successful submission, you will be redirected to the Home Page.\r\n                          This process might take awhile.\r\n                        </p>\r\n                        <Loader active inline=\"centered\">\r\n                          Loading\r\n                        </Loader>\r\n                      </Modal.Content>\r\n                    </Modal>\r\n                </Form>\r\n              </Container>\r\n              <TimeOutModal timeout={this.state.timeout} />\r\n          </Layout>\r\n        );\r\n      } else {\r\n        return (\r\n          <Layout accountType={this.state.accountType}>\r\n            <AccountIssueModal loading={this.state.resourceLoading} login={this.state.login} />\r\n          </Layout>\r\n        );\r\n      }\r\n    }\r\n}\r\n\r\nexport default NewQuestion;\r\n"],"mappings":"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","sourceRoot":""}