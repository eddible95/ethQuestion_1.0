{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { Table, Popup, Button, Container, Form, Header, Comment, Message, Divider, Icon } from 'semantic-ui-react';\nimport { Link, Router } from '../routes';\nimport moment from 'moment';\nimport web3 from '../ethereum/web3';\nimport Question from '../ethereum/question';\nimport factory from '../ethereum/factory';\nimport Layout from '../components/Layout';\nimport Countdown from 'react-countdown-now';\n\nvar QuestionRow =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(QuestionRow, _Component);\n\n  function QuestionRow() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, QuestionRow);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(QuestionRow)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      questionAddress: '',\n      questionState: '',\n      votingTime: '',\n      answer: '',\n      errorMessage: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var accounts, question, _questionState, _votingTime;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(_this.state.questionState == 0)) {\n                _context.next = 13;\n                break;\n              }\n\n              _context.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context.sent;\n              question = Question(_this.state.questionAddress);\n              _context.next = 7;\n              return question.methods.getQuestionState().send({\n                from: accounts[0]\n              });\n\n            case 7:\n              _questionState = _context.sent;\n              _context.next = 10;\n              return question.methods.getTime().call();\n\n            case 10:\n              _votingTime = _context.sent;\n              console.log(_votingTime);\n\n              _this.setState({\n                questionState: _questionState,\n                votingTime: _votingTime[3]\n              });\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleReward\", function () {\n      console.log(\"reward!\");\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmitAnswer\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var accounts;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              event.preventDefault(); // prevent default submission of the form to the backend (the browser does that automatically)\n\n              _context2.prev = 1;\n              _context2.next = 4;\n              return web3.eth.getAccounts();\n\n            case 4:\n              accounts = _context2.sent;\n              _context2.next = 7;\n              return factory.methods.createAnswer(_this.state.questionAddress, _this.state.answer).send({\n                from: accounts[0]\n              });\n\n            case 7:\n              Router.pushRoute(\"/questions/\".concat(_this.state.questionAddress));\n              _context2.next = 13;\n              break;\n\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](1);\n\n              _this.setState({\n                errorMessage: _context2.t0.message\n              });\n\n            case 13:\n              _this.setState({\n                loading: false\n              });\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 10]]);\n    })));\n\n    return _this;\n  }\n\n  _createClass(QuestionRow, [{\n    key: \"renderQuestion\",\n    value: function renderQuestion() {\n      var summary = this.props.summary;\n      var time = this.props.time;\n      var currentTime = new Date().getTime();\n      var maxDuration = (_parseFloat(summary[3]) / 60 / 60).toFixed(2).toString().toString();\n      var publishTime = moment.unix(time[0]).format('dddd, Do MMMM YYYY, h:mm:ss a');\n      var votingTime = moment.unix(this.state.votingTime).format('dddd, Do MMMM YYYY, h:mm:ss a');\n      var publishTimeMs = moment.unix(time[0]).valueOf();\n      var maxDurationMs = moment.unix(time[2]).valueOf();\n      var votingTimeMs = moment.unix(this.state.votingTime).valueOf();\n      var remainingTime = 0;\n\n      if (this.state.questionState == 0) {\n        remainingTime = publishTimeMs + maxDurationMs - currentTime;\n\n        if (remainingTime < 0) {\n          remainingTime = 0;\n        }\n      } else {\n        remainingTime = votingTimeMs + maxDurationMs - currentTime;\n\n        if (remainingTime < 0) {\n          remainingTime = 0;\n        }\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(Table, {\n        definition: true\n      }, React.createElement(Table.Body, null, React.createElement(Table.Row, null, React.createElement(Table.Cell, {\n        width: 2\n      }, \"Question Title\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px',\n          lineHeight: '1.5'\n        }\n      }, summary[0])), React.createElement(Table.Row, null, React.createElement(Table.Cell, {\n        width: 2\n      }, \"Description\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px',\n          lineHeight: '1.5'\n        }\n      }, summary[1])), React.createElement(Table.Row, null, React.createElement(Table.Cell, null, \"Reward (ETH)\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px'\n        }\n      }, summary[2])), React.createElement(Table.Row, null, React.createElement(Table.Cell, null, \"Publish Time\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px'\n        }\n      }, publishTime)), React.createElement(Table.Row, null, React.createElement(Table.Cell, null, \"Answering Duration (hours)\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px'\n        }\n      }, React.createElement(\"span\", {\n        style: {\n          verticalAlign: 'middle',\n          lineHeight: '33px'\n        }\n      }, maxDuration), this.state.questionState == 0 && remainingTime > 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"violet\"\n        }),\n        content: React.createElement(\"span\", null, React.createElement(\"span\", null, \"Remaining time - \"), React.createElement(Countdown, {\n          date: _Date$now() + remainingTime\n        })),\n        position: \"bottom right\",\n        inverted: true\n      }) : React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"red\",\n          onClick: this.handleClick\n        }),\n        content: \"EXPIRED\",\n        position: \"bottom right\",\n        inverted: true\n      }))), React.createElement(Table.Row, null, React.createElement(Table.Cell, null, \"Voting Duration (hours)\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px'\n        }\n      }, React.createElement(\"span\", {\n        style: {\n          verticalAlign: 'middle',\n          lineHeight: '33px'\n        }\n      }, maxDuration), this.state.questionState == 1 && remainingTime > 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"violet\"\n        }),\n        content: React.createElement(\"span\", null, React.createElement(\"span\", null, \"Remaining time - \"), React.createElement(Countdown, {\n          date: _Date$now() + remainingTime\n        })),\n        position: \"bottom right\",\n        inverted: true\n      }) : this.state.questionState == 1 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"red\",\n          onClick: this.handleReward\n        }),\n        content: \"Reward\",\n        position: \"bottom right\",\n        inverted: true\n      }) : this.state.questionState == 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"red\",\n          disabled: true\n        }),\n        position: \"bottom right\",\n        inverted: true\n      }) : React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"red\",\n          onClick: this.handleReward\n        }),\n        content: \"Reward\",\n        position: \"bottom right\",\n        inverted: true\n      }))))));\n    }\n  }, {\n    key: \"renderAnswers\",\n    value: function renderAnswers() {\n      var _this2 = this;\n\n      var answers = this.props.answerList;\n      return answers.map(function (answer, index) {\n        var answeredTime = moment.unix(answer[5]).format('Do MMMM YYYY, h:mm a');\n        return React.createElement(Comment, {\n          key: index\n        }, React.createElement(Comment.Avatar, {\n          src: \"https://react.semantic-ui.com/images/avatar/small/matt.jpg\"\n        }), React.createElement(Comment.Content, {\n          style: {\n            width: \"1000px\"\n          }\n        }, React.createElement(Comment.Author, {\n          as: \"a\"\n        }, answer[1]), React.createElement(Comment.Metadata, null, React.createElement(\"div\", null, answeredTime), React.createElement(\"br\", null), React.createElement(\"div\", null, React.createElement(Icon, {\n          name: \"star\"\n        }), \"5 Faves\")), React.createElement(Comment.Text, null, answer[0]), React.createElement(Comment.Actions, null, React.createElement(Comment.Action, null, React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"thumbs down\",\n          onClick: _this2.handleReward,\n          size: \"tiny\"\n        }), React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"thumbs up\",\n          onClick: _this2.handleReward,\n          size: \"tiny\"\n        })))));\n      });\n    }\n  }, {\n    key: \"renderForm\",\n    value: function renderForm() {\n      var _this3 = this;\n\n      return React.createElement(Form, {\n        onSubmit: this.onSubmitAnswer,\n        error: !!this.state.errorMessage\n      }, React.createElement(Form.TextArea, {\n        value: this.state.answer,\n        onChange: function onChange(event) {\n          return _this3.setState({\n            answer: event.target.value\n          });\n        }\n      }), React.createElement(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.errorMessage\n      }), React.createElement(Button, {\n        content: \"Submit Answers\",\n        loading: this.state.loading,\n        labelPosition: \"left\",\n        icon: \"edit\",\n        primary: true\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Layout, null, React.createElement(Container, null, this.renderQuestion(), React.createElement(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"Submit Your Answers Here\"), this.renderForm(), React.createElement(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"Answers Submitted\"), React.createElement(Divider, null), React.createElement(Comment.Group, {\n        size: \"large\"\n      }, this.renderAnswers())));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(props) {\n        var questionAddress, question, summary, time, profileOwner, answerList;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                questionAddress = props.query.value;\n                question = Question(questionAddress);\n                _context3.next = 4;\n                return question.methods.getSummary().call();\n\n              case 4:\n                summary = _context3.sent;\n                _context3.next = 7;\n                return question.methods.getTime().call();\n\n              case 7:\n                time = _context3.sent;\n                _context3.next = 10;\n                return factory.methods.getProfile(summary[5]).call();\n\n              case 10:\n                profileOwner = _context3.sent;\n                _context3.next = 13;\n                return question.methods.getAnswerList().call();\n\n              case 13:\n                answerList = _context3.sent;\n                return _context3.abrupt(\"return\", {\n                  summary: summary,\n                  time: time,\n                  questionAddress: questionAddress,\n                  answerList: answerList\n                });\n\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }, {\n    key: \"getDerivedStateFromProps\",\n    value: function () {\n      var _getDerivedStateFromProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(props, state) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                state.questionAddress = props.questionAddress;\n                state.questionState = props.summary[4];\n                state.votingTime = props.time[3];\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function getDerivedStateFromProps(_x2, _x3) {\n        return _getDerivedStateFromProps.apply(this, arguments);\n      }\n\n      return getDerivedStateFromProps;\n    }()\n  }]);\n\n  return QuestionRow;\n}(Component);\n\nexport default QuestionRow;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\showQuestion.js"],"names":["React","Component","Table","Popup","Button","Container","Form","Header","Comment","Message","Divider","Icon","Link","Router","moment","web3","Question","factory","Layout","Countdown","QuestionRow","questionAddress","questionState","votingTime","answer","errorMessage","state","eth","getAccounts","accounts","question","methods","getQuestionState","send","from","_questionState","getTime","call","_votingTime","console","log","setState","event","preventDefault","createAnswer","pushRoute","message","loading","summary","props","time","currentTime","Date","maxDuration","toFixed","toString","publishTime","unix","format","publishTimeMs","valueOf","maxDurationMs","votingTimeMs","remainingTime","fontSize","lineHeight","verticalAlign","float","handleClick","handleReward","answers","answerList","map","index","answeredTime","width","onSubmitAnswer","target","value","renderQuestion","renderForm","renderAnswers","query","getSummary","getProfile","profileOwner","getAnswerList"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,EAA+BC,SAA/B,EAA0CC,IAA1C,EAAgDC,MAAhD,EAAwDC,OAAxD,EAAiEC,OAAjE,EAA0EC,OAA1E,EAAmFC,IAAnF,QAA+F,mBAA/F;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,WAA7B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;;IAEMC,W;;;;;;;;;;;;;;;;;;4DACM;AACNC,MAAAA,eAAe,EAAE,EADX;AAENC,MAAAA,aAAa,EAAE,EAFT;AAGNC,MAAAA,UAAU,EAAC,EAHL;AAINC,MAAAA,MAAM,EAAC,EAJD;AAKNC,MAAAA,YAAY,EAAE;AALR,K;;;;;;6BAwBM;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBACT,MAAKC,KAAL,CAAWJ,aAAX,IAA4B,CADnB;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAEaP,IAAI,CAACY,GAAL,CAASC,WAAT,EAFb;;AAAA;AAEJC,cAAAA,QAFI;AAGJC,cAAAA,QAHI,GAGOd,QAAQ,CAAC,MAAKU,KAAL,CAAWL,eAAZ,CAHf;AAAA;AAAA,qBAIiBS,QAAQ,CAACC,OAAT,CAAiBC,gBAAjB,GAAoCC,IAApC,CACzB;AAAEC,gBAAAA,IAAI,EAAEL,QAAQ,CAAC,CAAD;AAAhB,eADyB,CAJjB;;AAAA;AAINM,cAAAA,cAJM;AAAA;AAAA,qBAQcL,QAAQ,CAACC,OAAT,CAAiBK,OAAjB,GAA2BC,IAA3B,EARd;;AAAA;AAQNC,cAAAA,WARM;AASVC,cAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;;AACA,oBAAKG,QAAL,CAAc;AAACnB,gBAAAA,aAAa,EAAEa,cAAhB;AAAgCZ,gBAAAA,UAAU,EAAEe,WAAW,CAAC,CAAD;AAAvD,eAAd;;AAVU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;mEAcC,YAAM;AACnBC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD,K;;;;;;6BAEgB;AAAA;AAAA;AAAA;AAAA;AAAA;AACfE,cAAAA,KAAK,CAACC,cAAN,GADe,CACS;;AADT;AAAA;AAAA,qBAIY5B,IAAI,CAACY,GAAL,CAASC,WAAT,EAJZ;;AAAA;AAILC,cAAAA,QAJK;AAAA;AAAA,qBAMLZ,OAAO,CAACc,OAAR,CACLa,YADK,CACQ,MAAKlB,KAAL,CAAWL,eADnB,EACoC,MAAKK,KAAL,CAAWF,MAD/C,EAELS,IAFK,CAEA;AACFC,gBAAAA,IAAI,EAAEL,QAAQ,CAAC,CAAD;AADZ,eAFA,CANK;;AAAA;AAYXhB,cAAAA,MAAM,CAACgC,SAAP,sBAA+B,MAAKnB,KAAL,CAAWL,eAA1C;AAZW;AAAA;;AAAA;AAAA;AAAA;;AAeX,oBAAKoB,QAAL,CAAc;AAAEhB,gBAAAA,YAAY,EAAE,aAAIqB;AAApB,eAAd;;AAfW;AAkBf,oBAAKL,QAAL,CAAc;AAAEM,gBAAAA,OAAO,EAAE;AAAX,eAAd;;AAlBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;qCAqBA;AACb,UAAMC,OAAO,GAAG,KAAKC,KAAL,CAAWD,OAA3B;AACA,UAAME,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAxB;AACA,UAAIC,WAAW,GAAI,IAAIC,IAAJ,EAAD,CAAWhB,OAAX,EAAlB;AACA,UAAIiB,WAAW,GAAE,CAAC,YAAWL,OAAO,CAAC,CAAD,CAAlB,IAAyB,EAAzB,GAA8B,EAA/B,EAAmCM,OAAnC,CAA2C,CAA3C,EAA8CC,QAA9C,GAAyDA,QAAzD,EAAjB;AACA,UAAIC,WAAW,GAAG1C,MAAM,CAAC2C,IAAP,CAAYP,IAAI,CAAC,CAAD,CAAhB,EAAqBQ,MAArB,CAA4B,+BAA5B,CAAlB;AACA,UAAInC,UAAU,GAAGT,MAAM,CAAC2C,IAAP,CAAY,KAAK/B,KAAL,CAAWH,UAAvB,EAAmCmC,MAAnC,CAA0C,+BAA1C,CAAjB;AACA,UAAIC,aAAa,GAAG7C,MAAM,CAAC2C,IAAP,CAAYP,IAAI,CAAC,CAAD,CAAhB,EAAqBU,OAArB,EAApB;AACA,UAAIC,aAAa,GAAG/C,MAAM,CAAC2C,IAAP,CAAYP,IAAI,CAAC,CAAD,CAAhB,EAAqBU,OAArB,EAApB;AACA,UAAIE,YAAY,GAAGhD,MAAM,CAAC2C,IAAP,CAAY,KAAK/B,KAAL,CAAWH,UAAvB,EAAmCqC,OAAnC,EAAnB;AAEA,UAAIG,aAAa,GAAG,CAApB;;AACA,UAAI,KAAKrC,KAAL,CAAWJ,aAAX,IAA4B,CAAhC,EAAmC;AACjCyC,QAAAA,aAAa,GAAGJ,aAAa,GAAGE,aAAhB,GAAgCV,WAAhD;;AACA,YAAIY,aAAa,GAAG,CAApB,EAAuB;AACnBA,UAAAA,aAAa,GAAG,CAAhB;AACH;AACF,OALD,MAKO;AACLA,QAAAA,aAAa,GAAGD,YAAY,GAAGD,aAAf,GAA+BV,WAA/C;;AACA,YAAIY,aAAa,GAAG,CAApB,EAAuB;AACnBA,UAAAA,aAAa,GAAG,CAAhB;AACH;AACF;;AAED,aACE,oBAAC,KAAD,CAAO,QAAP,QACI,oBAAC,KAAD;AAAO,QAAA,UAAU;AAAjB,SACI,oBAAC,KAAD,CAAO,IAAP,QACE,oBAAC,KAAD,CAAO,GAAP,QACI,oBAAC,KAAD,CAAO,IAAP;AAAY,QAAA,KAAK,EAAE;AAAnB,0BADJ,EAEI,oBAAC,KAAD,CAAO,IAAP;AAAY,QAAA,KAAK,EAAE;AAACC,UAAAA,QAAQ,EAAE,MAAX;AAAmBC,UAAAA,UAAU,EAAE;AAA/B;AAAnB,SACKjB,OAAO,CAAC,CAAD,CADZ,CAFJ,CADF,EAOI,oBAAC,KAAD,CAAO,GAAP,QACI,oBAAC,KAAD,CAAO,IAAP;AAAY,QAAA,KAAK,EAAE;AAAnB,uBADJ,EAEI,oBAAC,KAAD,CAAO,IAAP;AAAY,QAAA,KAAK,EAAE;AAACgB,UAAAA,QAAQ,EAAE,MAAX;AAAmBC,UAAAA,UAAU,EAAE;AAA/B;AAAnB,SACKjB,OAAO,CAAC,CAAD,CADZ,CAFJ,CAPJ,EAaI,oBAAC,KAAD,CAAO,GAAP,QACI,oBAAC,KAAD,CAAO,IAAP,uBADJ,EAEI,oBAAC,KAAD,CAAO,IAAP;AAAY,QAAA,KAAK,EAAE;AAACgB,UAAAA,QAAQ,EAAE;AAAX;AAAnB,SAAwChB,OAAO,CAAC,CAAD,CAA/C,CAFJ,CAbJ,EAiBI,oBAAC,KAAD,CAAO,GAAP,QACI,oBAAC,KAAD,CAAO,IAAP,uBADJ,EAEI,oBAAC,KAAD,CAAO,IAAP;AAAY,QAAA,KAAK,EAAE;AAACgB,UAAAA,QAAQ,EAAE;AAAX;AAAnB,SAAwCR,WAAxC,CAFJ,CAjBJ,EAqBI,oBAAC,KAAD,CAAO,GAAP,QACI,oBAAC,KAAD,CAAO,IAAP,qCADJ,EAEI,oBAAC,KAAD,CAAO,IAAP;AAAY,QAAA,KAAK,EAAE;AAACQ,UAAAA,QAAQ,EAAE;AAAX;AAAnB,SACI;AAAM,QAAA,KAAK,EAAE;AAACE,UAAAA,aAAa,EAAE,QAAhB;AAA0BD,UAAAA,UAAU,EAAE;AAAtC;AAAb,SACKZ,WADL,CADJ,EAIK,KAAK3B,KAAL,CAAWJ,aAAX,IAA4B,CAA5B,IAAiCyC,aAAa,GAAG,CAAjD,GACK,oBAAC,KAAD;AACE,QAAA,OAAO,EACH,oBAAC,MAAD;AAAQ,UAAA,KAAK,EAAE;AAACI,YAAAA,KAAK,EAAE,OAAR;AAAiBD,YAAAA,aAAa,EAAE;AAAhC,WAAf;AACQ,UAAA,IAAI,EAAC,OADb;AAEQ,UAAA,KAAK,EAAC;AAFd,UAFN;AAME,QAAA,OAAO,EACH,kCACA,sDADA,EAEA,oBAAC,SAAD;AAAW,UAAA,IAAI,EAAE,cAAaH;AAA9B,UAFA,CAPN;AAYE,QAAA,QAAQ,EAAC,cAZX;AAaE,QAAA,QAAQ;AAbV,QADL,GAeK,oBAAC,KAAD;AACE,QAAA,OAAO,EACH,oBAAC,MAAD;AAAQ,UAAA,KAAK,EAAE;AAACI,YAAAA,KAAK,EAAE,OAAR;AAAiBD,YAAAA,aAAa,EAAE;AAAhC,WAAf;AACQ,UAAA,IAAI,EAAC,OADb;AAEQ,UAAA,KAAK,EAAC,KAFd;AAGQ,UAAA,OAAO,EAAE,KAAKE;AAHtB,UAFN;AAQE,QAAA,OAAO,EAAE,SARX;AASE,QAAA,QAAQ,EAAC,cATX;AAUE,QAAA,QAAQ;AAVV,QAnBV,CAFJ,CArBJ,EAwDI,oBAAC,KAAD,CAAO,GAAP,QACI,oBAAC,KAAD,CAAO,IAAP,kCADJ,EAEI,oBAAC,KAAD,CAAO,IAAP;AAAY,QAAA,KAAK,EAAE;AAACJ,UAAAA,QAAQ,EAAE;AAAX;AAAnB,SACI;AAAM,QAAA,KAAK,EAAE;AAACE,UAAAA,aAAa,EAAE,QAAhB;AAA0BD,UAAAA,UAAU,EAAE;AAAtC;AAAb,SACKZ,WADL,CADJ,EAIK,KAAK3B,KAAL,CAAWJ,aAAX,IAA4B,CAA5B,IAAiCyC,aAAa,GAAG,CAAjD,GACK,oBAAC,KAAD;AACE,QAAA,OAAO,EACH,oBAAC,MAAD;AAAQ,UAAA,KAAK,EAAE;AAACI,YAAAA,KAAK,EAAE,OAAR;AAAiBD,YAAAA,aAAa,EAAE;AAAhC,WAAf;AACQ,UAAA,IAAI,EAAC,OADb;AAEQ,UAAA,KAAK,EAAC;AAFd,UAFN;AAME,QAAA,OAAO,EACH,kCACA,sDADA,EAEA,oBAAC,SAAD;AAAW,UAAA,IAAI,EAAE,cAAaH;AAA9B,UAFA,CAPN;AAYE,QAAA,QAAQ,EAAC,cAZX;AAaE,QAAA,QAAQ;AAbV,QADL,GAeK,KAAKrC,KAAL,CAAWJ,aAAX,IAA4B,CAA5B,GACA,oBAAC,KAAD;AACE,QAAA,OAAO,EACH,oBAAC,MAAD;AAAQ,UAAA,KAAK,EAAE;AAAC6C,YAAAA,KAAK,EAAE,OAAR;AAAiBD,YAAAA,aAAa,EAAE;AAAhC,WAAf;AACQ,UAAA,IAAI,EAAC,OADb;AAEQ,UAAA,KAAK,EAAC,KAFd;AAGQ,UAAA,OAAO,EAAE,KAAKG;AAHtB,UAFN;AAQE,QAAA,OAAO,EAAE,QARX;AASE,QAAA,QAAQ,EAAC,cATX;AAUE,QAAA,QAAQ;AAVV,QADA,GAYA,KAAK3C,KAAL,CAAWJ,aAAX,IAA4B,CAA5B,GACA,oBAAC,KAAD;AACE,QAAA,OAAO,EACH,oBAAC,MAAD;AAAQ,UAAA,KAAK,EAAE;AAAC6C,YAAAA,KAAK,EAAE,OAAR;AAAiBD,YAAAA,aAAa,EAAE;AAAhC,WAAf;AACQ,UAAA,IAAI,EAAC,OADb;AAEQ,UAAA,KAAK,EAAC,KAFd;AAGQ,UAAA,QAAQ;AAHhB,UAFN;AAQE,QAAA,QAAQ,EAAC,cARX;AASE,QAAA,QAAQ;AATV,QADA,GAWA,oBAAC,KAAD;AACE,QAAA,OAAO,EACH,oBAAC,MAAD;AAAQ,UAAA,KAAK,EAAE;AAACC,YAAAA,KAAK,EAAE,OAAR;AAAiBD,YAAAA,aAAa,EAAE;AAAhC,WAAf;AACQ,UAAA,IAAI,EAAC,OADb;AAEQ,UAAA,KAAK,EAAC,KAFd;AAGQ,UAAA,OAAO,EAAE,KAAKG;AAHtB,UAFN;AAQE,QAAA,OAAO,EAAE,QARX;AASE,QAAA,QAAQ,EAAC,cATX;AAUE,QAAA,QAAQ;AAVV,QA1CV,CAFJ,CAxDJ,CADJ,CADJ,CADF;AAyHH;;;oCAEe;AAAA;;AACd,UAAMC,OAAO,GAAG,KAAKrB,KAAL,CAAWsB,UAA3B;AAEA,aAAOD,OAAO,CAACE,GAAR,CAAY,UAAChD,MAAD,EAASiD,KAAT,EAAmB;AAClC,YAAIC,YAAY,GAAG5D,MAAM,CAAC2C,IAAP,CAAYjC,MAAM,CAAC,CAAD,CAAlB,EAAuBkC,MAAvB,CAA8B,sBAA9B,CAAnB;AACA,eAAO,oBAAC,OAAD;AAAS,UAAA,GAAG,EAAEe;AAAd,WACH,oBAAC,OAAD,CAAS,MAAT;AAAgB,UAAA,GAAG,EAAC;AAApB,UADG,EAEH,oBAAC,OAAD,CAAS,OAAT;AAAiB,UAAA,KAAK,EAAE;AAACE,YAAAA,KAAK,EAAC;AAAP;AAAxB,WACE,oBAAC,OAAD,CAAS,MAAT;AAAgB,UAAA,EAAE,EAAC;AAAnB,WAAwBnD,MAAM,CAAC,CAAD,CAA9B,CADF,EAEE,oBAAC,OAAD,CAAS,QAAT,QACE,iCAAMkD,YAAN,CADF,EAEE,+BAFF,EAGE,iCAAK,oBAAC,IAAD;AAAM,UAAA,IAAI,EAAC;AAAX,UAAL,YAHF,CAFF,EAOE,oBAAC,OAAD,CAAS,IAAT,QAAelD,MAAM,CAAC,CAAD,CAArB,CAPF,EAQE,oBAAC,OAAD,CAAS,OAAT,QACE,oBAAC,OAAD,CAAS,MAAT,QACE,oBAAC,MAAD;AAAQ,UAAA,KAAK,EAAE;AAAC2C,YAAAA,KAAK,EAAE,OAAR;AAAiBD,YAAAA,aAAa,EAAE;AAAhC,WAAf;AACQ,UAAA,IAAI,EAAC,aADb;AAEQ,UAAA,OAAO,EAAE,MAAI,CAACG,YAFtB;AAGQ,UAAA,IAAI,EAAC;AAHb,UADF,EAME,oBAAC,MAAD;AAAQ,UAAA,KAAK,EAAE;AAACF,YAAAA,KAAK,EAAE,OAAR;AAAiBD,YAAAA,aAAa,EAAE;AAAhC,WAAf;AACQ,UAAA,IAAI,EAAC,WADb;AAEQ,UAAA,OAAO,EAAE,MAAI,CAACG,YAFtB;AAGQ,UAAA,IAAI,EAAC;AAHb,UANF,CADF,CARF,CAFG,CAAP;AA0BH,OA5BM,CAAP;AA6BD;;;iCAEY;AAAA;;AACX,aACE,oBAAC,IAAD;AAAM,QAAA,QAAQ,EAAE,KAAKO,cAArB;AAAqC,QAAA,KAAK,EAAE,CAAC,CAAC,KAAKlD,KAAL,CAAWD;AAAzD,SACE,oBAAC,IAAD,CAAM,QAAN;AACE,QAAA,KAAK,EAAE,KAAKC,KAAL,CAAWF,MADpB;AAEE,QAAA,QAAQ,EAAE,kBAAAkB,KAAK;AAAA,iBAAI,MAAI,CAACD,QAAL,CAAc;AAAEjB,YAAAA,MAAM,EAAEkB,KAAK,CAACmC,MAAN,CAAaC;AAAvB,WAAd,CAAJ;AAAA;AAFjB,QADF,EAKE,oBAAC,OAAD;AAAS,QAAA,KAAK,MAAd;AAAe,QAAA,MAAM,EAAC,OAAtB;AAA8B,QAAA,OAAO,EAAE,KAAKpD,KAAL,CAAWD;AAAlD,QALF,EAME,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,gBAAhB;AAAiC,QAAA,OAAO,EAAE,KAAKC,KAAL,CAAWqB,OAArD;AAA8D,QAAA,aAAa,EAAC,MAA5E;AAAmF,QAAA,IAAI,EAAC,MAAxF;AAA+F,QAAA,OAAO;AAAtG,QANF,CADF;AAUD;;;6BAEQ;AACP,aACE,oBAAC,MAAD,QACE,oBAAC,SAAD,QACG,KAAKgC,cAAL,EADH,EAEE,oBAAC,MAAD;AAAQ,QAAA,EAAE,EAAC,IAAX;AAAgB,QAAA,SAAS,EAAC;AAA1B,oCAFF,EAKG,KAAKC,UAAL,EALH,EAME,oBAAC,MAAD;AAAQ,QAAA,EAAE,EAAC,IAAX;AAAgB,QAAA,SAAS,EAAC;AAA1B,6BANF,EASE,oBAAC,OAAD,OATF,EAUE,oBAAC,OAAD,CAAS,KAAT;AAAe,QAAA,IAAI,EAAC;AAApB,SACC,KAAKC,aAAL,EADD,CAVF,CADF,CADF;AAkBD;;;;;;iDA5Q4BhC,K;;;;;;AACrB5B,gBAAAA,e,GAAkB4B,KAAK,CAACiC,KAAN,CAAYJ,K;AAC9BhD,gBAAAA,Q,GAAWd,QAAQ,CAACK,eAAD,C;;uBACHS,QAAQ,CAACC,OAAT,CAAiBoD,UAAjB,GAA8B9C,IAA9B,E;;;AAAhBW,gBAAAA,O;;uBACalB,QAAQ,CAACC,OAAT,CAAiBK,OAAjB,GAA2BC,IAA3B,E;;;AAAba,gBAAAA,I;;uBACqBjC,OAAO,CAACc,OAAR,CAAgBqD,UAAhB,CAA2BpC,OAAO,CAAC,CAAD,CAAlC,EAAuCX,IAAvC,E;;;AAArBgD,gBAAAA,Y;;uBACmBvD,QAAQ,CAACC,OAAT,CAAiBuD,aAAjB,GAAiCjD,IAAjC,E;;;AAAnBkC,gBAAAA,U;kDACC;AAAEvB,kBAAAA,OAAO,EAAPA,OAAF;AAAWE,kBAAAA,IAAI,EAAJA,IAAX;AAAiB7B,kBAAAA,eAAe,EAAfA,eAAjB;AAAkCkD,kBAAAA,UAAU,EAAVA;AAAlC,iB;;;;;;;;;;;;;;;;;;;;;iDAG6BtB,K,EAAOvB,K;;;;;AAC3CA,gBAAAA,KAAK,CAACL,eAAN,GAAwB4B,KAAK,CAAC5B,eAA9B;AACAK,gBAAAA,KAAK,CAACJ,aAAN,GAAsB2B,KAAK,CAACD,OAAN,CAAc,CAAd,CAAtB;AACAtB,gBAAAA,KAAK,CAACH,UAAN,GAAmB0B,KAAK,CAACC,IAAN,CAAW,CAAX,CAAnB;;;;;;;;;;;;;;;;;;;EAtBoBjD,S;;AAyR1B,eAAemB,WAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Table, Popup, Button, Container, Form, Header, Comment, Message, Divider, Icon } from 'semantic-ui-react';\r\nimport { Link, Router } from '../routes';\r\nimport moment from 'moment';\r\nimport web3 from '../ethereum/web3';\r\nimport Question from '../ethereum/question';\r\nimport factory from '../ethereum/factory';\r\nimport Layout from '../components/Layout';\r\nimport Countdown from 'react-countdown-now';\r\n\r\nclass QuestionRow extends Component {\r\n    state = {\r\n      questionAddress: '',\r\n      questionState: '',\r\n      votingTime:'',\r\n      answer:'',\r\n      errorMessage: '',\r\n    }\r\n\r\n    static async getInitialProps(props) {\r\n      const questionAddress = props.query.value;\r\n      const question = Question(questionAddress);\r\n      const summary = await question.methods.getSummary().call();\r\n      const time = await question.methods.getTime().call();\r\n      const profileOwner = await factory.methods.getProfile(summary[5]).call();\r\n      const answerList = await question.methods.getAnswerList().call();\r\n      return { summary, time, questionAddress, answerList };\r\n    };\r\n\r\n    static async getDerivedStateFromProps(props, state) {\r\n      state.questionAddress = props.questionAddress;\r\n      state.questionState = props.summary[4];\r\n      state.votingTime = props.time[3];\r\n    }\r\n\r\n    handleClick = async () => {\r\n      if(this.state.questionState == 0) {\r\n        const accounts = await web3.eth.getAccounts();\r\n        const question = Question(this.state.questionAddress);\r\n        let _questionState = await question.methods.getQuestionState().send(\r\n          { from: accounts[0]}\r\n        );\r\n        // Set voting time inside smart contract as +1hr of now end time\r\n        let _votingTime = await question.methods.getTime().call();\r\n        console.log(_votingTime);\r\n        this.setState({questionState: _questionState, votingTime: _votingTime[3] });\r\n      }\r\n    };\r\n\r\n    handleReward = () => {\r\n      console.log(\"reward!\")\r\n    };\r\n\r\n    onSubmitAnswer = async () => {\r\n      event.preventDefault(); // prevent default submission of the form to the backend (the browser does that automatically)\r\n\r\n      try {\r\n          const accounts = await web3.eth.getAccounts();\r\n          // Create a new post\r\n          await factory.methods\r\n          .createAnswer(this.state.questionAddress, this.state.answer)\r\n          .send({\r\n              from: accounts[0]\r\n          });\r\n\r\n          Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n\r\n      } catch (err) {\r\n          this.setState({ errorMessage: err.message });\r\n      }\r\n\r\n      this.setState({ loading: false });\r\n    };\r\n\r\n    renderQuestion() {\r\n        const summary = this.props.summary;\r\n        const time = this.props.time;\r\n        var currentTime = (new Date).getTime();\r\n        var maxDuration =(parseFloat(summary[3]) / 60 / 60).toFixed(2).toString().toString();\r\n        var publishTime = moment.unix(time[0]).format('dddd, Do MMMM YYYY, h:mm:ss a');\r\n        var votingTime = moment.unix(this.state.votingTime).format('dddd, Do MMMM YYYY, h:mm:ss a');\r\n        var publishTimeMs = moment.unix(time[0]).valueOf();\r\n        var maxDurationMs = moment.unix(time[2]).valueOf();\r\n        var votingTimeMs = moment.unix(this.state.votingTime).valueOf();\r\n\r\n        let remainingTime = 0;\r\n        if (this.state.questionState == 0) {\r\n          remainingTime = publishTimeMs + maxDurationMs - currentTime;\r\n          if (remainingTime < 0) {\r\n              remainingTime = 0;\r\n          }\r\n        } else {\r\n          remainingTime = votingTimeMs + maxDurationMs - currentTime;\r\n          if (remainingTime < 0) {\r\n              remainingTime = 0;\r\n          }\r\n        }\r\n\r\n        return (\r\n          <React.Fragment>\r\n              <Table definition>\r\n                  <Table.Body>\r\n                    <Table.Row>\r\n                        <Table.Cell width={2}>Question Title</Table.Cell>\r\n                        <Table.Cell style={{fontSize: '20px', lineHeight: '1.5'}}>\r\n                            {summary[0]}\r\n                        </Table.Cell>\r\n                    </Table.Row>\r\n                      <Table.Row>\r\n                          <Table.Cell width={2}>Description</Table.Cell>\r\n                          <Table.Cell style={{fontSize: '20px', lineHeight: '1.5'}}>\r\n                              {summary[1]}\r\n                          </Table.Cell>\r\n                      </Table.Row>\r\n                      <Table.Row>\r\n                          <Table.Cell>Reward (ETH)</Table.Cell>\r\n                          <Table.Cell style={{fontSize: '20px'}}>{summary[2]}</Table.Cell>\r\n                      </Table.Row>\r\n                      <Table.Row>\r\n                          <Table.Cell>Publish Time</Table.Cell>\r\n                          <Table.Cell style={{fontSize: '20px'}}>{publishTime}</Table.Cell>\r\n                      </Table.Row>\r\n                      <Table.Row>\r\n                          <Table.Cell>Answering Duration (hours)</Table.Cell>\r\n                          <Table.Cell style={{fontSize: '20px'}}>\r\n                              <span style={{verticalAlign: 'middle', lineHeight: '33px'}}>\r\n                                  {maxDuration}\r\n                              </span>\r\n                              {this.state.questionState == 0 && remainingTime > 0\r\n                                  ? <Popup\r\n                                      trigger={\r\n                                          <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                  icon='clock'\r\n                                                  color=\"violet\"\r\n                                          />}\r\n                                      content={\r\n                                          <span>\r\n                                          <span>Remaining time - </span>\r\n                                          <Countdown date={Date.now() + remainingTime}>\r\n                                          </Countdown>\r\n                                      </span>}\r\n                                      position='bottom right'\r\n                                      inverted />\r\n                                  : <Popup\r\n                                      trigger={\r\n                                          <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                  icon='clock'\r\n                                                  color=\"red\"\r\n                                                  onClick={this.handleClick}\r\n                                          />\r\n                                      }\r\n                                      content={\"EXPIRED\"}\r\n                                      position='bottom right'\r\n                                      inverted />\r\n                              }\r\n                          </Table.Cell>\r\n                      </Table.Row>\r\n                      <Table.Row>\r\n                          <Table.Cell>Voting Duration (hours)</Table.Cell>\r\n                          <Table.Cell style={{fontSize: '20px'}}>\r\n                              <span style={{verticalAlign: 'middle', lineHeight: '33px'}}>\r\n                                  {maxDuration}\r\n                              </span>\r\n                              {this.state.questionState == 1 && remainingTime > 0\r\n                                  ? <Popup\r\n                                      trigger={\r\n                                          <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                  icon='clock'\r\n                                                  color=\"violet\"\r\n                                          />}\r\n                                      content={\r\n                                          <span>\r\n                                          <span>Remaining time - </span>\r\n                                          <Countdown date={Date.now() + remainingTime}>\r\n                                          </Countdown>\r\n                                      </span>}\r\n                                      position='bottom right'\r\n                                      inverted />\r\n                                  : this.state.questionState == 1\r\n                                  ? <Popup\r\n                                      trigger={\r\n                                          <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                  icon='clock'\r\n                                                  color=\"red\"\r\n                                                  onClick={this.handleReward}\r\n                                                    />\r\n                                      }\r\n                                      content={\"Reward\"}\r\n                                      position='bottom right'\r\n                                      inverted />\r\n                                  : this.state.questionState == 0\r\n                                  ? <Popup\r\n                                      trigger={\r\n                                          <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                  icon='clock'\r\n                                                  color=\"red\"\r\n                                                  disabled\r\n                                          />\r\n                                      }\r\n                                      position='bottom right'\r\n                                      inverted />\r\n                                  : <Popup\r\n                                      trigger={\r\n                                          <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                  icon='clock'\r\n                                                  color=\"red\"\r\n                                                  onClick={this.handleReward}\r\n                                                    />\r\n                                      }\r\n                                      content={\"Reward\"}\r\n                                      position='bottom right'\r\n                                      inverted />\r\n                            }\r\n                          </Table.Cell>\r\n                      </Table.Row>\r\n                  </Table.Body>\r\n              </Table>\r\n          </React.Fragment>\r\n        );\r\n    }\r\n\r\n    renderAnswers() {\r\n      const answers = this.props.answerList;\r\n\r\n      return answers.map((answer, index) => {\r\n          var answeredTime = moment.unix(answer[5]).format('Do MMMM YYYY, h:mm a');\r\n          return <Comment key={index}>\r\n              <Comment.Avatar src='https://react.semantic-ui.com/images/avatar/small/matt.jpg' />\r\n              <Comment.Content style={{width:\"1000px\"}}>\r\n                <Comment.Author as='a'>{answer[1]}</Comment.Author>\r\n                <Comment.Metadata>\r\n                  <div>{answeredTime}</div>\r\n                  <br/>\r\n                  <div><Icon name='star' />5 Faves</div>\r\n                </Comment.Metadata>\r\n                <Comment.Text>{answer[0]}</Comment.Text>\r\n                <Comment.Actions>\r\n                  <Comment.Action>\r\n                    <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                            icon='thumbs down'\r\n                            onClick={this.handleReward}\r\n                            size='tiny'\r\n                    />\r\n                    <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                            icon='thumbs up'\r\n                            onClick={this.handleReward}\r\n                            size='tiny'\r\n                    />\r\n                      </Comment.Action>\r\n                </Comment.Actions>\r\n              </Comment.Content>\r\n            </Comment>\r\n      });\r\n    }\r\n\r\n    renderForm() {\r\n      return(\r\n        <Form onSubmit={this.onSubmitAnswer} error={!!this.state.errorMessage}>\r\n          <Form.TextArea\r\n            value={this.state.answer}\r\n            onChange={event => this.setState({ answer: event.target.value })}\r\n          />\r\n          <Message error header=\"Oops!\" content={this.state.errorMessage} />\r\n          <Button content='Submit Answers' loading={this.state.loading} labelPosition='left' icon='edit' primary />\r\n        </Form>\r\n      );\r\n    }\r\n\r\n    render() {\r\n      return(\r\n        <Layout>\r\n          <Container>\r\n            {this.renderQuestion()}\r\n            <Header as='h2' textAlign='center'>\r\n                Submit Your Answers Here\r\n            </Header>\r\n            {this.renderForm()}\r\n            <Header as='h2' textAlign='center'>\r\n                Answers Submitted\r\n            </Header>\r\n            <Divider />\r\n            <Comment.Group size='large'>\r\n            {this.renderAnswers()}\r\n            </Comment.Group>\r\n          </Container>\r\n        </Layout>\r\n      )\r\n    }\r\n\r\n}\r\n\r\nexport default QuestionRow;\r\n"]},"metadata":{},"sourceType":"module"}