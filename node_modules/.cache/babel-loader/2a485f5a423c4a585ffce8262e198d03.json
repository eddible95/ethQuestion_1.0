{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React, { Component } from 'react';\nimport { Button, Header, Table, Statistic, Rating, Grid, Message, Divider, Container } from 'semantic-ui-react';\nimport factory from '../ethereum/factory';\nimport Question from '../ethereum/question';\nimport Layout from '../components/Layout';\nimport { Link, Router } from '../routes';\nimport QuestionRow from '../components/QuestionRow';\nimport web3 from '../ethereum/web3';\n\nvar HomePage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(HomePage, _Component);\n\n  function HomePage() {\n    _classCallCheck(this, HomePage);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(HomePage).apply(this, arguments));\n  }\n\n  _createClass(HomePage, [{\n    key: \"renderQuestions\",\n    value: function renderQuestions() {\n      var questionsDeployed = this.props.summaries;\n      return questionsDeployed.map(function (summary, index) {\n        return React.createElement(QuestionRow, {\n          key: index,\n          summary: summary\n        });\n      });\n    }\n  }, {\n    key: \"renderRentsDesktop\",\n    value: function renderRentsDesktop() {\n      var _this = this;\n\n      var questionsDeployed = this.props.summaries;\n      var rating = 4;\n      return questionsDeployed.map(function (summary, index) {\n        console.log(_this.props.deployedQuestions[index]);\n        return React.createElement(Table.Row, {\n          key: index\n        }, React.createElement(Table.Cell, {\n          textAlign: \"center\",\n          width: 2\n        }, React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, React.createElement(Rating, {\n          icon: \"star\",\n          size: \"huge\",\n          rating: rating,\n          maxRating: 5,\n          disabled: true\n        }))), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"votes\")))), React.createElement(Table.Cell, {\n          textAlign: \"center\",\n          width: 2\n        }, React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"1\")), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"answers\")))), React.createElement(Table.Cell, {\n          textAlign: \"center\",\n          width: 2\n        }, React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, summary[2])), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"ethers\")))), React.createElement(Table.Cell, {\n          textAlign: \"left\"\n        }, React.createElement(Grid.Row, {\n          textAlign: \"left\"\n        }, React.createElement(\"span\", {\n          style: {\n            fontSize: 18,\n            color: '#6A737C',\n            cursor: 'pointer'\n          },\n          onClick: function onClick() {\n            return Router.pushRoute(\"/questions/\".concat(_this.props.questionsDeployed[index]));\n          }\n        }, React.createElement(\"a\", null, summary[0])))));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Layout, null, React.createElement(\"div\", null, React.createElement(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"Questions Posted\")), React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(Container, null, React.createElement(Table, null, React.createElement(Table.Body, null, this.renderRentsDesktop()))), React.createElement(Divider, {\n        hidden: true\n      }));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var accounts, deployedQuestions, deployedQuestionsCount, questions, summaries, i;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context.sent;\n                _context.next = 5;\n                return factory.methods.getDeployedQuestions().call();\n\n              case 5:\n                deployedQuestions = _context.sent;\n                deployedQuestionsCount = deployedQuestions.length; // Stores all Question contracts\n\n                questions = [];\n                summaries = [];\n                i = 0;\n\n              case 10:\n                if (!(i < deployedQuestionsCount)) {\n                  _context.next = 21;\n                  break;\n                }\n\n                questions[i] = Question(deployedQuestions[i]);\n                _context.next = 14;\n                return questions[i].methods.getSummary().call();\n\n              case 14:\n                summaries[i] = _context.sent;\n                _context.next = 17;\n                return questions[i].methods.start().call();\n\n              case 17:\n                summaries[i][6] = _context.sent;\n\n              case 18:\n                i++;\n                _context.next = 10;\n                break;\n\n              case 21:\n                return _context.abrupt(\"return\", {\n                  summaries: summaries,\n                  deployedQuestions: deployedQuestions,\n                  accounts: accounts\n                });\n\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps() {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return HomePage;\n}(Component);\n\nexport default HomePage;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\index.js"],"names":["React","Component","Button","Header","Table","Statistic","Rating","Grid","Message","Divider","Container","factory","Question","Layout","Link","Router","QuestionRow","web3","HomePage","questionsDeployed","props","summaries","map","summary","index","rating","console","log","deployedQuestions","fontSize","color","cursor","pushRoute","renderRentsDesktop","eth","getAccounts","accounts","methods","getDeployedQuestions","call","deployedQuestionsCount","length","questions","i","getSummary","start"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Header, Table, Statistic, Rating, Grid, Message, Divider, Container } from 'semantic-ui-react';\r\nimport factory from '../ethereum/factory';\r\nimport Question from '../ethereum/question';\r\nimport Layout from '../components/Layout';\r\nimport {Link, Router} from '../routes'\r\nimport QuestionRow from '../components/QuestionRow';\r\nimport web3 from '../ethereum/web3'\r\n\r\nclass HomePage extends Component {\r\n\r\n    static async getInitialProps () {\r\n        const accounts = await web3.eth.getAccounts();\r\n        // Retrieve an array of all our deployed questions addresses.\r\n        const deployedQuestions = await factory.methods.getDeployedQuestions().call();\r\n        const deployedQuestionsCount = deployedQuestions.length;\r\n\r\n        // Stores all Question contracts\r\n        let questions = [];\r\n        let summaries = [];\r\n        for(let i=0; i<deployedQuestionsCount; i++) {\r\n          questions[i] = Question(deployedQuestions[i]);\r\n          summaries[i] = await questions[i].methods.getSummary().call();\r\n          summaries[i][6] = await questions[i].methods.start().call();\r\n        }\r\n\r\n        return { summaries, deployedQuestions, accounts };\r\n    }\r\n\r\n    renderQuestions(){\r\n        const questionsDeployed = this.props.summaries;\r\n        return questionsDeployed.map((summary, index) => {\r\n            return <QuestionRow\r\n                key={index}\r\n                summary={summary}\r\n            />;\r\n        });\r\n    }\r\n\r\n    renderRentsDesktop() {\r\n        const questionsDeployed = this.props.summaries;\r\n        const rating = 4;\r\n        return questionsDeployed.map((summary, index) => {\r\n            console.log(this.props.deployedQuestions[index]);\r\n            return <Table.Row key={index}>\r\n                <Table.Cell textAlign='center' width={2}>\r\n                    <Statistic size='mini' color='red'>\r\n                        <Statistic.Value><span\r\n                            style={{fontSize: 15, color: '#6A737C'}}><Rating icon='star' size='huge'\r\n                                                                             rating={rating}\r\n                                                                             maxRating={5} disabled />\r\n                                        </span></Statistic.Value>\r\n                        <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>votes</span></Statistic.Label>\r\n                    </Statistic>\r\n                </Table.Cell>\r\n                <Table.Cell textAlign='center' width={2}>\r\n                    <Statistic size='mini' color='red'>\r\n                        <Statistic.Value><span style={{fontSize: 15, color: '#6A737C'}}>1</span></Statistic.Value>\r\n                        <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>answers</span></Statistic.Label>\r\n                    </Statistic>\r\n                </Table.Cell>\r\n                <Table.Cell textAlign='center' width={2}>\r\n                    <Statistic size='mini' color='red'>\r\n                        <Statistic.Value><span style={{fontSize: 15, color: '#6A737C'}}>{summary[2]}</span></Statistic.Value>\r\n                        <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>ethers</span></Statistic.Label>\r\n                    </Statistic>\r\n                </Table.Cell>\r\n                <Table.Cell textAlign='left'>\r\n                    <Grid.Row textAlign='left'>\r\n                        <span style={{fontSize: 18, color: '#6A737C', cursor: 'pointer'}} onClick={() => Router.pushRoute(`/questions/${this.props.questionsDeployed[index]}`)}><a>{summary[0]}</a></span></Grid.Row>\r\n                </Table.Cell>\r\n            </Table.Row>\r\n      });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Layout>\r\n                <div>\r\n                    <Header as='h2' textAlign='center'>\r\n                        Questions Posted\r\n                    </Header>\r\n                </div>\r\n                <Divider hidden/>\r\n                <Container>\r\n                  <Table>\r\n                    <Table.Body>\r\n                      {this.renderRentsDesktop()}\r\n                    </Table.Body>\r\n                  </Table>\r\n                </Container>\r\n                <Divider hidden/>\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}