{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { Container, Segment, Header, Divider, Button, Popup, Form, Input, Icon, Dropdown, Table, Modal, Loader, Message, Transition, Grid } from \"semantic-ui-react\";\nimport Layout from '../components/Layout';\nimport LoadingModal from '../components/LoadingModal';\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport TimeOutModal from '../components/TimeOutModal';\nimport { Router } from '../routes';\nimport { logging, checkRewardField } from '../utils/functions';\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\nimport Profile from '../ethereum/profile';\nimport Question from '../ethereum/question';\nimport feedback from '../ethereum/feedback';\nimport EthQuestionToken from '../ethereum/token';\nimport EthQuestionTokenSale from '../ethereum/tokenSale';\nimport credentials from '../ethereum/credentials';\nimport { exportQuestion, exportComments } from '../utils/pdf';\nimport cookies from 'next-cookies';\n\nvar AdminPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AdminPage, _Component);\n\n  function AdminPage(props) {\n    var _this;\n\n    _classCallCheck(this, AdminPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AdminPage).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"export\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var questionNumber, question, summary, answerList;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(_this.state.questionNumber != null)) {\n                _context.next = 11;\n                break;\n              }\n\n              // Retrieve all the data of selected question\n              questionNumber = Number(_this.state.questionNumber) - 1;\n              question = Question(_this.state.deployedQuestions[questionNumber]);\n              _context.next = 5;\n              return question.methods.getSummary().call();\n\n            case 5:\n              summary = _context.sent;\n              _context.next = 8;\n              return question.methods.getAnswerList().call();\n\n            case 8:\n              answerList = _context.sent;\n              _context.next = 11;\n              return exportQuestion(summary, answerList);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"exportFeedback\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var comments;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return feedback.methods.getComments().call();\n\n            case 2:\n              comments = _context2.sent;\n              _context2.next = 5;\n              return exportComments(comments);\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"getUserTableData\", function () {\n      return _this.state.ethWalletEmailAddressBinding.map(function (item, index) {\n        return React.createElement(Table.Row, {\n          key: index\n        }, React.createElement(Table.Cell, null, item.ethWallet), React.createElement(Table.Cell, null, item.emailAddress), React.createElement(Table.Cell, null, item.status ? \"Blacklisted\" : \"Active\"), React.createElement(Table.Cell, null, item.status ? React.createElement(Button, {\n          onClick: function onClick() {\n            return _this.unblacklist(item.emailAddress);\n          },\n          color: \"green\",\n          size: \"mini\",\n          icon: true\n        }, React.createElement(Icon, {\n          name: \"add user\"\n        })) : React.createElement(Button, {\n          onClick: function onClick() {\n            return _this.blacklist(item.emailAddress);\n          },\n          color: \"red\",\n          size: \"mini\",\n          icon: true\n        }, React.createElement(Icon, {\n          name: \"remove user\"\n        }))), React.createElement(Table.Cell, null, React.createElement(Button, {\n          onClick: function onClick() {\n            return _this.dispense(item.ethWallet);\n          },\n          color: \"green\",\n          size: \"mini\",\n          icon: true\n        }, React.createElement(Icon, {\n          name: \"ethereum\"\n        }))));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"blacklist\",\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(emailAddress) {\n        var account;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this.setState({\n                  loading: true,\n                  errorMessage: ''\n                });\n\n                _context3.prev = 1;\n                account = _this.state.account;\n                _context3.next = 5;\n                return credentials.methods.blacklistEmail(emailAddress).send({\n                  from: account,\n                  gasPrice: '0'\n                });\n\n              case 5:\n                Router.pushRoute('/admin'); // Automatic redirect the user.\n\n                _context3.next = 13;\n                break;\n\n              case 8:\n                _context3.prev = 8;\n                _context3.t0 = _context3[\"catch\"](1);\n\n                if (_context3.t0.message == \"Returned error: authentication needed: password or unlock\") {\n                  _this.setState({\n                    timeout: true\n                  });\n                }\n\n                _this.setState({\n                  errorMessage: _context3.t0.message\n                });\n\n                _this.setState({\n                  error: true\n                });\n\n              case 13:\n                _this.setState({\n                  loading: false\n                });\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[1, 8]]);\n      }));\n\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"unblacklist\",\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(emailAddress) {\n        var account;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _this.setState({\n                  loading: true,\n                  errorMessage: ''\n                });\n\n                _context4.prev = 1;\n                account = _this.state.account;\n                _context4.next = 5;\n                return credentials.methods.unBlacklistEmail(emailAddress).send({\n                  from: account,\n                  gasPrice: '0'\n                });\n\n              case 5:\n                _context4.next = 12;\n                break;\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](1);\n\n                if (_context4.t0.message == \"Returned error: authentication needed: password or unlock\") {\n                  _this.setState({\n                    timeout: true\n                  });\n                }\n\n                _this.setState({\n                  errorMessage: _context4.t0.message\n                });\n\n                _this.setState({\n                  error: true\n                });\n\n              case 12:\n                _this.setState({\n                  loading: false\n                });\n\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[1, 7]]);\n      }));\n\n      return function (_x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"dispense\",\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(ethWallet) {\n        var account, profileAddress, profile, logTransaction;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _this.setState({\n                  loading: true,\n                  errorMessage: ''\n                });\n\n                _context5.prev = 1;\n                account = _this.state.account;\n                _context5.next = 5;\n                return EthQuestionToken.methods.transfer(ethWallet, 10e4).send({\n                  from: account,\n                  gasPrice: '0'\n                });\n\n              case 5:\n                _context5.next = 7;\n                return factory.methods.getProfile(ethWallet).call();\n\n              case 7:\n                profileAddress = _context5.sent;\n                profile = Profile(profileAddress);\n                logTransaction = logging(\"Awarded 10 EQT(s) for first time user\");\n                _context5.next = 12;\n                return profile.methods.logTransaction(logTransaction).send({\n                  from: account,\n                  gasPrice: '0'\n                });\n\n              case 12:\n                _context5.next = 19;\n                break;\n\n              case 14:\n                _context5.prev = 14;\n                _context5.t0 = _context5[\"catch\"](1);\n\n                if (_context5.t0.message == \"Returned error: authentication needed: password or unlock\") {\n                  _this.setState({\n                    timeout: true\n                  });\n                }\n\n                _this.setState({\n                  errorMessage: _context5.t0.message\n                });\n\n                _this.setState({\n                  error: true\n                });\n\n              case 19:\n                _this.setState({\n                  loading: false\n                });\n\n              case 20:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, null, [[1, 14]]);\n      }));\n\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"getQuestionTableData\", function () {\n      return _this.state.questionAddressTitleBinding.map(function (item, index) {\n        return React.createElement(Table.Row, {\n          key: index\n        }, React.createElement(Table.Cell, null, item.questionAddress), React.createElement(Table.Cell, null, item.title), React.createElement(Table.Cell, null, item.flagged ? \"Flagged\" : \"Active\"), React.createElement(Table.Cell, null, item.flagged ? React.createElement(Button, {\n          onClick: function onClick() {\n            return _this.undoDeleteQuestion(item.questionAddress);\n          },\n          color: \"green\",\n          size: \"mini\",\n          icon: true\n        }, React.createElement(Icon, {\n          name: \"undo\"\n        })) : React.createElement(Button, {\n          onClick: function onClick() {\n            return _this.deleteQuestion(item.questionAddress);\n          },\n          color: \"red\",\n          size: \"mini\",\n          icon: true\n        }, React.createElement(Icon, {\n          name: \"flag\"\n        }))));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"deleteQuestion\",\n    /*#__PURE__*/\n    function () {\n      var _ref6 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(questionAddress, title) {\n        var account, logTransaction;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _this.setState({\n                  loading: true,\n                  errorMessage: ''\n                });\n\n                _context6.prev = 1;\n                account = _this.state.account;\n                logTransaction = logging(\"Deleted Question Titled: \" + title);\n                _context6.next = 6;\n                return factory.methods.deleteQuestion(questionAddress, logTransaction).send({\n                  from: account,\n                  gasPrice: '0'\n                });\n\n              case 6:\n                Router.pushRoute('/admin'); // Automatic redirect the user.\n\n                _context6.next = 14;\n                break;\n\n              case 9:\n                _context6.prev = 9;\n                _context6.t0 = _context6[\"catch\"](1);\n\n                if (_context6.t0.message == \"Returned error: authentication needed: password or unlock\") {\n                  _this.setState({\n                    timeout: true\n                  });\n                }\n\n                _this.setState({\n                  errorMessage: _context6.t0.message\n                });\n\n                _this.setState({\n                  error: true\n                });\n\n              case 14:\n                _this.setState({\n                  loading: false\n                });\n\n              case 15:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, null, [[1, 9]]);\n      }));\n\n      return function (_x4, _x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"undoDeleteQuestion\",\n    /*#__PURE__*/\n    function () {\n      var _ref7 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(questionAddress, title) {\n        var account, logTransaction;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _this.setState({\n                  loading: true,\n                  errorMessage: ''\n                });\n\n                _context7.prev = 1;\n                account = _this.state.account;\n                logTransaction = logging(\"Undo Deletion Of Question Titled: \" + title);\n                _context7.next = 6;\n                return factory.methods.undoDeleteQuestion(questionAddress, logTransaction).send({\n                  from: account,\n                  gasPrice: '0'\n                });\n\n              case 6:\n                Router.pushRoute('/admin'); // Automatic redirect the user.\n\n                _context7.next = 14;\n                break;\n\n              case 9:\n                _context7.prev = 9;\n                _context7.t0 = _context7[\"catch\"](1);\n\n                if (_context7.t0.message == \"Returned error: authentication needed: password or unlock\") {\n                  _this.setState({\n                    timeout: true\n                  });\n                }\n\n                _this.setState({\n                  errorMessage: _context7.t0.message\n                });\n\n                _this.setState({\n                  error: true\n                });\n\n              case 14:\n                _this.setState({\n                  loading: false\n                });\n\n              case 15:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, null, [[1, 9]]);\n      }));\n\n      return function (_x6, _x7) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"topUp\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee8() {\n      var account, profileAddress, profile, logTransaction;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              });\n\n              if (!checkRewardField(_this.state.topUpAmount)) {\n                _context8.next = 26;\n                break;\n              }\n\n              _context8.prev = 2;\n              account = _this.state.account;\n              _context8.next = 6;\n              return web3.eth.personal.unlockAccount(account, \"password\", 600);\n\n            case 6:\n              _context8.next = 8;\n              return EthQuestionToken.methods.transfer(EthQuestionTokenSale._address, _this.state.topUpAmount * 1e4).send({\n                from: account,\n                gasPrice: '0'\n              });\n\n            case 8:\n              _context8.next = 10;\n              return factory.methods.getProfile(account).call();\n\n            case 10:\n              profileAddress = _context8.sent;\n              profile = Profile(profileAddress);\n              logTransaction = logging(\"Added \" + _this.state.topUpAmount + \" EQT(s) for exchange\");\n              _context8.next = 15;\n              return profile.methods.logTransaction(logTransaction).send({\n                from: account,\n                gasPrice: '0'\n              });\n\n            case 15:\n              Router.pushRoute('/admin'); // Automatic redirect the user.\n\n              _context8.next = 24;\n              break;\n\n            case 18:\n              _context8.prev = 18;\n              _context8.t0 = _context8[\"catch\"](2);\n\n              if (_context8.t0.message == \"Returned error: authentication needed: password or unlock\") {\n                _this.setState({\n                  timeout: true\n                });\n              }\n\n              _this.setState({\n                errorMessage: _context8.t0.message\n              });\n\n              _this.setState({\n                error: true\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 24:\n              _context8.next = 29;\n              break;\n\n            case 26:\n              _this.setState({\n                errorMessage: \"Required Field(s) Empty or Invalid Input\"\n              });\n\n              _this.setState({\n                error: true\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 29:\n              _this.setState({\n                loading: false\n              });\n\n            case 30:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, null, [[2, 18]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"collectEther\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee9() {\n      var account, profileAddress, logTransaction;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              });\n\n              _context9.prev = 1;\n              account = _this.state.account;\n              _context9.next = 5;\n              return factory.methods.getProfile(account).call();\n\n            case 5:\n              profileAddress = _context9.sent;\n              logTransaction = logging(\"Collect Ether from exchange of EQT(s)\");\n              _context9.next = 9;\n              return EthQuestionTokenSale.methods.endSale(EthQuestionToken._address, profileAddress, logTransaction).send({\n                from: account,\n                gasPrice: '0'\n              });\n\n            case 9:\n              Router.pushRoute('/admin'); // Automatic redirect the user.\n\n              _context9.next = 18;\n              break;\n\n            case 12:\n              _context9.prev = 12;\n              _context9.t0 = _context9[\"catch\"](1);\n\n              if (_context9.t0.message == \"Returned error: authentication needed: password or unlock\") {\n                _this.setState({\n                  timeout: true\n                });\n              }\n\n              _this.setState({\n                errorMessage: _context9.t0.message\n              });\n\n              _this.setState({\n                error: true\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 18:\n              _this.setState({\n                loading: false\n              });\n\n            case 19:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, null, [[1, 12]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"changeTokenPrice\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee10() {\n      var account, profileAddress, logTransaction;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              });\n\n              if (!checkRewardField(_this.state.newTokenPrice)) {\n                _context10.next = 21;\n                break;\n              }\n\n              _context10.prev = 2;\n              account = _this.state.account;\n              _context10.next = 6;\n              return factory.methods.getProfile(account).call();\n\n            case 6:\n              profileAddress = _context10.sent;\n              logTransaction = logging(\"Changed Token Price to \" + _this.state.newTokenPrice + \" wei per EQT.\");\n              _context10.next = 10;\n              return EthQuestionTokenSale.methods.changeTokenPrice(_this.state.newTokenPrice, profileAddress, logTransaction).send({\n                from: account,\n                gasPrice: '0'\n              });\n\n            case 10:\n              Router.pushRoute('/admin'); // Automatic redirect the user.\n\n              _context10.next = 19;\n              break;\n\n            case 13:\n              _context10.prev = 13;\n              _context10.t0 = _context10[\"catch\"](2);\n\n              if (_context10.t0.message == \"Returned error: authentication needed: password or unlock\") {\n                _this.setState({\n                  timeout: true\n                });\n              }\n\n              _this.setState({\n                errorMessage: _context10.t0.message\n              });\n\n              _this.setState({\n                error: true\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 19:\n              _context10.next = 24;\n              break;\n\n            case 21:\n              _this.setState({\n                errorMessage: \"Required Field(s) Empty or Invalid Input\"\n              });\n\n              _this.setState({\n                error: true\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 24:\n              _this.setState({\n                loading: false\n              });\n\n            case 25:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, null, [[2, 13]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleUserTableVisibility\", function () {\n      return _this.setState(function (prevState) {\n        return {\n          userVisible: !prevState.userVisible\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleQuestionTableVisibility\", function () {\n      return _this.setState(function (prevState) {\n        return {\n          questionVisible: !prevState.questionVisible\n        };\n      });\n    });\n\n    _this.state = {\n      account: null,\n      error: false,\n      loading: false,\n      loadingResource: true,\n      timeout: false,\n      deployedQuestionsCount: null,\n      deployedQuestions: [],\n      ethWalletEmailAddressBinding: [],\n      questionAddressTitleBinding: [],\n      tokenPrice: null,\n      tokenBalance: null,\n      etherBalance: null,\n      errorMessage: '',\n      accountType: null,\n      userVisible: false,\n      questionOptions: [],\n      questionNumber: null,\n      questionVisible: false,\n      newTokenPrice: '',\n      topUpAmount: ''\n    };\n    return _this;\n  }\n\n  _createClass(AdminPage, [{\n    key: \"componentDidUpdate\",\n    value: function () {\n      var _componentDidUpdate = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee11(prevProps) {\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                if (this.props != prevProps) {\n                  this.fetchData();\n                }\n\n              case 1:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function componentDidUpdate(_x8) {\n        return _componentDidUpdate.apply(this, arguments);\n      }\n\n      return componentDidUpdate;\n    }()\n  }, {\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee12() {\n        var login, account, profileAddress, profile, accountType, questionOptions, i, question, summary;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                if (!(typeof web3 === 'undefined')) {\n                  _context12.next = 3;\n                  break;\n                }\n\n                this.setState({\n                  loading: false\n                });\n                return _context12.abrupt(\"return\");\n\n              case 3:\n                login = false;\n\n                if (!this.props.isLogin) {\n                  _context12.next = 33;\n                  break;\n                }\n\n                login = true; // Get Account Type\n\n                account = this.props.account;\n                _context12.next = 9;\n                return factory.methods.getProfile(account).call();\n\n              case 9:\n                profileAddress = _context12.sent;\n                profile = Profile(profileAddress);\n                _context12.next = 13;\n                return profile.methods.getAccountType().call();\n\n              case 13:\n                accountType = _context12.sent;\n                accountType == 0 ? accountType = \"Admin\" : accountType = \"User\";\n\n                if (accountType != \"Admin\") {\n                  login = false;\n                }\n\n                _context12.next = 18;\n                return this.fetchData();\n\n              case 18:\n                // Get Question Deployed\n                questionOptions = [];\n                i = 0;\n\n              case 20:\n                if (!(i < this.state.deployedQuestionsCount)) {\n                  _context12.next = 29;\n                  break;\n                }\n\n                question = Question(this.state.deployedQuestions[i]);\n                _context12.next = 24;\n                return question.methods.getSummary().call();\n\n              case 24:\n                summary = _context12.sent;\n                questionOptions.push({\n                  key: i + 1,\n                  text: summary[0],\n                  value: i + 1\n                });\n\n              case 26:\n                i++;\n                _context12.next = 20;\n                break;\n\n              case 29:\n                this.setState({\n                  questionOptions: questionOptions\n                });\n                this.setState({\n                  account: account\n                });\n                this.setState({\n                  login: login\n                });\n                this.setState({\n                  accountType: accountType\n                });\n\n              case 33:\n                this.setState({\n                  loadingResource: false\n                });\n\n              case 34:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"fetchData\",\n    value: function () {\n      var _fetchData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee13() {\n        var deployedQuestions, deployedQuestionsCount, questionAddressTitleBinding, i, question, summary, ethWallets, ethWalletEmailAddressBinding, _i, emailAddress, status, tokenPrice, tokenBalance, etherBalance;\n\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return factory.methods.getDeployedQuestions().call();\n\n              case 2:\n                deployedQuestions = _context13.sent;\n                deployedQuestionsCount = deployedQuestions.length;\n                questionAddressTitleBinding = [];\n                i = 0;\n\n              case 6:\n                if (!(i < deployedQuestionsCount)) {\n                  _context13.next = 15;\n                  break;\n                }\n\n                question = Question(deployedQuestions[i]);\n                _context13.next = 10;\n                return question.methods.getSummary().call();\n\n              case 10:\n                summary = _context13.sent;\n                questionAddressTitleBinding.push({\n                  questionAddress: deployedQuestions[i],\n                  title: summary[0],\n                  flagged: summary[9]\n                });\n\n              case 12:\n                i++;\n                _context13.next = 6;\n                break;\n\n              case 15:\n                _context13.next = 17;\n                return factory.methods.getEthWallets().call();\n\n              case 17:\n                ethWallets = _context13.sent;\n                ethWalletEmailAddressBinding = [];\n                _i = 0;\n\n              case 20:\n                if (!(_i < ethWallets.length)) {\n                  _context13.next = 31;\n                  break;\n                }\n\n                _context13.next = 23;\n                return credentials.methods.getBinding(ethWallets[_i]).call();\n\n              case 23:\n                emailAddress = _context13.sent;\n                _context13.next = 26;\n                return credentials.methods.emailNotBlackList(emailAddress).call();\n\n              case 26:\n                status = _context13.sent;\n                ethWalletEmailAddressBinding.push({\n                  ethWallet: ethWallets[_i],\n                  emailAddress: emailAddress,\n                  status: status\n                });\n\n              case 28:\n                _i++;\n                _context13.next = 20;\n                break;\n\n              case 31:\n                _context13.next = 33;\n                return EthQuestionTokenSale.methods.getTokenPrice().call();\n\n              case 33:\n                tokenPrice = _context13.sent;\n                _context13.next = 36;\n                return EthQuestionToken.methods.balanceOf(EthQuestionTokenSale._address).call();\n\n              case 36:\n                tokenBalance = _context13.sent;\n                _context13.next = 39;\n                return EthQuestionTokenSale.methods.getEtherBalance().call();\n\n              case 39:\n                etherBalance = _context13.sent;\n                this.setState({\n                  deployedQuestionsCount: deployedQuestionsCount,\n                  deployedQuestions: deployedQuestions,\n                  ethWalletEmailAddressBinding: ethWalletEmailAddressBinding,\n                  questionAddressTitleBinding: questionAddressTitleBinding,\n                  tokenPrice: tokenPrice,\n                  tokenBalance: tokenBalance,\n                  etherBalance: etherBalance\n                });\n\n              case 41:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function fetchData() {\n        return _fetchData.apply(this, arguments);\n      }\n\n      return fetchData;\n    }()\n  }, {\n    key: \"renderExport\",\n    value: function renderExport() {\n      var _this2 = this;\n\n      return React.createElement(React.Fragment, null, React.createElement(Segment, {\n        raised: true,\n        textAlign: \"left\"\n      }, React.createElement(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"Exporting Questions & Answers As PDF\")), React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, \"Select the question to export the question and it's corresponding answers\"), React.createElement(Dropdown, {\n        clearable: true,\n        options: this.state.questionOptions,\n        selection: true,\n        placeholder: \"Select the question to export\",\n        value: this.state.questionNumber,\n        onChange: function onChange(e, _ref11) {\n          var value = _ref11.value;\n          return _this2.setState({\n            questionNumber: value\n          });\n        }\n      }), React.createElement(Button, {\n        icon: true,\n        labelPosition: \"left\",\n        color: \"red\",\n        onClick: this.export,\n        style: {\n          left: \"20px\"\n        }\n      }, React.createElement(Icon, {\n        name: \"download\"\n      }), \"Export As PDF\"), React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(Segment, {\n        raised: true,\n        textAlign: \"left\"\n      }, React.createElement(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"Exporting Feedback\")), React.createElement(Button, {\n        icon: true,\n        labelPosition: \"left\",\n        color: \"red\",\n        onClick: this.exportFeedback,\n        style: {\n          left: \"20px\"\n        }\n      }, React.createElement(Icon, {\n        name: \"download\"\n      }), \"Export As PDF\"));\n    }\n  }, {\n    key: \"renderEQTSettings\",\n    value: function renderEQTSettings() {\n      var _this3 = this;\n\n      return React.createElement(React.Fragment, null, React.createElement(Segment, {\n        raised: true,\n        textAlign: \"center\"\n      }, React.createElement(\"b\", {\n        style: {\n          fontSize: \"20px\"\n        }\n      }, \"Users Management\"), React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          icon: this.state.userVisible ? \"minus\" : \"plus\",\n          onClick: this.toggleUserTableVisibility,\n          floated: \"right\",\n          size: \"mini\"\n        }),\n        content: \"Click to expand/close\",\n        inverted: true\n      })), React.createElement(Segment, {\n        raised: true,\n        textAlign: \"left\"\n      }, React.createElement(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"EthQuestionTokens (EQT) Exchange Settings\")), React.createElement(Grid, {\n        container: true\n      }, React.createElement(Grid.Row, null, React.createElement(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, \"Balance Available For Exchange: \", React.createElement(\"b\", null, this.state.tokenBalance * 1e-4, \" EQT(s)\"))), React.createElement(Grid.Row, null, React.createElement(Form, {\n        error: !!this.state.errorMessage,\n        style: {\n          marginTop: '10px'\n        }\n      }, React.createElement(Form.Field, {\n        required: true\n      }, React.createElement(\"label\", null, \"Top Up Amount\"), React.createElement(Input, {\n        label: \"EQT(s)\",\n        labelPosition: \"right\",\n        placeholder: \"Enter EQT Value\",\n        value: this.state.topUpAmount,\n        onChange: function onChange(event) {\n          return _this3.setState({\n            topUpAmount: event.target.value\n          });\n        }\n      })))), React.createElement(Grid.Row, null, React.createElement(Button, {\n        icon: true,\n        labelPosition: \"left\",\n        color: \"red\",\n        onClick: this.topUp\n      }, React.createElement(Icon, {\n        name: \"dollar sign\"\n      }), \"Top Up Balance\")), React.createElement(Grid.Row, null, React.createElement(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, \"Ether Collected From Exchange: \", React.createElement(\"b\", null, this.state.etherBalance * 1e-18, \" Ether(s)\"))), React.createElement(Grid.Row, null, React.createElement(Button, {\n        icon: true,\n        labelPosition: \"left\",\n        color: \"red\",\n        onClick: this.collectEther\n      }, React.createElement(Icon, {\n        name: \"ethereum\"\n      }), \"Collect Ether\")), React.createElement(Grid.Row, null, React.createElement(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, \"Current Token Price: \", React.createElement(\"b\", null, this.state.tokenPrice * 1e-18, \" Ether(s)\"))), React.createElement(Grid.Row, null, React.createElement(Form, {\n        error: !!this.state.errorMessage,\n        style: {\n          marginTop: '10px'\n        }\n      }, React.createElement(Form.Field, {\n        required: true\n      }, React.createElement(\"label\", null, \"Token Price\"), React.createElement(Input, {\n        label: \"Wei\",\n        labelPosition: \"right\",\n        placeholder: \"New Token Price\",\n        value: this.state.newTokenPrice,\n        onChange: function onChange(event) {\n          return _this3.setState({\n            newTokenPrice: event.target.value\n          });\n        }\n      })))), React.createElement(Grid.Row, null, React.createElement(Button, {\n        icon: true,\n        labelPosition: \"left\",\n        color: \"red\",\n        onClick: this.changeTokenPrice\n      }, React.createElement(Icon, {\n        name: \"ethereum\"\n      }), \"Change Token Price\"))), React.createElement(Divider, {\n        hidden: true\n      }));\n    }\n  }, {\n    key: \"renderUserManagement\",\n    value: function renderUserManagement() {\n      return React.createElement(React.Fragment, null, React.createElement(Segment, {\n        raised: true,\n        textAlign: \"center\"\n      }, React.createElement(\"b\", {\n        style: {\n          fontSize: \"20px\"\n        }\n      }, \"Users Management\"), React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          icon: this.state.userVisible ? \"minus\" : \"plus\",\n          onClick: this.toggleUserTableVisibility,\n          floated: \"right\",\n          size: \"mini\"\n        }),\n        content: \"Click to expand/close\",\n        inverted: true\n      })), React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(Transition, {\n        visible: this.state.userVisible,\n        animation: \"scale\",\n        duration: 500\n      }, React.createElement(Segment, null, React.createElement(Header, null, React.createElement(Icon, {\n        name: \"user\",\n        circular: true\n      }), \"Registered Users\"), React.createElement(Table, {\n        compact: true,\n        celled: true,\n        stackable: true\n      }, React.createElement(Table.Header, {\n        fullWidth: true\n      }, React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, {\n        width: 2\n      }, \"Ethereum Wallet\"), React.createElement(Table.HeaderCell, {\n        width: 3\n      }, \"Email\"), React.createElement(Table.HeaderCell, {\n        width: 2\n      }, \"Status\"), React.createElement(Table.HeaderCell, {\n        width: 2\n      }, \"Blacklist\"), React.createElement(Table.HeaderCell, {\n        width: 2\n      }, \"Dispense Tokens\"))), React.createElement(Table.Body, null, this.getUserTableData()), React.createElement(Table.Footer, {\n        fullWidth: true\n      }, React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, {\n        colSpan: 5\n      })))))), React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(Segment, {\n        raised: true,\n        textAlign: \"center\"\n      }, React.createElement(\"b\", {\n        style: {\n          fontSize: \"20px\"\n        }\n      }, \"Removing Question\"), React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          icon: this.state.questionVisible ? \"minus\" : \"plus\",\n          onClick: this.toggleQuestionTableVisibility,\n          floated: \"right\",\n          size: \"mini\"\n        }),\n        content: \"Click to expand/close\",\n        inverted: true\n      })));\n    }\n  }, {\n    key: \"renderQuestionSettings\",\n    value: function renderQuestionSettings() {\n      return React.createElement(React.Fragment, null, React.createElement(Transition, {\n        visible: this.state.questionVisible,\n        animation: \"scale\",\n        duration: 500\n      }, React.createElement(Segment, null, React.createElement(Header, null, React.createElement(Icon, {\n        name: \"question circle\",\n        circular: true\n      }), \"Questions Posted\"), React.createElement(Table, {\n        compact: true,\n        celled: true,\n        stackable: true\n      }, React.createElement(Table.Header, {\n        fullWidth: true\n      }, React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, {\n        width: 2\n      }, \"Question Address\"), React.createElement(Table.HeaderCell, {\n        width: 3\n      }, \"Title\"), React.createElement(Table.HeaderCell, {\n        width: 2\n      }, \"Status\"), React.createElement(Table.HeaderCell, {\n        width: 2\n      }, \"Actions\"))), React.createElement(Table.Body, null, this.getQuestionTableData()), React.createElement(Table.Footer, {\n        fullWidth: true\n      }, React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, {\n        colSpan: 5\n      })))))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.login) {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType,\n          page: \"Admin\"\n        }, React.createElement(Container, null, React.createElement(Divider, {\n          hidden: true\n        }), this.renderExport(), this.renderEQTSettings(), React.createElement(Message, {\n          error: true,\n          header: \"Oops!\",\n          content: this.state.errorMessage,\n          hidden: !this.state.error\n        }), this.renderUserManagement(), React.createElement(Divider, {\n          hidden: true\n        }), this.renderQuestionSettings(), React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(LoadingModal, {\n          trigger: this.state.loading,\n          title: 'Performing Admin Actions',\n          content: \"Please Confirm the MetaMask Transaction Request. This process might take awhile.\",\n          loader: \"Loading\"\n        })), React.createElement(TimeOutModal, {\n          timeout: this.state.timeout\n        }));\n      } else {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(AccountIssueModal, {\n          loading: this.state.loadingResource,\n          login: this.state.login\n        }));\n      }\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee14(props) {\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                return _context14.abrupt(\"return\", {\n                  isLogin: cookies(props).login || '',\n                  account: cookies(props).wallet || ''\n                });\n\n              case 1:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14);\n      }));\n\n      function getInitialProps(_x9) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return AdminPage;\n}(Component);\n\nexport default AdminPage;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion_1.0\\pages\\admin.js"],"names":["React","Component","Container","Segment","Header","Divider","Button","Popup","Form","Input","Icon","Dropdown","Table","Modal","Loader","Message","Transition","Grid","Layout","LoadingModal","AccountIssueModal","TimeOutModal","Router","logging","checkRewardField","web3","factory","Profile","Question","feedback","EthQuestionToken","EthQuestionTokenSale","credentials","exportQuestion","exportComments","cookies","AdminPage","props","state","questionNumber","Number","question","deployedQuestions","methods","getSummary","call","summary","getAnswerList","answerList","getComments","comments","ethWalletEmailAddressBinding","map","item","index","ethWallet","emailAddress","status","unblacklist","blacklist","dispense","setState","loading","errorMessage","account","blacklistEmail","send","from","gasPrice","pushRoute","message","timeout","error","unBlacklistEmail","transfer","getProfile","profileAddress","profile","logTransaction","questionAddressTitleBinding","questionAddress","title","flagged","undoDeleteQuestion","deleteQuestion","topUpAmount","eth","personal","unlockAccount","_address","endSale","newTokenPrice","changeTokenPrice","prevState","userVisible","questionVisible","loadingResource","deployedQuestionsCount","tokenPrice","tokenBalance","etherBalance","accountType","questionOptions","prevProps","fetchData","login","isLogin","getAccountType","i","push","key","text","value","getDeployedQuestions","length","getEthWallets","ethWallets","getBinding","emailNotBlackList","getTokenPrice","balanceOf","getEtherBalance","fontSize","e","export","left","exportFeedback","toggleUserTableVisibility","marginTop","event","target","topUp","collectEther","getUserTableData","toggleQuestionTableVisibility","getQuestionTableData","renderExport","renderEQTSettings","renderUserManagement","renderQuestionSettings","wallet"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Container, Segment, Header, Divider, Button, Popup, Form, Input,\r\n   Icon, Dropdown, Table, Modal, Loader, Message, Transition, Grid } from \"semantic-ui-react\";\r\nimport Layout from '../components/Layout';\r\nimport LoadingModal from '../components/LoadingModal';\r\nimport AccountIssueModal from '../components/AccountIssueModal';\r\nimport TimeOutModal from '../components/TimeOutModal';\r\nimport {Router} from '../routes';\r\nimport { logging, checkRewardField } from '../utils/functions';\r\nimport web3 from '../ethereum/web3';\r\nimport factory from '../ethereum/factory';\r\nimport Profile from '../ethereum/profile';\r\nimport Question from '../ethereum/question';\r\nimport feedback from '../ethereum/feedback';\r\nimport EthQuestionToken from '../ethereum/token';\r\nimport EthQuestionTokenSale from '../ethereum/tokenSale'\r\nimport credentials from '../ethereum/credentials';\r\nimport { exportQuestion, exportComments } from '../utils/pdf';\r\nimport cookies from 'next-cookies';\r\n\r\nclass AdminPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      account: null,\r\n      error: false,\r\n      loading: false,\r\n      loadingResource: true,\r\n      timeout: false,\r\n      deployedQuestionsCount: null,\r\n      deployedQuestions: [],\r\n      ethWalletEmailAddressBinding: [],\r\n      questionAddressTitleBinding: [],\r\n      tokenPrice: null,\r\n      tokenBalance: null,\r\n      etherBalance: null,\r\n      errorMessage: '',\r\n      accountType: null,\r\n      userVisible: false,\r\n      questionOptions: [],\r\n      questionNumber: null,\r\n      questionVisible: false,\r\n      newTokenPrice: '',\r\n      topUpAmount: ''\r\n    };\r\n  }\r\n\r\n  static async getInitialProps(props) {\r\n    return { isLogin: cookies(props).login || '', account: cookies(props).wallet || '' };\r\n  }\r\n\r\n  async componentDidUpdate(prevProps) {\r\n    if(this.props != prevProps) {\r\n      this.fetchData()\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (typeof web3 === 'undefined') {\r\n      this.setState({ loading: false })\r\n      return\r\n    }\r\n    let login = false;\r\n    if (this.props.isLogin) {\r\n      login = true;\r\n      // Get Account Type\r\n      const account = this.props.account;\r\n      let profileAddress = await factory.methods.getProfile(account).call();\r\n      let profile = Profile(profileAddress);\r\n      let accountType = await profile.methods.getAccountType().call();\r\n      accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"\r\n      if(accountType != \"Admin\") {\r\n        login = false;\r\n      }\r\n\r\n      await this.fetchData();\r\n      // Get Question Deployed\r\n      let questionOptions = [];\r\n      for (let i = 0; i < this.state.deployedQuestionsCount; i++) {\r\n          let question = Question(this.state.deployedQuestions[i])\r\n          let summary = await question.methods.getSummary().call();\r\n          questionOptions.push({\r\n              key: i+1,\r\n              text: summary[0],\r\n              value: i+1\r\n          });\r\n      }\r\n      this.setState( { questionOptions: questionOptions });\r\n      this.setState( { account: account })\r\n      this.setState( { login: login });\r\n      this.setState( { accountType: accountType });\r\n    }\r\n    this.setState( { loadingResource: false });\r\n  }\r\n\r\n  async fetchData() {\r\n    // Retrieve an array of addresses of questions deployed\r\n    let deployedQuestions = await factory.methods.getDeployedQuestions().call();\r\n    let deployedQuestionsCount = deployedQuestions.length;\r\n    let questionAddressTitleBinding = []\r\n    for(let i=0; i<deployedQuestionsCount; i++) {\r\n      let question = Question(deployedQuestions[i]);\r\n      let summary = await question.methods.getSummary().call();\r\n      questionAddressTitleBinding.push({\r\n        questionAddress: deployedQuestions[i],\r\n        title: summary[0],\r\n        flagged: summary[9]\r\n      })\r\n    }\r\n\r\n    // Retrieve an array of EthWallets and Email Addresses\r\n    let ethWallets = await factory.methods.getEthWallets().call();\r\n    let ethWalletEmailAddressBinding = [];\r\n    for (let i=0; i < ethWallets.length; i++) {\r\n      let emailAddress = await credentials.methods.getBinding(ethWallets[i]).call();\r\n      let status = await credentials.methods.emailNotBlackList(emailAddress).call();\r\n      ethWalletEmailAddressBinding.push({\r\n        ethWallet: ethWallets[i],\r\n        emailAddress: emailAddress,\r\n        status: status\r\n      })\r\n    }\r\n\r\n    let tokenPrice = await EthQuestionTokenSale.methods.getTokenPrice().call();\r\n    let tokenBalance = await EthQuestionToken.methods.balanceOf(EthQuestionTokenSale._address).call();\r\n    let etherBalance = await EthQuestionTokenSale.methods.getEtherBalance().call();\r\n    this.setState({\r\n      deployedQuestionsCount: deployedQuestionsCount,\r\n      deployedQuestions: deployedQuestions,\r\n      ethWalletEmailAddressBinding: ethWalletEmailAddressBinding,\r\n      questionAddressTitleBinding: questionAddressTitleBinding,\r\n      tokenPrice: tokenPrice,\r\n      tokenBalance: tokenBalance,\r\n      etherBalance: etherBalance\r\n    })\r\n  }\r\n\r\n  export = async () => {\r\n    // Check that a question must be selected\r\n    if (this.state.questionNumber != null) {\r\n      // Retrieve all the data of selected question\r\n      let questionNumber = Number(this.state.questionNumber) - 1;\r\n      let question = Question(this.state.deployedQuestions[questionNumber])\r\n      let summary = await question.methods.getSummary().call();\r\n      let answerList = await question.methods.getAnswerList().call();\r\n      await exportQuestion(summary, answerList);\r\n    }\r\n  }\r\n\r\n  exportFeedback = async () => {\r\n    // Retrieve all comments\r\n    let comments = await feedback.methods.getComments().call();\r\n    await exportComments(comments);\r\n  }\r\n\r\n  getUserTableData = () => {\r\n    return this.state.ethWalletEmailAddressBinding.map((item, index) => {\r\n      return <Table.Row key={index}>\r\n        <Table.Cell>{item.ethWallet}</Table.Cell>\r\n        <Table.Cell>{item.emailAddress}</Table.Cell>\r\n        <Table.Cell>{item.status ? \"Blacklisted\" : \"Active\"}</Table.Cell>\r\n        <Table.Cell>\r\n        {\r\n          item.status ? <Button onClick={() => this.unblacklist(item.emailAddress)} color=\"green\" size=\"mini\" icon>\r\n            <Icon name=\"add user\" />\r\n          </Button> :\r\n          <Button onClick={() => this.blacklist(item.emailAddress)} color=\"red\" size=\"mini\" icon>\r\n            <Icon name=\"remove user\" />\r\n          </Button>\r\n        }\r\n        </Table.Cell>\r\n        <Table.Cell>\r\n          <Button onClick={() => this.dispense(item.ethWallet)} color=\"green\" size=\"mini\" icon>\r\n            <Icon name=\"ethereum\" />\r\n          </Button>\r\n        </Table.Cell>\r\n      </Table.Row>;\r\n    })\r\n  }\r\n\r\n  blacklist = async (emailAddress) => {\r\n    this.setState({ loading: true, errorMessage: ''});\r\n    try {\r\n      const account = this.state.account;\r\n      await credentials.methods\r\n      .blacklistEmail(emailAddress)\r\n      .send({\r\n          from: account,\r\n          gasPrice: '0'\r\n      });\r\n      Router.pushRoute('/admin'); // Automatic redirect the user.\r\n    } catch (err) {\r\n      if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n        this.setState({ timeout: true });\r\n      }\r\n      this.setState({ errorMessage: err.message });\r\n      this.setState({ error: true})\r\n    }\r\n    this.setState({ loading: false})\r\n  }\r\n\r\n  unblacklist = async (emailAddress) => {\r\n    this.setState({ loading: true, errorMessage: ''});\r\n    try {\r\n      const account = this.state.account;\r\n      await credentials.methods\r\n      .unBlacklistEmail(emailAddress)\r\n      .send({\r\n          from: account,\r\n          gasPrice: '0'\r\n      });\r\n    } catch (err) {\r\n      if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n        this.setState({ timeout: true });\r\n      }\r\n      this.setState({ errorMessage: err.message });\r\n      this.setState({ error: true})\r\n    }\r\n    this.setState({ loading: false})\r\n  }\r\n\r\n  dispense = async (ethWallet) => {\r\n    this.setState({ loading: true, errorMessage: ''});\r\n    try {\r\n      const account = this.state.account;\r\n      await EthQuestionToken.methods\r\n      .transfer(ethWallet, 10e4)\r\n      .send({\r\n          from: account,\r\n          gasPrice: '0'\r\n      });\r\n      // Log transaction\r\n      const profileAddress = await factory.methods.getProfile(ethWallet).call();\r\n      const profile = Profile(profileAddress);\r\n      let logTransaction = logging(\"Awarded 10 EQT(s) for first time user\");\r\n      await profile.methods.logTransaction(logTransaction)\r\n      .send({\r\n          from: account,\r\n          gasPrice: '0'\r\n      });\r\n    } catch (err) {\r\n      if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n        this.setState({ timeout: true });\r\n      }\r\n      this.setState({ errorMessage: err.message });\r\n      this.setState({ error: true})\r\n    }\r\n    this.setState({ loading: false})\r\n  }\r\n\r\n  getQuestionTableData = () => {\r\n    return this.state.questionAddressTitleBinding.map((item, index) => {\r\n      return <Table.Row key={index}>\r\n        <Table.Cell>{item.questionAddress}</Table.Cell>\r\n        <Table.Cell>{item.title}</Table.Cell>\r\n        <Table.Cell>{item.flagged ? \"Flagged\" : \"Active\"}</Table.Cell>\r\n        <Table.Cell>\r\n        {\r\n          item.flagged ? <Button onClick={() => this.undoDeleteQuestion(item.questionAddress)} color=\"green\" size=\"mini\" icon>\r\n            <Icon name=\"undo\" />\r\n          </Button> :\r\n          <Button onClick={() => this.deleteQuestion(item.questionAddress)} color=\"red\" size=\"mini\" icon>\r\n            <Icon name=\"flag\" />\r\n          </Button>\r\n        }\r\n        </Table.Cell>\r\n      </Table.Row>;\r\n    })\r\n  }\r\n\r\n  deleteQuestion = async (questionAddress, title) => {\r\n    this.setState({ loading: true, errorMessage: ''});\r\n    try {\r\n      const account = this.state.account;\r\n      let logTransaction = logging(\"Deleted Question Titled: \" + title);\r\n      await factory.methods\r\n      .deleteQuestion(questionAddress, logTransaction)\r\n      .send({\r\n          from: account,\r\n          gasPrice: '0'\r\n      });\r\n      Router.pushRoute('/admin'); // Automatic redirect the user.\r\n    } catch (err) {\r\n      if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n        this.setState({ timeout: true });\r\n      }\r\n      this.setState({ errorMessage: err.message });\r\n      this.setState({ error: true})\r\n    }\r\n    this.setState({ loading: false})\r\n  }\r\n\r\n  undoDeleteQuestion = async (questionAddress, title) => {\r\n    this.setState({ loading: true, errorMessage: ''});\r\n    try {\r\n      const account = this.state.account;\r\n      let logTransaction = logging(\"Undo Deletion Of Question Titled: \" + title);\r\n      await factory.methods\r\n      .undoDeleteQuestion(questionAddress, logTransaction)\r\n      .send({\r\n          from: account,\r\n          gasPrice: '0'\r\n      });\r\n      Router.pushRoute('/admin'); // Automatic redirect the user.\r\n    } catch (err) {\r\n      if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n        this.setState({ timeout: true });\r\n      }\r\n      this.setState({ errorMessage: err.message });\r\n      this.setState({ error: true})\r\n    }\r\n    this.setState({ loading: false})\r\n  }\r\n\r\n  topUp = async () => {\r\n    this.setState({ loading: true, errorMessage: ''});\r\n    if (checkRewardField(this.state.topUpAmount)) {\r\n      try {\r\n        const account = this.state.account;\r\n        await web3.eth.personal.unlockAccount(account, \"password\", 600);\r\n        await EthQuestionToken.methods\r\n        .transfer(EthQuestionTokenSale._address, this.state.topUpAmount*1e4)\r\n        .send({\r\n            from: account,\r\n            gasPrice: '0'\r\n        });\r\n        // Log transaction\r\n        const profileAddress = await factory.methods.getProfile(account).call();\r\n        const profile = Profile(profileAddress);\r\n        let logTransaction = logging(\"Added \" + this.state.topUpAmount + \" EQT(s) for exchange\");\r\n        await profile.methods.logTransaction(logTransaction)\r\n        .send({\r\n            from: account,\r\n            gasPrice: '0'\r\n        });\r\n        Router.pushRoute('/admin'); // Automatic redirect the user.\r\n      } catch (err) {\r\n        if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n          this.setState({ timeout: true });\r\n        }\r\n        this.setState({ errorMessage: err.message });\r\n        this.setState({ error: true})\r\n        this.setState({ loading: false})\r\n      }\r\n    } else {\r\n      this.setState({ errorMessage: \"Required Field(s) Empty or Invalid Input\" });\r\n      this.setState({ error: true})\r\n      this.setState({ loading: false });\r\n    }\r\n    this.setState({ loading: false})\r\n  }\r\n\r\n  collectEther = async () => {\r\n    this.setState({ loading: true, errorMessage: ''});\r\n    try {\r\n      const account = this.state.account\r\n      const profileAddress = await factory.methods.getProfile(account).call();\r\n      let logTransaction = logging(\"Collect Ether from exchange of EQT(s)\");\r\n      await EthQuestionTokenSale.methods\r\n      .endSale(EthQuestionToken._address, profileAddress, logTransaction)\r\n      .send({\r\n          from: account,\r\n          gasPrice: '0'\r\n      });\r\n      Router.pushRoute('/admin'); // Automatic redirect the user.\r\n    } catch (err) {\r\n      if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n        this.setState({ timeout: true });\r\n      }\r\n      this.setState({ errorMessage: err.message });\r\n      this.setState({ error: true})\r\n      this.setState({ loading: false})\r\n    }\r\n    this.setState({ loading: false})\r\n  }\r\n\r\n  changeTokenPrice = async () => {\r\n    this.setState({ loading: true, errorMessage: ''});\r\n    if (checkRewardField(this.state.newTokenPrice)) {\r\n      try {\r\n        const account = this.state.account\r\n        const profileAddress = await factory.methods.getProfile(account).call();\r\n        let logTransaction = logging(\"Changed Token Price to \" + this.state.newTokenPrice + \" wei per EQT.\");\r\n        await EthQuestionTokenSale.methods\r\n        .changeTokenPrice(this.state.newTokenPrice, profileAddress, logTransaction)\r\n        .send({\r\n            from: account,\r\n            gasPrice: '0'\r\n        });\r\n        Router.pushRoute('/admin'); // Automatic redirect the user.\r\n      } catch (err) {\r\n        if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n          this.setState({ timeout: true });\r\n        }\r\n        this.setState({ errorMessage: err.message });\r\n        this.setState({ error: true})\r\n        this.setState({ loading: false})\r\n      }\r\n    } else {\r\n      this.setState({ errorMessage: \"Required Field(s) Empty or Invalid Input\" });\r\n      this.setState({ error: true})\r\n      this.setState({ loading: false });\r\n    }\r\n    this.setState({ loading: false})\r\n  }\r\n\r\n  toggleUserTableVisibility = () =>\r\n    this.setState((prevState) => ({ userVisible: !prevState.userVisible }))\r\n\r\n  toggleQuestionTableVisibility = () =>\r\n    this.setState((prevState) => ({ questionVisible: !prevState.questionVisible }))\r\n\r\n  renderExport() {\r\n    return <React.Fragment>\r\n      <Segment raised textAlign='left'>\r\n        <Header as='h2' textAlign='center'>\r\n          Exporting Questions & Answers As PDF\r\n        </Header>\r\n      </Segment>\r\n\r\n      <Divider hidden/>\r\n\r\n      <p style={{fontSize:'16px'}}>\r\n        Select the question to export the question and it's corresponding answers\r\n      </p>\r\n      <Dropdown clearable\r\n                options={this.state.questionOptions}\r\n                selection\r\n                placeholder='Select the question to export'\r\n                value={this.state.questionNumber}\r\n                onChange={ (e, { value }) => this.setState({ questionNumber: value })}/>\r\n      <Button icon labelPosition='left' color=\"red\" onClick={this.export} style={{left:\"20px\"}}>\r\n        <Icon name='download'/>\r\n        Export As PDF\r\n      </Button>\r\n\r\n      <Divider hidden/>\r\n\r\n      <Segment raised textAlign='left'>\r\n        <Header as='h2' textAlign='center'>\r\n          Exporting Feedback\r\n        </Header>\r\n      </Segment>\r\n      <Button icon labelPosition='left' color=\"red\" onClick={this.exportFeedback} style={{left:\"20px\"}}>\r\n        <Icon name='download'/>\r\n        Export As PDF\r\n      </Button>\r\n    </React.Fragment>\r\n  }\r\n\r\n  renderEQTSettings() {\r\n    return <React.Fragment>\r\n      <Segment raised textAlign='center'>\r\n        <b style={{fontSize:\"20px\"}}>Users Management</b>\r\n        <Popup\r\n          trigger={\r\n            <Button\r\n              icon={this.state.userVisible ? \"minus\" : \"plus\"}\r\n              onClick={this.toggleUserTableVisibility}\r\n              floated=\"right\"\r\n              size=\"mini\"\r\n            />\r\n          }\r\n          content={\"Click to expand/close\"}\r\n          inverted/>\r\n      </Segment>\r\n      <Segment raised textAlign='left'>\r\n        <Header as='h2' textAlign='center'>\r\n          EthQuestionTokens (EQT) Exchange Settings\r\n        </Header>\r\n      </Segment>\r\n\r\n      <Grid container={true}>\r\n        <Grid.Row>\r\n          <p style={{fontSize:'16px'}}>\r\n            Balance Available For Exchange: <b>{this.state.tokenBalance*1e-4} EQT(s)</b>\r\n          </p>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Form error={!!this.state.errorMessage} style={{ marginTop: '10px' }}>\r\n            <Form.Field required={true}>\r\n                <label>Top Up Amount</label>\r\n                <Input\r\n                    label=\"EQT(s)\"\r\n                    labelPosition=\"right\"\r\n                    placeholder='Enter EQT Value'\r\n                    value={this.state.topUpAmount}\r\n                    onChange={event => this.setState({ topUpAmount: event.target.value })}\r\n                />\r\n            </Form.Field>\r\n          </Form>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Button icon labelPosition='left' color=\"red\" onClick={this.topUp}>\r\n            <Icon name='dollar sign'/>\r\n            Top Up Balance\r\n          </Button>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <p style={{fontSize:'16px'}}>\r\n            Ether Collected From Exchange: <b>{this.state.etherBalance*1e-18} Ether(s)</b>\r\n          </p>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Button icon labelPosition='left' color=\"red\" onClick={this.collectEther}>\r\n            <Icon name='ethereum'/>\r\n            Collect Ether\r\n          </Button>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <p style={{fontSize:'16px'}}>\r\n            Current Token Price: <b>{this.state.tokenPrice*1e-18} Ether(s)</b>\r\n          </p>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Form error={!!this.state.errorMessage} style={{ marginTop: '10px' }}>\r\n            <Form.Field required={true}>\r\n                <label>Token Price</label>\r\n                <Input\r\n                    label=\"Wei\"\r\n                    labelPosition=\"right\"\r\n                    placeholder='New Token Price'\r\n                    value={this.state.newTokenPrice}\r\n                    onChange={event => this.setState({ newTokenPrice: event.target.value })}\r\n                />\r\n            </Form.Field>\r\n          </Form>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Button icon labelPosition='left' color=\"red\" onClick={this.changeTokenPrice}>\r\n            <Icon name='ethereum'/>\r\n            Change Token Price\r\n          </Button>\r\n        </Grid.Row>\r\n      </Grid>\r\n      <Divider hidden/>\r\n    </React.Fragment>\r\n  }\r\n\r\n  renderUserManagement() {\r\n    return <React.Fragment>\r\n      <Segment raised textAlign='center'>\r\n        <b style={{fontSize:\"20px\"}}>Users Management</b>\r\n        <Popup\r\n          trigger={\r\n            <Button\r\n              icon={this.state.userVisible ? \"minus\" : \"plus\"}\r\n              onClick={this.toggleUserTableVisibility}\r\n              floated=\"right\"\r\n              size=\"mini\"\r\n            />\r\n          }\r\n          content={\"Click to expand/close\"}\r\n          inverted/>\r\n      </Segment>\r\n\r\n      <Divider hidden/>\r\n\r\n      <Transition visible={this.state.userVisible} animation='scale' duration={500}>\r\n        <Segment>\r\n          <Header><Icon name='user' circular/>Registered Users</Header>\r\n            <Table compact celled stackable>\r\n              <Table.Header fullWidth>\r\n                <Table.Row>\r\n                  <Table.HeaderCell width={2}>Ethereum Wallet</Table.HeaderCell>\r\n                  <Table.HeaderCell width={3}>Email</Table.HeaderCell>\r\n                  <Table.HeaderCell width={2}>Status</Table.HeaderCell>\r\n                  <Table.HeaderCell width={2}>Blacklist</Table.HeaderCell>\r\n                  <Table.HeaderCell width={2}>Dispense Tokens</Table.HeaderCell>\r\n                </Table.Row>\r\n              </Table.Header>\r\n              <Table.Body>{this.getUserTableData()}</Table.Body>\r\n              <Table.Footer fullWidth>\r\n                <Table.Row>\r\n                  <Table.HeaderCell colSpan={5} />\r\n                </Table.Row>\r\n              </Table.Footer>\r\n            </Table>\r\n        </Segment>\r\n      </Transition>\r\n\r\n      <Divider hidden/>\r\n\r\n      <Segment raised textAlign='center'>\r\n        <b style={{fontSize:\"20px\"}}>Removing Question</b>\r\n        <Popup\r\n          trigger={\r\n            <Button\r\n              icon={this.state.questionVisible ? \"minus\" : \"plus\"}\r\n              onClick={this.toggleQuestionTableVisibility}\r\n              floated=\"right\"\r\n              size=\"mini\"\r\n            />\r\n          }\r\n          content={\"Click to expand/close\"}\r\n          inverted/>\r\n      </Segment>\r\n    </React.Fragment>\r\n  }\r\n\r\n  renderQuestionSettings() {\r\n    return <React.Fragment>\r\n      <Transition visible={this.state.questionVisible} animation='scale' duration={500}>\r\n        <Segment>\r\n          <Header><Icon name='question circle' circular/>Questions Posted</Header>\r\n            <Table compact celled stackable>\r\n              <Table.Header fullWidth>\r\n                <Table.Row>\r\n                  <Table.HeaderCell width={2}>Question Address</Table.HeaderCell>\r\n                  <Table.HeaderCell width={3}>Title</Table.HeaderCell>\r\n                  <Table.HeaderCell width={2}>Status</Table.HeaderCell>\r\n                  <Table.HeaderCell width={2}>Actions</Table.HeaderCell>\r\n                </Table.Row>\r\n              </Table.Header>\r\n              <Table.Body>{this.getQuestionTableData()}</Table.Body>\r\n              <Table.Footer fullWidth>\r\n                <Table.Row>\r\n                  <Table.HeaderCell colSpan={5} />\r\n                </Table.Row>\r\n              </Table.Footer>\r\n            </Table>\r\n        </Segment>\r\n      </Transition>\r\n    </React.Fragment>\r\n  }\r\n\r\n  render() {\r\n    if (this.state.login) {\r\n      return (\r\n        <Layout accountType={this.state.accountType} page={\"Admin\"}>\r\n          <Container>\r\n            <Divider hidden/>\r\n            {this.renderExport()}\r\n            {this.renderEQTSettings()}\r\n            <Message error header=\"Oops!\" content={this.state.errorMessage} hidden={!this.state.error}/>\r\n            {this.renderUserManagement()}\r\n            <Divider hidden/>\r\n            {this.renderQuestionSettings()}\r\n            <Divider hidden/>\r\n            <LoadingModal trigger={this.state.loading}\r\n                          title={'Performing Admin Actions'}\r\n                          content={\"Please Confirm the MetaMask Transaction Request. This process might take awhile.\"}\r\n                          loader={\"Loading\"}/>\r\n            </Container>\r\n            <TimeOutModal timeout={this.state.timeout} />\r\n        </Layout>\r\n      );\r\n    } else {\r\n      return (\r\n        <Layout accountType={this.state.accountType}>\r\n          <AccountIssueModal loading={this.state.loadingResource} login={this.state.login} />\r\n        </Layout>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default AdminPage;\r\n"]},"metadata":{},"sourceType":"module"}