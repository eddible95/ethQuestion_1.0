{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport MobileDetect from 'mobile-detect';\nimport _ from 'lodash';\nimport { Button, Header, Table, Statistic, Rating, Grid, Loader, List, Divider, Container, Icon, Label, Progress, Segment, Modal, Responsive } from 'semantic-ui-react';\nimport { getWidthFactory } from '../utils/device';\nimport factory from '../ethereum/factory';\nimport credentials from '../ethereum/credentials';\nimport Question from '../ethereum/question';\nimport Profile from '../ethereum/profile';\nimport Layout from '../components/Layout';\nimport { Link, Router } from '../routes';\nimport web3 from '../ethereum/web3';\nimport { search } from '../utils/functions';\n\nvar HomePage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(HomePage, _Component);\n\n  function HomePage(props) {\n    var _this;\n\n    _classCallCheck(this, HomePage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HomePage).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSort\", function (clickedColumn) {\n      return function () {\n        var _this$state = _this.state,\n            column = _this$state.column,\n            leaderboardData = _this$state.leaderboardData,\n            direction = _this$state.direction;\n\n        if (column !== clickedColumn) {\n          _this.setState({\n            column: clickedColumn,\n            leaderboardData: _.sortBy(leaderboardData, [clickedColumn]),\n            direction: 'ascending'\n          });\n\n          return;\n        }\n\n        _this.setState({\n          leaderboardData: leaderboardData.reverse(),\n          direction: direction === 'ascending' ? 'descending' : 'ascending'\n        });\n      };\n    });\n\n    _this.state = {\n      login: false,\n      accountType: null,\n      column: null,\n      direction: null,\n      leaderboardData: [],\n      tags: [],\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(HomePage, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var login, accounts, _emailAddress, profileAddress, profile, accountType, ethWallet, accountPointMapping, i, points, tags, sortedTags;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                login = false; // Retrieve the Ethereum Account from MetaMask\n\n                _context.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context.sent;\n                _context.next = 6;\n                return credentials.methods.getBinding(accounts[0]).call();\n\n              case 6:\n                _emailAddress = _context.sent;\n                _context.t0 = _emailAddress === \"\";\n\n                if (_context.t0) {\n                  _context.next = 12;\n                  break;\n                }\n\n                _context.next = 11;\n                return credentials.methods.emailNotBlackList(_emailAddress).call();\n\n              case 11:\n                _context.t0 = _context.sent;\n\n              case 12:\n                if (!_context.t0) {\n                  _context.next = 15;\n                  break;\n                }\n\n                _context.next = 51;\n                break;\n\n              case 15:\n                login = true; // Get Account Type\n\n                _context.next = 18;\n                return factory.methods.getProfile(accounts[0]).call();\n\n              case 18:\n                profileAddress = _context.sent;\n                profile = Profile(profileAddress);\n                _context.next = 22;\n                return profile.methods.getAccountType().call();\n\n              case 22:\n                accountType = _context.sent;\n                accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"; // Retireve an array of addresses of ethWallets registered\n\n                _context.next = 26;\n                return factory.methods.getEthWallets().call();\n\n              case 26:\n                ethWallet = _context.sent;\n                accountPointMapping = [];\n                i = 0;\n\n              case 29:\n                if (!(i < ethWallet.length)) {\n                  _context.next = 41;\n                  break;\n                }\n\n                _context.next = 32;\n                return factory.methods.getProfile(ethWallet[i]).call();\n\n              case 32:\n                profileAddress = _context.sent;\n                profile = Profile(profileAddress);\n                _context.next = 36;\n                return profile.methods.getPoints().call();\n\n              case 36:\n                points = _context.sent;\n                accountPointMapping.push({\n                  account: ethWallet[i],\n                  points: _parseInt(points)\n                });\n\n              case 38:\n                i++;\n                _context.next = 29;\n                break;\n\n              case 41:\n                // Get the top 10 used tags\n                tags = {};\n                this.props.summaries.forEach(function (summary) {\n                  summary[8].forEach(function (tag) {\n                    if (tags[tag] == undefined) {\n                      tags[tag] = 1;\n                    } else {\n                      tags[tag] = tags[tag] + 1;\n                    }\n                  });\n                });\n                sortedTags = _Object$keys(tags).map(function (key) {\n                  return [key, tags[key]];\n                }); // Sort the array based on the second element\n\n                sortedTags.sort(function (first, second) {\n                  return second[1] - first[1];\n                });\n                tags = []; // Create a new array with only the first 10 items\n\n                sortedTags.slice(0, 10).forEach(function (tag) {\n                  tags.push(tag[0]);\n                }); // Set the states required for the Leaderboard and ensure it is descending by default\n\n                this.setState({\n                  leaderboardData: _.sortBy(accountPointMapping, ['points']).reverse()\n                });\n                this.setState({\n                  login: login\n                });\n                this.setState({\n                  accountType: accountType\n                });\n                this.setState({\n                  tags: tags\n                });\n\n              case 51:\n                this.setState({\n                  loading: false\n                });\n\n              case 52:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() // Function to handle the sorting of leaderboard\n\n  }, {\n    key: \"renderQuestionHeader\",\n    value: function renderQuestionHeader() {\n      return React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        width: 2\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Current Phase\")), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        width: 2\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Answers Submitted\")), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        width: 2\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Reward\")), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\"\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Question Title\")));\n    } // Renders out the list of question\n\n  }, {\n    key: \"renderQuestionList\",\n    value: function renderQuestionList() {\n      var _this2 = this;\n\n      return this.props.summaries.map(function (summary, index) {\n        var questionState = summary[4];\n        var tagList = summary[8];\n        return React.createElement(Table.Row, {\n          key: index\n        }, React.createElement(Table.Cell, {\n          textAlign: \"center\",\n          width: 2\n        }, questionState == 0 ? React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \" Answering\")), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"Phase\"))) : questionState == 1 ? React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \" Voting\")), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"Phase\"))) : React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \" Rewarded\")), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"Phase\")))), React.createElement(Table.Cell, {\n          textAlign: \"center\",\n          width: 2\n        }, React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, _this2.props.numOfAnswers[index])), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"answer(s)\")))), React.createElement(Table.Cell, {\n          textAlign: \"center\",\n          width: 2\n        }, React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, summary[2] * 1e-4)), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"EQT(s)\")))), React.createElement(Table.Cell, {\n          textAlign: \"left\"\n        }, React.createElement(Grid.Row, {\n          textAlign: \"left\"\n        }, React.createElement(\"span\", {\n          style: {\n            fontSize: 18,\n            color: '#6A737C',\n            cursor: 'pointer'\n          },\n          onClick: function onClick() {\n            return Router.pushRoute(\"/questions/\".concat(_this2.props.deployedQuestions[index]));\n          }\n        }, React.createElement(\"a\", null, summary[0]))), _this2.renderTag(tagList, \"mini\")));\n      });\n    }\n  }, {\n    key: \"renderMobileQuestionList\",\n    value: function renderMobileQuestionList() {\n      var _this3 = this;\n\n      return this.props.summaries.map(function (summary, index) {\n        var tags = summary[8];\n        var questionState = summary[4];\n        var phase = \"\";\n        questionState == 0 ? phase = \"ANSWERING PHASE\" : questionState == 1 ? phase = \"VOTING PHASE\" : phase = \"REWARDED PHASE\";\n        var tagList = summary[8];\n        return React.createElement(List.Item, {\n          key: index\n        }, React.createElement(List.Icon, {\n          name: \"question circle\",\n          size: \"large\",\n          verticalAlign: \"middle\"\n        }), React.createElement(List.Content, null, React.createElement(List.Header, {\n          as: \"a\",\n          onClick: function onClick() {\n            return Router.pushRoute(\"/questions/\".concat(_this3.props.deployedQuestions[index]));\n          }\n        }, summary[0]), React.createElement(Grid, null, React.createElement(Grid.Column, {\n          width: 10\n        }, React.createElement(List.Description, null, \"Number of Answer(s): \" + _this3.props.numOfAnswers[index]), React.createElement(List.Description, null, \"Reward: \" + summary[2] * 1e-4 + \" EQT(s)\"), _this3.renderTag(tags, \"mini\")), React.createElement(Grid.Column, {\n          width: 4\n        }, React.createElement(List.Description, null, React.createElement(\"b\", null, React.createElement(\"font\", {\n          color: \"red\"\n        }, phase)))))), React.createElement(Divider, {\n          hidden: true\n        }));\n      });\n    } // Render each tag individually for each question\n\n  }, {\n    key: \"renderTag\",\n    value: function renderTag(tagList, tagSize) {\n      var tagColours = [\"red\", \"olive\", \"blue\", \"teal\", \"green\"];\n      return tagList.map(function (tag, index) {\n        var id = index % 5;\n        return React.createElement(Label, {\n          as: \"a\",\n          onClick: function onClick() {\n            return Router.pushRoute(\"/\".concat('search/' + encodeURIComponent(tag)));\n          },\n          tag: true,\n          size: tagSize,\n          key: index,\n          color: tagColours[id]\n        }, tag);\n      });\n    }\n  }, {\n    key: \"renderLeaderBoard\",\n    value: function renderLeaderBoard() {\n      var _this$state2 = this.state,\n          column = _this$state2.column,\n          data = _this$state2.data,\n          direction = _this$state2.direction;\n      return React.createElement(Segment, null, React.createElement(Header, {\n        as: \"h3\",\n        textAlign: \"center\"\n      }, React.createElement(Icon, {\n        name: \"chess king\"\n      }), \"Leaderboard\"), React.createElement(\"p\", {\n        style: {\n          textAlign: 'center'\n        }\n      }, React.createElement(\"b\", null, \"Current Registered User(s):\"), \" \", this.state.leaderboardData.length), React.createElement(Table, {\n        basic: \"very\",\n        celled: true,\n        collapsing: true,\n        sortable: true\n      }, React.createElement(Table.Header, null, React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, null, \"Account\"), React.createElement(Table.HeaderCell, {\n        sorted: column === 'points' ? direction : null,\n        onClick: this.handleSort('points')\n      }, \"Point(s)\"))), React.createElement(Table.Body, null, this.renderUserList())));\n    }\n  }, {\n    key: \"renderTopTags\",\n    value: function renderTopTags() {\n      return React.createElement(Segment, null, React.createElement(Header, {\n        as: \"h3\",\n        textAlign: \"center\"\n      }, React.createElement(Icon, {\n        name: \"tags\"\n      }), \"Top 10 Tags\"), this.renderTag(this.state.tags, \"medium\"));\n    }\n  }, {\n    key: \"renderUserList\",\n    value: function renderUserList() {\n      return this.state.leaderboardData.map(function (item, index) {\n        return React.createElement(Table.Row, {\n          key: index\n        }, React.createElement(Table.Cell, {\n          textAlign: \"center\"\n        }, React.createElement(\"p\", {\n          style: {\n            fontSize: \"12px\"\n          }\n        }, item.account)), React.createElement(Table.Cell, {\n          textAlign: \"center\"\n        }, React.createElement(\"p\", {\n          style: {\n            fontSize: \"12px\"\n          }\n        }, item.points)));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.login) {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(Responsive, {\n          fireOnMount: true,\n          getWidth: getWidthFactory(this.props.isMobileFromSSR),\n          minWidth: Responsive.onlyTablet.minWidth\n        }, React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Grid, {\n          centered: true\n        }, React.createElement(Grid.Column, {\n          width: 4\n        }, this.renderLeaderBoard()), React.createElement(Grid.Column, {\n          width: 8\n        }, React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"Questions Posted\"), React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Table, null, React.createElement(Table.Header, null, this.renderQuestionHeader()), React.createElement(Table.Body, null, this.renderQuestionList())), React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(\"div\", {\n          style: {\n            marginTop: 20\n          }\n        }, \"Found \", this.props.summaries.length, \" Item(s).\")), React.createElement(Grid.Column, {\n          width: 3\n        }, this.renderTopTags()))), React.createElement(Responsive, {\n          fireOnMount: true,\n          getWidth: getWidthFactory(this.props.isMobileFromSSR),\n          maxWidth: Responsive.onlyMobile.maxWidth\n        }, React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Grid, {\n          centered: true\n        }, React.createElement(Grid.Column, null, React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"Questions Posted\"), React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(List, {\n          divided: true,\n          relaxed: true\n        }, this.renderMobileQuestionList()), React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(\"div\", {\n          style: {\n            marginTop: 20\n          }\n        }, \"Found \", this.props.summaries.length, \" Item(s).\")))));\n      } else {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(Modal, {\n          open: this.state.loading,\n          basic: true,\n          size: \"small\"\n        }, React.createElement(Header, {\n          icon: \"ethereum\",\n          content: \"Loading Resources\"\n        }), React.createElement(Modal.Content, null, React.createElement(Loader, {\n          active: true,\n          inline: \"centered\"\n        }, \"Loading Deployed Questions\"))), React.createElement(Modal, {\n          open: !this.state.login && !this.state.loading,\n          basic: true,\n          size: \"small\"\n        }, React.createElement(Header, {\n          icon: \"ethereum\",\n          content: \"Account Issue\"\n        }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"You are facing one of the following issues: (1) Banned from accessing the platform (2) Currently not registered to access the platform. Please have your account registered.\")), React.createElement(Modal.Actions, null, React.createElement(Button, {\n          color: \"green\",\n          inverted: true,\n          attached: \"bottom\",\n          onClick: function onClick() {\n            Router.pushRoute('/');\n          }\n        }, \"Register For Account\"))));\n      }\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(props) {\n        var isMobileFromSSR, device, md, deployedQuestions, deployedQuestionsCount, questions, summaries, numOfAnswers, searchItem, i, summary, answerList;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                isMobileFromSSR = false;\n\n                if (props.req) {\n                  device = props.req.headers[\"user-agent\"];\n                  md = new MobileDetect(device);\n                  isMobileFromSSR = !!md.mobile();\n                } // Retrieve an array of addresses of questions deployed\n\n\n                _context2.next = 4;\n                return factory.methods.getDeployedQuestions().call();\n\n              case 4:\n                deployedQuestions = _context2.sent;\n                deployedQuestionsCount = deployedQuestions.length; // Retrieve the summaries of all deployed questions\n\n                questions = [];\n                summaries = [];\n                numOfAnswers = [];\n\n                if (!(props.query.value != undefined && props.query.value != 'favicon.ico')) {\n                  _context2.next = 15;\n                  break;\n                }\n\n                searchItem = decodeURIComponent(props.query.value);\n                _context2.next = 13;\n                return search(searchItem, deployedQuestions);\n\n              case 13:\n                deployedQuestions = _context2.sent;\n                deployedQuestionsCount = deployedQuestions.length;\n\n              case 15:\n                i = 0;\n\n              case 16:\n                if (!(i < deployedQuestionsCount)) {\n                  _context2.next = 35;\n                  break;\n                }\n\n                questions[i] = Question(deployedQuestions[i]);\n                _context2.next = 20;\n                return questions[i].methods.getSummary().call();\n\n              case 20:\n                summary = _context2.sent;\n\n                if (summary[9]) {\n                  _context2.next = 29;\n                  break;\n                }\n\n                summaries[i] = summary;\n                _context2.next = 25;\n                return questions[i].methods.getAnswerList().call();\n\n              case 25:\n                answerList = _context2.sent;\n                numOfAnswers[i] = answerList.length;\n                _context2.next = 32;\n                break;\n\n              case 29:\n                // Remove question from list of deployed questions\n                deployedQuestions.splice(i, 1);\n                deployedQuestionsCount--;\n                i--;\n\n              case 32:\n                i++;\n                _context2.next = 16;\n                break;\n\n              case 35:\n                return _context2.abrupt(\"return\", {\n                  isMobileFromSSR: isMobileFromSSR,\n                  deployedQuestions: deployedQuestions,\n                  summaries: summaries,\n                  numOfAnswers: numOfAnswers\n                });\n\n              case 36:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return HomePage;\n}(Component);\n\nexport default HomePage;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\home.js"],"names":["React","Component","MobileDetect","_","Button","Header","Table","Statistic","Rating","Grid","Loader","List","Divider","Container","Icon","Label","Progress","Segment","Modal","Responsive","getWidthFactory","factory","credentials","Question","Profile","Layout","Link","Router","web3","search","HomePage","props","clickedColumn","state","column","leaderboardData","direction","setState","sortBy","reverse","login","accountType","tags","loading","eth","getAccounts","accounts","methods","getBinding","call","_emailAddress","emailNotBlackList","getProfile","profileAddress","profile","getAccountType","getEthWallets","ethWallet","accountPointMapping","i","length","getPoints","points","push","account","summaries","forEach","summary","tag","undefined","sortedTags","map","key","sort","first","second","slice","fontSize","color","index","questionState","tagList","numOfAnswers","cursor","pushRoute","deployedQuestions","renderTag","phase","tagSize","tagColours","id","encodeURIComponent","data","textAlign","handleSort","renderUserList","item","isMobileFromSSR","onlyTablet","minWidth","renderLeaderBoard","renderQuestionHeader","renderQuestionList","marginTop","renderTopTags","onlyMobile","maxWidth","renderMobileQuestionList","req","device","headers","md","mobile","getDeployedQuestions","deployedQuestionsCount","questions","query","value","searchItem","decodeURIComponent","getSummary","getAnswerList","answerList","splice"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport MobileDetect from 'mobile-detect';\r\nimport _ from 'lodash';\r\nimport { Button, Header, Table, Statistic, Rating, Grid, Loader, List,\r\n   Divider, Container, Icon, Label, Progress, Segment, Modal, Responsive } from 'semantic-ui-react';\r\nimport { getWidthFactory } from '../utils/device';\r\nimport factory from '../ethereum/factory';\r\nimport credentials from '../ethereum/credentials';\r\nimport Question from '../ethereum/question';\r\nimport Profile from '../ethereum/profile';\r\nimport Layout from '../components/Layout';\r\nimport {Link, Router} from '../routes';\r\nimport web3 from '../ethereum/web3';\r\nimport { search } from '../utils/functions';\r\n\r\nclass HomePage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      login: false,\r\n      accountType: null,\r\n      column: null,\r\n      direction: null,\r\n      leaderboardData: [],\r\n      tags: [],\r\n      loading: true,\r\n    };\r\n  }\r\n\r\n  static async getInitialProps(props) {\r\n    let isMobileFromSSR = false;\r\n    if(props.req) {\r\n      const device = props.req.headers[\"user-agent\"];\r\n      const md = new MobileDetect(device);\r\n      isMobileFromSSR = !!md.mobile();\r\n    }\r\n\r\n    // Retrieve an array of addresses of questions deployed\r\n    let deployedQuestions = await factory.methods.getDeployedQuestions().call();\r\n    let deployedQuestionsCount = deployedQuestions.length;\r\n\r\n    // Retrieve the summaries of all deployed questions\r\n    let questions = [];\r\n    let summaries = [];\r\n    let numOfAnswers = [];\r\n    let searchItem;\r\n    //filter the questions based on search value\r\n    if (props.query.value != undefined && props.query.value != 'favicon.ico') {\r\n        searchItem = decodeURIComponent(props.query.value);\r\n        deployedQuestions = await search(searchItem,deployedQuestions);\r\n        deployedQuestionsCount = deployedQuestions.length;\r\n    }\r\n\r\n    for(let i=0; i<deployedQuestionsCount; i++) {\r\n      questions[i] = Question(deployedQuestions[i]);\r\n      let summary = await questions[i].methods.getSummary().call();\r\n      // Filter out flagged questions\r\n      if (!summary[9]) {\r\n        summaries[i] = summary;\r\n        let answerList = await questions[i].methods.getAnswerList().call();\r\n        numOfAnswers[i] = answerList.length;\r\n      } else {\r\n        // Remove question from list of deployed questions\r\n        deployedQuestions.splice(i, 1);\r\n        deployedQuestionsCount--;\r\n        i--;\r\n      }\r\n    }\r\n    return { isMobileFromSSR, deployedQuestions, summaries, numOfAnswers };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let login = false;\r\n    // Retrieve the Ethereum Account from MetaMask\r\n    const accounts = await web3.eth.getAccounts();\r\n    const _emailAddress = await credentials.methods.getBinding(accounts[0]).call();\r\n    if (_emailAddress === \"\" || await credentials.methods.emailNotBlackList(_emailAddress).call()) {\r\n    } else {\r\n      login = true;\r\n      // Get Account Type\r\n      let profileAddress = await factory.methods.getProfile(accounts[0]).call();\r\n      let profile = Profile(profileAddress);\r\n      let accountType = await profile.methods.getAccountType().call();\r\n      accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"\r\n      // Retireve an array of addresses of ethWallets registered\r\n      let ethWallet = await factory.methods.getEthWallets().call();\r\n      let accountPointMapping = [];\r\n\r\n      for (let i=0; i<ethWallet.length; i++) {\r\n        profileAddress = await factory.methods.getProfile(ethWallet[i]).call();\r\n        profile = Profile(profileAddress);\r\n        let points = await profile.methods.getPoints().call();\r\n        accountPointMapping.push({\r\n          account: ethWallet[i],\r\n          points: parseInt(points)\r\n        });\r\n      }\r\n\r\n      // Get the top 10 used tags\r\n      let tags = {};\r\n      this.props.summaries.forEach(summary =>{\r\n        summary[8].forEach(tag => {\r\n          if (tags[tag] == undefined) {\r\n            tags[tag] = 1;\r\n          } else {\r\n            tags[tag] = tags[tag] + 1;\r\n          }\r\n        })\r\n      })\r\n      let sortedTags = Object.keys(tags).map(function(key) {\r\n        return [key, tags[key]];\r\n      });\r\n\r\n      // Sort the array based on the second element\r\n      sortedTags.sort(function(first, second) {\r\n        return second[1] - first[1];\r\n      });\r\n      tags = [];\r\n\r\n      // Create a new array with only the first 10 items\r\n      sortedTags.slice(0, 10).forEach(tag => {\r\n        tags.push(tag[0])\r\n      })\r\n\r\n      // Set the states required for the Leaderboard and ensure it is descending by default\r\n      this.setState( { leaderboardData: _.sortBy(accountPointMapping, ['points']).reverse() });\r\n      this.setState( { login: login });\r\n      this.setState( { accountType: accountType });\r\n      this.setState({ tags: tags });\r\n    }\r\n    this.setState( { loading: false });\r\n  }\r\n\r\n  // Function to handle the sorting of leaderboard\r\n  handleSort = (clickedColumn) => () => {\r\n    const { column, leaderboardData, direction } = this.state\r\n    if (column !== clickedColumn) {\r\n      this.setState({\r\n        column: clickedColumn,\r\n        leaderboardData: _.sortBy(leaderboardData, [clickedColumn]),\r\n        direction: 'ascending',\r\n      })\r\n      return\r\n    }\r\n    this.setState({\r\n      leaderboardData: leaderboardData.reverse(),\r\n      direction: direction === 'ascending' ? 'descending' : 'ascending',\r\n    })\r\n  }\r\n\r\n  renderQuestionHeader() {\r\n    return(\r\n      <Table.Row>\r\n        <Table.HeaderCell textAlign='center' width={2}><span style={{fontSize: 15, color: '#6A737C'}}>Current Phase</span></Table.HeaderCell>\r\n        <Table.HeaderCell textAlign='center' width={2}><span style={{fontSize: 15, color: '#6A737C'}}>Answers Submitted</span></Table.HeaderCell>\r\n        <Table.HeaderCell textAlign='center' width={2}><span style={{fontSize: 15, color: '#6A737C'}}>Reward</span></Table.HeaderCell>\r\n        <Table.HeaderCell textAlign='center'><span style={{fontSize: 15, color: '#6A737C'}}>Question Title</span></Table.HeaderCell>\r\n      </Table.Row>\r\n    );\r\n  }\r\n\r\n  // Renders out the list of question\r\n  renderQuestionList() {\r\n      return this.props.summaries.map((summary, index) => {\r\n          const questionState = summary[4];\r\n          const tagList = summary[8];\r\n          return <Table.Row key={index}>\r\n            <Table.Cell textAlign='center' width={2}>\r\n                {\r\n                  questionState == 0 ? <Statistic size='mini' color='red'>\r\n                                  <Statistic.Value><span\r\n                                      style={{fontSize: 15, color: '#6A737C'}}> Answering\r\n                                                  </span></Statistic.Value>\r\n                                  <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>Phase</span></Statistic.Label>\r\n                              </Statistic>\r\n                            : questionState == 1 ?\r\n                            <Statistic size='mini' color='red'>\r\n                                  <Statistic.Value><span\r\n                                      style={{fontSize: 15, color: '#6A737C'}}> Voting\r\n                                                  </span></Statistic.Value>\r\n                                  <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>Phase</span></Statistic.Label>\r\n                              </Statistic>\r\n                            :<Statistic size='mini' color='red'>\r\n                                  <Statistic.Value><span\r\n                                      style={{fontSize: 15, color: '#6A737C'}}> Rewarded\r\n                                                  </span></Statistic.Value>\r\n                                  <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>Phase</span></Statistic.Label>\r\n                              </Statistic>\r\n                }\r\n              </Table.Cell>\r\n              <Table.Cell textAlign='center' width={2}>\r\n                  <Statistic size='mini' color='red'>\r\n                      <Statistic.Value><span style={{fontSize: 15, color: '#6A737C'}}>{this.props.numOfAnswers[index]}</span></Statistic.Value>\r\n                      <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>answer(s)</span></Statistic.Label>\r\n                  </Statistic>\r\n              </Table.Cell>\r\n              <Table.Cell textAlign='center' width={2}>\r\n                  <Statistic size='mini' color='red'>\r\n                      <Statistic.Value><span style={{fontSize: 15, color: '#6A737C'}}>{summary[2]*1e-4}</span></Statistic.Value>\r\n                      <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>EQT(s)</span></Statistic.Label>\r\n                  </Statistic>\r\n              </Table.Cell>\r\n              <Table.Cell textAlign='left'>\r\n                  <Grid.Row textAlign='left'>\r\n                      <span style={{fontSize: 18, color: '#6A737C', cursor: 'pointer'}} onClick={() => Router.pushRoute(`/questions/${this.props.deployedQuestions[index]}`)}><a>{summary[0]}</a></span>\r\n                  </Grid.Row>\r\n                  {this.renderTag(tagList, \"mini\")}\r\n              </Table.Cell>\r\n          </Table.Row>\r\n    });\r\n  }\r\n\r\n  renderMobileQuestionList() {\r\n    return this.props.summaries.map((summary, index) => {\r\n      const tags = summary[8];\r\n      const questionState = summary[4];\r\n      let phase = \"\";\r\n      questionState == 0 ? phase = \"ANSWERING PHASE\" : questionState == 1 ? phase = \"VOTING PHASE\" : phase = \"REWARDED PHASE\";\r\n      const tagList = summary[8];\r\n      return <List.Item key={index}>\r\n              <List.Icon name='question circle' size='large' verticalAlign='middle' />\r\n              <List.Content>\r\n                <List.Header as='a' onClick={() => Router.pushRoute(`/questions/${this.props.deployedQuestions[index]}`)}>{summary[0]}</List.Header>\r\n                <Grid>\r\n                <Grid.Column width={10}>\r\n                  <List.Description>{\"Number of Answer(s): \" + this.props.numOfAnswers[index]}</List.Description>\r\n                  <List.Description>{\"Reward: \" + summary[2]*1e-4 + \" EQT(s)\" }</List.Description>\r\n                  {this.renderTag(tags, \"mini\")}\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                  <List.Description><b><font color='red'>{phase}</font></b></List.Description>\r\n                </Grid.Column>\r\n                </Grid>\r\n              </List.Content>\r\n              <Divider hidden/>\r\n            </List.Item>\r\n    });\r\n  }\r\n\r\n  // Render each tag individually for each question\r\n  renderTag(tagList, tagSize) {\r\n    const tagColours = [\"red\", \"olive\", \"blue\", \"teal\", \"green\"];\r\n    return tagList.map((tag, index) => {\r\n      let id = index % 5;\r\n      return(\r\n        <Label as='a' onClick={() => Router.pushRoute(`/${'search/'+encodeURIComponent(tag)}`)}\r\n          tag size={tagSize} key={index} color={tagColours[id]}>\r\n          {tag}\r\n        </Label>\r\n      )\r\n    });\r\n  }\r\n\r\n  renderLeaderBoard() {\r\n    const { column, data, direction } = this.state\r\n    return (\r\n      <Segment>\r\n        <Header as='h3' textAlign=\"center\">\r\n          <Icon name=\"chess king\"/>Leaderboard\r\n        </Header>\r\n        <p style={{ textAlign:'center'}}>\r\n          <b>Current Registered User(s):</b> {this.state.leaderboardData.length}\r\n        </p>\r\n        <Table basic='very' celled collapsing sortable>\r\n          <Table.Header>\r\n            <Table.Row>\r\n              <Table.HeaderCell>Account</Table.HeaderCell>\r\n              <Table.HeaderCell\r\n                sorted={column === 'points' ? direction : null}\r\n                onClick={this.handleSort('points')}>\r\n              Point(s)\r\n              </Table.HeaderCell>\r\n            </Table.Row>\r\n          </Table.Header>\r\n          <Table.Body>\r\n            {this.renderUserList()}\r\n          </Table.Body>\r\n        </Table>\r\n      </Segment>\r\n    );\r\n  }\r\n\r\n  renderTopTags() {\r\n    return (\r\n      <Segment>\r\n        <Header as='h3' textAlign=\"center\">\r\n          <Icon name=\"tags\"/>Top 10 Tags\r\n        </Header>\r\n        {this.renderTag(this.state.tags, \"medium\")}\r\n      </Segment>\r\n    );\r\n  }\r\n\r\n  renderUserList() {\r\n    return this.state.leaderboardData.map((item, index) => {\r\n      return (\r\n        <Table.Row key={index}>\r\n          <Table.Cell textAlign='center'>\r\n            <p style={{fontSize:\"12px\"}}>{item.account}</p>\r\n          </Table.Cell>\r\n          <Table.Cell textAlign='center'>\r\n            <p style={{fontSize:\"12px\"}}>{item.points}</p>\r\n          </Table.Cell>\r\n        </Table.Row>\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.login) {\r\n      return (\r\n        <Layout accountType={this.state.accountType}>\r\n          <Responsive fireOnMount getWidth={getWidthFactory(this.props.isMobileFromSSR)} minWidth={Responsive.onlyTablet.minWidth}>\r\n            <Divider hidden/>\r\n            <Grid centered>\r\n              <Grid.Column width={4}>\r\n                {this.renderLeaderBoard()}\r\n              </Grid.Column>\r\n              <Grid.Column width={8}>\r\n                <Header as='h2' textAlign='center'>\r\n                    Questions Posted\r\n                </Header>\r\n                <Divider hidden/>\r\n                <Table>\r\n                  <Table.Header>\r\n                    {this.renderQuestionHeader()}\r\n                  </Table.Header>\r\n                  <Table.Body>\r\n                    {this.renderQuestionList()}\r\n                  </Table.Body>\r\n                </Table>\r\n                <Divider hidden/>\r\n                <div style={{ marginTop: 20 }}>Found {this.props.summaries.length} Item(s).</div>\r\n              </Grid.Column>\r\n              <Grid.Column width={3}>\r\n                {this.renderTopTags()}\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Responsive>\r\n\r\n          <Responsive fireOnMount getWidth={getWidthFactory(this.props.isMobileFromSSR)} maxWidth={Responsive.onlyMobile.maxWidth}>\r\n            <Divider hidden/>\r\n            <Grid centered>\r\n              <Grid.Column>\r\n                <Header as='h2' textAlign='center'>\r\n                    Questions Posted\r\n                </Header>\r\n                <Divider hidden/>\r\n                <List divided relaxed>\r\n                  {this.renderMobileQuestionList()}\r\n                </List>\r\n                <Divider hidden/>\r\n                <div style={{ marginTop: 20 }}>Found {this.props.summaries.length} Item(s).</div>\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Responsive>\r\n        </Layout>\r\n      );\r\n    } else {\r\n      return (\r\n        <Layout accountType={this.state.accountType}>\r\n          <Modal open={this.state.loading} basic size='small'>\r\n            <Header icon='ethereum' content='Loading Resources' />\r\n            <Modal.Content>\r\n              <Loader active inline=\"centered\">\r\n                Loading Deployed Questions\r\n              </Loader>\r\n            </Modal.Content>\r\n          </Modal>\r\n          <Modal open={!this.state.login && !this.state.loading} basic size='small'>\r\n            <Header icon='ethereum' content='Account Issue' />\r\n            <Modal.Content>\r\n              <p>\r\n                You are facing one of the following issues:\r\n                (1) Banned from accessing the platform\r\n                (2) Currently not registered to access the platform. Please have your account registered.\r\n              </p>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n              <Button color='green' inverted attached='bottom' onClick={() => {\r\n                Router.pushRoute('/')}\r\n              }>\r\n                Register For Account\r\n              </Button>\r\n            </Modal.Actions>\r\n          </Modal>\r\n        </Layout>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}