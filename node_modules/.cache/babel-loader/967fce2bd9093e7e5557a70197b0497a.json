{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport moment from 'moment';\nimport React, { Component } from 'react';\nimport Countdown from 'react-countdown-now';\nimport { Context, Text } from 'react-mathjax2';\nimport { Table, Popup, Button, Container, Form, Header, Comment, Segment, Message, Divider, Icon, Label, Modal, Loader, Image, Grid } from 'semantic-ui-react';\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport ErrorModal from '../components/ErrorModal';\nimport LoadingModal from '../components/LoadingModal';\nimport web3 from '../ethereum/web3';\nimport Question from '../ethereum/question';\nimport EthQuestionToken from '../ethereum/token';\nimport credentials from '../ethereum/credentials';\nimport Profile from '../ethereum/profile';\nimport factory from '../ethereum/factory';\nimport Layout from '../components/Layout';\nimport Footer from '../components/Footer';\nimport { Link, Router } from '../routes';\nimport { getIpfsHash } from '../utils/ipfs';\nimport { logging, checkLogin, checkFieldEmpty, sortingAnswers } from \"../utils/functions\";\n\nvar QuestionRow =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(QuestionRow, _Component);\n\n  function QuestionRow(props) {\n    var _this;\n\n    _classCallCheck(this, QuestionRow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(QuestionRow).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"votePhase\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var accounts, question, logTransaction;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n\n              if (!(_this.state.questionState == 0)) {\n                _context.next = 19;\n                break;\n              }\n\n              _context.next = 4;\n              return web3.eth.getAccounts();\n\n            case 4:\n              accounts = _context.sent;\n              question = Question(_this.state.questionAddress); // Ensure that only Creator of Question can access this function\n\n              _context.t0 = accounts[0];\n              _context.next = 9;\n              return question.methods.getCreator().call();\n\n            case 9:\n              _context.t1 = _context.sent;\n\n              if (!(_context.t0 == _context.t1)) {\n                _context.next = 18;\n                break;\n              }\n\n              _this.setState({\n                changeToVoting: true\n              });\n\n              logTransaction = logging(\"Change to Voting Phase for Question Titled: \" + _this.state.summary[0]);\n              _context.next = 15;\n              return factory.methods.changeQuestionPhase(_this.state.questionAddress, logTransaction).send({\n                from: accounts[0]\n              });\n\n            case 15:\n              Router.pushRoute(\"/questions/\".concat(_this.state.questionAddress));\n              _context.next = 19;\n              break;\n\n            case 18:\n              _this.setState({\n                ownerError: true\n              });\n\n            case 19:\n              _context.next = 24;\n              break;\n\n            case 21:\n              _context.prev = 21;\n              _context.t2 = _context[\"catch\"](0);\n\n              _this.setState({\n                errorMessage: _context.t2.message\n              });\n\n            case 24:\n              _this.setState({\n                changeToVoting: false\n              });\n\n            case 25:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 21]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"rewardPhase\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var accounts, question, logTransaction, rewardMessage, voteMessage, refundMessage;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n\n              if (!(_this.state.questionState == 1)) {\n                _context2.next = 24;\n                break;\n              }\n\n              _context2.next = 4;\n              return web3.eth.getAccounts();\n\n            case 4:\n              accounts = _context2.sent;\n              question = Question(_this.state.questionAddress); // Ensure that only Creator of Question can access this function\n\n              _context2.t0 = accounts[0];\n              _context2.next = 9;\n              return question.methods.getCreator().call();\n\n            case 9:\n              _context2.t1 = _context2.sent;\n\n              if (!(_context2.t0 == _context2.t1)) {\n                _context2.next = 23;\n                break;\n              }\n\n              _this.setState({\n                changeToRewarded: true\n              });\n\n              logTransaction = logging(\"Awarded \" + _this.state.summary[2] * 1e-4 + \" EQT(s) as reward for Question Titled: \" + _this.state.summary[0]);\n              rewardMessage = logging(\"Rewarded \" + _this.state.summary[2] * 1e-4 + \" EQT(s) for most approved answer\");\n              voteMessage = logging(\"Rewarded EQT(s) for approving the most approved answer\");\n              refundMessage = logging(\"Refunded \" + _this.state.summary[2] * 1e-4 + \" EQT(s) as there are no answers or answers with approvals\");\n              _context2.next = 18;\n              return web3.eth.personal.unlockAccount(accounts[0], \"password\", 600);\n\n            case 18:\n              _context2.next = 20;\n              return factory.methods.shareTokenAt(_this.state.questionAddress, logTransaction, rewardMessage, voteMessage, refundMessage, EthQuestionToken._address).send({\n                from: accounts[0]\n              });\n\n            case 20:\n              Router.pushRoute(\"/questions/\".concat(_this.state.questionAddress));\n              _context2.next = 24;\n              break;\n\n            case 23:\n              _this.setState({\n                ownerError: true\n              });\n\n            case 24:\n              _context2.next = 29;\n              break;\n\n            case 26:\n              _context2.prev = 26;\n              _context2.t2 = _context2[\"catch\"](0);\n\n              _this.setState({\n                errorMessage: _context2.t2.message\n              });\n\n            case 29:\n              _this.setState({\n                changeToRewarded: false\n              });\n\n            case 30:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 26]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"fixBalance\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var accounts, question, balance;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context3.sent;\n              question = Question(_this.state.questionAddress); // Ensure that only Creator of Question can access this function\n\n              _context3.t0 = accounts[0];\n              _context3.next = 8;\n              return question.methods.getCreator().call();\n\n            case 8:\n              _context3.t1 = _context3.sent;\n\n              if (!(_context3.t0 == _context3.t1)) {\n                _context3.next = 21;\n                break;\n              }\n\n              _this.setState({\n                fixError: true\n              });\n\n              _context3.t2 = _this.state.summary[2];\n              _context3.next = 14;\n              return EthQuestionToken.methods.balanceOf(_this.state.questionAddress).call();\n\n            case 14:\n              _context3.t3 = _context3.sent;\n              balance = _context3.t2 - _context3.t3;\n              _context3.next = 18;\n              return EthQuestionToken.methods.transfer(_this.state.questionAddress, balance).send({\n                from: accounts[0]\n              });\n\n            case 18:\n              Router.pushRoute(\"/home\");\n              _context3.next = 22;\n              break;\n\n            case 21:\n              _this.setState({\n                ownerError: true\n              });\n\n            case 22:\n              _context3.next = 27;\n              break;\n\n            case 24:\n              _context3.prev = 24;\n              _context3.t4 = _context3[\"catch\"](0);\n\n              _this.setState({\n                errorMessage: _context3.t4.message\n              });\n\n            case 27:\n              _this.setState({\n                fixError: false\n              });\n\n            case 28:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[0, 24]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"timeExtension\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var accounts, question, logTransaction;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context4.sent;\n              question = Question(_this.state.questionAddress); // Ensure that only Creator of Question can access this function\n\n              _context4.t0 = accounts[0];\n              _context4.next = 8;\n              return question.methods.getCreator().call();\n\n            case 8:\n              _context4.t1 = _context4.sent;\n\n              if (!(_context4.t0 == _context4.t1)) {\n                _context4.next = 17;\n                break;\n              }\n\n              _this.setState({\n                timeExtension: true\n              });\n\n              logTransaction = logging(\"Duration Extended for Question Titled: \" + _this.state.summary[0]);\n              _context4.next = 14;\n              return factory.methods.timeExtension(_this.state.questionAddress, logTransaction).send({\n                from: accounts[0]\n              });\n\n            case 14:\n              Router.pushRoute(\"/questions/\".concat(_this.state.questionAddress));\n              _context4.next = 18;\n              break;\n\n            case 17:\n              _this.setState({\n                ownerError: true\n              });\n\n            case 18:\n              _context4.next = 23;\n              break;\n\n            case 20:\n              _context4.prev = 20;\n              _context4.t2 = _context4[\"catch\"](0);\n\n              _this.setState({\n                errorMessage: _context4.t2.message\n              });\n\n            case 23:\n              _this.setState({\n                timeExtension: false\n              });\n\n            case 24:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[0, 20]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"increaseReward\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee5() {\n      var accounts, question, logTransaction;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.prev = 0;\n              _context5.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context5.sent;\n              question = Question(_this.state.questionAddress); // Ensure that only Creator of Question can access this function\n\n              _context5.t0 = accounts[0];\n              _context5.next = 8;\n              return question.methods.getCreator().call();\n\n            case 8:\n              _context5.t1 = _context5.sent;\n\n              if (!(_context5.t0 == _context5.t1)) {\n                _context5.next = 19;\n                break;\n              }\n\n              _this.setState({\n                changeReward: true\n              });\n\n              logTransaction = logging(\"Increase Reward by 1 EQT(s) for Question Titled: \" + _this.state.summary[0]);\n              _context5.next = 14;\n              return factory.methods.increaseReward(_this.state.questionAddress, logTransaction, EthQuestionToken._address).send({\n                from: accounts[0]\n              });\n\n            case 14:\n              _context5.next = 16;\n              return EthQuestionToken.methods.transfer(_this.state.questionAddress, 10e3).send({\n                from: accounts[0]\n              });\n\n            case 16:\n              Router.pushRoute(\"/questions/\".concat(_this.state.questionAddress));\n              _context5.next = 20;\n              break;\n\n            case 19:\n              _this.setState({\n                ownerError: true\n              });\n\n            case 20:\n              _context5.next = 25;\n              break;\n\n            case 22:\n              _context5.prev = 22;\n              _context5.t2 = _context5[\"catch\"](0);\n\n              _this.setState({\n                errorMessage: _context5.t2.message\n              });\n\n            case 25:\n              _this.setState({\n                changeReward: false\n              });\n\n            case 26:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[0, 22]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmitAnswer\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee6() {\n      var accounts, question, logTransaction;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              });\n\n              if (!checkFieldEmpty(_this.state.answer)) {\n                _context6.next = 26;\n                break;\n              }\n\n              _context6.prev = 2;\n              _context6.next = 5;\n              return web3.eth.getAccounts();\n\n            case 5:\n              accounts = _context6.sent;\n              question = Question(_this.state.questionAddress); // Ensure that creator of question cannot provide answers\n\n              _context6.t0 = accounts[0];\n              _context6.next = 10;\n              return question.methods.getCreator().call();\n\n            case 10:\n              _context6.t1 = _context6.sent;\n\n              if (!(_context6.t0 != _context6.t1)) {\n                _context6.next = 18;\n                break;\n              }\n\n              // Logs the transactions\n              logTransaction = logging(\"Submitted Answer for Question Titled: \" + _this.state.summary[0]); // Create new answer\n\n              _context6.next = 15;\n              return factory.methods.createAnswer(_this.state.questionAddress, _this.state.answer, _this.state.fileHashes_array, _this.state.fileNames_array, logTransaction).send({\n                from: accounts[0]\n              });\n\n            case 15:\n              Router.pushRoute(\"/questions/\".concat(_this.state.questionAddress));\n              _context6.next = 19;\n              break;\n\n            case 18:\n              _this.setState({\n                loading: false,\n                errorMessage: \"You cannot provide answer for your own question\"\n              });\n\n            case 19:\n              _context6.next = 24;\n              break;\n\n            case 21:\n              _context6.prev = 21;\n              _context6.t2 = _context6[\"catch\"](2);\n\n              _this.setState({\n                errorMessage: _context6.t2.message\n              });\n\n            case 24:\n              _context6.next = 27;\n              break;\n\n            case 26:\n              _this.setState({\n                loading: false,\n                errorMessage: \"Answer Field Empty\"\n              });\n\n            case 27:\n              _this.setState({\n                loading: false,\n                answer: ''\n              });\n\n            case 28:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[2, 21]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"approveAnswer\",\n    /*#__PURE__*/\n    function () {\n      var _ref7 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(index) {\n        var accounts, question, profile, logTransaction;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _this.setState({\n                  voting: true\n                });\n\n                _context7.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context7.sent;\n                _context7.next = 6;\n                return Question(_this.state.questionAddress);\n\n              case 6:\n                question = _context7.sent;\n                _context7.next = 9;\n                return factory.methods.getProfile(accounts[0]).call();\n\n              case 9:\n                profile = _context7.sent;\n                _context7.prev = 10;\n                _context7.t0 = accounts[0];\n                _context7.next = 14;\n                return question.methods.getAnswerer(index).call();\n\n              case 14:\n                _context7.t1 = _context7.sent;\n\n                if (!(_context7.t0 != _context7.t1)) {\n                  _context7.next = 39;\n                  break;\n                }\n\n                _context7.next = 18;\n                return question.methods.checkVoter(index, profile).call();\n\n              case 18:\n                if (_context7.sent) {\n                  _context7.next = 36;\n                  break;\n                }\n\n                _context7.next = 21;\n                return question.methods.state().call();\n\n              case 21:\n                _context7.t2 = _context7.sent;\n\n                if (!(_context7.t2 != 2)) {\n                  _context7.next = 30;\n                  break;\n                }\n\n                _context7.t3 = EthQuestionToken.methods;\n                _context7.next = 26;\n                return _this.state.questionAddress;\n\n              case 26:\n                _context7.t4 = _context7.sent;\n                _context7.t5 = {\n                  from: accounts[0]\n                };\n                _context7.next = 30;\n                return _context7.t3.transfer.call(_context7.t3, _context7.t4, 10e3).send(_context7.t5);\n\n              case 30:\n                logTransaction = logging(\"Approved An Answer for Question Titled: \" + _this.state.summary[0]);\n                _context7.next = 33;\n                return factory.methods.approveAnswer(_this.state.questionAddress, index, logTransaction).send({\n                  from: accounts[0]\n                });\n\n              case 33:\n                Router.pushRoute(\"/questions/\".concat(_this.state.questionAddress));\n                _context7.next = 37;\n                break;\n\n              case 36:\n                _this.setState({\n                  voteMultipleError: true\n                });\n\n              case 37:\n                _context7.next = 40;\n                break;\n\n              case 39:\n                _this.setState({\n                  voteError: true\n                });\n\n              case 40:\n                _context7.next = 45;\n                break;\n\n              case 42:\n                _context7.prev = 42;\n                _context7.t6 = _context7[\"catch\"](10);\n\n                _this.setState({\n                  errorMessage: _context7.t6.message\n                });\n\n              case 45:\n                _this.setState({\n                  voting: false\n                });\n\n              case 46:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, null, [[10, 42]]);\n      }));\n\n      return function (_x) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"onFileSelected\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee9() {\n      var reader, file, _this$state, files_array, fileNames_array, fileHashes_array;\n\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              // Access JavaScript FileReader() method for conversion to buffer\n              reader = new FileReader();\n              file = _this.fileInput.files[0];\n\n              _this.setState({\n                fileLoading: true\n              });\n\n              if (file instanceof Blob) {\n                _this$state = _this.state, files_array = _this$state.files_array, fileNames_array = _this$state.fileNames_array, fileHashes_array = _this$state.fileHashes_array;\n                files_array.push(file);\n                fileNames_array.push(file.name);\n\n                _this.setState({\n                  files_array: files_array,\n                  fileNames_array: fileNames_array\n                });\n\n                console.log(\"fileNames_array: \", fileNames_array);\n                reader.onloadend =\n                /*#__PURE__*/\n                _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee8() {\n                  var fileHash;\n                  return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n                    while (1) {\n                      switch (_context8.prev = _context8.next) {\n                        case 0:\n                          _context8.next = 2;\n                          return _this.setState({\n                            fileUrl: reader.result,\n                            fileLoading: true,\n                            buffer: Buffer.from(reader.result) // File is converted to a buffer for upload to IPFS\n\n                          });\n\n                        case 2:\n                          if (!_this.state.buffer) {\n                            _context8.next = 8;\n                            break;\n                          }\n\n                          _context8.next = 5;\n                          return getIpfsHash(file);\n\n                        case 5:\n                          _context8.t0 = _context8.sent;\n                          _context8.next = 9;\n                          break;\n\n                        case 8:\n                          _context8.t0 = '0';\n\n                        case 9:\n                          fileHash = _context8.t0;\n                          fileHashes_array.push(fileHash);\n\n                          _this.setState({\n                            fileHashes_array: fileHashes_array\n                          });\n\n                          console.log(\"fileHashes_array: \", fileHashes_array);\n\n                          _this.setState({\n                            fileLoading: false\n                          });\n\n                        case 14:\n                        case \"end\":\n                          return _context8.stop();\n                      }\n                    }\n                  }, _callee8);\n                }));\n                reader.readAsDataURL(file);\n              }\n\n            case 4:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"onFileRemoved\", function (file) {\n      var i = 0;\n      var _this$state2 = _this.state,\n          files_array = _this$state2.files_array,\n          fileHashes_array = _this$state2.fileHashes_array,\n          fileNames_array = _this$state2.fileNames_array;\n      console.log('file: ', file);\n\n      for (i = 0; i < files_array.length; i++) {\n        if (file === files_array[i]) {\n          files_array.splice(i, 1);\n          fileNames_array.splice(i, 1);\n          fileHashes_array.splice(i, 1);\n          break;\n        }\n      }\n\n      _this.setState({\n        files_array: files_array,\n        fileNames_array: fileNames_array,\n        fileHashes_array: fileHashes_array\n      });\n\n      console.log('fileNames_array', fileNames_array);\n      console.log(\"fileHashes_array: \", fileHashes_array);\n    });\n\n    _this.state = {\n      questionAddress: '',\n      questionState: '',\n      summary: [],\n      time: '',\n      answerList: [],\n      avatarListIcon: [],\n      votingTime: '',\n      voting: false,\n      answer: '',\n      errorMessage: '',\n      loading: false,\n      voteError: false,\n      ownerError: false,\n      voteMultipleError: false,\n      changeToVoting: false,\n      changeToRewarded: false,\n      timeExtension: false,\n      changeReward: false,\n      fileLoading: false,\n      buffer: null,\n      files_array: [],\n      fileHashes_array: [],\n      fileNames_array: [],\n      login: false,\n      resourceLoading: true,\n      accountType: null,\n      balanceError: false,\n      fixError: false,\n      sorted: false\n    };\n    return _this;\n  }\n\n  _createClass(QuestionRow, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee10() {\n        var login, accounts, profileAddress, profile, accountType;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                if (!(typeof web3 === 'undefined')) {\n                  _context10.next = 3;\n                  break;\n                }\n\n                this.setState({\n                  resourceLoading: false\n                });\n                return _context10.abrupt(\"return\");\n\n              case 3:\n                login = false; // Retrieve the Ethereum Account from MetaMask\n\n                _context10.next = 6;\n                return web3.eth.getAccounts();\n\n              case 6:\n                accounts = _context10.sent;\n                _context10.next = 9;\n                return checkLogin(accounts[0]);\n\n              case 9:\n                if (!_context10.sent) {\n                  _context10.next = 22;\n                  break;\n                }\n\n                login = true; // Get Account Type\n\n                _context10.next = 13;\n                return factory.methods.getProfile(accounts[0]).call();\n\n              case 13:\n                profileAddress = _context10.sent;\n                profile = Profile(profileAddress);\n                _context10.next = 17;\n                return profile.methods.getAccountType().call();\n\n              case 17:\n                accountType = _context10.sent;\n                accountType == 0 ? accountType = \"Admin\" : accountType = \"User\";\n                _context10.next = 21;\n                return this.fetchQuestionData();\n\n              case 21:\n                this.setState({\n                  login: login,\n                  accountType: accountType\n                });\n\n              case 22:\n                this.setState({\n                  resourceLoading: false\n                });\n\n              case 23:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"componentDidUpdate\",\n    value: function () {\n      var _componentDidUpdate = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee11(prevProps) {\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                if (this.props != prevProps) {\n                  this.fetchQuestionData();\n                }\n\n              case 1:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function componentDidUpdate(_x2) {\n        return _componentDidUpdate.apply(this, arguments);\n      }\n\n      return componentDidUpdate;\n    }()\n  }, {\n    key: \"fetchQuestionData\",\n    value: function () {\n      var _fetchQuestionData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee12() {\n        var error, questionAddress, question, summary, time, answerList, iconList, avatarListIcon;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                error = false;\n                questionAddress = this.props.questionAddress;\n                question = Question(questionAddress); // Fetch Question Information\n\n                _context12.next = 5;\n                return question.methods.getSummary().call();\n\n              case 5:\n                summary = _context12.sent;\n                _context12.next = 8;\n                return question.methods.getTime().call();\n\n              case 8:\n                time = _context12.sent;\n                _context12.next = 11;\n                return question.methods.getAnswerList().call();\n\n              case 11:\n                answerList = _context12.sent;\n                // Fetch Avatar Icons\n                iconList = ['alligator', 'anteater', 'armadillo', 'auroch', 'axolotl', 'badger', 'bat', 'beaver', 'buffalo', 'camel', 'capybara', 'chameleon', 'cheetah', 'chinchilla', 'chipmunk', 'chupacabra', 'cormorant', 'coyote', 'crow', 'dingo', 'dinosaur', 'dolphin', 'duck', 'elephant', 'ferret', 'fox', 'frog', 'giraffe', 'gopher', 'grizzly', 'hedgehog', 'hippo', 'hyena', 'ibex', 'ifrit', 'iguana', 'jackal', 'kangaroo', 'koala', 'kraken', 'lemur', 'leopard', 'liger', 'llama', 'manatee', 'mink', 'monkey', 'moose', 'narwhal', 'orangutan', 'otter', 'panda', 'penguin', 'platypus', 'pumpkin', 'python', 'quagga', 'rabbit', 'raccoon', 'rhino', 'sheep', 'shrew', 'skunk', 'squirrel', 'tiger', 'turtle', 'walrus', 'wolf', 'wolverine', 'wombat'];\n                avatarListIcon = iconList.map(function (item) {\n                  return 'https://ssl.gstatic.com/docs/common/profile/' + item + '_lg.png';\n                }); // Check for balance error\n\n                _context12.next = 16;\n                return EthQuestionToken.methods.balanceOf(questionAddress).call();\n\n              case 16:\n                _context12.t0 = _context12.sent;\n                _context12.t1 = summary[2];\n\n                if (!(_context12.t0 != _context12.t1)) {\n                  _context12.next = 22;\n                  break;\n                }\n\n                error = true;\n                _context12.next = 23;\n                break;\n\n              case 22:\n                error = false;\n\n              case 23:\n                this.setState({\n                  questionAddress: questionAddress,\n                  questionState: summary[4],\n                  summary: summary,\n                  time: time,\n                  avatarListIcon: avatarListIcon,\n                  answerList: answerList.reverse(),\n                  votingTime: time[3],\n                  balanceError: error\n                });\n\n              case 24:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function fetchQuestionData() {\n        return _fetchQuestionData.apply(this, arguments);\n      }\n\n      return fetchQuestionData;\n    }()\n  }, {\n    key: \"renderTag\",\n    // Render each tag individually for each question\n    value: function renderTag(tagList, tagSize) {\n      var tagColours = [\"red\", \"olive\", \"blue\", \"teal\", \"green\"];\n      return tagList.map(function (tag, index) {\n        var id = index % 5;\n        return React.createElement(Label, {\n          as: \"a\",\n          onClick: function onClick() {\n            return Router.pushRoute(\"/\".concat('search/' + encodeURIComponent(tag)));\n          },\n          tag: true,\n          size: tagSize,\n          key: index,\n          color: tagColours[id]\n        }, tag);\n      });\n    }\n  }, {\n    key: \"renderQuestion\",\n    value: function renderQuestion() {\n      var summary = this.state.summary;\n      var time = this.state.time;\n      var currentTime = new Date().getTime();\n      var maxDuration = (_parseFloat(summary[3]) / 60 / 60).toFixed(2).toString().toString();\n      var publishTime = moment.unix(time[0]).format('dddd, Do MMMM YYYY, h:mm:ss a');\n      var votingTime = moment.unix(this.state.votingTime).format('dddd, Do MMMM YYYY, h:mm:ss a');\n      var publishTimeMs = moment.unix(time[0]).valueOf();\n      var maxDurationMs = moment.unix(time[2]).valueOf();\n      var votingTimeMs = moment.unix(this.state.votingTime).valueOf();\n      var remainingTime = 0;\n\n      if (this.state.questionState == 0) {\n        remainingTime = publishTimeMs + maxDurationMs - currentTime;\n\n        if (remainingTime < 0) {\n          remainingTime = 0;\n        }\n      } else {\n        remainingTime = votingTimeMs + maxDurationMs - currentTime;\n\n        if (remainingTime < 0) {\n          remainingTime = 0;\n        }\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(Table, {\n        definition: true\n      }, React.createElement(Table.Body, null, React.createElement(Table.Row, null, React.createElement(Table.Cell, {\n        width: 2\n      }, \"Question Title\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px',\n          lineHeight: '1.5'\n        }\n      }, summary[0])), React.createElement(Table.Row, null, React.createElement(Table.Cell, {\n        width: 2\n      }, \"Description\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px',\n          lineHeight: '1.5'\n        }\n      }, React.createElement(Context, {\n        input: \"tex\",\n        onLoad: function onLoad() {\n          return console.log(\"Loaded MathJax script!\");\n        },\n        onError: function onError(MathJax, error) {\n          console.warn(error);\n          console.log(\"Encountered a MathJax error, re-attempting a typeset!\");\n          MathJax.Hub.Queue(MathJax.Hub.Typeset());\n        },\n        options: {\n          asciimath2jax: {\n            useMathMLspacing: true,\n            delimiters: [[\"$$\", \"$$\"]],\n            preview: \"none\"\n          }\n        }\n      }, React.createElement(Text, {\n        text: summary[1]\n      })))), React.createElement(Table.Row, null, React.createElement(Table.Cell, {\n        width: 2\n      }, \"Tags\"), React.createElement(Table.Cell, null, this.renderTag(summary[8], \"small\"))), React.createElement(Table.Row, null, React.createElement(Table.Cell, null, \"Reward (EQT)\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px'\n        }\n      }, summary[2] * 1e-4, this.state.questionState == 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"ethereum\",\n          color: \"black\",\n          onClick: this.increaseReward\n        }),\n        content: \"Increase Reward\",\n        position: \"bottom right\",\n        inverted: true\n      }) : React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"ethereum\",\n          color: \"black\",\n          disabled: true\n        }),\n        position: \"bottom right\",\n        inverted: true\n      }))), React.createElement(Table.Row, null, React.createElement(Table.Cell, null, \"Publish Time\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px'\n        }\n      }, publishTime)), React.createElement(Table.Row, null, React.createElement(Table.Cell, null, \"Answering Duration (hours)\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px'\n        }\n      }, React.createElement(\"span\", {\n        style: {\n          verticalAlign: 'middle',\n          lineHeight: '33px'\n        }\n      }, maxDuration), this.state.questionState == 0 && remainingTime > 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"violet\"\n        }),\n        content: React.createElement(\"span\", null, React.createElement(\"span\", null, \"Remaining time - \"), React.createElement(Countdown, {\n          date: _Date$now() + remainingTime\n        })),\n        position: \"bottom right\",\n        inverted: true\n      }) : this.state.questionState == 0 && remainingTime == 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"red\"\n        }),\n        flowing: true,\n        hoverable: true\n      }, React.createElement(Grid, {\n        centered: true,\n        divided: true,\n        columns: 2\n      }, React.createElement(Grid.Column, {\n        textAlign: \"center\"\n      }, React.createElement(\"p\", null, \"Extends the validity of question by 1 hour\"), React.createElement(Button, {\n        onClick: this.timeExtension\n      }, \"Extend Deadline\")), this.state.balanceError == true ? React.createElement(Grid.Column, {\n        textAlign: \"center\"\n      }, React.createElement(\"p\", null, \"Reward Balance Error\"), React.createElement(Button, {\n        onClick: this.fixBalance\n      }, \"Fix Balance\")) : React.createElement(Grid.Column, {\n        textAlign: \"center\"\n      }, React.createElement(\"p\", null, \"Proceed to the voting phase\"), React.createElement(Button, {\n        onClick: this.votePhase\n      }, \"Voting Phase\")))) : React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"red\",\n          disabled: true\n        }),\n        position: \"bottom right\",\n        inverted: true\n      }))), React.createElement(Table.Row, null, React.createElement(Table.Cell, null, \"Voting Duration (hours)\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px'\n        }\n      }, React.createElement(\"span\", {\n        style: {\n          verticalAlign: 'middle',\n          lineHeight: '33px'\n        }\n      }, maxDuration), this.state.questionState == 1 && remainingTime > 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"violet\"\n        }),\n        content: React.createElement(\"span\", null, React.createElement(\"span\", null, \"Remaining time - \"), React.createElement(Countdown, {\n          date: _Date$now() + remainingTime\n        })),\n        position: \"bottom right\",\n        inverted: true\n      }) : this.state.questionState == 1 && remainingTime == 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"red\",\n          onClick: this.rewardPhase\n        }),\n        content: \"Reward\",\n        position: \"bottom right\",\n        inverted: true\n      }) : this.state.questionState == 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"red\",\n          disabled: true\n        }),\n        position: \"bottom right\",\n        inverted: true\n      }) : React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"red\",\n          disabled: true\n        }),\n        position: \"bottom right\",\n        inverted: true\n      }))))));\n    }\n  }, {\n    key: \"renderAnswers\",\n    value: function renderAnswers() {\n      var _this2 = this;\n\n      var answers = this.state.answerList;\n      answers = sortingAnswers(answers, this.state.sorted); // Answering Phase no answers are shown\n\n      if (this.state.questionState != 0) {\n        return answers.map(function (answer, index) {\n          var answeredTime = moment.unix(answer[5]).format('Do MMMM YYYY, h:mm a');\n          var id = index % 70;\n          return React.createElement(Comment, {\n            key: index\n          }, React.createElement(Comment.Avatar, {\n            src: _this2.state.avatarListIcon[id],\n            style: {\n              backgroundColor: '#8D8741'\n            }\n          }), React.createElement(Comment.Content, null, React.createElement(Comment.Author, {\n            as: \"a\"\n          }, answer[2]), React.createElement(Comment.Metadata, null, React.createElement(\"div\", null, answeredTime)), React.createElement(\"br\", null), answer[1] ? React.createElement(\"b\", null, React.createElement(\"font\", {\n            color: \"red\"\n          }, React.createElement(Icon, {\n            name: \"certificate\"\n          }), \"Rewarded\")) : null, _this2.state.questionState == 2 ? React.createElement(Comment.Metadata, null, React.createElement(\"div\", null, React.createElement(Icon, {\n            name: \"thumbs up\"\n          }), answer[4])) : React.createElement(Comment.Metadata, null, React.createElement(\"div\", null, React.createElement(Icon, {\n            name: \"thumbs up\"\n          }), \"0\")), React.createElement(Comment.Text, null, React.createElement(Context, {\n            input: \"tex\",\n            onLoad: function onLoad() {\n              return console.log(\"Loaded MathJax script!\");\n            },\n            onError: function onError(MathJax, error) {\n              console.warn(error);\n              console.log(\"Encountered a MathJax error, re-attempting a typeset!\");\n              MathJax.Hub.Queue(MathJax.Hub.Typeset());\n            },\n            options: {\n              asciimath2jax: {\n                useMathMLspacing: true,\n                delimiters: [[\"$$\", \"$$\"]],\n                preview: \"none\"\n              }\n            }\n          }, React.createElement(Text, {\n            text: answer[0]\n          })), answer[7].map(function (imageName, index) {\n            return React.createElement(\"div\", {\n              style: {\n                marginBottom: '10px'\n              },\n              key: index\n            }, React.createElement(Image, {\n              src: \"https://ipfs.io/ipfs/\" + answer[8][index],\n              centered: true\n            }));\n          })), React.createElement(Comment.Actions, null, React.createElement(Comment.Action, null, React.createElement(Button, {\n            style: {\n              float: 'right',\n              verticalAlign: 'middle'\n            },\n            icon: \"thumbs up\",\n            onClick: function onClick() {\n              return _this2.approveAnswer(index);\n            },\n            size: \"tiny\",\n            content: \"Approve Answer\",\n            color: \"green\"\n          })))));\n        });\n      }\n    }\n  }, {\n    key: \"renderFiles\",\n    value: function renderFiles() {\n      var fileHashes = this.state.summary[5];\n      var fileNames = this.state.summary[6];\n\n      if (fileHashes.length == 0) {\n        return React.createElement(Segment, {\n          placeholder: true\n        }, React.createElement(Header, {\n          icon: true\n        }, React.createElement(Icon, {\n          name: \"images outline\"\n        }), \"No images are uploaded for this question\"));\n      } else {\n        return React.createElement(Segment, {\n          placeholder: true\n        }, React.createElement(\"center\", null, React.createElement(\"p\", null, \"Image(s) Uploaded\"), fileNames.map(function (fileName, index) {\n          return React.createElement(\"div\", {\n            style: {\n              marginBottom: '10px'\n            },\n            key: index\n          }, React.createElement(Image, {\n            src: \"https://ipfs.io/ipfs/\" + fileHashes[index]\n          }), React.createElement(Divider, {\n            hidden: true\n          }), React.createElement(\"p\", null, \" To download: \"), React.createElement(Label, {\n            as: \"a\",\n            size: \"big\",\n            href: \"https://ipfs.io/ipfs/\" + fileHashes[index]\n          }, React.createElement(Icon, {\n            name: \"download\"\n          }), fileName));\n        })));\n      }\n    }\n  }, {\n    key: \"renderAnswersForm\",\n    value: function renderAnswersForm() {\n      var _this3 = this;\n\n      var files_array = this.state.files_array;\n      var elmFiles = null;\n\n      if (files_array !== null) {\n        elmFiles = files_array.map(function (item, index) {\n          return React.createElement(Label, {\n            as: \"a\",\n            key: index,\n            size: \"big\"\n          }, item.name, React.createElement(Icon, {\n            name: \"delete\",\n            onClick: function onClick() {\n              return _this3.onFileRemoved(item);\n            }\n          }));\n        });\n      }\n\n      return React.createElement(Form, {\n        error: !!this.state.errorMessage\n      }, React.createElement(Form.TextArea, {\n        placeholder: \"Enter Answers\",\n        value: this.state.answer,\n        onChange: function onChange(event) {\n          return _this3.setState({\n            answer: event.target.value\n          });\n        }\n      }), React.createElement(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.errorMessage\n      }), React.createElement(Form.Field, null, this.renderFilesUpload(elmFiles)), React.createElement(Modal, {\n        open: this.state.loading,\n        trigger: this.state.questionState == 1 ? React.createElement(Button, {\n          content: \"Submit Answers\",\n          disabled: true,\n          labelPosition: \"left\",\n          icon: \"edit\",\n          primary: true\n        }) : React.createElement(Button, {\n          content: \"Submit Answers\",\n          onClick: this.onSubmitAnswer,\n          loading: this.state.loading,\n          labelPosition: \"left\",\n          icon: \"edit\",\n          primary: true\n        }),\n        basic: true,\n        size: \"small\"\n      }, React.createElement(Header, {\n        content: \"Posting New Answers\"\n      }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"Please Confirm the MetaMask Transaction Request to submit your Answers to the Block-Chain Network. Upon successful submission, you will be redirected back to the Question Page. This process might take awhile.\"), React.createElement(Loader, {\n        active: true,\n        inline: \"centered\"\n      }, \"Loading\"))));\n    }\n  }, {\n    key: \"renderFilesUpload\",\n    value: function renderFilesUpload(files) {\n      var _this4 = this;\n\n      var files_array = this.state.files_array;\n\n      if (this.state.files_array.length == 0) {\n        return React.createElement(Segment, {\n          placeholder: true\n        }, React.createElement(Header, {\n          icon: true\n        }, React.createElement(Icon, {\n          name: \"images outline\"\n        }), \"No images are uploaded for this answer\"), React.createElement(\"input\", {\n          style: {\n            display: 'none'\n          },\n          type: \"file\",\n          onChange: function onChange() {\n            return _this4.onFileSelected();\n          },\n          ref: function ref(fileInput) {\n            return _this4.fileInput = fileInput;\n          }\n        }), React.createElement(Button, {\n          primary: true,\n          onClick: function onClick() {\n            return _this4.fileInput.click();\n          },\n          loading: this.state.fileLoading\n        }, \"Upload Image\"));\n      } else {\n        return React.createElement(Segment, {\n          placeholder: true\n        }, React.createElement(\"center\", null, React.createElement(\"div\", {\n          style: {\n            marginBottom: '20px'\n          }\n        }, files), React.createElement(\"input\", {\n          style: {\n            display: 'none'\n          },\n          type: \"file\",\n          onChange: function onChange() {\n            return _this4.onFileSelected();\n          },\n          ref: function ref(fileInput) {\n            return _this4.fileInput = fileInput;\n          }\n        }), React.createElement(Button, {\n          primary: true,\n          onClick: function onClick() {\n            return _this4.fileInput.click();\n          },\n          loading: this.state.fileLoading\n        }, \"Upload Files\")));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      if (this.state.login) {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(Container, null, React.createElement(Divider, {\n          hidden: true\n        }), this.renderQuestion(), React.createElement(Divider, null), this.renderFiles(), React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"Submit Your Answers Here\"), React.createElement(\"p\", null, React.createElement(\"b\", null, \"Note:\"), \" To include math equations, delimit the latex format with $$.\"), React.createElement(\"a\", {\n          style: {\n            display: \"table-cell\"\n          },\n          href: \"https://www.codecogs.com/latex/eqneditor.php\",\n          target: \"_blank\"\n        }, \"Link to Supported Latex Editor\"), this.renderAnswersForm(), React.createElement(Button, {\n          icon: this.state.sorted ? \"sort numeric down\" : \"sort numeric up\",\n          onClick: function onClick() {\n            _this5.setState({\n              sorted: !_this5.state.sorted\n            });\n          },\n          floated: \"right\",\n          size: \"mini\"\n        }), React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"Answer(s) Submitted: \", this.state.answerList.length), React.createElement(Divider, null), React.createElement(Comment.Group, {\n          size: \"large\"\n        }, this.renderAnswers()), React.createElement(ErrorModal, {\n          error: this.state.voteError,\n          title: 'Cannot Approve Own Answers',\n          content: \"You have selected to approve the answer you have provided. Please only approve answers provided by others.\",\n          questionAddress: this.state.questionAddress,\n          stateChange: function stateChange() {\n            _this5.setState({\n              voteError: false\n            });\n          }\n        }), React.createElement(ErrorModal, {\n          error: this.state.ownerError,\n          title: 'Only Available For Owner Of Question',\n          content: \"You cannot change the state of the question as you are not the owner.\",\n          questionAddress: this.state.questionAddress,\n          stateChange: function stateChange() {\n            _this5.setState({\n              ownerError: false\n            });\n          }\n        }), React.createElement(ErrorModal, {\n          error: this.state.voteMultipleError,\n          title: 'Answer Already Approved',\n          content: \"You cannot approve the same answer more than once. Please approve another answer.\",\n          questionAddress: this.state.questionAddress,\n          stateChange: function stateChange() {\n            _this5.setState({\n              voteMultipleError: false\n            });\n          }\n        }), React.createElement(ErrorModal, {\n          error: this.state.voteMultipleError,\n          title: 'Answer Already Approved',\n          content: \"You cannot approve the same answer more than once. Please approve another answer.\",\n          questionAddress: this.state.questionAddress,\n          stateChange: function stateChange() {\n            _this5.setState({\n              voteMultipleError: false\n            });\n          }\n        }), React.createElement(LoadingModal, {\n          trigger: this.state.changeToVoting,\n          title: 'Changing Question State to Voting Phase',\n          content: \"Please Confirm the MetaMask Transaction Request to change question state to Voting Phase.\",\n          loader: \"Changing Question State\"\n        }), React.createElement(LoadingModal, {\n          trigger: this.state.changeToRewarded,\n          title: 'Changing Question State to Rewarded Phase',\n          content: \"Please Confirm the MetaMask Transaction Request to change question state to Rewarded Phase.\",\n          loader: \"Changing Question State\"\n        }), React.createElement(LoadingModal, {\n          trigger: this.state.timeExtension,\n          title: 'Extending Question Deadline',\n          content: \"Please Confirm the MetaMask Transaction Request to extend the duration of the question.\",\n          loader: \"Extending Deadline\"\n        }), React.createElement(LoadingModal, {\n          trigger: this.state.changeReward,\n          title: 'Increasing Reward',\n          content: \"Please Confirm the MetaMask Transaction Request to increase reward.\",\n          loader: \"Increasing Reward\"\n        }), React.createElement(LoadingModal, {\n          trigger: this.state.voting,\n          title: 'Approving Answer',\n          content: \"Please Confirm the MetaMask Transaction Request to approve an answer. You cannot change your choice upon submission.\",\n          loader: \"Approving\"\n        }), React.createElement(LoadingModal, {\n          trigger: this.state.fixError,\n          title: 'Fixing Balance Error',\n          content: \"Please Confirm the MetaMask Transaction Request to fix the balance error.\",\n          loader: \"Fixing Balance\"\n        })));\n      } else {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(AccountIssueModal, {\n          loading: this.state.resourceLoading,\n          login: this.state.login\n        }));\n      }\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee13(props) {\n        var questionAddress;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                // Retrieve question data\n                questionAddress = props.query.value;\n                return _context13.abrupt(\"return\", {\n                  questionAddress: questionAddress\n                });\n\n              case 2:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13);\n      }));\n\n      function getInitialProps(_x3) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return QuestionRow;\n}(Component);\n\nexport default QuestionRow;","map":null,"metadata":{},"sourceType":"module"}