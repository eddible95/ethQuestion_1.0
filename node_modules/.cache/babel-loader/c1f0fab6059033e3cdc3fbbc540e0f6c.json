{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { Button, Form, Container, Divider, Input, Segment, Message, Icon, Modal, Header, Loader } from 'semantic-ui-react';\nimport LoginLayout from '../components/LoginLayout';\nimport web3 from '../ethereum/web3';\nimport Profile from '../ethereum/profile';\nimport factory from '../ethereum/factory';\nimport EthQuestionToken from '../ethereum/token';\nimport EthQuestionTokenSale from '../ethereum/tokenSale';\nimport credentials from '../ethereum/credentials';\nimport { Router } from '../routes';\nimport { validate, logging } from '../utils/functions';\n\nvar passwordHash = require('password-hash');\n\nvar RegisterPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(RegisterPage, _Component);\n\n  function RegisterPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, RegisterPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RegisterPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      emailAddress: '',\n      password: '',\n      loading: false,\n      showKeys: true,\n      errorMessage: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var validEmail, emailNotExist, accounts, hashedPassword, _wallet, _hashedPassword, logTransaction;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              }); // Check for valid NTU Student Email Address, Existence of Email Address and EthWallet\n\n\n              _context.prev = 1;\n              validEmail = validate(_this.state.emailAddress);\n              _context.next = 5;\n              return credentials.methods.emailNotExist(_this.state.emailAddress).call();\n\n            case 5:\n              emailNotExist = _context.sent;\n\n              if (!(validEmail && !emailNotExist)) {\n                _context.next = 36;\n                break;\n              }\n\n              if (!(_this.state.emailAddress === \"admin\")) {\n                _context.next = 17;\n                break;\n              }\n\n              _context.next = 10;\n              return web3.eth.getAccounts();\n\n            case 10:\n              accounts = _context.sent;\n              hashedPassword = passwordHash.generate(_this.state.password);\n              _context.next = 14;\n              return factory.methods // Create Admin\n              .createAdmin(credentials._address, _this.state.emailAddress, hashedPassword).send({\n                from: accounts[0],\n                gasPrice: \"0\"\n              });\n\n            case 14:\n              document.cookie = \"wallet=\".concat(accounts[0], \"; path=/\");\n              _context.next = 32;\n              break;\n\n            case 17:\n              _context.next = 19;\n              return web3.eth.accounts.create();\n\n            case 19:\n              _wallet = _context.sent;\n              _hashedPassword = passwordHash.generate(_this.state.password);\n              _context.next = 23;\n              return web3.eth.personal.importRawKey(_wallet['privateKey'].slice(2), _this.state.password);\n\n            case 23:\n              account = _context.sent;\n              _context.next = 26;\n              return web3.eth.personal.unlockAccount(account, _this.state.password, 3600);\n\n            case 26:\n              logTransaction = logging(\"Credited 10 EQT(s) for first time User\");\n              _context.next = 29;\n              return EthQuestionTokenSale.methods;\n\n            case 29:\n              _context.next = 31;\n              return factory.methods.createProfile(credentials._address, _this.state.emailAddress, _hashedPassword, EthQuestionToken._address, EthQuestionTokenSale._address, logTransaction).send({\n                from: account,\n                gasPrice: \"0\"\n              });\n\n            case 31:\n              document.cookie = \"wallet=\".concat(account, \"; path=/\");\n\n            case 32:\n              document.cookie = \"login=\".concat(true, \"; path=/\");\n\n              _this.setState({\n                loading: false,\n                showKeys: true,\n                publicKey: account,\n                privateKey: wallet['privateKey']\n              });\n\n              _context.next = 38;\n              break;\n\n            case 36:\n              _this.setState({\n                errorMessage: \"Invalid Email Address or Email Address Already In Used\"\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 38:\n              _context.next = 44;\n              break;\n\n            case 40:\n              _context.prev = 40;\n              _context.t0 = _context[\"catch\"](1);\n\n              _this.setState({\n                errorMessage: _context.t0.message\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 44:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 40]]);\n    })));\n\n    return _this;\n  }\n\n  _createClass(RegisterPage, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // Delete any existing Cookies\n                document.cookie = \"login=\".concat(false, \"; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT\");\n                document.cookie = \"wallet=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT\";\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"renderForm\",\n    value: function renderForm() {\n      var _this2 = this;\n\n      return React.createElement(Form, {\n        error: !!this.state.errorMessage\n      }, React.createElement(Segment, {\n        raised: true,\n        textAlign: \"center\"\n      }, \"This will create a password-protected account using your NTU email address and have it linked to cryptocurrency wallet created by the system.\"), React.createElement(Form.Field, null, React.createElement(\"label\", null, \"NTU Student Email Address\"), React.createElement(Input, {\n        placeholder: \"example@e.ntu.edu.sg\",\n        value: this.state.emailAddress,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            emailAddress: event.target.value\n          });\n        }\n      })), React.createElement(Form.Field, null, React.createElement(\"label\", null, \"Password\"), React.createElement(Input, {\n        placeholder: \"Password\",\n        type: \"password\",\n        value: this.state.password,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            password: event.target.value\n          });\n        }\n      })), React.createElement(Button, {\n        primary: true,\n        onClick: function onClick() {\n          return Router.pushRoute(\"/\");\n        }\n      }, \"Go Back\"), React.createElement(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.errorMessage\n      }), React.createElement(Modal, {\n        open: this.state.loading,\n        trigger: React.createElement(Button, {\n          primary: true,\n          onClick: this.onSubmit\n        }, \"Register\"),\n        basic: true,\n        size: \"small\"\n      }, React.createElement(Header, {\n        content: \"Registering Your Email Address\"\n      }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"Please confirm the MetaMask transaction for creation of Profile and Registering of Email Address. Upon confirming the requests, please hold on while the system completes the registration process...\"), React.createElement(Loader, {\n        active: true,\n        inline: \"centered\"\n      }, \"Registering Your Email\"))), React.createElement(Modal, {\n        open: this.state.showKeys,\n        basic: true,\n        size: \"small\"\n      }, React.createElement(Header, {\n        content: \"Wallet Information\"\n      }), React.createElement(Modal.Content, null, \"WARNING: Never reveal your private key to anyone. These keys will be required for future access to your wallet, please have it recorded down.\", React.createElement(\"p\", null, \"Public Key: \", this.state.account), React.createElement(\"p\", null, \"Private Key: \", this.state.privateKey)), React.createElement(Modal.Actions, null, React.createElement(Button, {\n        color: \"green\",\n        onClick: function onClick() {\n          return Router.pushRoute(\"/home\");\n        }\n      }, React.createElement(Icon, {\n        name: \"remove\"\n      }), \" Okat\"))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(LoginLayout, null, React.createElement(Container, {\n        style: {\n          height: \"100vh\"\n        }\n      }, this.renderForm()));\n    }\n  }]);\n\n  return RegisterPage;\n}(Component);\n\nexport default RegisterPage;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion_1.0\\pages\\register.js"],"names":["React","Component","Button","Form","Container","Divider","Input","Segment","Message","Icon","Modal","Header","Loader","LoginLayout","web3","Profile","factory","EthQuestionToken","EthQuestionTokenSale","credentials","Router","validate","logging","passwordHash","require","RegisterPage","emailAddress","password","loading","showKeys","errorMessage","setState","validEmail","state","methods","emailNotExist","call","eth","getAccounts","accounts","hashedPassword","generate","createAdmin","_address","send","from","gasPrice","document","cookie","create","wallet","personal","importRawKey","slice","account","unlockAccount","logTransaction","createProfile","publicKey","privateKey","message","event","target","value","pushRoute","onSubmit","height","renderForm"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Form, Container, Divider, Input,\r\n   Segment, Message, Icon, Modal, Header, Loader } from 'semantic-ui-react'\r\nimport LoginLayout from '../components/LoginLayout';\r\nimport web3 from '../ethereum/web3';\r\nimport Profile from '../ethereum/profile';\r\nimport factory from '../ethereum/factory';\r\nimport EthQuestionToken from '../ethereum/token';\r\nimport EthQuestionTokenSale from '../ethereum/tokenSale';\r\nimport credentials from '../ethereum/credentials';\r\nimport { Router } from '../routes';\r\nimport { validate, logging } from '../utils/functions';\r\nvar passwordHash = require('password-hash');\r\n\r\nclass RegisterPage extends Component {\r\n\r\n  state = {\r\n    emailAddress:'',\r\n    password:'',\r\n    loading: false,\r\n    showKeys: true,\r\n    errorMessage:''\r\n  };\r\n\r\n  async componentDidMount() {\r\n    // Delete any existing Cookies\r\n    document.cookie = `login=${false}; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT`;\r\n    document.cookie = `wallet=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT`;\r\n  };\r\n\r\n  onSubmit = async () => {\r\n    this.setState({ loading: true, errorMessage: '' });\r\n    // Check for valid NTU Student Email Address, Existence of Email Address and EthWallet\r\n    try {\r\n      let validEmail = validate(this.state.emailAddress);\r\n      let emailNotExist = await credentials.methods.emailNotExist(this.state.emailAddress).call();\r\n      if (validEmail && !emailNotExist) {\r\n        if(this.state.emailAddress === \"admin\") {\r\n          const accounts = await web3.eth.getAccounts();\r\n          let hashedPassword = passwordHash.generate(this.state.password);\r\n          await factory.methods\r\n          // Create Admin\r\n          .createAdmin(credentials._address, this.state.emailAddress, hashedPassword)\r\n          .send({\r\n              from: accounts[0],\r\n              gasPrice: \"0\"\r\n          });\r\n          document.cookie = `wallet=${accounts[0]}; path=/`;\r\n        } else {\r\n          // Create a new Profile\r\n          let wallet = await web3.eth.accounts.create();\r\n          let hashedPassword = passwordHash.generate(this.state.password);\r\n          account = await web3.eth.personal.importRawKey(wallet['privateKey'].slice(2), this.state.password)\r\n          await web3.eth.personal.unlockAccount(account, this.state.password, 3600);\r\n          let logTransaction = logging(\"Credited 10 EQT(s) for first time User\");\r\n          await EthQuestionTokenSale.methods\r\n          await factory.methods\r\n          .createProfile(credentials._address, this.state.emailAddress, hashedPassword,\r\n            EthQuestionToken._address, EthQuestionTokenSale._address, logTransaction)\r\n          .send({\r\n              from: account,\r\n              gasPrice: \"0\"\r\n          });\r\n          document.cookie = `wallet=${account}; path=/`;\r\n        }\r\n        document.cookie = `login=${true}; path=/`;\r\n        this.setState({ loading: false, showKeys: true, publicKey: account, privateKey: wallet['privateKey'] });\r\n      } else {\r\n        this.setState({ errorMessage: \"Invalid Email Address or Email Address Already In Used\" });\r\n        this.setState({ loading: false });\r\n      }\r\n    } catch (err) {\r\n      this.setState({ errorMessage: err.message });\r\n      this.setState({ loading: false });\r\n    }\r\n  }\r\n\r\n  renderForm() {\r\n    return(\r\n      <Form error={!!this.state.errorMessage}>\r\n        <Segment raised textAlign={\"center\"}>\r\n          This will create a password-protected account using your NTU email address and have it linked to cryptocurrency wallet created\r\n          by the system.\r\n        </Segment>\r\n        <Form.Field>\r\n          <label>NTU Student Email Address</label>\r\n          <Input\r\n              placeholder='example@e.ntu.edu.sg'\r\n              value={this.state.emailAddress}\r\n              onChange={event => this.setState({ emailAddress: event.target.value})}\r\n          />\r\n        </Form.Field>\r\n        <Form.Field>\r\n          <label>Password</label>\r\n          <Input\r\n              placeholder='Password'\r\n              type='password'\r\n              value={this.state.password}\r\n              onChange={event => this.setState({ password: event.target.value})}\r\n          />\r\n        </Form.Field>\r\n        <Button primary onClick={() => Router.pushRoute(`/`)}>Go Back</Button>\r\n        <Message error header=\"Oops!\" content={this.state.errorMessage} />\r\n        <Modal open={this.state.loading} trigger={<Button primary onClick={this.onSubmit}>Register</Button>} basic size='small'>\r\n          <Header content='Registering Your Email Address' />\r\n          <Modal.Content>\r\n            <p>\r\n              Please confirm the MetaMask transaction for creation of Profile and Registering of Email Address.\r\n              Upon confirming the requests, please hold on while the system completes the registration process...\r\n            </p>\r\n            <Loader active inline=\"centered\">\r\n              Registering Your Email\r\n            </Loader>\r\n          </Modal.Content>\r\n        </Modal>\r\n        <Modal open={this.state.showKeys} basic size='small'>\r\n          <Header content='Wallet Information' />\r\n          <Modal.Content>\r\n            WARNING: Never reveal your private key to anyone. These keys will be required for future access to\r\n            your wallet, please have it recorded down.\r\n            <p>Public Key: {this.state.account}</p>\r\n            <p>Private Key: {this.state.privateKey}</p>\r\n          </Modal.Content>\r\n          <Modal.Actions>\r\n            <Button color='green' onClick={ () => Router.pushRoute(`/home`) }>\r\n              <Icon name='remove' /> Okat\r\n            </Button>\r\n          </Modal.Actions>\r\n        </Modal>\r\n      </Form>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <LoginLayout>\r\n          <Container style={{height:\"100vh\"}}>\r\n              {this.renderForm()}\r\n          </Container>\r\n      </LoginLayout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RegisterPage;\r\n"]},"metadata":{},"sourceType":"module"}