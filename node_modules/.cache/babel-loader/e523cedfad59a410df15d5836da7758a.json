{"ast":null,"code":"// The idea: If we need to get access to our deployed factory instance from somewhere else in our app,\n//     we won't have to go through the entire process of importing web3, and the interface and get the address and etc.\n//     Instead, we can import this factory.js file.\n// Import the copy of web3 that we created (The instance that is created there).\nimport web3 from './web3'; // Import the compiled contract that is placed in the build directory.\n// Any time that we want to tell web3 about an already deployed contract, we have to give web3 that contract's interface (ABI).\n// The ABI is defined inside the PostFactory.JSON file.\n\nimport Token from './build/EthQuestionTokenSale.json'; // Create the contract instance that refers to the specific address that we deployed the contract to\n// and we we'll export it from this file.\n// So, if we need excess to our deployed factory - We can import factory.js.\n// arguments: Our contract ABI, The address that we deployed our factory to\n\nvar instance;\n\nif (typeof web3 !== 'undefined') {\n  instance = new web3.eth.Contract(JSON.parse(Token.interface), \"0x498885040eAdBeA9990b6bF4E6AE2dbb5E8d9c99\");\n}\n\nexport default instance;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion_1.0\\ethereum\\tokenSale.js"],"names":["web3","Token","instance","eth","Contract","JSON","parse","interface"],"mappings":"AAAA;AACA;AACA;AAEA;AACA,OAAOA,IAAP,MAAiB,QAAjB,C,CAEA;AACA;AACA;;AACA,OAAOC,KAAP,MAAkB,mCAAlB,C,CAEA;AACA;AACA;AACA;;AACA,IAAIC,QAAJ;;AACA,IAAI,OAAOF,IAAP,KAAgB,WAApB,EAAiC;AAC/BE,EAAAA,QAAQ,GAAG,IAAIF,IAAI,CAACG,GAAL,CAASC,QAAb,CACPC,IAAI,CAACC,KAAL,CAAWL,KAAK,CAACM,SAAjB,CADO,EAEP,4CAFO,CAAX;AAID;;AAED,eAAeL,QAAf","sourcesContent":["// The idea: If we need to get access to our deployed factory instance from somewhere else in our app,\r\n//     we won't have to go through the entire process of importing web3, and the interface and get the address and etc.\r\n//     Instead, we can import this factory.js file.\r\n\r\n// Import the copy of web3 that we created (The instance that is created there).\r\nimport web3 from './web3';\r\n\r\n// Import the compiled contract that is placed in the build directory.\r\n// Any time that we want to tell web3 about an already deployed contract, we have to give web3 that contract's interface (ABI).\r\n// The ABI is defined inside the PostFactory.JSON file.\r\nimport Token from './build/EthQuestionTokenSale.json';\r\n\r\n// Create the contract instance that refers to the specific address that we deployed the contract to\r\n// and we we'll export it from this file.\r\n// So, if we need excess to our deployed factory - We can import factory.js.\r\n// arguments: Our contract ABI, The address that we deployed our factory to\r\nlet instance;\r\nif (typeof web3 !== 'undefined') {\r\n  instance = new web3.eth.Contract(\r\n      JSON.parse(Token.interface),\r\n      \"0x498885040eAdBeA9990b6bF4E6AE2dbb5E8d9c99\"\r\n  );\r\n}\r\n\r\nexport default instance;\r\n"]},"metadata":{},"sourceType":"module"}