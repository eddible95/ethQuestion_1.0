{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { Button, Card, Segment, Container, List, Transition, Popup, Modal, Header, Icon, Divider, Form, Input } from \"semantic-ui-react\";\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport web3 from '../ethereum/web3';\nimport Layout from '../components/Layout';\nimport factory from '../ethereum/factory';\nimport credentials from '../ethereum/credentials';\nimport EthQuestionToken from '../ethereum/token';\nimport Profile from '../ethereum/profile';\nimport { checkLogin } from '../utils/functions';\n\nvar userProfile =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(userProfile, _Component);\n\n  function userProfile(props) {\n    var _this;\n\n    _classCallCheck(this, userProfile);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(userProfile).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleVisibility\", function () {\n      return _this.setState(function (prevState) {\n        return {\n          visible: !prevState.visible\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"topUp\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var accounts, profileAddress, profile, logTransaction;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                toppingUp: true,\n                errorMessage: ''\n              });\n\n              _context.prev = 1;\n              _context.next = 4;\n              return web3.eth.getAccounts();\n\n            case 4:\n              accounts = _context.sent;\n              _context.next = 7;\n              return EthQuestionTokenSale.methods.endSale(EthQuestionToken._address).send({\n                from: accounts[0]\n              });\n\n            case 7:\n              _context.next = 9;\n              return factory.methods.getProfile(accounts[0]).call();\n\n            case 9:\n              profileAddress = _context.sent;\n              profile = Profile(profileAddress);\n              logTransaction = logging(\"Collect Ether from exchange of EQT(s)\");\n              _context.next = 14;\n              return profile.methods.logTransaction(logTransaction).send({\n                from: accounts[0]\n              });\n\n            case 14:\n              Router.pushRoute('/admin'); // Automatic redirect the user.\n\n              _context.next = 21;\n              break;\n\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](1);\n\n              _this.setState({\n                errorMessage: _context.t0.message\n              });\n\n              _this.setState({\n                error: true\n              });\n\n            case 21:\n              _this.setState({\n                loading: false\n              });\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 17]]);\n    })));\n\n    _this.state = {\n      visible: false,\n      login: false,\n      loading: true,\n      accountType: null,\n      account: null,\n      token: null,\n      emailAddress: null,\n      points: null,\n      transactions: [],\n      topUpModalOpen: false\n    };\n    return _this;\n  }\n\n  _createClass(userProfile, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var login, accounts, profileAddress, profile, emailAddress, token, points, transactions, accountType;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                login = false; // Retrieve the Ethereum Account from MetaMask\n\n                _context2.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context2.sent;\n                _context2.next = 6;\n                return checkLogin(accounts[0]);\n\n              case 6:\n                if (!_context2.sent) {\n                  _context2.next = 30;\n                  break;\n                }\n\n                login = true; // Get profile data\n\n                _context2.next = 10;\n                return factory.methods.getProfile(accounts[0]).call();\n\n              case 10:\n                profileAddress = _context2.sent;\n                profile = Profile(profileAddress);\n                _context2.next = 14;\n                return credentials.methods.getBinding(accounts[0]).call();\n\n              case 14:\n                emailAddress = _context2.sent;\n                _context2.next = 17;\n                return EthQuestionToken.methods.balanceOf(accounts[0]).call();\n\n              case 17:\n                _context2.t0 = _context2.sent;\n                token = (_context2.t0 * 1e-4).toFixed(4);\n                _context2.next = 21;\n                return profile.methods.getPoints().call();\n\n              case 21:\n                points = _context2.sent;\n                _context2.next = 24;\n                return profile.methods.getTransactions().call();\n\n              case 24:\n                transactions = _context2.sent;\n                _context2.next = 27;\n                return profile.methods.getAccountType().call();\n\n              case 27:\n                accountType = _context2.sent;\n                accountType == 0 ? accountType = \"Admin\" : accountType = \"User\";\n                this.setState({\n                  accountType: accountType,\n                  account: accounts[0],\n                  token: token,\n                  emailAddress: emailAddress,\n                  points: points,\n                  transactions: transactions,\n                  login: true\n                });\n\n              case 30:\n                this.setState({\n                  loading: false\n                });\n\n              case 31:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"renderTransactions\",\n    value: function renderTransactions() {\n      var transactions = this.state.transactions;\n      return transactions.map(function (transaction, index) {\n        return React.createElement(List.Item, {\n          key: index\n        }, React.createElement(List.Icon, {\n          name: \"calendar outline\",\n          size: \"large\",\n          verticalAlign: \"middle\"\n        }), React.createElement(List.Content, null, transaction));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.state.login) {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Container, null, React.createElement(Card, {\n          color: \"red\",\n          centered: true,\n          fluid: true\n        }, React.createElement(Card.Content, null, React.createElement(Header, {\n          as: \"h1\",\n          textAlign: \"center\"\n        }, React.createElement(Icon, {\n          name: \"user\",\n          circular: true\n        })), React.createElement(Card.Header, {\n          textAlign: \"center\"\n        }, \"Account Details:\", React.createElement(\"div\", {\n          style: {\n            color: \"red\",\n            fontSize: \"small\",\n            wordWrap: \"break-word\"\n          }\n        }, this.state.account)), React.createElement(Card.Meta, {\n          textAlign: \"center\"\n        }, React.createElement(\"b\", null, this.state.accountType)), React.createElement(Card.Description, {\n          textAlign: \"center\"\n        }, React.createElement(\"b\", null, \"EQT Balance:\"), \" \", this.state.token, React.createElement(Popup, {\n          trigger: React.createElement(Button, {\n            icon: \"ethereum\",\n            onClick: function onClick() {\n              _this2.setState({\n                topUpModalOpen: true\n              });\n            },\n            floated: \"right\",\n            size: \"mini\",\n            color: \"green\"\n          }),\n          content: \"Top Up EQT(s)\",\n          inverted: true\n        })), React.createElement(Card.Description, {\n          textAlign: \"center\"\n        }, React.createElement(\"b\", null, \"Points Accumulated:\"), \" \", this.state.points), React.createElement(Card.Description, {\n          textAlign: \"center\"\n        }, React.createElement(\"b\", null, \"Valid Email Address:\"), \" \", this.state.emailAddress)))), React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Container, null, React.createElement(Segment, {\n          textAlign: \"center\"\n        }, React.createElement(\"b\", {\n          style: {\n            fontSize: \"20px\"\n          }\n        }, \"Transaction History\"), React.createElement(Popup, {\n          trigger: React.createElement(Button, {\n            icon: this.state.visible ? \"minus\" : \"plus\",\n            onClick: this.toggleVisibility,\n            floated: \"right\",\n            size: \"mini\"\n          }),\n          content: \"Click to expand/close\",\n          inverted: true\n        })), React.createElement(Transition, {\n          visible: this.state.visible,\n          animation: \"scale\",\n          duration: 500\n        }, React.createElement(List, {\n          divided: true,\n          size: \"huge\"\n        }, this.renderTransactions())), React.createElement(Modal, {\n          open: this.state.topUp,\n          size: \"small\"\n        }, React.createElement(Header, {\n          icon: \"ethereum\",\n          content: \"Topping Up EQT(s)\"\n        }), React.createElement(Modal.Content, null, React.createElement(Form, {\n          error: !!this.state.errorMessage,\n          style: {\n            marginTop: '10px'\n          }\n        }, React.createElement(Form.Field, {\n          required: true\n        }, React.createElement(\"label\", null, \"Top Up Amount\"), React.createElement(Input, {\n          label: \"EQT(s)\",\n          labelPosition: \"right\",\n          placeholder: \"Enter EQT Value\",\n          value: this.state.topUpAmount,\n          onChange: function onChange(event) {\n            return _this2.setState({\n              topUpAmount: event.target.value\n            });\n          }\n        })))), React.createElement(Modal.Actions, null, React.createElement(Button, {\n          color: \"red\",\n          onClick: function onClick() {\n            _this2.setState({\n              topUpModalOpen: false\n            });\n          }\n        }, React.createElement(Icon, {\n          name: \"remove\"\n        }), \" Cancel\"), React.createElement(Button, {\n          color: \"green\",\n          onClick: this.topUp\n        }, React.createElement(Icon, {\n          name: \"checkmark\"\n        }), \" Top Up\")))));\n      } else {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(AccountIssueModal, {\n          loading: this.state.loading,\n          login: this.state.login\n        }));\n      }\n    }\n  }]);\n\n  return userProfile;\n}(Component);\n\nexport default userProfile;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\userProfile.js"],"names":["React","Component","Button","Card","Segment","Container","List","Transition","Popup","Modal","Header","Icon","Divider","Form","Input","AccountIssueModal","web3","Layout","factory","credentials","EthQuestionToken","Profile","checkLogin","userProfile","props","setState","prevState","visible","toppingUp","errorMessage","eth","getAccounts","accounts","EthQuestionTokenSale","methods","endSale","_address","send","from","getProfile","call","profileAddress","profile","logTransaction","logging","Router","pushRoute","message","error","loading","state","login","accountType","account","token","emailAddress","points","transactions","topUpModalOpen","getBinding","balanceOf","toFixed","getPoints","getTransactions","getAccountType","map","transaction","index","color","fontSize","wordWrap","toggleVisibility","renderTransactions","topUp","marginTop","topUpAmount","event","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Card, Segment, Container, List, Transition, Popup, Modal,\r\n         Header, Icon, Divider, Form, Input } from \"semantic-ui-react\";\r\nimport AccountIssueModal from '../components/AccountIssueModal';\r\nimport web3 from '../ethereum/web3'\r\nimport Layout from '../components/Layout';\r\nimport factory from '../ethereum/factory';\r\nimport credentials from '../ethereum/credentials';\r\nimport EthQuestionToken from '../ethereum/token';\r\nimport Profile from '../ethereum/profile';\r\nimport { checkLogin } from '../utils/functions'\r\n\r\nclass userProfile extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      visible: false,\r\n      login: false,\r\n      loading: true,\r\n      accountType: null,\r\n      account: null,\r\n      token: null,\r\n      emailAddress: null,\r\n      points: null,\r\n      transactions: [],\r\n      topUpModalOpen: false\r\n    };\r\n  }\r\n\r\n  toggleVisibility = () =>\r\n    this.setState((prevState) => ({ visible: !prevState.visible }))\r\n\r\n  topUp = async () => {\r\n    this.setState({ toppingUp: true, errorMessage: ''});\r\n    try {\r\n        const accounts = await web3.eth.getAccounts();\r\n        await EthQuestionTokenSale.methods\r\n        .endSale(EthQuestionToken._address)\r\n        .send({\r\n            from: accounts[0]\r\n        });\r\n        // Log transaction\r\n        const profileAddress = await factory.methods.getProfile(accounts[0]).call();\r\n        const profile = Profile(profileAddress);\r\n        let logTransaction = logging(\"Collect Ether from exchange of EQT(s)\");\r\n        await profile.methods.logTransaction(logTransaction)\r\n        .send({\r\n            from: accounts[0]\r\n        });\r\n        Router.pushRoute('/admin'); // Automatic redirect the user.\r\n    } catch (err) {\r\n        this.setState({ errorMessage: err.message });\r\n        this.setState({ error: true})\r\n    }\r\n    this.setState({ loading: false})\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let login = false;\r\n    // Retrieve the Ethereum Account from MetaMask\r\n    const accounts = await web3.eth.getAccounts();\r\n    if (await checkLogin(accounts[0])) {\r\n      login = true;\r\n      // Get profile data\r\n      const profileAddress = await factory.methods.getProfile(accounts[0]).call();\r\n      const profile = Profile(profileAddress);\r\n      const emailAddress = await credentials.methods.getBinding(accounts[0]).call();\r\n      const token = (await EthQuestionToken.methods.balanceOf(accounts[0]).call()*1e-4).toFixed(4);\r\n      const points = await profile.methods.getPoints().call();\r\n      const transactions = await profile.methods.getTransactions().call();\r\n\r\n      // Get Account Type\r\n      let accountType = await profile.methods.getAccountType().call();\r\n      accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"\r\n      this.setState( { accountType: accountType,\r\n                       account: accounts[0],\r\n                       token: token,\r\n                       emailAddress: emailAddress,\r\n                       points: points,\r\n                       transactions: transactions,\r\n                       login: true });\r\n    }\r\n    this.setState( { loading: false });\r\n  }\r\n\r\n  renderTransactions() {\r\n    const transactions = this.state.transactions;\r\n    return transactions.map((transaction, index) => {\r\n      return(\r\n        <List.Item key={index}>\r\n          <List.Icon name=\"calendar outline\" size='large' verticalAlign='middle'/>\r\n          <List.Content>\r\n            {transaction}\r\n          </List.Content>\r\n        </List.Item>\r\n      );\r\n    })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.login) {\r\n      return(\r\n        <Layout accountType={this.state.accountType}>\r\n          <Divider hidden/>\r\n          <Container>\r\n            <Card color = \"red\" centered fluid>\r\n              <Card.Content>\r\n                <Header as='h1' textAlign='center'>\r\n                  <Icon name='user' circular/>\r\n                </Header>\r\n                <Card.Header textAlign='center'>\r\n                  Account Details:\r\n                  <div style={{color: \"red\", fontSize: \"small\", wordWrap: \"break-word\" }}>{this.state.account}</div>\r\n                </Card.Header>\r\n                <Card.Meta textAlign='center'>\r\n                  <b>{this.state.accountType}</b>\r\n                </Card.Meta>\r\n                <Card.Description textAlign='center'>\r\n                  <b>EQT Balance:</b> {this.state.token}\r\n                  <Popup\r\n                    trigger={\r\n                      <Button\r\n                        icon=\"ethereum\"\r\n                        onClick={ () => {this.setState({ topUpModalOpen: true })} }\r\n                        floated=\"right\"\r\n                        size=\"mini\"\r\n                        color=\"green\"\r\n                      />\r\n                    }\r\n                    content={\"Top Up EQT(s)\"}\r\n                    inverted/>\r\n                </Card.Description>\r\n                <Card.Description textAlign='center'>\r\n                  <b>Points Accumulated:</b> {this.state.points}\r\n                </Card.Description>\r\n                <Card.Description textAlign='center'>\r\n                  <b>Valid Email Address:</b> {this.state.emailAddress}\r\n                </Card.Description>\r\n              </Card.Content>\r\n            </Card>\r\n          </Container>\r\n          <Divider hidden/>\r\n          <Container>\r\n            <Segment textAlign=\"center\">\r\n              <b style={{fontSize:\"20px\"}}>Transaction History</b>\r\n              <Popup\r\n                trigger={\r\n                  <Button\r\n                    icon={this.state.visible ? \"minus\" : \"plus\"}\r\n                    onClick={this.toggleVisibility}\r\n                    floated=\"right\"\r\n                    size=\"mini\"\r\n                  />\r\n                }\r\n                content={\"Click to expand/close\"}\r\n                inverted/>\r\n            </Segment>\r\n            <Transition visible={this.state.visible} animation='scale' duration={500}>\r\n              <List divided size=\"huge\">\r\n                {this.renderTransactions()}\r\n              </List>\r\n            </Transition>\r\n\r\n            <Modal open={this.state.topUp} size='small'>\r\n            <Header icon='ethereum' content='Topping Up EQT(s)' />\r\n            <Modal.Content>\r\n              <Form error={!!this.state.errorMessage} style={{ marginTop: '10px' }}>\r\n                <Form.Field required={true}>\r\n                    <label>Top Up Amount</label>\r\n                    <Input\r\n                        label=\"EQT(s)\"\r\n                        labelPosition=\"right\"\r\n                        placeholder='Enter EQT Value'\r\n                        value={this.state.topUpAmount}\r\n                        onChange={event => this.setState({ topUpAmount: event.target.value })}\r\n                    />\r\n                </Form.Field>\r\n              </Form>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n              <Button color='red' onClick={ () => {this.setState({ topUpModalOpen: false })} }>\r\n                <Icon name='remove' /> Cancel\r\n\r\n              </Button>\r\n              <Button color='green' onClick={this.topUp}>\r\n                <Icon name='checkmark' /> Top Up\r\n              </Button>\r\n            </Modal.Actions>\r\n          </Modal>\r\n          </Container>\r\n        </Layout>\r\n      );\r\n    } else {\r\n      return (\r\n        <Layout accountType={this.state.accountType}>\r\n          <AccountIssueModal loading={this.state.loading} login={this.state.login} />\r\n        </Layout>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default userProfile;\r\n"]},"metadata":{},"sourceType":"module"}