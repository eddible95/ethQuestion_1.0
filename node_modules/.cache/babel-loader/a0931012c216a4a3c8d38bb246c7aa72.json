{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport _ from 'lodash';\nimport { Segment, Container, Divider, Header, Modal, Button, Loader, Icon, Table } from 'semantic-ui-react';\nimport Layout from '../components/Layout';\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\nimport Profile from '../ethereum/profile';\nimport cookies from 'next-cookies';\n\nvar LeaderboardPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LeaderboardPage, _Component);\n\n  function LeaderboardPage(props) {\n    var _this;\n\n    _classCallCheck(this, LeaderboardPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LeaderboardPage).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSort\", function (clickedColumn) {\n      return function () {\n        var _this$state = _this.state,\n            column = _this$state.column,\n            leaderboardData = _this$state.leaderboardData,\n            direction = _this$state.direction;\n\n        if (column !== clickedColumn) {\n          _this.setState({\n            column: clickedColumn,\n            leaderboardData: _.sortBy(leaderboardData, [clickedColumn]),\n            direction: 'ascending'\n          });\n\n          return;\n        }\n\n        _this.setState({\n          leaderboardData: leaderboardData.reverse(),\n          direction: direction === 'ascending' ? 'descending' : 'ascending'\n        });\n      };\n    });\n\n    _this.state = {\n      login: false,\n      loading: true,\n      accountType: null,\n      column: null,\n      direction: null,\n      leaderboardData: []\n    };\n    return _this;\n  }\n\n  _createClass(LeaderboardPage, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var login, profileAddress, profile, accountType, ethWallet, accountPointMapping, i, points;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(typeof web3 === 'undefined')) {\n                  _context.next = 3;\n                  break;\n                }\n\n                this.setState({\n                  loading: false\n                });\n                return _context.abrupt(\"return\");\n\n              case 3:\n                login = false;\n\n                if (!this.props.isLogin) {\n                  _context.next = 34;\n                  break;\n                }\n\n                login = true; // Get Account Type\n\n                _context.next = 8;\n                return factory.methods.getProfile(this.props.account).call();\n\n              case 8:\n                profileAddress = _context.sent;\n                profile = Profile(profileAddress);\n                _context.next = 12;\n                return profile.methods.getAccountType().call();\n\n              case 12:\n                accountType = _context.sent;\n                accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"; // Retireve an array of addresses of ethWallets registered\n\n                _context.next = 16;\n                return factory.methods.getEthWallets().call();\n\n              case 16:\n                ethWallet = _context.sent;\n                accountPointMapping = [];\n                i = 0;\n\n              case 19:\n                if (!(i < ethWallet.length)) {\n                  _context.next = 31;\n                  break;\n                }\n\n                _context.next = 22;\n                return factory.methods.getProfile(ethWallet[i]).call();\n\n              case 22:\n                profileAddress = _context.sent;\n                profile = Profile(profileAddress);\n                _context.next = 26;\n                return profile.methods.getPoints().call();\n\n              case 26:\n                points = _context.sent;\n                accountPointMapping.push({\n                  account: ethWallet[i],\n                  points: _parseInt(points)\n                });\n\n              case 28:\n                i++;\n                _context.next = 19;\n                break;\n\n              case 31:\n                // Set the states required for the Leaderboard and ensure it is descending by default\n                this.setState({\n                  leaderboardData: _.sortBy(accountPointMapping, ['points']).reverse()\n                });\n                this.setState({\n                  login: login\n                });\n                this.setState({\n                  accountType: accountType\n                });\n\n              case 34:\n                this.setState({\n                  loading: false\n                });\n\n              case 35:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() // Function to handle the sorting of leaderboard\n\n  }, {\n    key: \"renderLeaderBoard\",\n    value: function renderLeaderBoard() {\n      var _this$state2 = this.state,\n          column = _this$state2.column,\n          data = _this$state2.data,\n          direction = _this$state2.direction;\n      return React.createElement(Container, null, React.createElement(Table, {\n        basic: \"very\",\n        celled: true,\n        sortable: true\n      }, React.createElement(Table.Header, null, React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, {\n        textAlign: \"center\"\n      }, \"Account\"), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        sorted: column === 'points' ? direction : null,\n        onClick: this.handleSort('points')\n      }, \"Point(s)\"))), React.createElement(Table.Body, null, this.renderUserList())));\n    }\n  }, {\n    key: \"renderUserList\",\n    value: function renderUserList() {\n      return this.state.leaderboardData.map(function (item, index) {\n        return React.createElement(Table.Row, {\n          key: index\n        }, React.createElement(Table.Cell, {\n          textAlign: \"center\"\n        }, item.account), React.createElement(Table.Cell, {\n          textAlign: \"center\"\n        }, item.points));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.login) {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType,\n          page: 'Leaderboard'\n        }, React.createElement(Container, null, React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Segment, {\n          raised: true,\n          textAlign: \"left\"\n        }, React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, React.createElement(Icon, {\n          name: \"chess king\"\n        }), \"Current Leaderboard Standings\")), this.renderLeaderBoard(), React.createElement(Divider, null), React.createElement(\"p\", {\n          style: {\n            fontSize: '20px'\n          }\n        }, React.createElement(Icon, {\n          name: \"question\"\n        }), \"How are points awarded?\"), React.createElement(Divider, null), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, React.createElement(\"b\", null, \"When you ask a question:\"), \" 5 Points\"), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, React.createElement(\"b\", null, \"When you are rewarded for your answer:\"), \" 4 Points\"), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, React.createElement(\"b\", null, \"When you submit an answer:\"), \" 2 Points\"), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, React.createElement(\"b\", null, \"When the answer you approved gets awarded:\"), \" 2 Points\"), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, React.createElement(\"b\", null, \"When you approve an answer:\"), \" 1 Point\"), React.createElement(Divider, null), React.createElement(\"p\", {\n          style: {\n            fontSize: '20px'\n          }\n        }, React.createElement(Icon, {\n          name: \"question\"\n        }), \"What can I do with my points?\"), React.createElement(Divider, null), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, \"Upon reaching \", React.createElement(\"b\", null, \"100 points\"), \", you can exchange for \", React.createElement(\"b\", null, \"5 EQTs\")), React.createElement(Divider, null), React.createElement(\"p\", {\n          style: {\n            fontSize: '20px'\n          }\n        }, React.createElement(Icon, {\n          name: \"question\"\n        }), \"What is EthQuestionToken (EQT)\"), React.createElement(Divider, null), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, \"Cryptocurrency that is used within the Question Answering System and can be exchanged using Ether(s). Each user is given \", React.createElement(\"b\", null, \"10 EQTs\"), \" upon signing up. User can be rewarded additional EQTs by providing answers with the highest approvals for each question.\")));\n      } else {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(AccountIssueModal, {\n          loading: this.state.loading,\n          login: this.state.login\n        }));\n      }\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(props) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", {\n                  isLogin: cookies(props).login || '',\n                  account: cookies(props).wallet || ''\n                });\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return LeaderboardPage;\n}(Component);\n\nexport default LeaderboardPage;","map":null,"metadata":{},"sourceType":"module"}