{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\n\n// Using the ipfs.infura.io node\nvar IPFS = require('ipfs-http-client');\n\nvar ipfs = new IPFS({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n}); // Save document to IPFS and returns its hash value to be stored on the blockchain\n\nvar getIpfsHash = function getIpfsHash(data) {\n  return new _Promise(function (resolve, reject) {\n    ipfs.add(data, function (error, result) {\n      if (error) {\n        return reject(error);\n      }\n\n      resolve(result[0].hash);\n    });\n  });\n}; // Retrieve an image from the hash value\n\n\nvar convertToImage = function convertToImage(hash) {\n  return new _Promise(function (resolve, reject) {\n    ipfs.cat(hash, function (error, result) {\n      if (error) {\n        return reject(error);\n      }\n\n      resolve(\"data:image/jpeg;base64,\" + Buffer(result).toString('base64'));\n    });\n  });\n}; // Retrieve the document from its hash value \n\n\nvar getString = function getString(hash) {\n  return new _Promise(function (resolve, reject) {\n    ipfs.cat(hash, function (error, result) {\n      if (error) {\n        return reject(error);\n      }\n\n      resolve(result.toString());\n    });\n  });\n};\n\nexport { ipfs, getIpfsHash, convertToImage, getString };","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\ipfs.js"],"names":["IPFS","require","ipfs","host","port","protocol","getIpfsHash","data","resolve","reject","add","error","result","hash","convertToImage","cat","Buffer","toString","getString"],"mappings":";;AAAA;AACA,IAAMA,IAAI,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAMC,IAAI,GAAG,IAAIF,IAAJ,CAAS;AAAEG,EAAAA,IAAI,EAAE,gBAAR;AAA0BC,EAAAA,IAAI,EAAE,IAAhC;AAAsCC,EAAAA,QAAQ,EAAE;AAAhD,CAAT,CAAb,C,CAEA;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAU;AAC3B,SAAO,aAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCP,IAAAA,IAAI,CAACQ,GAAL,CAASH,IAAT,EAAe,UAACI,KAAD,EAAQC,MAAR,EAAmB;AAC9B,UAAGD,KAAH,EAAU;AACN,eAAOF,MAAM,CAACE,KAAD,CAAb;AACH;;AACDH,MAAAA,OAAO,CAACI,MAAM,CAAC,CAAD,CAAN,CAAUC,IAAX,CAAP;AACH,KALD;AAMH,GAPM,CAAP;AAQF,CATD,C,CAWA;;;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACD,IAAD,EAAU;AAC9B,SAAO,aAAY,UAACL,OAAD,EAAUC,MAAV,EAAqB;AACpCP,IAAAA,IAAI,CAACa,GAAL,CAASF,IAAT,EAAe,UAACF,KAAD,EAAQC,MAAR,EAAmB;AAC9B,UAAGD,KAAH,EAAU;AACN,eAAOF,MAAM,CAACE,KAAD,CAAb;AACH;;AACDH,MAAAA,OAAO,CAAC,4BAA4BQ,MAAM,CAACJ,MAAD,CAAN,CAAeK,QAAf,CAAwB,QAAxB,CAA7B,CAAP;AACH,KALD;AAMH,GAPM,CAAP;AAQF,CATD,C,CAWA;;;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACL,IAAD,EAAU;AACzB,SAAO,aAAY,UAACL,OAAD,EAAUC,MAAV,EAAqB;AACpCP,IAAAA,IAAI,CAACa,GAAL,CAASF,IAAT,EAAe,UAACF,KAAD,EAAQC,MAAR,EAAmB;AAC9B,UAAGD,KAAH,EAAU;AACN,eAAOF,MAAM,CAACE,KAAD,CAAb;AACH;;AACDH,MAAAA,OAAO,CAACI,MAAM,CAACK,QAAP,EAAD,CAAP;AACH,KALD;AAMH,GAPM,CAAP;AAQF,CATD;;AAYA,SAAQf,IAAR,EAAcI,WAAd,EAA2BQ,cAA3B,EAA2CI,SAA3C","sourcesContent":["// Using the ipfs.infura.io node\r\nconst IPFS = require('ipfs-http-client');\r\nconst ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\r\n\r\n// Save document to IPFS and returns its hash value to be stored on the blockchain\r\nconst getIpfsHash = (data) => {\r\n   return new Promise((resolve, reject) => {\r\n       ipfs.add(data, (error, result) => {\r\n           if(error) {\r\n               return reject(error);\r\n           }\r\n           resolve(result[0].hash);\r\n       })\r\n   });\r\n}\r\n\r\n// Retrieve an image from the hash value\r\nconst convertToImage = (hash) => {\r\n   return new Promise((resolve, reject) => {\r\n       ipfs.cat(hash, (error, result) => {\r\n           if(error) {\r\n               return reject(error);\r\n           }\r\n           resolve(\"data:image/jpeg;base64,\" + Buffer(result).toString('base64'));\r\n       })\r\n   });\r\n}\r\n\r\n// Retrieve the document from its hash value \r\nconst getString = (hash) => {\r\n   return new Promise((resolve, reject) => {\r\n       ipfs.cat(hash, (error, result) => {\r\n           if(error) {\r\n               return reject(error);\r\n           }\r\n           resolve(result.toString());\r\n       })\r\n   });\r\n}\r\n\r\n\r\nexport {ipfs, getIpfsHash, convertToImage, getString};\r\n"]},"metadata":{},"sourceType":"module"}