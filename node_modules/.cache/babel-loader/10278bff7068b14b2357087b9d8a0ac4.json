{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React, { Component } from 'react';\nimport { Button, Header, Table, Statistic, Rating, Grid, Message, Divider, Container, Icon, Label, Rail, Segment } from 'semantic-ui-react';\nimport factory from '../ethereum/factory';\nimport credentials from '../ethereum/credentials';\nimport Question from '../ethereum/question';\nimport Layout from '../components/Layout';\nimport { Link, Router } from '../routes';\nimport web3 from '../ethereum/web3';\nimport { search } from './search';\n\nvar HomePage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(HomePage, _Component);\n\n  function HomePage() {\n    _classCallCheck(this, HomePage);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(HomePage).apply(this, arguments));\n  }\n\n  _createClass(HomePage, [{\n    key: \"componentWillMount\",\n    // Redirect E-Wallet that are not Logged In to the Login Page\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context.sent;\n                _context.next = 5;\n                return credentials.methods.getBinding(accounts[0]).call();\n\n              case 5:\n                _context.t0 = _context.sent;\n\n                if (!(_context.t0 === \"\")) {\n                  _context.next = 8;\n                  break;\n                }\n\n                Router.pushRoute(\"/\"); // Automatic redirect the user to Login or Sign Up\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"renderQuestionHeader\",\n    value: function renderQuestionHeader() {\n      return React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        width: 2\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Current Phase\")), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        width: 2\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Answers Submitted\")), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        width: 2\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Reward\")), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\"\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Question Title\")));\n    } // Renders out the list of question\n\n  }, {\n    key: \"renderQuestionList\",\n    value: function renderQuestionList() {\n      var _this = this;\n\n      return this.props.summaries.map(function (summary, index) {\n        var questionState = summary[4];\n        var tagList = summary[8].split(\", \");\n        return React.createElement(Table.Row, {\n          key: index\n        }, React.createElement(Table.Cell, {\n          textAlign: \"center\",\n          width: 2\n        }, questionState == 0 ? React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \" Answering\")), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"Phase\"))) : questionState == 1 ? React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \" Voting\")), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"Phase\"))) : React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \" Rewarded\")), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"Phase\")))), React.createElement(Table.Cell, {\n          textAlign: \"center\",\n          width: 2\n        }, React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, _this.props.numOfAnswers[index])), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"answer(s)\")))), React.createElement(Table.Cell, {\n          textAlign: \"center\",\n          width: 2\n        }, React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, summary[2])), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"ether(s)\")))), React.createElement(Table.Cell, {\n          textAlign: \"left\"\n        }, React.createElement(Grid.Row, {\n          textAlign: \"left\"\n        }, React.createElement(\"span\", {\n          style: {\n            fontSize: 18,\n            color: '#6A737C',\n            cursor: 'pointer'\n          },\n          onClick: function onClick() {\n            return Router.pushRoute(\"/questions/\".concat(_this.props.deployedQuestions[index]));\n          }\n        }, React.createElement(\"a\", null, summary[0]))), _this.renderTag(tagList)));\n      });\n    } // Render each tag individually for each question\n\n  }, {\n    key: \"renderTag\",\n    value: function renderTag(tagList) {\n      var tagColours = [\"red\", \"olive\", \"blue\", \"olive\", \"green\"];\n      return tagList.map(function (tag, index) {\n        var id = index % 5;\n        return React.createElement(Label, {\n          as: \"a\",\n          onClick: function onClick() {\n            return Router.pushRoute(\"/\".concat('search/' + encodeURIComponent(tag)));\n          },\n          tag: true,\n          size: \"mini\",\n          key: index,\n          color: tagColours[id]\n        }, tag);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Layout, null, React.createElement(Grid, {\n        centered: true,\n        columns: 2\n      }, React.createElement(Grid.Column, null, React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"Questions Posted\"), React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(Container, {\n        style: {\n          height: \"100vh\"\n        }\n      }, React.createElement(Table, null, React.createElement(Table.Header, null, this.renderQuestionHeader()), React.createElement(Table.Body, null, this.renderQuestionList()), React.createElement(Rail, {\n        position: \"right\"\n      }, React.createElement(Segment, null, \"Right Rail Content\"))), React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(\"div\", {\n        style: {\n          marginTop: 20\n        }\n      }, \"Found \", this.props.summaries.length, \" Item(s).\")))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(props) {\n        var accounts, deployedQuestions, deployedQuestionsCount, questions, summaries, numOfAnswers, searchItem, i, answerList;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context2.sent;\n                _context2.next = 5;\n                return credentials.methods.getBinding(accounts[0]).call();\n\n              case 5:\n                _context2.t0 = _context2.sent;\n\n                if (!(_context2.t0 === \"\")) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                Router.pushRoute(\"/\"); // Automatic redirect the user to Login or Sign Up\n\n              case 8:\n                _context2.next = 10;\n                return factory.methods.getDeployedQuestions().call();\n\n              case 10:\n                deployedQuestions = _context2.sent;\n                deployedQuestionsCount = deployedQuestions.length; // Retrieve the summaries of all deployed questions\n\n                questions = [];\n                summaries = [];\n                numOfAnswers = [];\n\n                if (!(props.query.value != undefined && props.query.value != 'favicon.ico')) {\n                  _context2.next = 21;\n                  break;\n                }\n\n                searchItem = decodeURIComponent(props.query.value);\n                _context2.next = 19;\n                return search(searchItem, deployedQuestions);\n\n              case 19:\n                deployedQuestions = _context2.sent;\n                deployedQuestionsCount = deployedQuestions.length;\n\n              case 21:\n                i = 0;\n\n              case 22:\n                if (!(i < deployedQuestionsCount)) {\n                  _context2.next = 34;\n                  break;\n                }\n\n                questions[i] = Question(deployedQuestions[i]);\n                _context2.next = 26;\n                return questions[i].methods.getSummary().call();\n\n              case 26:\n                summaries[i] = _context2.sent;\n                _context2.next = 29;\n                return questions[i].methods.getAnswerList().call();\n\n              case 29:\n                answerList = _context2.sent;\n                numOfAnswers[i] = answerList.length;\n\n              case 31:\n                i++;\n                _context2.next = 22;\n                break;\n\n              case 34:\n                return _context2.abrupt(\"return\", {\n                  accounts: accounts,\n                  deployedQuestions: deployedQuestions,\n                  summaries: summaries,\n                  numOfAnswers: numOfAnswers\n                });\n\n              case 35:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return HomePage;\n}(Component);\n\nexport default HomePage;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\home.js"],"names":["React","Component","Button","Header","Table","Statistic","Rating","Grid","Message","Divider","Container","Icon","Label","Rail","Segment","factory","credentials","Question","Layout","Link","Router","web3","search","HomePage","eth","getAccounts","accounts","methods","getBinding","call","pushRoute","fontSize","color","props","summaries","map","summary","index","questionState","tagList","split","numOfAnswers","cursor","deployedQuestions","renderTag","tagColours","tag","id","encodeURIComponent","height","renderQuestionHeader","renderQuestionList","marginTop","length","getDeployedQuestions","deployedQuestionsCount","questions","query","value","undefined","searchItem","decodeURIComponent","i","getSummary","getAnswerList","answerList"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,KAAzB,EAAgCC,SAAhC,EAA2CC,MAA3C,EAAmDC,IAAnD,EAAyDC,OAAzD,EACGC,OADH,EACYC,SADZ,EACuBC,IADvB,EAC6BC,KAD7B,EACoCC,IADpC,EAC0CC,OAD1C,QACyD,mBADzD;AAEA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAAQC,IAAR,EAAcC,MAAd,QAA2B,WAA3B;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,SAAQC,MAAR,QAAqB,UAArB;;IAEMC,Q;;;;;;;;;;;;;AAiCF;;;;;;;;;;;uBAGyBF,IAAI,CAACG,GAAL,CAASC,WAAT,E;;;AAAjBC,gBAAAA,Q;;uBACIV,WAAW,CAACW,OAAZ,CAAoBC,UAApB,CAA+BF,QAAQ,CAAC,CAAD,CAAvC,EAA4CG,IAA5C,E;;;;;sCAAuD,E;;;;;AAC7DT,gBAAAA,MAAM,CAACU,SAAP,M,CAAuB;;;;;;;;;;;;;;;;;;2CAIN;AACrB,aACE,oBAAC,KAAD,CAAO,GAAP,QACE,oBAAC,KAAD,CAAO,UAAP;AAAkB,QAAA,SAAS,EAAC,QAA5B;AAAqC,QAAA,KAAK,EAAE;AAA5C,SAA+C;AAAM,QAAA,KAAK,EAAE;AAACC,UAAAA,QAAQ,EAAE,EAAX;AAAeC,UAAAA,KAAK,EAAE;AAAtB;AAAb,yBAA/C,CADF,EAEE,oBAAC,KAAD,CAAO,UAAP;AAAkB,QAAA,SAAS,EAAC,QAA5B;AAAqC,QAAA,KAAK,EAAE;AAA5C,SAA+C;AAAM,QAAA,KAAK,EAAE;AAACD,UAAAA,QAAQ,EAAE,EAAX;AAAeC,UAAAA,KAAK,EAAE;AAAtB;AAAb,6BAA/C,CAFF,EAGE,oBAAC,KAAD,CAAO,UAAP;AAAkB,QAAA,SAAS,EAAC,QAA5B;AAAqC,QAAA,KAAK,EAAE;AAA5C,SAA+C;AAAM,QAAA,KAAK,EAAE;AAACD,UAAAA,QAAQ,EAAE,EAAX;AAAeC,UAAAA,KAAK,EAAE;AAAtB;AAAb,kBAA/C,CAHF,EAIE,oBAAC,KAAD,CAAO,UAAP;AAAkB,QAAA,SAAS,EAAC;AAA5B,SAAqC;AAAM,QAAA,KAAK,EAAE;AAACD,UAAAA,QAAQ,EAAE,EAAX;AAAeC,UAAAA,KAAK,EAAE;AAAtB;AAAb,0BAArC,CAJF,CADF;AAQD,K,CAED;;;;yCACqB;AAAA;;AACjB,aAAO,KAAKC,KAAL,CAAWC,SAAX,CAAqBC,GAArB,CAAyB,UAACC,OAAD,EAAUC,KAAV,EAAoB;AAChD,YAAMC,aAAa,GAAGF,OAAO,CAAC,CAAD,CAA7B;AACA,YAAMG,OAAO,GAAGH,OAAO,CAAC,CAAD,CAAP,CAAWI,KAAX,CAAiB,IAAjB,CAAhB;AACA,eAAO,oBAAC,KAAD,CAAO,GAAP;AAAW,UAAA,GAAG,EAAEH;AAAhB,WACL,oBAAC,KAAD,CAAO,IAAP;AAAY,UAAA,SAAS,EAAC,QAAtB;AAA+B,UAAA,KAAK,EAAE;AAAtC,WAEMC,aAAa,IAAI,CAAjB,GAAqB,oBAAC,SAAD;AAAW,UAAA,IAAI,EAAC,MAAhB;AAAuB,UAAA,KAAK,EAAC;AAA7B,WACL,oBAAC,SAAD,CAAW,KAAX,QAAiB;AACb,UAAA,KAAK,EAAE;AAACP,YAAAA,QAAQ,EAAE,EAAX;AAAeC,YAAAA,KAAK,EAAE;AAAtB;AADM,wBAAjB,CADK,EAIL,oBAAC,SAAD,CAAW,KAAX,QAAiB;AAAM,UAAA,KAAK,EAAE;AAACD,YAAAA,QAAQ,EAAE,EAAX;AAAeC,YAAAA,KAAK,EAAE;AAAtB;AAAb,mBAAjB,CAJK,CAArB,GAMYM,aAAa,IAAI,CAAjB,GACF,oBAAC,SAAD;AAAW,UAAA,IAAI,EAAC,MAAhB;AAAuB,UAAA,KAAK,EAAC;AAA7B,WACM,oBAAC,SAAD,CAAW,KAAX,QAAiB;AACb,UAAA,KAAK,EAAE;AAACP,YAAAA,QAAQ,EAAE,EAAX;AAAeC,YAAAA,KAAK,EAAE;AAAtB;AADM,qBAAjB,CADN,EAIM,oBAAC,SAAD,CAAW,KAAX,QAAiB;AAAM,UAAA,KAAK,EAAE;AAACD,YAAAA,QAAQ,EAAE,EAAX;AAAeC,YAAAA,KAAK,EAAE;AAAtB;AAAb,mBAAjB,CAJN,CADE,GAOD,oBAAC,SAAD;AAAW,UAAA,IAAI,EAAC,MAAhB;AAAuB,UAAA,KAAK,EAAC;AAA7B,WACK,oBAAC,SAAD,CAAW,KAAX,QAAiB;AACb,UAAA,KAAK,EAAE;AAACD,YAAAA,QAAQ,EAAE,EAAX;AAAeC,YAAAA,KAAK,EAAE;AAAtB;AADM,uBAAjB,CADL,EAIK,oBAAC,SAAD,CAAW,KAAX,QAAiB;AAAM,UAAA,KAAK,EAAE;AAACD,YAAAA,QAAQ,EAAE,EAAX;AAAeC,YAAAA,KAAK,EAAE;AAAtB;AAAb,mBAAjB,CAJL,CAfjB,CADK,EAwBH,oBAAC,KAAD,CAAO,IAAP;AAAY,UAAA,SAAS,EAAC,QAAtB;AAA+B,UAAA,KAAK,EAAE;AAAtC,WACI,oBAAC,SAAD;AAAW,UAAA,IAAI,EAAC,MAAhB;AAAuB,UAAA,KAAK,EAAC;AAA7B,WACI,oBAAC,SAAD,CAAW,KAAX,QAAiB;AAAM,UAAA,KAAK,EAAE;AAACD,YAAAA,QAAQ,EAAE,EAAX;AAAeC,YAAAA,KAAK,EAAE;AAAtB;AAAb,WAAgD,KAAI,CAACC,KAAL,CAAWQ,YAAX,CAAwBJ,KAAxB,CAAhD,CAAjB,CADJ,EAEI,oBAAC,SAAD,CAAW,KAAX,QAAiB;AAAM,UAAA,KAAK,EAAE;AAACN,YAAAA,QAAQ,EAAE,EAAX;AAAeC,YAAAA,KAAK,EAAE;AAAtB;AAAb,uBAAjB,CAFJ,CADJ,CAxBG,EA8BH,oBAAC,KAAD,CAAO,IAAP;AAAY,UAAA,SAAS,EAAC,QAAtB;AAA+B,UAAA,KAAK,EAAE;AAAtC,WACI,oBAAC,SAAD;AAAW,UAAA,IAAI,EAAC,MAAhB;AAAuB,UAAA,KAAK,EAAC;AAA7B,WACI,oBAAC,SAAD,CAAW,KAAX,QAAiB;AAAM,UAAA,KAAK,EAAE;AAACD,YAAAA,QAAQ,EAAE,EAAX;AAAeC,YAAAA,KAAK,EAAE;AAAtB;AAAb,WAAgDI,OAAO,CAAC,CAAD,CAAvD,CAAjB,CADJ,EAEI,oBAAC,SAAD,CAAW,KAAX,QAAiB;AAAM,UAAA,KAAK,EAAE;AAACL,YAAAA,QAAQ,EAAE,EAAX;AAAeC,YAAAA,KAAK,EAAE;AAAtB;AAAb,sBAAjB,CAFJ,CADJ,CA9BG,EAoCH,oBAAC,KAAD,CAAO,IAAP;AAAY,UAAA,SAAS,EAAC;AAAtB,WACI,oBAAC,IAAD,CAAM,GAAN;AAAU,UAAA,SAAS,EAAC;AAApB,WACI;AAAM,UAAA,KAAK,EAAE;AAACD,YAAAA,QAAQ,EAAE,EAAX;AAAeC,YAAAA,KAAK,EAAE,SAAtB;AAAiCU,YAAAA,MAAM,EAAE;AAAzC,WAAb;AAAkE,UAAA,OAAO,EAAE;AAAA,mBAAMtB,MAAM,CAACU,SAAP,sBAA+B,KAAI,CAACG,KAAL,CAAWU,iBAAX,CAA6BN,KAA7B,CAA/B,EAAN;AAAA;AAA3E,WAAwJ,+BAAID,OAAO,CAAC,CAAD,CAAX,CAAxJ,CADJ,CADJ,EAIK,KAAI,CAACQ,SAAL,CAAeL,OAAf,CAJL,CApCG,CAAP;AA2CL,OA9CQ,CAAP;AA+CH,K,CAED;;;;8BACUA,O,EAAQ;AAChB,UAAMM,UAAU,GAAG,CAAC,KAAD,EAAQ,OAAR,EAAiB,MAAjB,EAAyB,OAAzB,EAAkC,OAAlC,CAAnB;AACA,aAAON,OAAO,CAACJ,GAAR,CAAY,UAACW,GAAD,EAAMT,KAAN,EAAgB;AACjC,YAAIU,EAAE,GAAGV,KAAK,GAAG,CAAjB;AACA,eACE,oBAAC,KAAD;AAAO,UAAA,EAAE,EAAC,GAAV;AAAc,UAAA,OAAO,EAAE;AAAA,mBAAMjB,MAAM,CAACU,SAAP,YAAqB,YAAUkB,kBAAkB,CAACF,GAAD,CAAjD,EAAN;AAAA,WAAvB;AACE,UAAA,GAAG,MADL;AACM,UAAA,IAAI,EAAE,MADZ;AACoB,UAAA,GAAG,EAAET,KADzB;AACgC,UAAA,KAAK,EAAEQ,UAAU,CAACE,EAAD;AADjD,WAEGD,GAFH,CADF;AAMD,OARM,CAAP;AASD;;;6BAEQ;AACL,aACI,oBAAC,MAAD,QACE,oBAAC,IAAD;AAAM,QAAA,QAAQ,MAAd;AAAe,QAAA,OAAO,EAAE;AAAxB,SACE,oBAAC,IAAD,CAAM,MAAN,QACE,oBAAC,OAAD;AAAS,QAAA,MAAM;AAAf,QADF,EAEE,oBAAC,MAAD;AAAQ,QAAA,EAAE,EAAC,IAAX;AAAgB,QAAA,SAAS,EAAC;AAA1B,4BAFF,EAKE,oBAAC,OAAD;AAAS,QAAA,MAAM;AAAf,QALF,EAME,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAE;AAACG,UAAAA,MAAM,EAAC;AAAR;AAAlB,SACE,oBAAC,KAAD,QACE,oBAAC,KAAD,CAAO,MAAP,QACG,KAAKC,oBAAL,EADH,CADF,EAIE,oBAAC,KAAD,CAAO,IAAP,QACG,KAAKC,kBAAL,EADH,CAJF,EAOE,oBAAC,IAAD;AAAM,QAAA,QAAQ,EAAC;AAAf,SACE,oBAAC,OAAD,6BADF,CAPF,CADF,EAYE,oBAAC,OAAD;AAAS,QAAA,MAAM;AAAf,QAZF,EAaE;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb;AAAZ,mBAAsC,KAAKnB,KAAL,CAAWC,SAAX,CAAqBmB,MAA3D,cAbF,CANF,CADF,CADF,CADJ;AA4BH;;;;;;iDAlJ6BpB,K;;;;;;;uBAEHZ,IAAI,CAACG,GAAL,CAASC,WAAT,E;;;AAAjBC,gBAAAA,Q;;uBACIV,WAAW,CAACW,OAAZ,CAAoBC,UAApB,CAA+BF,QAAQ,CAAC,CAAD,CAAvC,EAA4CG,IAA5C,E;;;;;uCAAuD,E;;;;;AAC7DT,gBAAAA,MAAM,CAACU,SAAP,M,CAAuB;;;;uBAIGf,OAAO,CAACY,OAAR,CAAgB2B,oBAAhB,GAAuCzB,IAAvC,E;;;AAA1Bc,gBAAAA,iB;AACAY,gBAAAA,sB,GAAyBZ,iBAAiB,CAACU,M,EAE/C;;AACIG,gBAAAA,S,GAAY,E;AACZtB,gBAAAA,S,GAAY,E;AACZO,gBAAAA,Y,GAAe,E;;sBAGfR,KAAK,CAACwB,KAAN,CAAYC,KAAZ,IAAqBC,SAArB,IAAkC1B,KAAK,CAACwB,KAAN,CAAYC,KAAZ,IAAqB,a;;;;;AACvDE,gBAAAA,UAAU,GAAGC,kBAAkB,CAAC5B,KAAK,CAACwB,KAAN,CAAYC,KAAb,CAA/B;;uBAC0BpC,MAAM,CAACsC,UAAD,EAAYjB,iBAAZ,C;;;AAAhCA,gBAAAA,iB;AACAY,gBAAAA,sBAAsB,GAAGZ,iBAAiB,CAACU,MAA3C;;;AAGIS,gBAAAA,C,GAAE,C;;;sBAAGA,CAAC,GAACP,sB;;;;;AACbC,gBAAAA,SAAS,CAACM,CAAD,CAAT,GAAe7C,QAAQ,CAAC0B,iBAAiB,CAACmB,CAAD,CAAlB,CAAvB;;uBACqBN,SAAS,CAACM,CAAD,CAAT,CAAanC,OAAb,CAAqBoC,UAArB,GAAkClC,IAAlC,E;;;AAArBK,gBAAAA,SAAS,CAAC4B,CAAD,C;;uBACcN,SAAS,CAACM,CAAD,CAAT,CAAanC,OAAb,CAAqBqC,aAArB,GAAqCnC,IAArC,E;;;AAAnBoC,gBAAAA,U;AACJxB,gBAAAA,YAAY,CAACqB,CAAD,CAAZ,GAAkBG,UAAU,CAACZ,MAA7B;;;AAJqCS,gBAAAA,CAAC,E;;;;;kDAMjC;AAAEpC,kBAAAA,QAAQ,EAARA,QAAF;AAAYiB,kBAAAA,iBAAiB,EAAjBA,iBAAZ;AAA+BT,kBAAAA,SAAS,EAATA,SAA/B;AAA0CO,kBAAAA,YAAY,EAAZA;AAA1C,iB;;;;;;;;;;;;;;;;;;;EA9BQxC,S;;AAsJvB,eAAesB,QAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Header, Table, Statistic, Rating, Grid, Message,\r\n   Divider, Container, Icon, Label, Rail, Segment } from 'semantic-ui-react';\r\nimport factory from '../ethereum/factory';\r\nimport credentials from '../ethereum/credentials';\r\nimport Question from '../ethereum/question';\r\nimport Layout from '../components/Layout';\r\nimport {Link, Router} from '../routes';\r\nimport web3 from '../ethereum/web3';\r\nimport {search} from './search';\r\n\r\nclass HomePage extends Component {\r\n    static async getInitialProps (props) {\r\n        // Retrieve the Ethereum Account from MetaMask\r\n        const accounts = await web3.eth.getAccounts();\r\n        if (await credentials.methods.getBinding(accounts[0]).call() === \"\"){\r\n            Router.pushRoute(`/`); // Automatic redirect the user to Login or Sign Up\r\n        }\r\n\r\n        // Retrieve an array of addresses of questions deployed\r\n        let deployedQuestions = await factory.methods.getDeployedQuestions().call();\r\n        let deployedQuestionsCount = deployedQuestions.length;\r\n\r\n        // Retrieve the summaries of all deployed questions\r\n        let questions = [];\r\n        let summaries = [];\r\n        let numOfAnswers = [];\r\n        let searchItem;\r\n        //filter the questions based on search value\r\n        if (props.query.value != undefined && props.query.value != 'favicon.ico') {\r\n            searchItem = decodeURIComponent(props.query.value);\r\n            deployedQuestions = await search(searchItem,deployedQuestions);\r\n            deployedQuestionsCount = deployedQuestions.length;\r\n        }\r\n\r\n        for(let i=0; i<deployedQuestionsCount; i++) {\r\n          questions[i] = Question(deployedQuestions[i]);\r\n          summaries[i] = await questions[i].methods.getSummary().call();\r\n          let answerList = await questions[i].methods.getAnswerList().call();\r\n          numOfAnswers[i] = answerList.length;\r\n        }\r\n        return { accounts, deployedQuestions, summaries, numOfAnswers };\r\n    }\r\n\r\n    // Redirect E-Wallet that are not Logged In to the Login Page\r\n    async componentWillMount() {\r\n      // Retrieve the Ethereum Account from MetaMask\r\n      const accounts = await web3.eth.getAccounts();\r\n      if (await credentials.methods.getBinding(accounts[0]).call() === \"\"){\r\n          Router.pushRoute(`/`); // Automatic redirect the user to Login or Sign Up\r\n      }\r\n    }\r\n\r\n    renderQuestionHeader() {\r\n      return(\r\n        <Table.Row>\r\n          <Table.HeaderCell textAlign='center' width={2}><span style={{fontSize: 15, color: '#6A737C'}}>Current Phase</span></Table.HeaderCell>\r\n          <Table.HeaderCell textAlign='center' width={2}><span style={{fontSize: 15, color: '#6A737C'}}>Answers Submitted</span></Table.HeaderCell>\r\n          <Table.HeaderCell textAlign='center' width={2}><span style={{fontSize: 15, color: '#6A737C'}}>Reward</span></Table.HeaderCell>\r\n          <Table.HeaderCell textAlign='center'><span style={{fontSize: 15, color: '#6A737C'}}>Question Title</span></Table.HeaderCell>\r\n        </Table.Row>\r\n      );\r\n    }\r\n\r\n    // Renders out the list of question\r\n    renderQuestionList() {\r\n        return this.props.summaries.map((summary, index) => {\r\n            const questionState = summary[4];\r\n            const tagList = summary[8].split(\", \");\r\n            return <Table.Row key={index}>\r\n              <Table.Cell textAlign='center' width={2}>\r\n                  {\r\n                    questionState == 0 ? <Statistic size='mini' color='red'>\r\n                                    <Statistic.Value><span\r\n                                        style={{fontSize: 15, color: '#6A737C'}}> Answering\r\n                                                    </span></Statistic.Value>\r\n                                    <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>Phase</span></Statistic.Label>\r\n                                </Statistic>\r\n                              : questionState == 1 ?\r\n                              <Statistic size='mini' color='red'>\r\n                                    <Statistic.Value><span\r\n                                        style={{fontSize: 15, color: '#6A737C'}}> Voting\r\n                                                    </span></Statistic.Value>\r\n                                    <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>Phase</span></Statistic.Label>\r\n                                </Statistic>\r\n                              :<Statistic size='mini' color='red'>\r\n                                    <Statistic.Value><span\r\n                                        style={{fontSize: 15, color: '#6A737C'}}> Rewarded\r\n                                                    </span></Statistic.Value>\r\n                                    <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>Phase</span></Statistic.Label>\r\n                                </Statistic>\r\n                  }\r\n                </Table.Cell>\r\n                <Table.Cell textAlign='center' width={2}>\r\n                    <Statistic size='mini' color='red'>\r\n                        <Statistic.Value><span style={{fontSize: 15, color: '#6A737C'}}>{this.props.numOfAnswers[index]}</span></Statistic.Value>\r\n                        <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>answer(s)</span></Statistic.Label>\r\n                    </Statistic>\r\n                </Table.Cell>\r\n                <Table.Cell textAlign='center' width={2}>\r\n                    <Statistic size='mini' color='red'>\r\n                        <Statistic.Value><span style={{fontSize: 15, color: '#6A737C'}}>{summary[2]}</span></Statistic.Value>\r\n                        <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>ether(s)</span></Statistic.Label>\r\n                    </Statistic>\r\n                </Table.Cell>\r\n                <Table.Cell textAlign='left'>\r\n                    <Grid.Row textAlign='left'>\r\n                        <span style={{fontSize: 18, color: '#6A737C', cursor: 'pointer'}} onClick={() => Router.pushRoute(`/questions/${this.props.deployedQuestions[index]}`)}><a>{summary[0]}</a></span>\r\n                    </Grid.Row>\r\n                    {this.renderTag(tagList)}\r\n                </Table.Cell>\r\n            </Table.Row>\r\n      });\r\n    }\r\n\r\n    // Render each tag individually for each question\r\n    renderTag(tagList){\r\n      const tagColours = [\"red\", \"olive\", \"blue\", \"olive\", \"green\"];\r\n      return tagList.map((tag, index) => {\r\n        let id = index % 5;\r\n        return(\r\n          <Label as='a' onClick={() => Router.pushRoute(`/${'search/'+encodeURIComponent(tag)}`)}\r\n            tag size={\"mini\"} key={index} color={tagColours[id]}>\r\n            {tag}\r\n          </Label>\r\n        )\r\n      });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Layout>\r\n              <Grid centered columns={2}>\r\n                <Grid.Column>\r\n                  <Divider hidden/>\r\n                  <Header as='h2' textAlign='center'>\r\n                      Questions Posted\r\n                  </Header>\r\n                  <Divider hidden/>\r\n                  <Container style={{height:\"100vh\"}}>\r\n                    <Table>\r\n                      <Table.Header>\r\n                        {this.renderQuestionHeader()}\r\n                      </Table.Header>\r\n                      <Table.Body>\r\n                        {this.renderQuestionList()}\r\n                      </Table.Body>\r\n                      <Rail position='right'>\r\n                        <Segment>Right Rail Content</Segment>\r\n                      </Rail>\r\n                    </Table>\r\n                    <Divider hidden/>\r\n                    <div style={{ marginTop: 20 }}>Found {this.props.summaries.length} Item(s).</div>\r\n                  </Container>\r\n                </Grid.Column>\r\n              </Grid>\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}