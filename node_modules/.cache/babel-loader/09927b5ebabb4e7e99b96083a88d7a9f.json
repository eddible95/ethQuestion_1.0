{"ast":null,"code":"import _Set from \"@babel/runtime-corejs2/core-js/set\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { Form, Button, Input, Message, Dropdown, Header, Icon, Segment, Container, TextArea, Divider, Label, Modal, Loader } from 'semantic-ui-react';\nimport Layout from '../components/Layout';\nimport factory from '../ethereum/factory';\nimport Question from '../ethereum/question';\nimport Profile from '../ethereum/profile';\nimport web3 from '../ethereum/web3';\nimport credentials from '../ethereum/credentials';\nimport { Router } from '../routes';\nimport { getIpfsHash } from './ipfs';\n\nvar NewQuestion =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NewQuestion, _Component);\n\n  function NewQuestion(props) {\n    var _this;\n\n    _classCallCheck(this, NewQuestion);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NewQuestion).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var logTransaction, accounts, _logTransaction;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              });\n\n              logTransaction = _this.logging(\"Created New Question\");\n              console.log(logTransaction); // Ensures all fields are filled\n\n              if (!(_this.checkFieldEmpty(_this.state.questionTitle) && _this.checkFieldEmpty(_this.state.content) && _this.checkFieldEmpty(_this.state.reward) && _this.checkFieldEmpty(_this.state.maxDuration))) {\n                _context.next = 21;\n                break;\n              }\n\n              _context.prev = 4;\n              _context.next = 7;\n              return web3.eth.getAccounts();\n\n            case 7:\n              accounts = _context.sent;\n              _logTransaction = logging(\"Created New Question\");\n              console.log(_logTransaction); // Create a new post\n\n              _context.next = 12;\n              return factory.methods.createQuestion(_this.state.questionTitle, _this.state.content, _this.lowerCase(_this.state.tag), Number(_this.state.reward), _parseFloat(_this.state.maxDuration) * 60 * 60, _this.state.fileHashes_array, _this.state.fileNames_array).send({\n                from: accounts[0]\n              });\n\n            case 12:\n              Router.pushRoute('/home'); // Automatic redirect the user.\n\n              _context.next = 18;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](4);\n\n              _this.setState({\n                errorMessage: _context.t0.message\n              });\n\n            case 18:\n              _this.setState({\n                loading: false\n              });\n\n              _context.next = 23;\n              break;\n\n            case 21:\n              _this.setState({\n                errorMessage: \"Required Field(s) Empty\"\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[4, 15]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"checkFieldEmpty\", function (field) {\n      return field === \"\" ? false : true;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"lowerCase\", function (tags) {\n      for (var i = 0; i < tags.length; i++) {\n        tags[i] = tags[i].toLowerCase();\n      }\n\n      return tags;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"logging\", function (message) {\n      var today = new Date();\n      var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n      var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n      var dateTime = date + ' ' + time + \":\" + message;\n      return dateTime;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFileSelected\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var reader, file, _this$state, files_array, fileNames_array, fileHashes_array;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // Access JavaScript FileReader() method for conversion to buffer\n              reader = new FileReader();\n              file = _this.fileInput.files[0];\n\n              _this.setState({\n                fileLoading: true\n              });\n\n              if (file instanceof Blob) {\n                _this$state = _this.state, files_array = _this$state.files_array, fileNames_array = _this$state.fileNames_array, fileHashes_array = _this$state.fileHashes_array;\n                files_array.push(file);\n                fileNames_array.push(file.name);\n\n                _this.setState({\n                  files_array: files_array,\n                  fileNames_array: fileNames_array\n                });\n\n                console.log(\"fileNames_array: \", fileNames_array);\n                reader.onloadend =\n                /*#__PURE__*/\n                _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee2() {\n                  var fileHash;\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          _context2.next = 2;\n                          return _this.setState({\n                            fileUrl: reader.result,\n                            loadingFile: true,\n                            buffer: Buffer.from(reader.result) // File is converted to a buffer for upload to IPFS\n\n                          });\n\n                        case 2:\n                          if (!_this.state.buffer) {\n                            _context2.next = 8;\n                            break;\n                          }\n\n                          _context2.next = 5;\n                          return getIpfsHash(file);\n\n                        case 5:\n                          _context2.t0 = _context2.sent;\n                          _context2.next = 9;\n                          break;\n\n                        case 8:\n                          _context2.t0 = '0';\n\n                        case 9:\n                          fileHash = _context2.t0;\n                          fileHashes_array.push(fileHash);\n\n                          _this.setState({\n                            fileHashes_array: fileHashes_array\n                          });\n\n                          console.log(\"fileHashes_array: \", fileHashes_array);\n\n                          _this.setState({\n                            fileLoading: false\n                          });\n\n                        case 14:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }));\n                reader.readAsDataURL(file);\n              }\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"onFileRemoved\", function (file) {\n      var i = 0;\n      var _this$state2 = _this.state,\n          files_array = _this$state2.files_array,\n          fileHashes_array = _this$state2.fileHashes_array,\n          fileNames_array = _this$state2.fileNames_array;\n      console.log('file: ', file);\n\n      for (i = 0; i < files_array.length; i++) {\n        if (file === files_array[i]) {\n          files_array.splice(i, 1);\n          fileNames_array.splice(i, 1);\n          fileHashes_array.splice(i, 1);\n          break;\n        }\n      }\n\n      _this.setState({\n        files_array: files_array,\n        fileNames_array: fileNames_array,\n        fileHashes_array: fileHashes_array\n      });\n\n      console.log('fileNames_array', fileNames_array);\n      console.log(\"fileHashes_array: \", fileHashes_array);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleAddition\", function (e, _ref4) {\n      var value = _ref4.value;\n\n      _this.setState({\n        tagOptions: [{\n          text: value,\n          value: value\n        }].concat(_toConsumableArray(_this.state.tagOptions))\n      });\n    });\n\n    _this.state = {\n      questionTitle: '',\n      content: '',\n      tag: [],\n      tagOptions: [],\n      etherOptions: [],\n      reward: '',\n      maxDuration: '',\n      errorMessage: '',\n      loading: false,\n      fileLoading: false,\n      buffer: null,\n      files_array: [],\n      fileHashes_array: [],\n      fileNames_array: []\n    };\n    return _this;\n  }\n\n  _createClass(NewQuestion, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var accounts, profile, token, deployedQuestions, deployedQuestionsCount, tags, tagOptions, etherOptions, i, question, summary, _i, _i2;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context4.sent;\n                _context4.next = 5;\n                return credentials.methods.getBinding(accounts[0]).call();\n\n              case 5:\n                _context4.t0 = _context4.sent;\n\n                if (!(_context4.t0 === \"\")) {\n                  _context4.next = 8;\n                  break;\n                }\n\n                Router.pushRoute(\"/\"); // Automatic redirect the user to Login or Sign Up\n\n              case 8:\n                _context4.t1 = Profile;\n                _context4.next = 11;\n                return factory.methods.getProfile(this.props.accounts[0]).call();\n\n              case 11:\n                _context4.t2 = _context4.sent;\n                profile = (0, _context4.t1)(_context4.t2);\n                _context4.next = 15;\n                return profile.methods.getToken().call();\n\n              case 15:\n                token = _context4.sent;\n                _context4.next = 18;\n                return factory.methods.getDeployedQuestions().call();\n\n              case 18:\n                deployedQuestions = _context4.sent;\n                deployedQuestionsCount = deployedQuestions.length;\n                tags = [];\n                tagOptions = [];\n                etherOptions = [];\n                i = 0;\n\n              case 24:\n                if (!(i < deployedQuestionsCount)) {\n                  _context4.next = 33;\n                  break;\n                }\n\n                question = Question(deployedQuestions[i]);\n                _context4.next = 28;\n                return question.methods.getSummary().call();\n\n              case 28:\n                summary = _context4.sent;\n                tags = [].concat(_toConsumableArray(tags), _toConsumableArray(summary[8]));\n\n              case 30:\n                i++;\n                _context4.next = 24;\n                break;\n\n              case 33:\n                // Remove duplicated tags\n                tags = _toConsumableArray(new _Set(tags));\n\n                for (_i = 0; _i < tags.length; _i++) {\n                  tagOptions.push({\n                    key: _i,\n                    text: tags[_i],\n                    value: tags[_i]\n                  });\n                }\n\n                for (_i2 = 0; _i2 < Number(token); _i2++) {\n                  etherOptions.push({\n                    key: _i2 + 1,\n                    text: _i2 + 1,\n                    value: _i2 + 1\n                  });\n                }\n\n                this.setState({\n                  tagOptions: tagOptions\n                });\n                this.setState({\n                  etherOptions: etherOptions\n                });\n\n              case 38:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }() // Submit the question to be stored on the Ethereum Blockchain\n\n  }, {\n    key: \"renderFilesUpload\",\n    value: function renderFilesUpload(files) {\n      var _this2 = this;\n\n      var files_array = this.state.files_array;\n\n      if (this.state.files_array.length == 0) {\n        return React.createElement(Segment, {\n          placeholder: true\n        }, React.createElement(Header, {\n          icon: true\n        }, React.createElement(Icon, {\n          name: \"images outline\"\n        }), \"No files are uploaded for this question\"), React.createElement(\"input\", {\n          style: {\n            display: 'none'\n          },\n          type: \"file\",\n          onChange: function onChange() {\n            return _this2.onFileSelected();\n          },\n          ref: function ref(fileInput) {\n            return _this2.fileInput = fileInput;\n          }\n        }), React.createElement(Button, {\n          primary: true,\n          onClick: function onClick() {\n            return _this2.fileInput.click();\n          },\n          loading: this.state.fileLoading\n        }, \"Upload Files\"));\n      } else {\n        return React.createElement(Segment, {\n          placeholder: true\n        }, React.createElement(\"center\", null, React.createElement(\"div\", {\n          style: {\n            marginBottom: '20px'\n          }\n        }, files), React.createElement(\"input\", {\n          style: {\n            display: 'none'\n          },\n          type: \"file\",\n          onChange: function onChange() {\n            return _this2.onFileSelected();\n          },\n          ref: function ref(fileInput) {\n            return _this2.fileInput = fileInput;\n          }\n        }), React.createElement(Button, {\n          primary: true,\n          onClick: function onClick() {\n            return _this2.fileInput.click();\n          },\n          loading: this.state.fileLoading\n        }, \"Upload Files\")));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var files_array = this.state.files_array;\n      var elmFiles = null;\n\n      if (files_array !== null) {\n        elmFiles = files_array.map(function (item, index) {\n          return React.createElement(Label, {\n            as: \"a\",\n            key: index,\n            size: \"big\"\n          }, item.name, React.createElement(Icon, {\n            name: \"delete\",\n            onClick: function onClick() {\n              return _this3.onFileRemoved(item);\n            }\n          }));\n        });\n      }\n\n      return React.createElement(Layout, null, React.createElement(Container, {\n        style: {\n          height: \"100vh\"\n        }\n      }, React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(Segment, {\n        textAlign: \"center\",\n        as: \"h3\"\n      }, \"Creating Of New Question\"), React.createElement(Form, {\n        error: !!this.state.errorMessage,\n        style: {\n          marginTop: '10px'\n        }\n      }, React.createElement(Form.Field, {\n        required: true\n      }, React.createElement(\"label\", null, \"Question Title\"), React.createElement(Input, {\n        placeholder: \"Enter Title\",\n        value: this.state.questionTitle,\n        onChange: function onChange(event) {\n          return _this3.setState({\n            questionTitle: event.target.value\n          });\n        }\n      })), React.createElement(Form.Field, {\n        required: true\n      }, React.createElement(\"label\", null, \"Question Description (To include math questions, delimit the latex format with $$)\"), React.createElement(Label, null, \"Example: This is my equation: $$1 \\\\triangleright 1 \\\\bigcirc  \\\\bigcirc $$\"), React.createElement(\"a\", {\n        style: {\n          display: \"table-cell\"\n        },\n        href: \"https://www.codecogs.com/latex/eqneditor.php\",\n        target: \"_blank\"\n      }, \"Link to Supported Latex Editor\"), React.createElement(TextArea, {\n        placeholder: \"Enter Description\",\n        value: this.state.content,\n        onChange: function onChange(event) {\n          return _this3.setState({\n            content: event.target.value\n          });\n        }\n      })), React.createElement(Form.Field, null, React.createElement(\"label\", null, \"Tags\"), React.createElement(Dropdown, {\n        clearable: true,\n        options: this.state.tagOptions,\n        selection: true,\n        multiple: true,\n        allowAdditions: true,\n        search: true,\n        placeholder: \"Select from existing tags or create your own tags\",\n        value: this.state.tag,\n        onChange: function onChange(e, _ref5) {\n          var value = _ref5.value;\n          return _this3.setState({\n            tag: value\n          });\n        },\n        onAddItem: this.handleAddition\n      })), React.createElement(Form.Field, {\n        required: true\n      }, React.createElement(\"label\", null, \"Ether\"), React.createElement(Dropdown, {\n        clearable: true,\n        options: this.state.etherOptions,\n        selection: true,\n        placeholder: \"Select your value of reward\",\n        value: this.state.reward,\n        onChange: function onChange(e, _ref6) {\n          var value = _ref6.value;\n          return _this3.setState({\n            reward: value\n          });\n        }\n      })), React.createElement(Form.Field, {\n        required: true\n      }, React.createElement(\"label\", null, \"Maximum Duration\"), React.createElement(Input, {\n        label: \"hour(s)\",\n        labelPosition: \"right\",\n        placeholder: \"Enter the duration for the question to be valid\",\n        value: this.state.maxDuration,\n        onChange: function onChange(event) {\n          return _this3.setState({\n            maxDuration: event.target.value\n          });\n        }\n      })), React.createElement(Form.Field, null, this.renderFilesUpload(elmFiles)), React.createElement(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.errorMessage\n      }), React.createElement(Modal, {\n        open: this.state.loading,\n        trigger: React.createElement(Button, {\n          primary: true,\n          onClick: this.onSubmit\n        }, \"Submit Question\"),\n        basic: true,\n        size: \"small\"\n      }, React.createElement(Header, {\n        content: \"Posting New Question\"\n      }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"Please Confirm the MetaMask Transaction Request to submit your Question to the Block-Chain Network. Upon successful submission, you will be redirected to the Home Page. This process might take awhile.\"), React.createElement(Loader, {\n        active: true,\n        inline: \"centered\"\n      }, \"Loading\"))))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5() {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context5.sent;\n                _context5.next = 5;\n                return credentials.methods.getBinding(accounts[0]).call();\n\n              case 5:\n                _context5.t0 = _context5.sent;\n\n                if (!(_context5.t0 === \"\")) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                Router.pushRoute(\"/\");\n\n              case 8:\n                return _context5.abrupt(\"return\", {\n                  accounts: accounts\n                });\n\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function getInitialProps() {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return NewQuestion;\n}(Component);\n\nexport default NewQuestion;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\newQuestion.js"],"names":["React","Component","Form","Button","Input","Message","Dropdown","Header","Icon","Segment","Container","TextArea","Divider","Label","Modal","Loader","Layout","factory","Question","Profile","web3","credentials","Router","getIpfsHash","NewQuestion","props","setState","loading","errorMessage","logTransaction","logging","console","log","checkFieldEmpty","state","questionTitle","content","reward","maxDuration","eth","getAccounts","accounts","methods","createQuestion","lowerCase","tag","Number","fileHashes_array","fileNames_array","send","from","pushRoute","message","field","tags","i","length","toLowerCase","today","Date","date","getFullYear","getMonth","getDate","time","getHours","getMinutes","getSeconds","dateTime","reader","FileReader","file","fileInput","files","fileLoading","Blob","files_array","push","name","onloadend","fileUrl","result","loadingFile","buffer","Buffer","fileHash","readAsDataURL","splice","e","value","tagOptions","text","etherOptions","getBinding","call","getProfile","profile","getToken","token","getDeployedQuestions","deployedQuestions","deployedQuestionsCount","question","getSummary","summary","key","display","onFileSelected","click","marginBottom","elmFiles","map","item","index","onFileRemoved","height","marginTop","event","target","handleAddition","renderFilesUpload","onSubmit"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Form, Button, Input, Message, Dropdown, Header,\r\n  Icon, Segment, Container, TextArea, Divider, Label, Modal, Loader } from 'semantic-ui-react';\r\nimport Layout from '../components/Layout';\r\nimport factory from '../ethereum/factory';\r\nimport Question from '../ethereum/question';\r\nimport Profile from '../ethereum/profile';\r\nimport web3 from '../ethereum/web3';\r\nimport credentials from '../ethereum/credentials';\r\nimport { Router } from '../routes';\r\nimport { getIpfsHash } from './ipfs';\r\n\r\nclass NewQuestion extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n          questionTitle: '',\r\n          content:'',\r\n          tag: [],\r\n          tagOptions: [],\r\n          etherOptions: [],\r\n          reward:'',\r\n          maxDuration:'',\r\n          errorMessage: '',\r\n          loading: false,\r\n          fileLoading: false,\r\n          buffer: null,\r\n          files_array: [],\r\n          fileHashes_array: [],\r\n          fileNames_array: [],\r\n      };\r\n    }\r\n\r\n    static async getInitialProps () {\r\n        const accounts = await web3.eth.getAccounts();\r\n        // Redirect E-Wallet that are not Logged In to the Login Page\r\n        if (await credentials.methods.getBinding(accounts[0]).call() === \"\"){\r\n            Router.pushRoute(`/`);\r\n        }\r\n        return { accounts }\r\n    }\r\n\r\n    async componentWillMount() {\r\n      // Retrieve the Ethereum Account from MetaMask\r\n      const accounts = await web3.eth.getAccounts();\r\n      // Redirect E-Wallet that are not Logged In to the Login Page\r\n      if (await credentials.methods.getBinding(accounts[0]).call() === \"\"){\r\n          Router.pushRoute(`/`); // Automatic redirect the user to Login or Sign Up\r\n      }\r\n\r\n      // Set the states required for the form's options\r\n      const profile = Profile(await factory.methods.getProfile(this.props.accounts[0]).call());\r\n      const token = await profile.methods.getToken().call();\r\n\r\n      // Retrieve previously used tags and ether balance\r\n      let deployedQuestions = await factory.methods.getDeployedQuestions().call();\r\n      let deployedQuestionsCount = deployedQuestions.length;\r\n      let tags = [];\r\n      let tagOptions = [];\r\n      let etherOptions = [];\r\n\r\n      for (let i=0; i<deployedQuestionsCount; i++) {\r\n        let question = Question(deployedQuestions[i])\r\n        let summary = await question.methods.getSummary().call();\r\n        tags = [...tags, ...summary[8]]\r\n      }\r\n      // Remove duplicated tags\r\n      tags = [...new Set(tags)]\r\n\r\n      for (let i = 0; i<tags.length; i++) {\r\n          tagOptions.push({\r\n              key: i,\r\n              text: tags[i],\r\n              value: tags[i]\r\n          });\r\n      }\r\n\r\n      for (let i = 0; i < Number(token); i++) {\r\n          etherOptions.push({\r\n              key: i+1,\r\n              text: i+1,\r\n              value: i+1\r\n          });\r\n      }\r\n      this.setState( { tagOptions: tagOptions });\r\n      this.setState( { etherOptions: etherOptions });\r\n    }\r\n\r\n    // Submit the question to be stored on the Ethereum Blockchain\r\n    onSubmit = async () => {\r\n        this.setState({ loading: true, errorMessage: '' });\r\n        let logTransaction = this.logging(\"Created New Question\");\r\n        console.log(logTransaction);\r\n        // Ensures all fields are filled\r\n        if (this.checkFieldEmpty(this.state.questionTitle) && this.checkFieldEmpty(this.state.content) && this.checkFieldEmpty(this.state.reward) && this.checkFieldEmpty(this.state.maxDuration)){\r\n          try {\r\n              const accounts = await web3.eth.getAccounts();\r\n              let logTransaction = logging(\"Created New Question\");\r\n              console.log(logTransaction);\r\n              // Create a new post\r\n              await factory.methods\r\n              .createQuestion(this.state.questionTitle, this.state.content, this.lowerCase(this.state.tag), Number(this.state.reward), parseFloat(this.state.maxDuration) * 60 * 60,\r\n                this.state.fileHashes_array, this.state.fileNames_array)\r\n              .send({\r\n                  from: accounts[0]\r\n              });\r\n              Router.pushRoute('/home'); // Automatic redirect the user.\r\n          } catch (err) {\r\n              this.setState({ errorMessage: err.message });\r\n          }\r\n          this.setState({ loading: false });\r\n        } else {\r\n          this.setState({ errorMessage: \"Required Field(s) Empty\" });\r\n          this.setState({ loading: false });\r\n        }\r\n    };\r\n\r\n    checkFieldEmpty = (field) => {\r\n      return field === \"\" ? false : true;\r\n    }\r\n\r\n    lowerCase = (tags) => {\r\n      for (let i = 0; i<tags.length; i++) {\r\n        tags[i] = tags[i].toLowerCase();\r\n      }\r\n      return tags;\r\n    }\r\n\r\n    logging = (message) => {\r\n      let today = new Date();\r\n      let date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\r\n      let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n      let dateTime = date+' '+time+\":\"+message;\r\n      return dateTime;\r\n    }\r\n\r\n    // Select a file to upload\r\n    onFileSelected = async () => {\r\n        // Access JavaScript FileReader() method for conversion to buffer\r\n        const reader = new FileReader();\r\n        const file = this.fileInput.files[0];\r\n        this.setState({fileLoading: true});\r\n        if (file instanceof Blob ) {\r\n            let {files_array, fileNames_array, fileHashes_array} = this.state;\r\n            files_array.push(file);\r\n            fileNames_array.push(file.name);\r\n            this.setState({\r\n                files_array: files_array,\r\n                fileNames_array: fileNames_array\r\n            });\r\n            console.log(\"fileNames_array: \", fileNames_array);\r\n            reader.onloadend = async () => {\r\n                await this.setState({\r\n                    fileUrl: reader.result,\r\n                    loadingFile: true,\r\n                    buffer: Buffer.from(reader.result) // File is converted to a buffer for upload to IPFS\r\n                });\r\n                const fileHash = this.state.buffer ? (await getIpfsHash(file)) : '0';\r\n                fileHashes_array.push(fileHash);\r\n                this.setState({ fileHashes_array: fileHashes_array });\r\n                console.log(\"fileHashes_array: \", fileHashes_array);\r\n                this.setState({fileLoading: false});\r\n            }\r\n            reader.readAsDataURL(file);\r\n        }\r\n    }\r\n\r\n    // Remove a previously selected file to upload\r\n    onFileRemoved = (file) => {\r\n        var i = 0;\r\n        let {files_array, fileHashes_array, fileNames_array} = this.state;\r\n        console.log('file: ', file);\r\n        for (i = 0 ; i < files_array.length ; i++) {\r\n            if (file === files_array[i]) {\r\n                files_array.splice(i, 1);\r\n                fileNames_array.splice(i, 1);\r\n                fileHashes_array.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n        this.setState({\r\n            files_array: files_array,\r\n            fileNames_array: fileNames_array,\r\n            fileHashes_array: fileHashes_array\r\n        });\r\n        console.log('fileNames_array', fileNames_array);\r\n        console.log(\"fileHashes_array: \", fileHashes_array);\r\n    }\r\n\r\n    handleAddition = (e, { value }) => {\r\n      this.setState({ tagOptions: [{ text: value, value }, ...this.state.tagOptions] });\r\n    }\r\n\r\n    renderFilesUpload(files) {\r\n      let {files_array} = this.state;\r\n      if(this.state.files_array.length == 0){\r\n        return (\r\n          <Segment placeholder>\r\n            <Header icon>\r\n              <Icon name='images outline' />\r\n              No files are uploaded for this question\r\n            </Header>\r\n            <input\r\n                style={{ display: 'none' }}\r\n                type='file'\r\n                onChange={() => this.onFileSelected()}\r\n                ref={fileInput => this.fileInput = fileInput}/>\r\n            <Button primary onClick={() => this.fileInput.click()} loading={this.state.fileLoading}>Upload Files</Button>\r\n          </Segment>\r\n        )\r\n      } else {\r\n        return (\r\n          <Segment placeholder>\r\n            <center>\r\n                <div style={{marginBottom: '20px'}}>\r\n                    {files}\r\n                </div>\r\n                <input\r\n                    style={{ display: 'none' }}\r\n                    type='file'\r\n                    onChange={() => this.onFileSelected()}\r\n                    ref={fileInput => this.fileInput = fileInput}/>\r\n                <Button primary onClick={() => this.fileInput.click()} loading={this.state.fileLoading}>Upload Files</Button>\r\n            </center>\r\n          </Segment>\r\n        )\r\n      }\r\n    };\r\n\r\n    render() {\r\n        let {files_array} = this.state;\r\n        let elmFiles = null;\r\n\r\n        if (files_array !== null) {\r\n            elmFiles = files_array.map((item, index) =>\r\n                <Label as='a' key={index} size='big'>\r\n                    {item.name}\r\n                    <Icon name='delete'\r\n                          onClick={() => this.onFileRemoved(item)} />\r\n                </Label>\r\n            );\r\n        }\r\n        return (\r\n            <Layout>\r\n                <Container style={{height:\"100vh\"}}>\r\n                  <Divider hidden/>\r\n                  <Segment textAlign='center' as='h3'>Creating Of New Question</Segment>\r\n                  <Form error={!!this.state.errorMessage} style={{ marginTop: '10px' }}>\r\n                      <Form.Field required={true}>\r\n                          <label>Question Title</label>\r\n                          <Input\r\n                              placeholder=\"Enter Title\"\r\n                              value={this.state.questionTitle}\r\n                              onChange={event => this.setState({ questionTitle: event.target.value })}\r\n                          />\r\n                      </Form.Field>\r\n                      <Form.Field required={true}>\r\n                          <label>Question Description (To include math questions, delimit the latex format with $$)</label>\r\n                          <Label>Example: This is my equation: $$1 \\triangleright 1 \\bigcirc  \\bigcirc $$</Label>\r\n                          <a style={{display: \"table-cell\"}} href=\"https://www.codecogs.com/latex/eqneditor.php\" target=\"_blank\">Link to Supported Latex Editor</a>\r\n                          <TextArea\r\n                              placeholder=\"Enter Description\"\r\n                              value={this.state.content}\r\n                              onChange={event => this.setState({ content: event.target.value })}\r\n                          />\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                          <label>Tags</label>\r\n                          <Dropdown clearable\r\n                                    options={this.state.tagOptions}\r\n                                    selection\r\n                                    multiple\r\n                                    allowAdditions\r\n                                    search\r\n                                    placeholder='Select from existing tags or create your own tags'\r\n                                    value={this.state.tag}\r\n                                    onChange={ (e, { value }) => this.setState({ tag: value })}\r\n                                    onAddItem={this.handleAddition} />\r\n\r\n                      </Form.Field>\r\n                      <Form.Field required={true}>\r\n                          <label>Ether</label>\r\n                          <Dropdown clearable\r\n                                    options={this.state.etherOptions}\r\n                                    selection\r\n                                    placeholder='Select your value of reward'\r\n                                    value={this.state.reward}\r\n                                    onChange={ (e, { value }) => this.setState({ reward: value })}/>\r\n                      </Form.Field>\r\n                      <Form.Field required={true}>\r\n                          <label>Maximum Duration</label>\r\n                          <Input\r\n                              label=\"hour(s)\"\r\n                              labelPosition=\"right\"\r\n                              placeholder='Enter the duration for the question to be valid'\r\n                              value={this.state.maxDuration}\r\n                              onChange={event => this.setState({ maxDuration: event.target.value })}\r\n                          />\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        {this.renderFilesUpload(elmFiles)}\r\n                      </Form.Field>\r\n                      <Message error header=\"Oops!\" content={this.state.errorMessage} />\r\n                      <Modal open={this.state.loading} trigger={<Button primary onClick={this.onSubmit}>Submit Question</Button>} basic size='small'>\r\n                        <Header content='Posting New Question' />\r\n                        <Modal.Content>\r\n                          <p>\r\n                            Please Confirm the MetaMask Transaction Request to submit your Question to the Block-Chain Network.\r\n                            Upon successful submission, you will be redirected to the Home Page. This process might take awhile.\r\n                          </p>\r\n                          <Loader active inline=\"centered\">\r\n                            Loading\r\n                          </Loader>\r\n                        </Modal.Content>\r\n                      </Modal>\r\n                  </Form>\r\n                </Container>\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewQuestion;\r\n"]},"metadata":{},"sourceType":"module"}