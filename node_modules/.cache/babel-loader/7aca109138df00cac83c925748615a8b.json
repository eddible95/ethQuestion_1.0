{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { Button, Checkbox, Form, Container, Divider, Input, Segment, Message, Icon, Modal, Header, Loader, Grid } from 'semantic-ui-react';\nimport LoginLayout from '../components/LoginLayout';\nimport web3 from '../ethereum/web3';\nimport credentials from '../ethereum/credentials';\nimport { Router } from '../routes';\n\nvar LoginPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LoginPage, _Component);\n\n  function LoginPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LoginPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LoginPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      emailAddress: '',\n      loading: false,\n      errorMessage: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var accounts, _emailAddress;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              }); // Check for valid NTU Student Email Address\n\n\n              if (!_this.validate(_this.state.emailAddress)) {\n                _context.next = 17;\n                break;\n              }\n\n              _context.prev = 2;\n              _context.next = 5;\n              return web3.eth.getAccounts();\n\n            case 5:\n              accounts = _context.sent;\n              _context.next = 8;\n              return credentials.methods.getBinding(accounts[0]).call();\n\n            case 8:\n              _emailAddress = _context.sent;\n\n              // Authenticate the Email Address\n              if (_this.state.emailAddress.localeCompare(_emailAddress) == 0) {\n                Router.pushRoute(\"/home\"); // Automatic redirect the user.\n              } else {\n                _this.setState({\n                  errorMessage: \"Wrong Email Address\"\n                });\n\n                _this.setState({\n                  loading: false\n                });\n              }\n\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](2);\n\n              _this.setState({\n                errorMessage: _context.t0.message\n              });\n\n            case 15:\n              _context.next = 19;\n              break;\n\n            case 17:\n              _this.setState({\n                errorMessage: \"Invalid Email Address\"\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 12]]);\n    })));\n\n    return _this;\n  }\n\n  _createClass(LoginPage, [{\n    key: \"validate\",\n    value: function validate(emailAddress) {\n      var re = /\\S+@e.ntu.edu.sg$/;\n      return re.test(emailAddress);\n    }\n  }, {\n    key: \"renderForm\",\n    value: function renderForm() {\n      return React.createElement(Grid, {\n        textAlign: \"center\",\n        style: {\n          height: '60%'\n        },\n        verticalAlign: \"middle\"\n      }, React.createElement(Grid.Column, {\n        style: {\n          maxWidth: 450\n        }\n      }, React.createElement(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, React.createElement(Icon, {\n        name: \"ethereum\"\n      }), \" Log-in to your account\"), React.createElement(Form, {\n        size: \"large\"\n      }, React.createElement(Segment, {\n        stacked: true\n      }, React.createElement(Form.Input, {\n        fluid: true,\n        icon: \"user\",\n        iconPosition: \"left\",\n        placeholder: \"E-mail address\"\n      }), React.createElement(Form.Input, {\n        fluid: true,\n        icon: \"lock\",\n        iconPosition: \"left\",\n        placeholder: \"Password\",\n        type: \"password\"\n      }), React.createElement(Button, {\n        color: \"blue\",\n        fluid: true,\n        size: \"large\"\n      }, \"Login\"))), React.createElement(Message, null, \"Not yet registered your NTU Student Email to your Ethereum Account?\", React.createElement(Modal, {\n        trigger: React.createElement(\"a\", {\n          href: \"/register\"\n        }, \"Register Now\")\n      }, React.createElement(Header, {\n        icon: \"ethereum\",\n        content: \"Please Hang On While We Redirect You\"\n      }), React.createElement(Modal.Content, null, React.createElement(Loader, {\n        active: true,\n        inline: \"centered\"\n      }, \"Redirecting to Registration\"))))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(LoginLayout, null, React.createElement(Container, {\n        style: {\n          height: \"100vh\"\n        }\n      }, this.renderForm()));\n    }\n  }]);\n\n  return LoginPage;\n}(Component);\n\nexport default LoginPage;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\login.js"],"names":["React","Component","Button","Checkbox","Form","Container","Divider","Input","Segment","Message","Icon","Modal","Header","Loader","Grid","LoginLayout","web3","credentials","Router","LoginPage","emailAddress","loading","errorMessage","setState","validate","state","eth","getAccounts","accounts","methods","getBinding","call","_emailAddress","localeCompare","pushRoute","message","re","test","height","maxWidth","renderForm"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Checkbox, Form, Container, Divider, Input,\r\n   Segment, Message, Icon, Modal, Header, Loader, Grid } from 'semantic-ui-react'\r\nimport LoginLayout from '../components/LoginLayout';\r\nimport web3 from '../ethereum/web3';\r\nimport credentials from '../ethereum/credentials';\r\nimport { Router } from '../routes';\r\n\r\nclass LoginPage extends Component {\r\n\r\n  state = {\r\n    emailAddress:'',\r\n    loading: false,\r\n    errorMessage:''\r\n  };\r\n\r\n  validate(emailAddress){\r\n    const re = /\\S+@e.ntu.edu.sg$/;\r\n    return re.test(emailAddress);\r\n  };\r\n\r\n  onSubmit = async () => {\r\n      this.setState({ loading: true, errorMessage: '' });\r\n      // Check for valid NTU Student Email Address\r\n      if (this.validate(this.state.emailAddress)){\r\n        try {\r\n            const accounts = await web3.eth.getAccounts();\r\n            const _emailAddress = await credentials.methods.getBinding(accounts[0]).call();\r\n            // Authenticate the Email Address\r\n            if (this.state.emailAddress.localeCompare(_emailAddress) == 0){\r\n              Router.pushRoute(`/home`); // Automatic redirect the user.\r\n            }\r\n            else {\r\n              this.setState({ errorMessage: \"Wrong Email Address\" });\r\n              this.setState({ loading: false });\r\n            }\r\n        } catch (err) {\r\n            this.setState({ errorMessage: err.message });\r\n        }\r\n      } else {\r\n        this.setState({ errorMessage: \"Invalid Email Address\" });\r\n        this.setState({ loading: false });\r\n      }\r\n  };\r\n\r\n  renderForm() {\r\n    return(\r\n      <Grid textAlign='center' style={{ height: '60%' }} verticalAlign='middle'>\r\n        <Grid.Column style={{ maxWidth: 450 }}>\r\n          <Header as='h2' textAlign='center'>\r\n            <Icon name='ethereum' /> Log-in to your account\r\n          </Header>\r\n          <Form size='large'>\r\n            <Segment stacked>\r\n              <Form.Input fluid icon='user' iconPosition='left' placeholder='E-mail address' />\r\n              <Form.Input\r\n                fluid\r\n                icon='lock'\r\n                iconPosition='left'\r\n                placeholder='Password'\r\n                type='password'\r\n              />\r\n\r\n              <Button color='blue' fluid size='large'>\r\n                Login\r\n              </Button>\r\n            </Segment>\r\n          </Form>\r\n          <Message>\r\n            Not yet registered your NTU Student Email to your Ethereum Account?\r\n            <Modal trigger={<a href=\"/register\">Register Now</a>}>\r\n              <Header icon='ethereum' content='Please Hang On While We Redirect You' />\r\n              <Modal.Content>\r\n                <Loader active inline=\"centered\">\r\n                  Redirecting to Registration\r\n                </Loader>\r\n              </Modal.Content>\r\n            </Modal>\r\n          </Message>\r\n\r\n        </Grid.Column>\r\n    </Grid>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <LoginLayout>\r\n          <Container style={{height:\"100vh\"}}>\r\n              {this.renderForm()}\r\n          </Container>\r\n      </LoginLayout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginPage;\r\n"]},"metadata":{},"sourceType":"module"}