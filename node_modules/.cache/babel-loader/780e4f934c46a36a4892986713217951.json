{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { Button, Form, Container, Divider, Input, Segment, Message, Icon, Modal, Header, Loader } from 'semantic-ui-react';\nimport LoginLayout from '../components/LoginLayout';\nimport web3 from '../ethereum/web3';\nimport Profile from '../ethereum/profile';\nimport factory from '../ethereum/factory';\nimport EthQuestionToken from '../ethereum/token';\nimport EthQuestionTokenSale from '../ethereum/tokenSale';\nimport credentials from '../ethereum/credentials';\nimport { Router } from '../routes';\nimport { validate } from '../utils/functions';\n\nvar passwordHash = require('password-hash');\n\nvar RegisterPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(RegisterPage, _Component);\n\n  function RegisterPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, RegisterPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RegisterPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      emailAddress: '',\n      password: '',\n      loading: false,\n      resetting: false,\n      errorMessage: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var validEmail, emailNotExist, accounts, _passwordHash, account, _passwordHash2;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              }); // Check for valid NTU Student Email Address, Existence of Email Address and EthWallet\n\n\n              _context.prev = 1;\n              validEmail = validate(_this.state.emailAddress);\n              _context.next = 5;\n              return credentials.methods.emailNotExist(_this.state.emailAddress).call();\n\n            case 5:\n              emailNotExist = _context.sent;\n\n              if (!(validEmail && !emailNotExist)) {\n                _context.next = 30;\n                break;\n              }\n\n              if (!(_this.state.emailAddress === \"admin\")) {\n                _context.next = 16;\n                break;\n              }\n\n              _context.next = 10;\n              return web3.eth.getAccounts();\n\n            case 10:\n              accounts = _context.sent;\n              _passwordHash = _passwordHash.generate(_this.state.password);\n              _context.next = 14;\n              return factory.methods // Create Admin\n              .createAdmin(credentials._address, _this.state.emailAddress, _passwordHash).send({\n                from: accounts[0],\n                gasPrice: \"0\"\n              });\n\n            case 14:\n              _context.next = 27;\n              break;\n\n            case 16:\n              _context.next = 18;\n              return web3.eth.accounts.create();\n\n            case 18:\n              account = _context.sent;\n              _passwordHash2 = _passwordHash2.generate(_this.state.password);\n              _context.next = 22;\n              return web3.eth.personal.importRawKey(account['privateKey'].slice(2), _this.state.password);\n\n            case 22:\n              account = _context.sent;\n              _context.next = 25;\n              return web3.eth.personal.unlockAccount(account, _this.state.password, 600);\n\n            case 25:\n              _context.next = 27;\n              return factory.methods.createProfile(credentials._address, _this.state.emailAddress, _passwordHash2, EthQuestionToken._address, EthQuestionTokenSale._address).send({\n                from: account,\n                gasPrice: \"0\"\n              });\n\n            case 27:\n              Router.pushRoute(\"/home\"); // Automatic redirect the user.\n\n              _context.next = 32;\n              break;\n\n            case 30:\n              _this.setState({\n                errorMessage: \"Invalid Email Address or Email Address Already In Used\"\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 32:\n              _context.next = 38;\n              break;\n\n            case 34:\n              _context.prev = 34;\n              _context.t0 = _context[\"catch\"](1);\n\n              _this.setState({\n                errorMessage: _context.t0.message + \" If you have rejected second transaction, please click on reset account. Thereafter, redo the registration.\"\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 38:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 34]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"onReset\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var accounts, validEmail, emailNotExist, ethWalletNotRegistered;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _this.setState({\n                resetting: true,\n                errorMessage: ''\n              });\n\n              _context2.prev = 1;\n              _context2.next = 4;\n              return web3.eth.getAccounts();\n\n            case 4:\n              accounts = _context2.sent;\n              validEmail = validate(_this.state.emailAddress);\n              _context2.next = 8;\n              return credentials.methods.emailNotExist(_this.state.emailAddress).call();\n\n            case 8:\n              emailNotExist = _context2.sent;\n              _context2.next = 11;\n              return credentials.methods.ethWalletNotRegistered(accounts[0]).call();\n\n            case 11:\n              ethWalletNotRegistered = _context2.sent;\n\n              if (!(validEmail && emailNotExist && ethWalletNotRegistered)) {\n                _context2.next = 16;\n                break;\n              }\n\n              _context2.next = 15;\n              return factory.methods.deleteProfile(credentials._address, _this.state.emailAddress).send({\n                from: accounts[0]\n              });\n\n            case 15:\n              _this.setState({\n                resetting: false\n              });\n\n            case 16:\n              _context2.next = 22;\n              break;\n\n            case 18:\n              _context2.prev = 18;\n              _context2.t0 = _context2[\"catch\"](1);\n\n              _this.setState({\n                errorMessage: _context2.t0.message + \" Please redo the resetting of account.\"\n              });\n\n              _this.setState({\n                resetting: false\n              });\n\n            case 22:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 18]]);\n    })));\n\n    return _this;\n  }\n\n  _createClass(RegisterPage, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                // Delete any existing Cookies\n                document.cookie = \"login=\".concat(false, \"; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT\");\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"renderForm\",\n    value: function renderForm() {\n      var _this2 = this;\n\n      return React.createElement(Form, {\n        error: !!this.state.errorMessage\n      }, React.createElement(Segment, {\n        raised: true,\n        textAlign: \"center\"\n      }, \"A wallet will be created and linked to the NTU Email provided. The password will be used for unlocking of your wallet for transactions and accessing of the system.\"), React.createElement(Form.Field, null, React.createElement(\"label\", null, \"NTU Student Email Address\"), React.createElement(Input, {\n        placeholder: \"example@e.ntu.edu.sg\",\n        value: this.state.emailAddress,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            emailAddress: event.target.value\n          });\n        }\n      })), React.createElement(Form.Field, null, React.createElement(\"label\", null, \"Password\"), React.createElement(Input, {\n        placeholder: \"Password\",\n        type: \"password\",\n        value: this.state.password,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            password: event.target.value\n          });\n        }\n      })), React.createElement(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.errorMessage\n      }), React.createElement(Modal, {\n        open: this.state.loading,\n        trigger: React.createElement(Button, {\n          primary: true,\n          onClick: this.onSubmit\n        }, \"Register\"),\n        basic: true,\n        size: \"small\"\n      }, React.createElement(Header, {\n        content: \"Registering Your Email Address\"\n      }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"Please confirm the MetaMask transaction for creation of Profile and Registering of Email Address. Upon confirming the requests, please hold on while the system completes the registration process...\"), React.createElement(Loader, {\n        active: true,\n        inline: \"centered\"\n      }, \"Registering Your Email\"))), React.createElement(Modal, {\n        open: this.state.resetting,\n        trigger: React.createElement(Button, {\n          primary: true,\n          onClick: this.onReset\n        }, \"Reset\"),\n        basic: true,\n        size: \"small\"\n      }, React.createElement(Header, {\n        content: \"Resetting Account\"\n      }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"Please confirm the MetaMask transaction for resetting of account registration. Upon confirming the requests, please hold on while the system completes the resetting process...\"), React.createElement(Loader, {\n        active: true,\n        inline: \"centered\"\n      }, \"Resetting Account Registration\"))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(LoginLayout, null, React.createElement(Container, {\n        style: {\n          height: \"100vh\"\n        }\n      }, this.renderForm()));\n    }\n  }]);\n\n  return RegisterPage;\n}(Component);\n\nexport default RegisterPage;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion_1.0\\pages\\register.js"],"names":["React","Component","Button","Form","Container","Divider","Input","Segment","Message","Icon","Modal","Header","Loader","LoginLayout","web3","Profile","factory","EthQuestionToken","EthQuestionTokenSale","credentials","Router","validate","passwordHash","require","RegisterPage","emailAddress","password","loading","resetting","errorMessage","setState","validEmail","state","methods","emailNotExist","call","eth","getAccounts","accounts","generate","createAdmin","_address","send","from","gasPrice","create","account","personal","importRawKey","slice","unlockAccount","createProfile","pushRoute","message","ethWalletNotRegistered","deleteProfile","document","cookie","event","target","value","onSubmit","onReset","height","renderForm"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,SAAvB,EAAkCC,OAAlC,EAA2CC,KAA3C,EACGC,OADH,EACYC,OADZ,EACqBC,IADrB,EAC2BC,KAD3B,EACkCC,MADlC,EAC0CC,MAD1C,QACwD,mBADxD;AAEA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,gBAAP,MAA6B,mBAA7B;AACA,OAAOC,oBAAP,MAAiC,uBAAjC;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,QAAT,QAAyB,oBAAzB;;AACA,IAAIC,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;IAEMC,Y;;;;;;;;;;;;;;;;;;4DAEI;AACNC,MAAAA,YAAY,EAAC,EADP;AAENC,MAAAA,QAAQ,EAAC,EAFH;AAGNC,MAAAA,OAAO,EAAE,KAHH;AAINC,MAAAA,SAAS,EAAE,KAJL;AAKNC,MAAAA,YAAY,EAAC;AALP,K;;;;;;6BAaG;AAAA;;AAAA;AAAA;AAAA;AAAA;AACT,oBAAKC,QAAL,CAAc;AAAEH,gBAAAA,OAAO,EAAE,IAAX;AAAiBE,gBAAAA,YAAY,EAAE;AAA/B,eAAd,EADS,CAET;;;AAFS;AAIHE,cAAAA,UAJG,GAIUV,QAAQ,CAAC,MAAKW,KAAL,CAAWP,YAAZ,CAJlB;AAAA;AAAA,qBAKmBN,WAAW,CAACc,OAAZ,CAAoBC,aAApB,CAAkC,MAAKF,KAAL,CAAWP,YAA7C,EAA2DU,IAA3D,EALnB;;AAAA;AAKHD,cAAAA,aALG;;AAAA,oBAMHH,UAAU,IAAI,CAACG,aANZ;AAAA;AAAA;AAAA;;AAAA,oBAOF,MAAKF,KAAL,CAAWP,YAAX,KAA4B,OAP1B;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAQoBX,IAAI,CAACsB,GAAL,CAASC,WAAT,EARpB;;AAAA;AAQGC,cAAAA,QARH;AASChB,cAAAA,aATD,GASgBA,aAAY,CAACiB,QAAb,CAAsB,MAAKP,KAAL,CAAWN,QAAjC,CAThB;AAAA;AAAA,qBAUGV,OAAO,CAACiB,OAAR,CACN;AADM,eAELO,WAFK,CAEOrB,WAAW,CAACsB,QAFnB,EAE6B,MAAKT,KAAL,CAAWP,YAFxC,EAEsDH,aAFtD,EAGLoB,IAHK,CAGA;AACFC,gBAAAA,IAAI,EAAEL,QAAQ,CAAC,CAAD,CADZ;AAEFM,gBAAAA,QAAQ,EAAE;AAFR,eAHA,CAVH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAmBiB9B,IAAI,CAACsB,GAAL,CAASE,QAAT,CAAkBO,MAAlB,EAnBjB;;AAAA;AAmBCC,cAAAA,OAnBD;AAoBCxB,cAAAA,cApBD,GAoBgBA,cAAY,CAACiB,QAAb,CAAsB,MAAKP,KAAL,CAAWN,QAAjC,CApBhB;AAAA;AAAA,qBAqBaZ,IAAI,CAACsB,GAAL,CAASW,QAAT,CAAkBC,YAAlB,CAA+BF,OAAO,CAAC,YAAD,CAAP,CAAsBG,KAAtB,CAA4B,CAA5B,CAA/B,EAA+D,MAAKjB,KAAL,CAAWN,QAA1E,CArBb;;AAAA;AAqBHoB,cAAAA,OArBG;AAAA;AAAA,qBAsBGhC,IAAI,CAACsB,GAAL,CAASW,QAAT,CAAkBG,aAAlB,CAAgCJ,OAAhC,EAAyC,MAAKd,KAAL,CAAWN,QAApD,EAA8D,GAA9D,CAtBH;;AAAA;AAAA;AAAA,qBAuBGV,OAAO,CAACiB,OAAR,CACLkB,aADK,CACShC,WAAW,CAACsB,QADrB,EAC+B,MAAKT,KAAL,CAAWP,YAD1C,EACwDH,cADxD,EAEJL,gBAAgB,CAACwB,QAFb,EAEuBvB,oBAAoB,CAACuB,QAF5C,EAGLC,IAHK,CAGA;AACFC,gBAAAA,IAAI,EAAEG,OADJ;AAEFF,gBAAAA,QAAQ,EAAE;AAFR,eAHA,CAvBH;;AAAA;AA+BLxB,cAAAA,MAAM,CAACgC,SAAP,UA/BK,CA+BsB;;AA/BtB;AAAA;;AAAA;AAiCL,oBAAKtB,QAAL,CAAc;AAAED,gBAAAA,YAAY,EAAE;AAAhB,eAAd;;AACA,oBAAKC,QAAL,CAAc;AAAEH,gBAAAA,OAAO,EAAE;AAAX,eAAd;;AAlCK;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAqCP,oBAAKG,QAAL,CAAc;AAAED,gBAAAA,YAAY,EAAE,YAAIwB,OAAJ,GAAc;AAA9B,eAAd;;AACA,oBAAKvB,QAAL,CAAc;AAAEH,gBAAAA,OAAO,EAAE;AAAX,eAAd;;AAtCO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;6BA0CD;AAAA;AAAA;AAAA;AAAA;AAAA;AACR,oBAAKG,QAAL,CAAc;AAAEF,gBAAAA,SAAS,EAAE,IAAb;AAAmBC,gBAAAA,YAAY,EAAE;AAAjC,eAAd;;AADQ;AAAA;AAAA,qBAGiBf,IAAI,CAACsB,GAAL,CAASC,WAAT,EAHjB;;AAAA;AAGAC,cAAAA,QAHA;AAIFP,cAAAA,UAJE,GAIWV,QAAQ,CAAC,MAAKW,KAAL,CAAWP,YAAZ,CAJnB;AAAA;AAAA,qBAKoBN,WAAW,CAACc,OAAZ,CAAoBC,aAApB,CAAkC,MAAKF,KAAL,CAAWP,YAA7C,EAA2DU,IAA3D,EALpB;;AAAA;AAKFD,cAAAA,aALE;AAAA;AAAA,qBAM6Bf,WAAW,CAACc,OAAZ,CAAoBqB,sBAApB,CAA2ChB,QAAQ,CAAC,CAAD,CAAnD,EAAwDH,IAAxD,EAN7B;;AAAA;AAMFmB,cAAAA,sBANE;;AAAA,oBAOFvB,UAAU,IAAIG,aAAd,IAA+BoB,sBAP7B;AAAA;AAAA;AAAA;;AAAA;AAAA,qBASEtC,OAAO,CAACiB,OAAR,CACLsB,aADK,CACSpC,WAAW,CAACsB,QADrB,EAC+B,MAAKT,KAAL,CAAWP,YAD1C,EAELiB,IAFK,CAEA;AACFC,gBAAAA,IAAI,EAAEL,QAAQ,CAAC,CAAD;AADZ,eAFA,CATF;;AAAA;AAcJ,oBAAKR,QAAL,CAAc;AAAEF,gBAAAA,SAAS,EAAE;AAAb,eAAd;;AAdI;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAiBN,oBAAKE,QAAL,CAAc;AAAED,gBAAAA,YAAY,EAAE,aAAIwB,OAAJ,GAAc;AAA9B,eAAd;;AACA,oBAAKvB,QAAL,CAAc;AAAEF,gBAAAA,SAAS,EAAE;AAAb,eAAd;;AAlBM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;;;;;;;;;AA9CR;AACA4B,gBAAAA,QAAQ,CAACC,MAAT,mBAA2B,KAA3B;;;;;;;;;;;;;;;;;;iCAmEW;AAAA;;AACX,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAAC,CAAC,KAAKzB,KAAL,CAAWH;AAA1B,SACE,oBAAC,OAAD;AAAS,QAAA,MAAM,MAAf;AAAgB,QAAA,SAAS,EAAE;AAA3B,+KADF,EAKE,oBAAC,IAAD,CAAM,KAAN,QACE,+DADF,EAEE,oBAAC,KAAD;AACI,QAAA,WAAW,EAAC,sBADhB;AAEI,QAAA,KAAK,EAAE,KAAKG,KAAL,CAAWP,YAFtB;AAGI,QAAA,QAAQ,EAAE,kBAAAiC,KAAK;AAAA,iBAAI,MAAI,CAAC5B,QAAL,CAAc;AAAEL,YAAAA,YAAY,EAAEiC,KAAK,CAACC,MAAN,CAAaC;AAA7B,WAAd,CAAJ;AAAA;AAHnB,QAFF,CALF,EAaE,oBAAC,IAAD,CAAM,KAAN,QACE,8CADF,EAEE,oBAAC,KAAD;AACI,QAAA,WAAW,EAAC,UADhB;AAEI,QAAA,IAAI,EAAC,UAFT;AAGI,QAAA,KAAK,EAAE,KAAK5B,KAAL,CAAWN,QAHtB;AAII,QAAA,QAAQ,EAAE,kBAAAgC,KAAK;AAAA,iBAAI,MAAI,CAAC5B,QAAL,CAAc;AAAEJ,YAAAA,QAAQ,EAAEgC,KAAK,CAACC,MAAN,CAAaC;AAAzB,WAAd,CAAJ;AAAA;AAJnB,QAFF,CAbF,EAsBE,oBAAC,OAAD;AAAS,QAAA,KAAK,MAAd;AAAe,QAAA,MAAM,EAAC,OAAtB;AAA8B,QAAA,OAAO,EAAE,KAAK5B,KAAL,CAAWH;AAAlD,QAtBF,EAuBE,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAE,KAAKG,KAAL,CAAWL,OAAxB;AAAiC,QAAA,OAAO,EAAE,oBAAC,MAAD;AAAQ,UAAA,OAAO,MAAf;AAAgB,UAAA,OAAO,EAAE,KAAKkC;AAA9B,sBAA1C;AAAqG,QAAA,KAAK,MAA1G;AAA2G,QAAA,IAAI,EAAC;AAAhH,SACE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAC;AAAhB,QADF,EAEE,oBAAC,KAAD,CAAO,OAAP,QACE,uOADF,EAKE,oBAAC,MAAD;AAAQ,QAAA,MAAM,MAAd;AAAe,QAAA,MAAM,EAAC;AAAtB,kCALF,CAFF,CAvBF,EAmCE,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAE,KAAK7B,KAAL,CAAWJ,SAAxB;AAAmC,QAAA,OAAO,EAAE,oBAAC,MAAD;AAAQ,UAAA,OAAO,MAAf;AAAgB,UAAA,OAAO,EAAE,KAAKkC;AAA9B,mBAA5C;AAAmG,QAAA,KAAK,MAAxG;AAAyG,QAAA,IAAI,EAAC;AAA9G,SACE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAC;AAAhB,QADF,EAEE,oBAAC,KAAD,CAAO,OAAP,QACE,iNADF,EAKE,oBAAC,MAAD;AAAQ,QAAA,MAAM,MAAd;AAAe,QAAA,MAAM,EAAC;AAAtB,0CALF,CAFF,CAnCF,CADF;AAkDD;;;6BAEQ;AACP,aACE,oBAAC,WAAD,QACI,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAE;AAACC,UAAAA,MAAM,EAAC;AAAR;AAAlB,SACK,KAAKC,UAAL,EADL,CADJ,CADF;AAOD;;;;EA5IwB/D,S;;AA+I3B,eAAeuB,YAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Form, Container, Divider, Input,\r\n   Segment, Message, Icon, Modal, Header, Loader } from 'semantic-ui-react'\r\nimport LoginLayout from '../components/LoginLayout';\r\nimport web3 from '../ethereum/web3';\r\nimport Profile from '../ethereum/profile';\r\nimport factory from '../ethereum/factory';\r\nimport EthQuestionToken from '../ethereum/token';\r\nimport EthQuestionTokenSale from '../ethereum/tokenSale';\r\nimport credentials from '../ethereum/credentials';\r\nimport { Router } from '../routes';\r\nimport { validate } from '../utils/functions';\r\nvar passwordHash = require('password-hash');\r\n\r\nclass RegisterPage extends Component {\r\n\r\n  state = {\r\n    emailAddress:'',\r\n    password:'',\r\n    loading: false,\r\n    resetting: false,\r\n    errorMessage:''\r\n  };\r\n\r\n  async componentDidMount() {\r\n    // Delete any existing Cookies\r\n    document.cookie = `login=${false}; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT`;\r\n  };\r\n\r\n  onSubmit = async () => {\r\n    this.setState({ loading: true, errorMessage: '' });\r\n    // Check for valid NTU Student Email Address, Existence of Email Address and EthWallet\r\n    try {\r\n      let validEmail = validate(this.state.emailAddress);\r\n      let emailNotExist = await credentials.methods.emailNotExist(this.state.emailAddress).call();\r\n      if (validEmail && !emailNotExist) {\r\n        if(this.state.emailAddress === \"admin\") {\r\n          const accounts = await web3.eth.getAccounts();\r\n          let passwordHash = passwordHash.generate(this.state.password);\r\n          await factory.methods\r\n          // Create Admin\r\n          .createAdmin(credentials._address, this.state.emailAddress, passwordHash)\r\n          .send({\r\n              from: accounts[0],\r\n              gasPrice: \"0\"\r\n          });\r\n        } else {\r\n          // Create a new Profile\r\n          let account = await web3.eth.accounts.create();\r\n          let passwordHash = passwordHash.generate(this.state.password);\r\n          account = await web3.eth.personal.importRawKey(account['privateKey'].slice(2), this.state.password)\r\n          await web3.eth.personal.unlockAccount(account, this.state.password, 600);\r\n          await factory.methods\r\n          .createProfile(credentials._address, this.state.emailAddress, passwordHash,\r\n            EthQuestionToken._address, EthQuestionTokenSale._address)\r\n          .send({\r\n              from: account,\r\n              gasPrice: \"0\"\r\n          });\r\n        }\r\n        Router.pushRoute(`/home`); // Automatic redirect the user.\r\n      } else {\r\n        this.setState({ errorMessage: \"Invalid Email Address or Email Address Already In Used\" });\r\n        this.setState({ loading: false });\r\n      }\r\n    } catch (err) {\r\n      this.setState({ errorMessage: err.message + \" If you have rejected second transaction, please click on reset account. Thereafter, redo the registration.\" });\r\n      this.setState({ loading: false });\r\n    }\r\n  }\r\n\r\n  onReset = async () => {\r\n    this.setState({ resetting: true, errorMessage: '' });\r\n    try {\r\n      const accounts = await web3.eth.getAccounts();\r\n      let validEmail = validate(this.state.emailAddress);\r\n      let emailNotExist = await credentials.methods.emailNotExist(this.state.emailAddress).call();\r\n      let ethWalletNotRegistered = await credentials.methods.ethWalletNotRegistered(accounts[0]).call();\r\n      if (validEmail && emailNotExist && ethWalletNotRegistered) {\r\n        // Delete Existing Mapping\r\n        await factory.methods\r\n        .deleteProfile(credentials._address, this.state.emailAddress)\r\n        .send({\r\n            from: accounts[0]\r\n        });\r\n        this.setState({ resetting: false });\r\n      }\r\n    } catch (err) {\r\n      this.setState({ errorMessage: err.message + \" Please redo the resetting of account.\" });\r\n      this.setState({ resetting: false });\r\n    }\r\n  }\r\n\r\n  renderForm() {\r\n    return(\r\n      <Form error={!!this.state.errorMessage}>\r\n        <Segment raised textAlign={\"center\"}>\r\n          A wallet will be created and linked to the NTU Email provided. The password will be used for unlocking of your\r\n          wallet for transactions and accessing of the system.\r\n        </Segment>\r\n        <Form.Field>\r\n          <label>NTU Student Email Address</label>\r\n          <Input\r\n              placeholder='example@e.ntu.edu.sg'\r\n              value={this.state.emailAddress}\r\n              onChange={event => this.setState({ emailAddress: event.target.value})}\r\n          />\r\n        </Form.Field>\r\n        <Form.Field>\r\n          <label>Password</label>\r\n          <Input\r\n              placeholder='Password'\r\n              type='password'\r\n              value={this.state.password}\r\n              onChange={event => this.setState({ password: event.target.value})}\r\n          />\r\n        </Form.Field>\r\n        <Message error header=\"Oops!\" content={this.state.errorMessage} />\r\n        <Modal open={this.state.loading} trigger={<Button primary onClick={this.onSubmit}>Register</Button>} basic size='small'>\r\n          <Header content='Registering Your Email Address' />\r\n          <Modal.Content>\r\n            <p>\r\n              Please confirm the MetaMask transaction for creation of Profile and Registering of Email Address.\r\n              Upon confirming the requests, please hold on while the system completes the registration process...\r\n            </p>\r\n            <Loader active inline=\"centered\">\r\n              Registering Your Email\r\n            </Loader>\r\n          </Modal.Content>\r\n        </Modal>\r\n        <Modal open={this.state.resetting} trigger={<Button primary onClick={this.onReset}>Reset</Button>} basic size='small'>\r\n          <Header content='Resetting Account' />\r\n          <Modal.Content>\r\n            <p>\r\n              Please confirm the MetaMask transaction for resetting of account registration.\r\n              Upon confirming the requests, please hold on while the system completes the resetting process...\r\n            </p>\r\n            <Loader active inline=\"centered\">\r\n              Resetting Account Registration\r\n            </Loader>\r\n          </Modal.Content>\r\n        </Modal>\r\n      </Form>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <LoginLayout>\r\n          <Container style={{height:\"100vh\"}}>\r\n              {this.renderForm()}\r\n          </Container>\r\n      </LoginLayout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RegisterPage;\r\n"]},"metadata":{},"sourceType":"module"}