{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React, { Component } from 'react';\nimport { Table, Popup, Button } from 'semantic-ui-react';\nimport { Link } from '../routes';\nimport moment from 'moment';\nimport Question from '../ethereum/question';\nimport factory from '../ethereum/factory';\n\nvar QuestionRow =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(QuestionRow, _Component);\n\n  function QuestionRow() {\n    _classCallCheck(this, QuestionRow);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(QuestionRow).apply(this, arguments));\n  }\n\n  _createClass(QuestionRow, [{\n    key: \"renderQuestion\",\n    value: function renderQuestion() {\n      var summary = this.props.summary;\n      var time = this.props.time;\n      var currentTime = new Date().getTime();\n      var maxDuration = summary[3].toString();\n      var publishTime = moment.unix(time[0]).format('dddd, Do MMMM YYYY, h:mm:ss a');\n      var publishTimeMs = moment.unix(time[0]).valueOf();\n      var maxDurationMs = moment.unix(maxDuration).valueOf();\n      var remainingTime = publishTimeMs + maxDurationMs - currentTime;\n\n      if (remainingTime < 0) {\n        remainingTime = 0;\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(Table, {\n        definition: true\n      }, React.createElement(Table.Body, null, React.createElement(Table.Row, null, React.createElement(Table.Cell, {\n        width: 2\n      }, \"Question Title\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px',\n          lineHeight: '1.5'\n        }\n      }, summary[0])), React.createElement(Table.Row, null, React.createElement(Table.Cell, {\n        width: 2\n      }, \"Description\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px',\n          lineHeight: '1.5'\n        }\n      }, summary[1])), React.createElement(Table.Row, null, React.createElement(Table.Cell, null, \"Reward (ETH)\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px'\n        }\n      }, summary[2])), React.createElement(Table.Row, null, React.createElement(Table.Cell, null, \"Publish Time\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px'\n        }\n      }, publishTime)), React.createElement(Table.Row, null, React.createElement(Table.Cell, null, \"Duration (hours)\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px'\n        }\n      }, React.createElement(\"span\", {\n        style: {\n          verticalAlign: 'middle',\n          lineHeight: '33px'\n        }\n      }, maxDuration), remainingTime > 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"violet\"\n        }),\n        content: React.createElement(\"span\", null, React.createElement(\"span\", null, \"Remaining time - \"), React.createElement(Countdown, {\n          date: _Date$now() + remainingTime\n        })),\n        position: \"bottom right\",\n        inverted: true\n      }) : React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"red\"\n        }),\n        content: \"EXPIRED\",\n        position: \"bottom right\",\n        inverted: true\n      }))))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(props) {\n        var question, summary, time, profileOwner;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                question = Question(props.query.value);\n                _context.next = 3;\n                return question.methods.getSummary().call();\n\n              case 3:\n                summary = _context.sent;\n                _context.next = 6;\n                return question.methods.getTime().call();\n\n              case 6:\n                time = _context.sent;\n                _context.next = 9;\n                return factory.methods.getProfile(summary[5]).call();\n\n              case 9:\n                profileOwner = _context.sent;\n                return _context.abrupt(\"return\", {\n                  summary: summary,\n                  time: time\n                });\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return QuestionRow;\n}(Component);\n\nexport default QuestionRow;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\showQuestion.js"],"names":["React","Component","Table","Popup","Button","Link","moment","Question","factory","QuestionRow","summary","props","time","currentTime","Date","getTime","maxDuration","toString","publishTime","unix","format","publishTimeMs","valueOf","maxDurationMs","remainingTime","fontSize","lineHeight","verticalAlign","float","question","query","value","methods","getSummary","call","getProfile","profileOwner"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Table, Popup, Button } from 'semantic-ui-react';\r\nimport { Link } from '../routes';\r\nimport moment from 'moment';\r\nimport Question from '../ethereum/question';\r\nimport factory from '../ethereum/factory';\r\n\r\nclass QuestionRow extends Component {\r\n\r\n    static async getInitialProps(props) {\r\n      const question = Question(props.query.value);\r\n      const summary = await question.methods.getSummary().call();\r\n      const time = await question.methods.getTime().call();\r\n      const profileOwner = await factory.methods.getProfile(summary[5]).call();\r\n\r\n      return { summary, time};\r\n    }\r\n\r\n    renderQuestion() {\r\n        const summary = this.props.summary;\r\n        const time = this.props.time;\r\n\r\n        var currentTime = (new Date).getTime();\r\n        var maxDuration = summary[3].toString();\r\n        var publishTime = moment.unix(time[0]).format('dddd, Do MMMM YYYY, h:mm:ss a');\r\n        var publishTimeMs = moment.unix(time[0]).valueOf();\r\n        var maxDurationMs = moment.unix(maxDuration).valueOf();\r\n\r\n        let remainingTime = publishTimeMs + maxDurationMs - currentTime;\r\n        if (remainingTime < 0) {\r\n            remainingTime = 0;\r\n        }\r\n\r\n        return (\r\n          <React.Fragment>\r\n              <Table definition>\r\n                  <Table.Body>\r\n                    <Table.Row>\r\n                        <Table.Cell width={2}>Question Title</Table.Cell>\r\n                        <Table.Cell style={{fontSize: '20px', lineHeight: '1.5'}}>\r\n                            {summary[0]}\r\n                        </Table.Cell>\r\n                    </Table.Row>\r\n                      <Table.Row>\r\n                          <Table.Cell width={2}>Description</Table.Cell>\r\n                          <Table.Cell style={{fontSize: '20px', lineHeight: '1.5'}}>\r\n                              {summary[1]}\r\n                          </Table.Cell>\r\n                      </Table.Row>\r\n                      <Table.Row>\r\n                          <Table.Cell>Reward (ETH)</Table.Cell>\r\n                          <Table.Cell style={{fontSize: '20px'}}>{summary[2]}</Table.Cell>\r\n                      </Table.Row>\r\n                      <Table.Row>\r\n                          <Table.Cell>Publish Time</Table.Cell>\r\n                          <Table.Cell style={{fontSize: '20px'}}>{publishTime}</Table.Cell>\r\n                      </Table.Row>\r\n                      <Table.Row>\r\n                          <Table.Cell>Duration (hours)</Table.Cell>\r\n                          <Table.Cell style={{fontSize: '20px'}}>\r\n                              <span style={{verticalAlign: 'middle', lineHeight: '33px'}}>\r\n                                  {maxDuration}\r\n                              </span>\r\n                              {remainingTime > 0\r\n                                  ? <Popup\r\n                                      trigger={\r\n                                          <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                  icon='clock'\r\n                                                  color=\"violet\"\r\n                                          />}\r\n                                      content={\r\n                                          <span>\r\n                                          <span>Remaining time - </span>\r\n                                          <Countdown date={Date.now() + remainingTime}>\r\n                                          </Countdown>\r\n                                      </span>}\r\n                                      position='bottom right'\r\n                                      inverted />\r\n                                  : <Popup\r\n                                      trigger={\r\n                                          <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                  icon='clock'\r\n                                                  color=\"red\"\r\n                                          />\r\n                                      }\r\n                                      content={\"EXPIRED\"}\r\n                                      position='bottom right'\r\n                                      inverted />\r\n                              }\r\n                          </Table.Cell>\r\n                      </Table.Row>\r\n                  </Table.Body>\r\n              </Table>\r\n          </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuestionRow;\r\n"]},"metadata":{},"sourceType":"module"}