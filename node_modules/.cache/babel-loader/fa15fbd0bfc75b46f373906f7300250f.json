{"ast":null,"code":"// The idea: If we need to get access to our deployed factory instance from somewhere else in our app,\n//     we won't have to go through the entire process of importing web3, and the interface and get the address and etc.\n//     Instead, we can import this factory.js file.\nimport getConfig from 'next/config';\nvar publicRuntimeConfig = getConfig.publicRuntimeConfig; // Import the copy of web3 that we created (The instance that is created there).\n\nimport web3 from './web3'; // Import the compiled contract that is placed in the build directory.\n// Any time that we want to tell web3 about an already deployed contract, we have to give web3 that contract's interface (ABI).\n// The ABI is defined inside the PostFactory.JSON file.\n\nimport QuestionFactory from './build/QuestionFactory.json'; // Create the contract instance that refers to the specific address that we deployed the contract to\n// and we we'll export it from this file.\n// So, if we need excess to our deployed factory - We can import factory.js.\n// arguments: Our contract ABI, The address that we deployed our factory to\n\nvar instance = new web3.eth.Contract(JSON.parse(QuestionFactory.interface), \"0x1BF776e2515478b3805f5eaD034331d07C2Ef2df\");\nexport default instance;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\ethereum\\factory.js"],"names":["getConfig","publicRuntimeConfig","web3","QuestionFactory","instance","eth","Contract","JSON","parse","interface"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,SAAP,MAAsB,aAAtB;IACQC,mB,GAAwBD,S,CAAxBC,mB,EAER;;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAEA;AACA;AACA;;AACA,OAAOC,eAAP,MAA4B,8BAA5B,C,CAEA;AACA;AACA;AACA;;AACA,IAAMC,QAAQ,GAAG,IAAIF,IAAI,CAACG,GAAL,CAASC,QAAb,CACbC,IAAI,CAACC,KAAL,CAAWL,eAAe,CAACM,SAA3B,CADa,EAEb,4CAFa,CAAjB;AAKA,eAAeL,QAAf","sourcesContent":["// The idea: If we need to get access to our deployed factory instance from somewhere else in our app,\r\n//     we won't have to go through the entire process of importing web3, and the interface and get the address and etc.\r\n//     Instead, we can import this factory.js file.\r\n\r\nimport getConfig from 'next/config';\r\nconst { publicRuntimeConfig } = getConfig;\r\n\r\n// Import the copy of web3 that we created (The instance that is created there).\r\nimport web3 from './web3';\r\n\r\n// Import the compiled contract that is placed in the build directory.\r\n// Any time that we want to tell web3 about an already deployed contract, we have to give web3 that contract's interface (ABI).\r\n// The ABI is defined inside the PostFactory.JSON file.\r\nimport QuestionFactory from './build/QuestionFactory.json';\r\n\r\n// Create the contract instance that refers to the specific address that we deployed the contract to\r\n// and we we'll export it from this file.\r\n// So, if we need excess to our deployed factory - We can import factory.js.\r\n// arguments: Our contract ABI, The address that we deployed our factory to\r\nconst instance = new web3.eth.Contract(\r\n    JSON.parse(QuestionFactory.interface),\r\n    \"0x1BF776e2515478b3805f5eaD034331d07C2Ef2df\"\r\n);\r\n\r\nexport default instance;\r\n"]},"metadata":{},"sourceType":"module"}