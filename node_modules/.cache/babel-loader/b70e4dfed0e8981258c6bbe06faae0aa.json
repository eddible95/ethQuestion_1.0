{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { Form, Button, Input, Message, Dropdown, Header, Icon, Segment, Container, TextArea, Divider, Label } from 'semantic-ui-react';\nimport Layout from '../components/Layout';\nimport factory from '../ethereum/factory';\nimport web3 from '../ethereum/web3';\nimport { Router } from '../routes';\nimport { getIpfsHash } from './ipfs';\n\nvar NewPost =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NewPost, _Component);\n\n  function NewPost() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, NewPost);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NewPost)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      questionTitle: '',\n      content: '',\n      reward: '',\n      maxDuration: '',\n      errorMessage: '',\n      loading: false,\n      buffer: null,\n      files_array: [],\n      fileHashes_array: [],\n      fileNames_array: []\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var accounts;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              });\n\n              _context.prev = 1;\n              _context.next = 4;\n              return web3.eth.getAccounts();\n\n            case 4:\n              accounts = _context.sent;\n              _context.next = 7;\n              return factory.methods.createQuestion(_this.state.questionTitle, _this.state.content, Number(_this.state.reward), _parseFloat(_this.state.maxDuration) * 60 * 60).send({\n                from: accounts[0]\n              });\n\n            case 7:\n              Router.pushRoute('/'); // Automatic redirect the user.\n\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](1);\n\n              _this.setState({\n                errorMessage: _context.t0.message\n              });\n\n            case 13:\n              _this.setState({\n                loading: false\n              });\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 10]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"onFileSelected\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var reader, file, _this$state, files_array, fileNames_array, fileHashes_array;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              reader = new FileReader();\n              file = _this.fileInput.files[0];\n\n              if (file instanceof Blob) {\n                _this$state = _this.state, files_array = _this$state.files_array, fileNames_array = _this$state.fileNames_array, fileHashes_array = _this$state.fileHashes_array;\n                files_array.push(file);\n                fileNames_array.push(file.name);\n\n                _this.setState({\n                  files_array: files_array,\n                  fileNames_array: fileNames_array\n                });\n\n                console.log(\"fileNames_array: \", fileNames_array);\n                reader.onloadend =\n                /*#__PURE__*/\n                _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee2() {\n                  var fileHash;\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          _context2.next = 2;\n                          return _this.setState({\n                            fileUrl: reader.result,\n                            loadingFile: true,\n                            buffer: Buffer.from(reader.result)\n                          });\n\n                        case 2:\n                          if (!_this.state.buffer) {\n                            _context2.next = 8;\n                            break;\n                          }\n\n                          _context2.next = 5;\n                          return getIpfsHash(file);\n\n                        case 5:\n                          _context2.t0 = _context2.sent;\n                          _context2.next = 9;\n                          break;\n\n                        case 8:\n                          _context2.t0 = '0';\n\n                        case 9:\n                          fileHash = _context2.t0;\n                          fileHashes_array.push(fileHash);\n\n                          _this.setState({\n                            fileHashes_array: fileHashes_array\n                          });\n\n                          console.log(\"fileHashes_array: \", fileHashes_array);\n\n                        case 13:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }));\n                reader.readAsDataURL(file);\n              }\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"onFileRemoved\", function (file) {\n      var i = 0;\n      var _this$state2 = _this.state,\n          files_array = _this$state2.files_array,\n          fileHashes_array = _this$state2.fileHashes_array,\n          fileNames_array = _this$state2.fileNames_array;\n      console.log('file: ', file);\n\n      for (i = 0; i < files_array.length; i++) {\n        if (file === files_array[i]) {\n          files_array.splice(i, 1);\n          fileNames_array.splice(i, 1);\n          fileHashes_array.splice(i, 1);\n          break;\n        }\n      }\n\n      _this.setState({\n        files_array: files_array,\n        fileNames_array: fileNames_array,\n        fileHashes_array: fileHashes_array\n      });\n\n      console.log('fileNames_array', fileNames_array);\n      console.log(\"fileHashes_array: \", fileHashes_array);\n    });\n\n    return _this;\n  }\n\n  _createClass(NewPost, [{\n    key: \"renderFilesUpload\",\n    value: function renderFilesUpload(files) {\n      var _this2 = this;\n\n      var files_array = this.state.files_array;\n\n      if (this.state.files_array.length == 0) {\n        return React.createElement(Segment, {\n          placeholder: true\n        }, React.createElement(Header, {\n          icon: true\n        }, React.createElement(Icon, {\n          name: \"images outline\"\n        }), \"No files are uploaded for this question.\"), React.createElement(\"input\", {\n          style: {\n            display: 'none'\n          },\n          type: \"file\",\n          onChange: function onChange() {\n            return _this2.onFileSelected();\n          },\n          ref: function ref(fileInput) {\n            return _this2.fileInput = fileInput;\n          }\n        }), React.createElement(Button, {\n          primary: true,\n          onClick: function onClick() {\n            return _this2.fileInput.click();\n          }\n        }, \"Upload Files\"));\n      } else {\n        return React.createElement(Segment, {\n          placeholder: true\n        }, React.createElement(\"center\", null, React.createElement(\"div\", {\n          style: {\n            marginBottom: '20px'\n          }\n        }, files), React.createElement(\"input\", {\n          style: {\n            display: 'none'\n          },\n          type: \"file\",\n          onChange: function onChange() {\n            return _this2.onFileSelected1();\n          },\n          ref: function ref(fileInput) {\n            return _this2.fileInput = fileInput;\n          }\n        }), React.createElement(Button, {\n          primary: true,\n          onClick: function onClick() {\n            return _this2.fileInput.click();\n          }\n        }, \"Upload Files\")));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var files_array = this.state.files_array;\n      var elmFiles = null;\n\n      if (files_array !== null) {\n        elmFiles = files_array.map(function (item, index) {\n          return React.createElement(Label, {\n            as: \"a\",\n            key: index,\n            size: \"big\"\n          }, item.name, React.createElement(Icon, {\n            name: \"delete\",\n            onClick: function onClick() {\n              return _this3.onFileRemoved(item);\n            }\n          }));\n        });\n      }\n\n      return React.createElement(Layout, null, React.createElement(Container, null, React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(Segment, {\n        textAlign: \"center\",\n        as: \"h3\"\n      }, \"Creating Of New Question\"), React.createElement(Form, {\n        error: !!this.state.errorMessage,\n        style: {\n          marginTop: '10px'\n        }\n      }, React.createElement(Form.Field, null, React.createElement(\"label\", null, \"Question Title\"), React.createElement(Input, {\n        placeholder: \"Enter Title\",\n        value: this.state.questionTitle,\n        onChange: function onChange(event) {\n          return _this3.setState({\n            questionTitle: event.target.value\n          });\n        }\n      })), React.createElement(Form.Field, null, React.createElement(\"label\", null, \"Question Description\"), React.createElement(TextArea, {\n        placeholder: \"Enter Description\",\n        value: this.state.content,\n        onChange: function onChange(event) {\n          return _this3.setState({\n            content: event.target.value\n          });\n        }\n      })), React.createElement(Form.Field, null, React.createElement(\"label\", null, \"Ether\"), React.createElement(Input, {\n        label: \"ether\",\n        labelPosition: \"right\",\n        value: this.state.reward,\n        onChange: function onChange(event) {\n          return _this3.setState({\n            reward: event.target.value\n          });\n        }\n      })), React.createElement(Form.Field, null, React.createElement(\"label\", null, \"Maximum Duration\"), React.createElement(Input, {\n        label: \"hour(s)\",\n        labelPosition: \"right\",\n        value: this.state.maxDuration,\n        onChange: function onChange(event) {\n          return _this3.setState({\n            maxDuration: event.target.value\n          });\n        }\n      })), React.createElement(Form.Field, null, this.renderFilesUpload(elmFiles)), React.createElement(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.errorMessage\n      }), React.createElement(Button, {\n        loading: this.state.loading,\n        primary: true,\n        onClick: this.onSubmit\n      }, \"Submit Answer!\"))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context4.sent;\n                return _context4.abrupt(\"return\", {\n                  accounts: accounts\n                });\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function getInitialProps() {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return NewPost;\n}(Component);\n\nexport default NewPost;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\newQuestion.js"],"names":["React","Component","Form","Button","Input","Message","Dropdown","Header","Icon","Segment","Container","TextArea","Divider","Label","Layout","factory","web3","Router","getIpfsHash","NewPost","questionTitle","content","reward","maxDuration","errorMessage","loading","buffer","files_array","fileHashes_array","fileNames_array","setState","eth","getAccounts","accounts","methods","createQuestion","state","Number","send","from","pushRoute","message","reader","FileReader","file","fileInput","files","Blob","push","name","console","log","onloadend","fileUrl","result","loadingFile","Buffer","fileHash","readAsDataURL","i","length","splice","display","onFileSelected","click","marginBottom","onFileSelected1","elmFiles","map","item","index","onFileRemoved","marginTop","event","target","value","renderFilesUpload","onSubmit"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Form, Button, Input, Message, Dropdown, Header,\r\n  Icon, Segment, Container, TextArea, Divider, Label } from 'semantic-ui-react';\r\nimport Layout from '../components/Layout';\r\nimport factory from '../ethereum/factory';\r\nimport web3 from '../ethereum/web3';\r\nimport { Router } from '../routes';\r\nimport { getIpfsHash } from './ipfs';\r\n\r\nclass NewPost extends Component {\r\n    state = {\r\n        questionTitle: '',\r\n        content:'',\r\n        reward:'',\r\n        maxDuration:'',\r\n        errorMessage: '',\r\n        loading: false,\r\n        buffer: null,\r\n        files_array: [],\r\n        fileHashes_array: [],\r\n        fileNames_array: []\r\n    };\r\n\r\n    static async getInitialProps () {\r\n        const accounts = await web3.eth.getAccounts();\r\n        return { accounts }\r\n    }\r\n\r\n    onSubmit = async () => {\r\n        this.setState({ loading: true, errorMessage: '' });\r\n        try {\r\n            const accounts = await web3.eth.getAccounts();\r\n            // Create a new post\r\n            await factory.methods\r\n            .createQuestion(this.state.questionTitle, this.state.content, Number(this.state.reward), parseFloat(this.state.maxDuration) * 60 * 60)\r\n            .send({\r\n                from: accounts[0]\r\n            });\r\n\r\n            Router.pushRoute('/'); // Automatic redirect the user.\r\n        } catch (err) {\r\n            this.setState({ errorMessage: err.message });\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    // To select a file to upload\r\n    onFileSelected = async () => {\r\n        const reader = new FileReader();\r\n        const file = this.fileInput.files[0];\r\n\r\n        if (file instanceof Blob ) {\r\n            let {files_array, fileNames_array, fileHashes_array} = this.state;\r\n            files_array.push(file);\r\n            fileNames_array.push(file.name);\r\n            this.setState({\r\n                files_array: files_array,\r\n                fileNames_array: fileNames_array\r\n            });\r\n            console.log(\"fileNames_array: \", fileNames_array);\r\n\r\n            reader.onloadend = async () => {\r\n                await this.setState({\r\n                    fileUrl: reader.result,\r\n                    loadingFile: true,\r\n                    buffer: Buffer.from(reader.result)\r\n                });\r\n                const fileHash = this.state.buffer ? (await getIpfsHash(file)) : '0';\r\n\r\n                fileHashes_array.push(fileHash);\r\n                this.setState({ fileHashes_array: fileHashes_array });\r\n\r\n                console.log(\"fileHashes_array: \", fileHashes_array);\r\n            }\r\n            reader.readAsDataURL(file);\r\n        }\r\n    }\r\n\r\n    // Remove a previously selected file to upload\r\n    onFileRemoved = (file) => {\r\n        var i = 0;\r\n        let {files_array, fileHashes_array, fileNames_array} = this.state;\r\n        console.log('file: ', file);\r\n        for (i = 0 ; i < files_array.length ; i++) {\r\n            if (file === files_array[i]) {\r\n                files_array.splice(i, 1);\r\n                fileNames_array.splice(i, 1);\r\n                fileHashes_array.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            files_array: files_array,\r\n            fileNames_array: fileNames_array,\r\n            fileHashes_array: fileHashes_array\r\n        });\r\n        console.log('fileNames_array', fileNames_array);\r\n        console.log(\"fileHashes_array: \", fileHashes_array);\r\n    }\r\n\r\n    renderFilesUpload(files) {\r\n      let {files_array} = this.state;\r\n      if(this.state.files_array.length == 0){\r\n        return (\r\n          <Segment placeholder>\r\n            <Header icon>\r\n              <Icon name='images outline' />\r\n              No files are uploaded for this question.\r\n            </Header>\r\n            <input\r\n                style={{ display: 'none' }}\r\n                type='file'\r\n                onChange={() => this.onFileSelected()}\r\n                ref={fileInput => this.fileInput = fileInput}/>\r\n            <Button primary onClick={() => this.fileInput.click()}>Upload Files</Button>\r\n          </Segment>\r\n        )\r\n      } else {\r\n        return (\r\n          <Segment placeholder>\r\n            <center>\r\n                <div style={{marginBottom: '20px'}}>\r\n                    {files}\r\n                </div>\r\n                <input\r\n                    style={{ display: 'none' }}\r\n                    type='file'\r\n                    onChange={() => this.onFileSelected1()}\r\n                    ref={fileInput => this.fileInput = fileInput}/>\r\n                <Button primary onClick={() => this.fileInput.click()}>Upload Files</Button>\r\n            </center>\r\n          </Segment>\r\n        )\r\n      }\r\n    };\r\n\r\n    render() {\r\n        let {files_array} = this.state;\r\n        let elmFiles = null;\r\n        if (files_array !== null) {\r\n            elmFiles = files_array.map((item, index) =>\r\n                <Label as='a' key={index} size='big'>\r\n                    {item.name}\r\n                    <Icon name='delete'\r\n                          onClick={() => this.onFileRemoved(item)} />\r\n                </Label>\r\n            );\r\n        }\r\n        return (\r\n            <Layout>\r\n                <Container>\r\n                  <Divider hidden/>\r\n                  <Segment textAlign='center' as='h3'>Creating Of New Question</Segment>\r\n                  <Form error={!!this.state.errorMessage} style={{ marginTop: '10px' }}>\r\n                      <Form.Field>\r\n                          <label>Question Title</label>\r\n                          <Input\r\n                              placeholder=\"Enter Title\"\r\n                              value={this.state.questionTitle}\r\n                              onChange={event => this.setState({ questionTitle: event.target.value })}\r\n                          />\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                          <label>Question Description</label>\r\n                          <TextArea\r\n                              placeholder=\"Enter Description\"\r\n                              value={this.state.content}\r\n                              onChange={event => this.setState({ content: event.target.value })}\r\n                          />\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                          <label>Ether</label>\r\n                          <Input\r\n                              label=\"ether\"\r\n                              labelPosition=\"right\"\r\n                              value={this.state.reward}\r\n                              onChange={event => this.setState({ reward: event.target.value })}\r\n                          />\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                          <label>Maximum Duration</label>\r\n                          <Input\r\n                              label=\"hour(s)\"\r\n                              labelPosition=\"right\"\r\n                              value={this.state.maxDuration}\r\n                              onChange={event => this.setState({ maxDuration: event.target.value })}\r\n                          />\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        {this.renderFilesUpload(elmFiles)}\r\n                      </Form.Field>\r\n                      <Message error header=\"Oops!\" content={this.state.errorMessage} />\r\n                      <Button loading={this.state.loading} primary onClick={this.onSubmit}>Submit Answer!</Button>\r\n                  </Form>\r\n                </Container>\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewPost;\r\n"]},"metadata":{},"sourceType":"module"}