{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport Question from '../ethereum/question';\n\nvar Fuse = require(\"fuse.js\"); // Validate Email Address Format\n\n\nvar validate = function validate(emailAddress) {\n  if (emailAddress === \"admin\") {\n    return true;\n  } else {\n    var re = /\\S+@e\\.ntu\\.edu\\.sg$/;\n    return re.test(emailAddress);\n  }\n}; // Provides common logging method for logging every transactions\n\n\nvar logging = function logging(message) {\n  var today = new Date();\n  var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  var date = months[today.getMonth()] + \" \" + today.getDate() + \" \" + today.getFullYear();\n  var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n  var dateTime = date + ' ' + time + \": \" + message;\n  return dateTime;\n}; // Search Algorithm \n\n\nfunction search(_x, _x2) {\n  return _search.apply(this, arguments);\n}\n\nfunction _search() {\n  _search = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(value, questions) {\n    var list, i, summary, options, fuse, result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            list = [];\n            i = 0;\n\n          case 2:\n            if (!(i < questions.length)) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 5;\n            return Question(questions[i]).methods.getSummary().call();\n\n          case 5:\n            summary = _context.sent;\n            list.push({\n              'address': questions[i],\n              'title': summary[0],\n              'content': summary[1],\n              'tags': summary[8]\n            });\n\n          case 7:\n            i++;\n            _context.next = 2;\n            break;\n\n          case 10:\n            options = {\n              id: \"address\",\n              threshold: 0.1,\n              shouldSort: true,\n              tokenize: true,\n              keys: [{\n                name: 'title',\n                weight: 0.3\n              }, {\n                name: 'content',\n                weight: 0.3\n              }, {\n                name: 'tags',\n                weight: 0.4\n              }]\n            };\n            fuse = new Fuse(list, options);\n            result = fuse.search(value);\n            return _context.abrupt(\"return\", result);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _search.apply(this, arguments);\n}\n\nexport { validate, logging };","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\functions.js"],"names":["Question","Fuse","require","validate","emailAddress","re","test","logging","message","today","Date","months","date","getMonth","getDate","getFullYear","time","getHours","getMinutes","getSeconds","dateTime","search","value","questions","list","i","length","methods","getSummary","call","summary","push","options","id","threshold","shouldSort","tokenize","keys","name","weight","fuse","result"],"mappings":"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","sourcesContent":["import Question from '../ethereum/question';\r\nconst Fuse = require(\"fuse.js\");\r\n\r\n// Validate Email Address Format\r\nconst validate = (emailAddress) => {\r\n  if (emailAddress === \"admin\") {\r\n    return true;\r\n  } else {\r\n    const re = /\\S+@e\\.ntu\\.edu\\.sg$/;\r\n    return re.test(emailAddress);\r\n  }\r\n};\r\n\r\n// Provides common logging method for logging every transactions\r\nconst logging = (message) => {\r\n    let today = new Date();\r\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    let date = months[today.getMonth()]+\" \"+today.getDate()+\" \"+today.getFullYear();\r\n    let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n    let dateTime = date+' '+time+\": \"+message;\r\n    return dateTime;\r\n};\r\n\r\n// Search Algorithm \r\nasync function search(value, questions) {\r\n    let list = [];\r\n    for (let i = 0; i < questions.length; i++) {\r\n        var summary = await Question(questions[i]).methods.getSummary().call();\r\n        list.push({'address': questions[i], 'title': summary[0], 'content': summary[1], 'tags': summary[8]});\r\n    }\r\n    let options = {\r\n        id: \"address\",\r\n        threshold: 0.1,\r\n        shouldSort: true,\r\n        tokenize: true,\r\n        keys: [{\r\n            name: 'title',\r\n            weight: 0.3\r\n        }, {\r\n            name: 'content',\r\n            weight: 0.3\r\n        }, {\r\n           name:'tags',\r\n           weight: 0.4\r\n        }]\r\n    };\r\n    let fuse = new Fuse(list, options);\r\n    const result = fuse.search(value);\r\n    return result;\r\n}\r\nexport { validate, logging };\r\n"]},"metadata":{},"sourceType":"module"}