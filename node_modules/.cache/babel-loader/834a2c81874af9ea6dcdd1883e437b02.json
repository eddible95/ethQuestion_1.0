{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { Button, Checkbox, Form, Container, Divider, Input, Segment, Message, Icon, Modal, Header, Loader } from 'semantic-ui-react';\nimport LoginLayout from '../components/LoginLayout';\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\nimport credentials from '../ethereum/credentials';\nimport { Router } from '../routes';\n\nvar RegisterPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(RegisterPage, _Component);\n\n  function RegisterPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, RegisterPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RegisterPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      emailAddress: '',\n      loading: false,\n      errorMessage: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var accounts, profileAddress, profile;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              }); // Check for valid NTU Student Email Address and Email Address has not been used\n\n\n              _context.t0 = _this.validate(_this.state.emailAddress);\n\n              if (!_context.t0) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 5;\n              return credentials.methods.emailNotExist(_this.state.emailAddress).call();\n\n            case 5:\n              _context.t0 = _context.sent;\n\n            case 6:\n              if (!_context.t0) {\n                _context.next = 31;\n                break;\n              }\n\n              _context.prev = 7;\n              _context.next = 10;\n              return web3.eth.getAccounts();\n\n            case 10:\n              accounts = _context.sent;\n              _context.next = 13;\n              return credentials.methods.createBinding(_this.state.emailAddress).send({\n                from: accounts[0]\n              });\n\n            case 13:\n              _context.next = 15;\n              return factory.methods.createProfile().send({\n                from: accounts[0]\n              });\n\n            case 15:\n              if (!(_this.state.emailAddress === \"admin\")) {\n                _context.next = 22;\n                break;\n              }\n\n              _context.next = 18;\n              return factory.methods.getProfile(accounts[0]).call();\n\n            case 18:\n              profileAddress = _context.sent;\n              profile = Profile(profileAddress);\n              _context.next = 22;\n              return profile.methods.setAdmin().send({\n                from: accounts[0]\n              });\n\n            case 22:\n              Router.pushRoute(\"/home\"); // Automatic redirect the user.\n\n              _context.next = 29;\n              break;\n\n            case 25:\n              _context.prev = 25;\n              _context.t1 = _context[\"catch\"](7);\n\n              _this.setState({\n                errorMessage: _context.t1.message\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 29:\n              _context.next = 33;\n              break;\n\n            case 31:\n              _this.setState({\n                errorMessage: \"Invalid Email Address or Email Address Already In Used\"\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 33:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[7, 25]]);\n    })));\n\n    return _this;\n  }\n\n  _createClass(RegisterPage, [{\n    key: \"validate\",\n    value: function validate(emailAddress) {\n      if (emailAddress === \"admin\") {\n        return true;\n      } else {\n        var re = /\\S+@e\\.ntu\\.edu\\.sg$/;\n        return re.test(emailAddress);\n      }\n    }\n  }, {\n    key: \"renderForm\",\n    value: function renderForm() {\n      var _this2 = this;\n\n      return React.createElement(Form, {\n        error: !!this.state.errorMessage\n      }, React.createElement(Segment, {\n        raised: true,\n        textAlign: \"center\"\n      }, \"Please use a valid NTU Student Email Address to be bounded to the Etheruem Account to use the Application\"), React.createElement(Form.Field, null, React.createElement(\"label\", null, \"NTU Student Email Address\"), React.createElement(Input, {\n        placeholder: \"example@e.ntu.edu.sg\",\n        value: this.state.emailAddress,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            emailAddress: event.target.value\n          });\n        }\n      })), React.createElement(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.errorMessage\n      }), React.createElement(Modal, {\n        open: this.state.loading,\n        trigger: React.createElement(Button, {\n          primary: true,\n          onClick: this.onSubmit\n        }, \"Register\"),\n        basic: true,\n        size: \"small\"\n      }, React.createElement(Header, {\n        content: \"Registering Your Email Address\"\n      }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"Please confirm the 2 MetaMask transactions for creation of Profile and Registering of Email Address. Upon confirming the requests, please hold on while the system completes the registration process...\"), React.createElement(Loader, {\n        active: true,\n        inline: \"centered\"\n      }, \"Registering Your Email\"))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(LoginLayout, null, React.createElement(Container, {\n        style: {\n          height: \"100vh\"\n        }\n      }, this.renderForm()));\n    }\n  }]);\n\n  return RegisterPage;\n}(Component);\n\nexport default RegisterPage;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\register.js"],"names":["React","Component","Button","Checkbox","Form","Container","Divider","Input","Segment","Message","Icon","Modal","Header","Loader","LoginLayout","web3","factory","credentials","Router","RegisterPage","emailAddress","loading","errorMessage","setState","validate","state","methods","emailNotExist","call","eth","getAccounts","accounts","createBinding","send","from","createProfile","getProfile","profileAddress","profile","Profile","setAdmin","pushRoute","message","re","test","event","target","value","onSubmit","height","renderForm"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Checkbox, Form, Container, Divider, Input,\r\n   Segment, Message, Icon, Modal, Header, Loader } from 'semantic-ui-react'\r\nimport LoginLayout from '../components/LoginLayout';\r\nimport web3 from '../ethereum/web3';\r\nimport factory from '../ethereum/factory';\r\nimport credentials from '../ethereum/credentials';\r\nimport { Router } from '../routes';\r\n\r\nclass RegisterPage extends Component {\r\n\r\n  state = {\r\n    emailAddress:'',\r\n    loading: false,\r\n    errorMessage:''\r\n  };\r\n\r\n  validate(emailAddress){\r\n    if (emailAddress === \"admin\") {\r\n      return true;\r\n    } else {\r\n      const re = /\\S+@e\\.ntu\\.edu\\.sg$/;\r\n      return re.test(emailAddress);\r\n    }\r\n  };\r\n\r\n  onSubmit = async () => {\r\n      this.setState({ loading: true, errorMessage: '' });\r\n      // Check for valid NTU Student Email Address and Email Address has not been used\r\n      if (this.validate(this.state.emailAddress) && await credentials.methods.emailNotExist(this.state.emailAddress).call()){\r\n        try {\r\n            const accounts = await web3.eth.getAccounts();\r\n            // Create a new record\r\n            await credentials.methods\r\n            .createBinding(this.state.emailAddress)\r\n            .send({\r\n                from: accounts[0]\r\n            });\r\n            // Create a new Profile\r\n            await factory.methods\r\n            .createProfile()\r\n            .send({\r\n                from: accounts[0]\r\n            });\r\n            if (this.state.emailAddress === \"admin\") {\r\n              const profileAddress = await factory.methods.getProfile(accounts[0]).call();\r\n              const profile = Profile(profileAddress);\r\n              await profile.methods.setAdmin().send({\r\n                from: accounts[0]\r\n              });\r\n            }\r\n            Router.pushRoute(`/home`); // Automatic redirect the user.\r\n        } catch (err) {\r\n            this.setState({ errorMessage: err.message });\r\n            this.setState({ loading: false });\r\n        }\r\n      } else {\r\n        this.setState({ errorMessage: \"Invalid Email Address or Email Address Already In Used\" });\r\n        this.setState({ loading: false });\r\n      }\r\n  };\r\n\r\n  renderForm() {\r\n    return(\r\n      <Form error={!!this.state.errorMessage}>\r\n        <Segment raised textAlign={\"center\"}>\r\n          Please use a valid NTU Student Email Address to be bounded to the Etheruem Account to use the Application\r\n        </Segment>\r\n        <Form.Field>\r\n          <label>NTU Student Email Address</label>\r\n          <Input\r\n              placeholder='example@e.ntu.edu.sg'\r\n              value={this.state.emailAddress}\r\n              onChange={event => this.setState({ emailAddress: event.target.value})}\r\n          />\r\n        </Form.Field>\r\n        <Message error header=\"Oops!\" content={this.state.errorMessage} />\r\n        <Modal open={this.state.loading} trigger={<Button primary onClick={this.onSubmit}>Register</Button>} basic size='small'>\r\n          <Header content='Registering Your Email Address' />\r\n          <Modal.Content>\r\n            <p>\r\n              Please confirm the 2 MetaMask transactions for creation of Profile and Registering of Email Address.\r\n              Upon confirming the requests, please hold on while the system completes the registration process...\r\n            </p>\r\n            <Loader active inline=\"centered\">\r\n              Registering Your Email\r\n            </Loader>\r\n          </Modal.Content>\r\n        </Modal>\r\n      </Form>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <LoginLayout>\r\n          <Container style={{height:\"100vh\"}}>\r\n              {this.renderForm()}\r\n          </Container>\r\n      </LoginLayout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RegisterPage;\r\n"]},"metadata":{},"sourceType":"module"}