{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport Layout from '../components/Layout';\nimport { Container, Segment, Header, Divider, Button, Popup, Icon, Dropdown, Table, Modal, Loader, Message, Transition } from \"semantic-ui-react\";\nimport { Router } from '../routes';\nimport { logging } from './logger';\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\nimport Profile from '../ethereum/profile';\nimport Question from '../ethereum/question';\nimport feedback from '../ethereum/feedback';\nimport credentials from '../ethereum/credentials'; // Ensure jsPDF does not import on Server Side\n\nvar jsPDF = null;\n\nif (typeof window !== \"undefined\") {\n  import(\"jspdf\").then(function (module) {\n    jsPDF = module.default;\n  });\n}\n\nvar AdminPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AdminPage, _Component);\n\n  function AdminPage(props) {\n    var _this;\n\n    _classCallCheck(this, AdminPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AdminPage).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"export\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var lMargin, rMargin, pdfInMM, doc, questionNumber, question, summary, answerList, questionTitle, lines, j, i, answer;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(_this.state.questionNumber != \"\")) {\n                _context.next = 24;\n                break;\n              }\n\n              // Initialise the PDF document to write\n              lMargin = 15; //left margin in mm\n\n              rMargin = 15; //right margin in mm\n\n              pdfInMM = 210; // width of A4 in mm\n\n              doc = new jsPDF(\"p\", \"mm\", \"a4\"); // Retrieve all the data of selected question\n\n              questionNumber = Number(_this.state.questionNumber) - 1;\n              question = Question(_this.props.deployedQuestions[questionNumber]);\n              _context.next = 9;\n              return question.methods.getSummary().call();\n\n            case 9:\n              summary = _context.sent;\n              _context.next = 12;\n              return question.methods.getAnswerList().call();\n\n            case 12:\n              answerList = _context.sent;\n              questionTitle = \"Question: \" + summary[1]; // Writing to the PDF document\n\n              lines = doc.splitTextToSize(questionTitle, pdfInMM - lMargin - rMargin);\n              doc.text(lMargin, 20, lines);\n              doc.setLineWidth(0.5);\n              doc.line(lMargin, 20 + lines.length + 8, 195, 20 + lines.length + 8); // If images are uploaded\n\n              if (summary[5].length != 0) {\n                summary[6].map(function (imageName, index) {\n                  var link = \"https://ipfs.io/ipfs/\" + summary[5][index];\n                  doc.text(lMargin, 20 + lines.length + 15, \"Link(s) of Image(s) Uploaded For Question:\");\n                  lines = doc.splitTextToSize(link, pdfInMM - lMargin - rMargin);\n                  doc.text(lMargin, 45, lines);\n                });\n                doc.setLineWidth(0.5);\n                doc.line(lMargin, 20 + lines.length + 35, 195, 20 + lines.length + 35);\n                doc.text(lMargin, 20 + lines.length + 45, \"Answers:\");\n              } else {\n                doc.text(lMargin, 20 + lines.length + 15, \"Answers:\");\n              }\n\n              j = 75;\n\n              for (i = 0; i < answerList.length; i++) {\n                answer = \"(\" + (i + 1) + \") \" + answerList[i][0];\n                lines = doc.splitTextToSize(answer, pdfInMM - lMargin - rMargin); // Creates a new page for every 10 answers\n\n                if (i % 10 == 0 && i != 0) {\n                  doc.addPage();\n                  j = 30;\n                }\n\n                doc.text(lMargin, j, lines);\n                j = j + 10;\n              }\n\n              doc.save(\"Answer.pdf\");\n              _context.next = 25;\n              break;\n\n            case 24:\n              console.log(\"Please select a question\");\n\n            case 25:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"exportFeedback\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var comments, lMargin, rMargin, pdfInMM, doc, i, lines;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return feedback.methods.getComments().call();\n\n            case 2:\n              comments = _context2.sent;\n              // Initialise the PDF document to write\n              lMargin = 15; //left margin in mm\n\n              rMargin = 15; //right margin in mm\n\n              pdfInMM = 210; // width of A4 in mm\n\n              doc = new jsPDF(\"p\", \"mm\", \"a4\"); // Writing to the PDF document\n\n              for (i = 0; i < comments.length; i++) {\n                lines = doc.splitTextToSize(comments[i], pdfInMM - lMargin - rMargin);\n                doc.text(lMargin, 20, lines);\n\n                if (i % 10 == 0 && i != 0) {\n                  doc.addPage();\n                }\n              }\n\n              doc.save(\"Comments.pdf\");\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"getUserTableData\", function () {\n      return _this.props.ethWalletEmailAddressBinding.map(function (item, index) {\n        return React.createElement(Table.Row, {\n          key: index\n        }, React.createElement(Table.Cell, null, item.ethWallet), React.createElement(Table.Cell, null, item.emailAddress), React.createElement(Table.Cell, null, item.status ? \"Blacklisted\" : \"Active\"), React.createElement(Table.Cell, null, item.status ? React.createElement(Button, {\n          onClick: function onClick() {\n            return _this.unblacklist(item.emailAddress);\n          },\n          color: \"green\",\n          size: \"mini\",\n          icon: true\n        }, React.createElement(Icon, {\n          name: \"undo\"\n        })) : React.createElement(Button, {\n          onClick: function onClick() {\n            return _this.blacklist(item.emailAddress);\n          },\n          color: \"red\",\n          size: \"mini\",\n          icon: true\n        }, React.createElement(Icon, {\n          name: \"delete\"\n        }))));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"blacklist\",\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(emailAddress) {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this.setState({\n                  loading: true,\n                  errorMessage: ''\n                });\n\n                _context3.prev = 1;\n                _context3.next = 4;\n                return web3.eth.getAccounts();\n\n              case 4:\n                accounts = _context3.sent;\n                _context3.next = 7;\n                return credentials.methods.blacklistEmail(emailAddress).send({\n                  from: accounts[0]\n                });\n\n              case 7:\n                Router.pushRoute('/admin'); // Automatic redirect the user.\n\n                _context3.next = 14;\n                break;\n\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](1);\n\n                _this.setState({\n                  errorMessage: _context3.t0.message\n                });\n\n                _this.setState({\n                  error: true\n                });\n\n              case 14:\n                _this.setState({\n                  loading: false\n                });\n\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[1, 10]]);\n      }));\n\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"unblacklist\",\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(emailAddress) {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _this.setState({\n                  loading: true,\n                  errorMessage: ''\n                });\n\n                _context4.prev = 1;\n                _context4.next = 4;\n                return web3.eth.getAccounts();\n\n              case 4:\n                accounts = _context4.sent;\n                _context4.next = 7;\n                return credentials.methods.unBlacklistEmail(emailAddress).send({\n                  from: accounts[0]\n                });\n\n              case 7:\n                _context4.next = 13;\n                break;\n\n              case 9:\n                _context4.prev = 9;\n                _context4.t0 = _context4[\"catch\"](1);\n\n                _this.setState({\n                  errorMessage: _context4.t0.message\n                });\n\n                _this.setState({\n                  error: true\n                });\n\n              case 13:\n                _this.setState({\n                  loading: false\n                });\n\n              case 14:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[1, 9]]);\n      }));\n\n      return function (_x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"getQuestionTableData\", function () {\n      return _this.props.questionAddressTitleBinding.map(function (item, index) {\n        return React.createElement(Table.Row, {\n          key: index\n        }, React.createElement(Table.Cell, null, item.questionAddress), React.createElement(Table.Cell, null, item.title), React.createElement(Table.Cell, null, item.flagged ? \"Flagged\" : \"Active\"), React.createElement(Table.Cell, null, item.flagged ? \"No Actions For Flagged Question\" : React.createElement(Button, {\n          onClick: function onClick() {\n            return _this.deleteQuestion(item.questionAddress);\n          },\n          color: \"red\",\n          size: \"mini\",\n          icon: true\n        }, React.createElement(Icon, {\n          name: \"delete\"\n        }))));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"deleteQuestion\",\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(questionAddress, title) {\n        var accounts, logTransaction;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _this.setState({\n                  loading: true,\n                  errorMessage: ''\n                });\n\n                _context5.prev = 1;\n                _context5.next = 4;\n                return web3.eth.getAccounts();\n\n              case 4:\n                accounts = _context5.sent;\n                logTransaction = logging(\"Deleted Question Titled: \" + title);\n                _context5.next = 8;\n                return factory.methods.deleteQuestion(questionAddress, logTransaction).send({\n                  from: accounts[0]\n                });\n\n              case 8:\n                Router.pushRoute('/admin'); // Automatic redirect the user.\n\n                _context5.next = 15;\n                break;\n\n              case 11:\n                _context5.prev = 11;\n                _context5.t0 = _context5[\"catch\"](1);\n\n                _this.setState({\n                  errorMessage: _context5.t0.message\n                });\n\n                _this.setState({\n                  error: true\n                });\n\n              case 15:\n                _this.setState({\n                  loading: false\n                });\n\n              case 16:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, null, [[1, 11]]);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleUserTableVisibility\", function () {\n      return _this.setState(function (prevState) {\n        return {\n          userVisible: !prevState.userVisible\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleQuestionTableVisibility\", function () {\n      return _this.setState(function (prevState) {\n        return {\n          questionVisible: !prevState.questionVisible\n        };\n      });\n    });\n\n    _this.state = {\n      questionOptions: [],\n      questionNumber: '',\n      error: false,\n      errorMessage: '',\n      loading: false,\n      userVisible: false,\n      questionVisible: false\n    };\n    return _this;\n  }\n\n  _createClass(AdminPage, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6() {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context6.sent;\n                _context6.next = 5;\n                return credentials.methods.getBinding(accounts[0]).call();\n\n              case 5:\n                _context6.t0 = _context6.sent;\n\n                if (!(_context6.t0 === \"\")) {\n                  _context6.next = 8;\n                  break;\n                }\n\n                Router.pushRoute(\"/\"); // Automatic redirect the user to Login or Sign Up\n\n              case 8:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7() {\n        var questionOptions, i, question, summary;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                questionOptions = [];\n                i = 0;\n\n              case 2:\n                if (!(i < this.props.deployedQuestionsCount)) {\n                  _context7.next = 11;\n                  break;\n                }\n\n                question = Question(this.props.deployedQuestions[i]);\n                _context7.next = 6;\n                return question.methods.getSummary().call();\n\n              case 6:\n                summary = _context7.sent;\n                questionOptions.push({\n                  key: i + 1,\n                  text: summary[0],\n                  value: i + 1\n                });\n\n              case 8:\n                i++;\n                _context7.next = 2;\n                break;\n\n              case 11:\n                this.setState({\n                  questionOptions: questionOptions\n                });\n\n              case 12:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Layout, {\n        accountType: this.props.accountType\n      }, React.createElement(Container, {\n        style: {\n          height: \"100vh\"\n        }\n      }, React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(Segment, {\n        raised: true,\n        textAlign: \"left\"\n      }, React.createElement(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"Exporting Questions & Answers As PDF\")), React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, \"Select the question to export the question and it's corresponding answers\"), React.createElement(Dropdown, {\n        clearable: true,\n        options: this.state.questionOptions,\n        selection: true,\n        placeholder: \"Select the question to export\",\n        value: this.state.questionNumber,\n        onChange: function onChange(e, _ref6) {\n          var value = _ref6.value;\n          return _this2.setState({\n            questionNumber: value\n          });\n        }\n      }), React.createElement(Button, {\n        icon: true,\n        labelPosition: \"left\",\n        color: \"red\",\n        onClick: this.export,\n        style: {\n          left: \"20px\"\n        }\n      }, React.createElement(Icon, {\n        name: \"download\"\n      }), \"Export As PDF\"), React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(Segment, {\n        raised: true,\n        textAlign: \"left\"\n      }, React.createElement(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"Exporting Feedback\")), React.createElement(Button, {\n        icon: true,\n        labelPosition: \"left\",\n        color: \"red\",\n        onClick: this.exportFeedback,\n        style: {\n          left: \"20px\"\n        }\n      }, React.createElement(Icon, {\n        name: \"download\"\n      }), \"Export As PDF\"), React.createElement(Segment, {\n        raised: true,\n        textAlign: \"center\"\n      }, React.createElement(\"b\", {\n        style: {\n          fontSize: \"20px\"\n        }\n      }, \"Blacklisting User\"), React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          icon: this.state.userVisible ? \"minus\" : \"plus\",\n          onClick: this.toggleUserTableVisibility,\n          floated: \"right\",\n          size: \"mini\"\n        }),\n        content: \"Click to expand/close\",\n        inverted: true\n      })), React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(Transition, {\n        visible: this.state.userVisible,\n        animation: \"scale\",\n        duration: 500\n      }, React.createElement(Segment, null, React.createElement(Header, null, \"Registered Users\"), React.createElement(Table, {\n        compact: true,\n        celled: true\n      }, React.createElement(Table.Header, {\n        fullWidth: true\n      }, React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, {\n        width: 2\n      }, \"Ethereum Wallet\"), React.createElement(Table.HeaderCell, {\n        width: 3\n      }, \"Email\"), React.createElement(Table.HeaderCell, {\n        width: 2\n      }, \"Status\"), React.createElement(Table.HeaderCell, {\n        width: 2\n      }, \"Actions\"))), React.createElement(Table.Body, null, this.getUserTableData()), React.createElement(Table.Footer, {\n        fullWidth: true\n      }, React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, {\n        colSpan: 5\n      })))))), React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(Segment, {\n        raised: true,\n        textAlign: \"center\"\n      }, React.createElement(\"b\", {\n        style: {\n          fontSize: \"20px\"\n        }\n      }, \"Removing Question\"), React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          icon: this.state.questionVisible ? \"minus\" : \"plus\",\n          onClick: this.toggleQuestionTableVisibility,\n          floated: \"right\",\n          size: \"mini\"\n        }),\n        content: \"Click to expand/close\",\n        inverted: true\n      })), React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(Transition, {\n        visible: this.state.questionVisible,\n        animation: \"scale\",\n        duration: 500\n      }, React.createElement(Segment, null, React.createElement(Header, null, \"Questions Posted\"), React.createElement(Table, {\n        compact: true,\n        celled: true\n      }, React.createElement(Table.Header, {\n        fullWidth: true\n      }, React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, {\n        width: 2\n      }, \"Question Address\"), React.createElement(Table.HeaderCell, {\n        width: 3\n      }, \"Title\"), React.createElement(Table.HeaderCell, {\n        width: 2\n      }, \"Status\"), React.createElement(Table.HeaderCell, {\n        width: 2\n      }, \"Actions\"))), React.createElement(Table.Body, null, this.getQuestionTableData()), React.createElement(Table.Footer, {\n        fullWidth: true\n      }, React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, {\n        colSpan: 5\n      })))))), React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(Modal, {\n        open: this.state.loading,\n        basic: true,\n        size: \"small\"\n      }, React.createElement(Header, {\n        content: \"Performing Admin Actions\"\n      }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"Please Confirm the MetaMask Transaction Request. This process might take awhile.\"), React.createElement(Loader, {\n        active: true,\n        inline: \"centered\"\n      }, \"Loading\"))), React.createElement(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.errorMessage,\n        hidden: !this.state.error\n      })));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8() {\n        var accounts, deployedQuestions, deployedQuestionsCount, questionAddressTitleBinding, i, question, summary, ethWallets, ethWalletEmailAddressBinding, _i, emailAddress, status, profileAddress, profile, accountType;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context8.sent;\n                _context8.next = 5;\n                return credentials.methods.getBinding(accounts[0]).call();\n\n              case 5:\n                _context8.t0 = _context8.sent;\n\n                if (!(_context8.t0 === \"\")) {\n                  _context8.next = 8;\n                  break;\n                }\n\n                Router.pushRoute(\"/\");\n\n              case 8:\n                _context8.next = 10;\n                return factory.methods.getDeployedQuestions().call();\n\n              case 10:\n                deployedQuestions = _context8.sent;\n                deployedQuestionsCount = deployedQuestions.length;\n                questionAddressTitleBinding = [];\n                i = 0;\n\n              case 14:\n                if (!(i < deployedQuestionsCount)) {\n                  _context8.next = 23;\n                  break;\n                }\n\n                question = Question(deployedQuestions[i]);\n                _context8.next = 18;\n                return question.methods.getSummary().call();\n\n              case 18:\n                summary = _context8.sent;\n                questionAddressTitleBinding.push({\n                  questionAddress: deployedQuestions[i],\n                  title: summary[0],\n                  flagged: summary[9]\n                });\n\n              case 20:\n                i++;\n                _context8.next = 14;\n                break;\n\n              case 23:\n                _context8.next = 25;\n                return factory.methods.getEthWallets().call();\n\n              case 25:\n                ethWallets = _context8.sent;\n                ethWalletEmailAddressBinding = [];\n                _i = 0;\n\n              case 28:\n                if (!(_i < ethWallets.length)) {\n                  _context8.next = 39;\n                  break;\n                }\n\n                _context8.next = 31;\n                return credentials.methods.getBinding(ethWallets[_i]).call();\n\n              case 31:\n                emailAddress = _context8.sent;\n                _context8.next = 34;\n                return credentials.methods.emailNotBlackList(emailAddress).call();\n\n              case 34:\n                status = _context8.sent;\n                ethWalletEmailAddressBinding.push({\n                  ethWallet: ethWallets[_i],\n                  emailAddress: emailAddress,\n                  status: status\n                });\n\n              case 36:\n                _i++;\n                _context8.next = 28;\n                break;\n\n              case 39:\n                _context8.next = 41;\n                return factory.methods.getProfile(accounts[0]).call();\n\n              case 41:\n                profileAddress = _context8.sent;\n                profile = Profile(profileAddress);\n                _context8.next = 45;\n                return profile.methods.getAccountType().call();\n\n              case 45:\n                accountType = _context8.sent;\n\n                if (accountType == 0) {\n                  accountType = \"Admin\";\n                } else {\n                  accountType = \"User\";\n                }\n\n                return _context8.abrupt(\"return\", {\n                  accounts: accounts,\n                  accountType: accountType,\n                  deployedQuestionsCount: deployedQuestionsCount,\n                  deployedQuestions: deployedQuestions,\n                  ethWalletEmailAddressBinding: ethWalletEmailAddressBinding,\n                  questionAddressTitleBinding: questionAddressTitleBinding\n                });\n\n              case 48:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function getInitialProps() {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return AdminPage;\n}(Component);\n\nexport default AdminPage;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\admin.js"],"names":["React","Component","Layout","Container","Segment","Header","Divider","Button","Popup","Icon","Dropdown","Table","Modal","Loader","Message","Transition","Router","logging","web3","factory","Profile","Question","feedback","credentials","jsPDF","window","then","module","default","AdminPage","props","state","questionNumber","lMargin","rMargin","pdfInMM","doc","Number","question","deployedQuestions","methods","getSummary","call","summary","getAnswerList","answerList","questionTitle","lines","splitTextToSize","text","setLineWidth","line","length","map","imageName","index","link","j","i","answer","addPage","save","console","log","getComments","comments","ethWalletEmailAddressBinding","item","ethWallet","emailAddress","status","unblacklist","blacklist","setState","loading","errorMessage","eth","getAccounts","accounts","blacklistEmail","send","from","pushRoute","message","error","unBlacklistEmail","questionAddressTitleBinding","questionAddress","title","flagged","deleteQuestion","logTransaction","prevState","userVisible","questionVisible","questionOptions","getBinding","deployedQuestionsCount","push","key","value","accountType","height","fontSize","e","export","left","exportFeedback","toggleUserTableVisibility","getUserTableData","toggleQuestionTableVisibility","getQuestionTableData","getDeployedQuestions","getEthWallets","ethWallets","emailNotBlackList","getProfile","profileAddress","profile","getAccountType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from '../components/Layout';\r\nimport { Container, Segment, Header, Divider, Button, Popup,\r\n   Icon, Dropdown, Table, Modal, Loader, Message, Transition } from \"semantic-ui-react\";\r\nimport {Router} from '../routes';\r\nimport { logging } from './logger';\r\nimport web3 from '../ethereum/web3';\r\nimport factory from '../ethereum/factory';\r\nimport Profile from '../ethereum/profile';\r\nimport Question from '../ethereum/question';\r\nimport feedback from '../ethereum/feedback';\r\nimport credentials from '../ethereum/credentials';\r\n\r\n// Ensure jsPDF does not import on Server Side\r\nlet jsPDF = null;\r\nif (typeof window !== \"undefined\") {\r\n  import(\"jspdf\").then(module => {\r\n    jsPDF = module.default;\r\n  });\r\n}\r\n\r\nclass AdminPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      questionOptions: [],\r\n      questionNumber: '',\r\n      error: false,\r\n      errorMessage: '',\r\n      loading: false,\r\n      userVisible: false,\r\n      questionVisible: false\r\n    };\r\n  }\r\n\r\n  static async getInitialProps () {\r\n      const accounts = await web3.eth.getAccounts();\r\n      // Redirect E-Wallet that are not Logged In to the Login Page\r\n      if (await credentials.methods.getBinding(accounts[0]).call() === \"\"){\r\n          Router.pushRoute(`/`);\r\n      }\r\n\r\n      // Retrieve an array of addresses of questions deployed\r\n      let deployedQuestions = await factory.methods.getDeployedQuestions().call();\r\n      let deployedQuestionsCount = deployedQuestions.length;\r\n      let questionAddressTitleBinding = []\r\n      for(let i=0; i<deployedQuestionsCount; i++) {\r\n        let question = Question(deployedQuestions[i]);\r\n        let summary = await question.methods.getSummary().call();\r\n        questionAddressTitleBinding.push({\r\n          questionAddress: deployedQuestions[i],\r\n          title: summary[0],\r\n          flagged: summary[9]\r\n        })\r\n      }\r\n\r\n      // Retrieve an array of EthWallets and Email Addresses\r\n      let ethWallets = await factory.methods.getEthWallets().call();\r\n      let ethWalletEmailAddressBinding = [];\r\n      for (let i=0; i < ethWallets.length; i++) {\r\n        let emailAddress = await credentials.methods.getBinding(ethWallets[i]).call();\r\n        let status = await credentials.methods.emailNotBlackList(emailAddress).call();\r\n        ethWalletEmailAddressBinding.push({\r\n          ethWallet: ethWallets[i],\r\n          emailAddress: emailAddress,\r\n          status: status\r\n        })\r\n      }\r\n\r\n      // Get Account Type\r\n      const profileAddress = await factory.methods.getProfile(accounts[0]).call();\r\n      const profile = Profile(profileAddress);\r\n      let accountType = await profile.methods.getAccountType().call();\r\n      if (accountType == 0) {\r\n        accountType = \"Admin\"\r\n      } else {\r\n        accountType = \"User\"\r\n      }\r\n      return { accounts, accountType, deployedQuestionsCount, deployedQuestions, ethWalletEmailAddressBinding, questionAddressTitleBinding }\r\n  }\r\n\r\n  async componentWillMount() {\r\n    // Retrieve the Ethereum Account from MetaMask\r\n    const accounts = await web3.eth.getAccounts();\r\n    // Redirect E-Wallet that are not Logged In to the Login Page\r\n    if (await credentials.methods.getBinding(accounts[0]).call() === \"\"){\r\n        Router.pushRoute(`/`); // Automatic redirect the user to Login or Sign Up\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let questionOptions = [];\r\n    for (let i = 0; i < this.props.deployedQuestionsCount; i++) {\r\n        let question = Question(this.props.deployedQuestions[i])\r\n        let summary = await question.methods.getSummary().call();\r\n        questionOptions.push({\r\n            key: i+1,\r\n            text: summary[0],\r\n            value: i+1\r\n        });\r\n    }\r\n    this.setState( { questionOptions: questionOptions });\r\n  }\r\n\r\n  export = async () => {\r\n    // Check that a question must be selected\r\n    if (this.state.questionNumber != \"\") {\r\n      // Initialise the PDF document to write\r\n      let lMargin=15; //left margin in mm\r\n      let rMargin=15; //right margin in mm\r\n      let pdfInMM=210;  // width of A4 in mm\r\n      let doc = new jsPDF(\"p\",\"mm\",\"a4\");\r\n\r\n      // Retrieve all the data of selected question\r\n      let questionNumber = Number(this.state.questionNumber) - 1;\r\n      let question = Question(this.props.deployedQuestions[questionNumber])\r\n      let summary = await question.methods.getSummary().call();\r\n      let answerList = await question.methods.getAnswerList().call();\r\n      let questionTitle = \"Question: \" + summary[1];\r\n\r\n      // Writing to the PDF document\r\n      let lines = doc.splitTextToSize(questionTitle, (pdfInMM-lMargin-rMargin));\r\n      doc.text(lMargin,20,lines);\r\n      doc.setLineWidth(0.5)\r\n      doc.line(lMargin, 20+lines.length+8, 195, 20+lines.length+8)\r\n\r\n      // If images are uploaded\r\n      if (summary[5].length != 0) {\r\n          summary[6].map((imageName, index) => {\r\n            let link = \"https://ipfs.io/ipfs/\"+summary[5][index]\r\n            doc.text(lMargin,20+lines.length+15,\"Link(s) of Image(s) Uploaded For Question:\")\r\n            lines = doc.splitTextToSize(link, (pdfInMM-lMargin-rMargin));\r\n            doc.text(lMargin,45,lines);\r\n          })\r\n          doc.setLineWidth(0.5)\r\n          doc.line(lMargin, 20+lines.length+35, 195, 20+lines.length+35)\r\n          doc.text(lMargin, 20+lines.length+45, \"Answers:\");\r\n      } else {\r\n        doc.text(lMargin, 20+lines.length+15, \"Answers:\");\r\n      }\r\n      let j = 75;\r\n      for (let i = 0; i < answerList.length; i++) {\r\n        let answer = \"(\" + (i+1) + \") \" + answerList[i][0];\r\n        lines = doc.splitTextToSize(answer, (pdfInMM-lMargin-rMargin));\r\n        // Creates a new page for every 10 answers\r\n        if (i % 10 == 0 && i != 0) {\r\n          doc.addPage();\r\n          j = 30;\r\n        }\r\n        doc.text(lMargin, j, lines);\r\n        j = j + 10;\r\n      }\r\n      doc.save(\"Answer.pdf\");\r\n    } else {\r\n      console.log(\"Please select a question\")\r\n    }\r\n  }\r\n\r\n  exportFeedback = async () => {\r\n    // Retrieve all comments\r\n    let comments = await feedback.methods.getComments().call();\r\n    // Initialise the PDF document to write\r\n    let lMargin=15; //left margin in mm\r\n    let rMargin=15; //right margin in mm\r\n    let pdfInMM=210;  // width of A4 in mm\r\n    let doc = new jsPDF(\"p\",\"mm\",\"a4\");\r\n\r\n    // Writing to the PDF document\r\n    for (let i = 0; i < comments.length; i++) {\r\n      let lines = doc.splitTextToSize(comments[i], (pdfInMM-lMargin-rMargin));\r\n      doc.text(lMargin,20,lines);\r\n      if (i % 10 == 0 && i != 0) {\r\n        doc.addPage();\r\n      }\r\n    }\r\n    doc.save(\"Comments.pdf\");\r\n  }\r\n\r\n  getUserTableData = () => {\r\n    return this.props.ethWalletEmailAddressBinding.map((item, index) => {\r\n      return <Table.Row key={index}>\r\n        <Table.Cell>{item.ethWallet}</Table.Cell>\r\n        <Table.Cell>{item.emailAddress}</Table.Cell>\r\n        <Table.Cell>{item.status ? \"Blacklisted\" : \"Active\"}</Table.Cell>\r\n        <Table.Cell>\r\n        {\r\n          item.status ? <Button onClick={() => this.unblacklist(item.emailAddress)} color=\"green\" size=\"mini\" icon>\r\n            <Icon name=\"undo\" />\r\n          </Button> :\r\n          <Button onClick={() => this.blacklist(item.emailAddress)} color=\"red\" size=\"mini\" icon>\r\n            <Icon name=\"delete\" />\r\n          </Button>\r\n        }\r\n        </Table.Cell>\r\n      </Table.Row>;\r\n    })\r\n  }\r\n\r\n  blacklist = async (emailAddress) => {\r\n    this.setState({ loading: true, errorMessage: ''});\r\n    try {\r\n        const accounts = await web3.eth.getAccounts();\r\n        // Create a new post\r\n        await credentials.methods\r\n        .blacklistEmail(emailAddress)\r\n        .send({\r\n            from: accounts[0]\r\n        });\r\n        Router.pushRoute('/admin'); // Automatic redirect the user.\r\n    } catch (err) {\r\n        this.setState({ errorMessage: err.message });\r\n        this.setState({ error: true})\r\n    }\r\n    this.setState({ loading: false})\r\n  }\r\n\r\n  unblacklist = async (emailAddress) => {\r\n    this.setState({ loading: true, errorMessage: ''});\r\n    try {\r\n        const accounts = await web3.eth.getAccounts();\r\n        // Create a new post\r\n        await credentials.methods\r\n        .unBlacklistEmail(emailAddress)\r\n        .send({\r\n            from: accounts[0]\r\n        });\r\n    } catch (err) {\r\n        this.setState({ errorMessage: err.message });\r\n        this.setState({ error: true})\r\n    }\r\n    this.setState({ loading: false})\r\n  }\r\n\r\n  getQuestionTableData = () => {\r\n    return this.props.questionAddressTitleBinding.map((item, index) => {\r\n      return <Table.Row key={index}>\r\n        <Table.Cell>{item.questionAddress}</Table.Cell>\r\n        <Table.Cell>{item.title}</Table.Cell>\r\n        <Table.Cell>{item.flagged ? \"Flagged\" : \"Active\"}</Table.Cell>\r\n        <Table.Cell>\r\n        {\r\n          item.flagged ? \"No Actions For Flagged Question\" :\r\n          <Button onClick={() => this.deleteQuestion(item.questionAddress)} color=\"red\" size=\"mini\" icon>\r\n            <Icon name=\"delete\" />\r\n          </Button>\r\n        }\r\n        </Table.Cell>\r\n      </Table.Row>;\r\n    })\r\n  }\r\n\r\n  deleteQuestion = async (questionAddress, title) => {\r\n    this.setState({ loading: true, errorMessage: ''});\r\n    try {\r\n        const accounts = await web3.eth.getAccounts();\r\n        let logTransaction = logging(\"Deleted Question Titled: \" + title);\r\n        await factory.methods\r\n        .deleteQuestion(questionAddress, logTransaction)\r\n        .send({\r\n            from: accounts[0]\r\n        });\r\n        Router.pushRoute('/admin'); // Automatic redirect the user.\r\n    } catch (err) {\r\n        this.setState({ errorMessage: err.message });\r\n        this.setState({ error: true})\r\n    }\r\n    this.setState({ loading: false})\r\n  }\r\n\r\n  toggleUserTableVisibility = () =>\r\n    this.setState((prevState) => ({ userVisible: !prevState.userVisible }))\r\n\r\n  toggleQuestionTableVisibility = () =>\r\n    this.setState((prevState) => ({ questionVisible: !prevState.questionVisible }))\r\n\r\n  render() {\r\n    return (\r\n      <Layout accountType={this.props.accountType}>\r\n        <Container style={{height:\"100vh\"}}>\r\n          <Divider hidden/>\r\n\r\n          <Segment raised textAlign='left'>\r\n            <Header as='h2' textAlign='center'>\r\n              Exporting Questions & Answers As PDF\r\n            </Header>\r\n          </Segment>\r\n          <Divider hidden/>\r\n          <p style={{fontSize:'16px'}}>\r\n            Select the question to export the question and it's corresponding answers\r\n          </p>\r\n          <Dropdown clearable\r\n                    options={this.state.questionOptions}\r\n                    selection\r\n                    placeholder='Select the question to export'\r\n                    value={this.state.questionNumber}\r\n                    onChange={ (e, { value }) => this.setState({ questionNumber: value })}/>\r\n          <Button icon labelPosition='left' color=\"red\" onClick={this.export} style={{left:\"20px\"}}>\r\n            <Icon name='download'/>\r\n            Export As PDF\r\n          </Button>\r\n          <Divider hidden/>\r\n\r\n          <Segment raised textAlign='left'>\r\n            <Header as='h2' textAlign='center'>\r\n              Exporting Feedback\r\n            </Header>\r\n          </Segment>\r\n          <Button icon labelPosition='left' color=\"red\" onClick={this.exportFeedback} style={{left:\"20px\"}}>\r\n            <Icon name='download'/>\r\n            Export As PDF\r\n          </Button>\r\n\r\n          <Segment raised textAlign='center'>\r\n            <b style={{fontSize:\"20px\"}}>Blacklisting User</b>\r\n            <Popup\r\n              trigger={\r\n                <Button\r\n                  icon={this.state.userVisible ? \"minus\" : \"plus\"}\r\n                  onClick={this.toggleUserTableVisibility}\r\n                  floated=\"right\"\r\n                  size=\"mini\"\r\n                />\r\n              }\r\n              content={\"Click to expand/close\"}\r\n              inverted/>\r\n          </Segment>\r\n          <Divider hidden/>\r\n\r\n\r\n          <Transition visible={this.state.userVisible} animation='scale' duration={500}>\r\n            <Segment>\r\n              <Header>Registered Users</Header>\r\n                <Table compact celled>\r\n                  <Table.Header fullWidth>\r\n                    <Table.Row>\r\n                      <Table.HeaderCell width={2}>Ethereum Wallet</Table.HeaderCell>\r\n                      <Table.HeaderCell width={3}>Email</Table.HeaderCell>\r\n                      <Table.HeaderCell width={2}>Status</Table.HeaderCell>\r\n                      <Table.HeaderCell width={2}>Actions</Table.HeaderCell>\r\n                    </Table.Row>\r\n                  </Table.Header>\r\n                  <Table.Body>{this.getUserTableData()}</Table.Body>\r\n                  <Table.Footer fullWidth>\r\n                    <Table.Row>\r\n                      <Table.HeaderCell colSpan={5} />\r\n                    </Table.Row>\r\n                  </Table.Footer>\r\n                </Table>\r\n            </Segment>\r\n          </Transition>\r\n          <Divider hidden/>\r\n          <Segment raised textAlign='center'>\r\n            <b style={{fontSize:\"20px\"}}>Removing Question</b>\r\n            <Popup\r\n              trigger={\r\n                <Button\r\n                  icon={this.state.questionVisible ? \"minus\" : \"plus\"}\r\n                  onClick={this.toggleQuestionTableVisibility}\r\n                  floated=\"right\"\r\n                  size=\"mini\"\r\n                />\r\n              }\r\n              content={\"Click to expand/close\"}\r\n              inverted/>\r\n          </Segment>\r\n          <Divider hidden/>\r\n\r\n          <Transition visible={this.state.questionVisible} animation='scale' duration={500}>\r\n            <Segment>\r\n              <Header>Questions Posted</Header>\r\n                <Table compact celled>\r\n                  <Table.Header fullWidth>\r\n                    <Table.Row>\r\n                      <Table.HeaderCell width={2}>Question Address</Table.HeaderCell>\r\n                      <Table.HeaderCell width={3}>Title</Table.HeaderCell>\r\n                      <Table.HeaderCell width={2}>Status</Table.HeaderCell>\r\n                      <Table.HeaderCell width={2}>Actions</Table.HeaderCell>\r\n                    </Table.Row>\r\n                  </Table.Header>\r\n                  <Table.Body>{this.getQuestionTableData()}</Table.Body>\r\n                  <Table.Footer fullWidth>\r\n                    <Table.Row>\r\n                      <Table.HeaderCell colSpan={5} />\r\n                    </Table.Row>\r\n                  </Table.Footer>\r\n                </Table>\r\n            </Segment>\r\n          </Transition>\r\n          <Divider hidden/>\r\n\r\n          <Modal open={this.state.loading} basic size='small'>\r\n            <Header content='Performing Admin Actions' />\r\n            <Modal.Content>\r\n              <p>\r\n                Please Confirm the MetaMask Transaction Request. This process might take awhile.\r\n              </p>\r\n              <Loader active inline=\"centered\">\r\n                Loading\r\n              </Loader>\r\n            </Modal.Content>\r\n          </Modal>\r\n          <Message error header=\"Oops!\" content={this.state.errorMessage} hidden={!this.state.error}/>\r\n        </Container>\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AdminPage;\r\n"]},"metadata":{},"sourceType":"module"}