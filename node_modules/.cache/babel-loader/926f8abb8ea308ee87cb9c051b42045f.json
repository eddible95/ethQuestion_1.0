{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { Form, Button, Input, Message, Dropdown, Header, Segment } from 'semantic-ui-react';\nimport Layout from '../components/Layout';\nimport factory from '../ethereum/factory'; // with lower f because it is an instance of a factory\n\nimport web3 from '../ethereum/web3';\nimport { Router } from '../routes';\n\nrequire('dotenv').config({\n  path: '../.env'\n});\n\nrequire('es6-promise').polyfill();\n\nrequire('isomorphic-fetch');\n\nvar NewPost =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NewPost, _Component);\n\n  function NewPost() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, NewPost);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NewPost)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      postContent: '',\n      errorMessage: '',\n      loading: false,\n      cryptoKittyID: _this.props.userCats[0] !== undefined ? _this.props.cryptoKittiesID[0].value : {},\n      userWallet: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\",\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(event) {\n        var d, month;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event.preventDefault(); // prevent default submission of the form to the backend (the browser does that automatically)\n\n                _this.setState({\n                  loading: true,\n                  errorMessage: ''\n                });\n\n                d = new Date();\n                month = d.getMonth() + 1;\n                _context.prev = 4;\n                _context.next = 7;\n                return factory.methods.createPost(_this.state.postContent, d.getDate(), month, d.getFullYear(), _this.state.cryptoKittyID).send({\n                  from: _this.props.accounts[0]\n                });\n\n              case 7:\n                Router.pushRoute('/'); // Automatic redirect the user.\n\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](4);\n\n                _this.setState({\n                  errorMessage: _context.t0.message\n                });\n\n              case 13:\n                _this.setState({\n                  loading: false\n                });\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[4, 10]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    return _this;\n  }\n\n  _createClass(NewPost, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.props.userCats[0] !== undefined) {\n        return React.createElement(Layout, null, React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"Create a New Post\"), React.createElement(\"span\", null, \"Post created by\", ' ', React.createElement(Dropdown, {\n          value: this.state.cryptoKittyID,\n          onChange: function onChange(event, data) {\n            return _this2.setState({\n              cryptoKittyID: data.value\n            });\n          },\n          inline: true,\n          options: this.props.cryptoKittiesID\n        })), React.createElement(Form, {\n          onSubmit: this.onSubmit,\n          error: !!this.state.errorMessage,\n          style: {\n            marginTop: '10px'\n          }\n        }, React.createElement(Form.Field, null, React.createElement(\"label\", null, \"Content\"), React.createElement(Input, {\n          value: this.state.postContent,\n          onChange: function onChange(event) {\n            return _this2.setState({\n              postContent: event.target.value\n            });\n          },\n          maxLength: \"200\",\n          label: \"\".concat(this.state.postContent.length, \"/200\"),\n          labelPosition: \"right\"\n        })), React.createElement(Message, {\n          error: true,\n          header: \"Oops!\",\n          content: this.state.errorMessage\n        }), React.createElement(Button, {\n          loading: this.state.loading,\n          primary: true\n        }, \"Create!\")));\n      } else {\n        return React.createElement(Layout, null, React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"Create a New Post\"), React.createElement(Segment, {\n          placeholder: true\n        }, React.createElement(Header, {\n          icon: true\n        }, \"Go adopt a cat!\"), React.createElement(\"a\", {\n          href: \"https://www.cryptokitties.co\"\n        }, React.createElement(Button, {\n          content: \"cryptokitties.co\",\n          primary: true\n        }))));\n      }\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var accounts, url, urlR, userAccount, response, userCats, cryptoKittiesID;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context2.sent;\n                // URL with an address for example (owns CryptoKitties):\n                url = 'https://public.api.cryptokitties.co/v1/kitties?owner_wallet_address=0xc147FC4Af048b8f9CE9E1296468dF9417938629b';\n                urlR = 'https://public.api.cryptokitties.co/v1/kitties?owner_wallet_address=' + accounts[0];\n                userAccount = accounts[0];\n                /** Get the CryptoKitties of the current user.\r\n                    To get an account that has CryptoKitties use url instead of urlR **/\n\n                _context2.next = 8;\n                return fetch(url, {\n                  headers: {\n                    \"Content-Type\": \"application/json\",\n                    'x-api-token': process.env.API_TOKEN\n                  }\n                }).then(function (res) {\n                  return res.json();\n                });\n\n              case 8:\n                response = _context2.sent;\n                userCats = [];\n                cryptoKittiesID = [];\n\n                if (response.kitties[0] !== undefined) {\n                  userCats = response.kitties;\n                  cryptoKittiesID = userCats.map(function (cat) {\n                    return {\n                      text: cat.name,\n                      value: cat.id,\n                      image: {\n                        avatar: true,\n                        src: cat.image_url_png\n                      }\n                    };\n                  });\n                } else {\n                  console.log('There are no CryptoKitties');\n                }\n\n                return _context2.abrupt(\"return\", {\n                  userCats: userCats,\n                  userAccount: userAccount,\n                  accounts: accounts,\n                  cryptoKittiesID: cryptoKittiesID\n                });\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getInitialProps() {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return NewPost;\n}(Component);\n\nexport default NewPost;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\new.js"],"names":["React","Component","Form","Button","Input","Message","Dropdown","Header","Segment","Layout","factory","web3","Router","require","config","path","polyfill","NewPost","postContent","errorMessage","loading","cryptoKittyID","props","userCats","undefined","cryptoKittiesID","value","userWallet","event","preventDefault","setState","d","Date","month","getMonth","methods","createPost","state","getDate","getFullYear","send","from","accounts","pushRoute","message","data","onSubmit","marginTop","target","length","eth","getAccounts","url","urlR","userAccount","fetch","headers","process","env","API_TOKEN","then","res","json","response","kitties","map","cat","text","name","id","image","avatar","src","image_url_png","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Form, Button, Input, Message, Dropdown, Header, Segment } from 'semantic-ui-react';\r\nimport Layout from '../components/Layout';\r\nimport factory from '../ethereum/factory'; // with lower f because it is an instance of a factory\r\nimport web3 from '../ethereum/web3';\r\nimport { Router } from '../routes';\r\n\r\n\r\nrequire('dotenv').config({ path: '../.env'});\r\nrequire('es6-promise').polyfill();\r\nrequire('isomorphic-fetch');\r\n\r\nclass NewPost extends Component {\r\n    state = {\r\n        postContent: '',\r\n        errorMessage: '',\r\n        loading: false,\r\n        cryptoKittyID: (this.props.userCats[0] !== undefined) ? this.props.cryptoKittiesID[0].value : {},\r\n        userWallet: ''\r\n    };\r\n\r\n    static async getInitialProps () {\r\n        const accounts = await web3.eth.getAccounts();\r\n        // URL with an address for example (owns CryptoKitties):\r\n        const url = 'https://public.api.cryptokitties.co/v1/kitties?owner_wallet_address=0xc147FC4Af048b8f9CE9E1296468dF9417938629b';\r\n        const urlR = 'https://public.api.cryptokitties.co/v1/kitties?owner_wallet_address=' + accounts[0];\r\n\r\n        const userAccount = accounts[0];\r\n\r\n        /** Get the CryptoKitties of the current user.\r\n            To get an account that has CryptoKitties use url instead of urlR **/\r\n        const response = await fetch(url, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                'x-api-token': process.env.API_TOKEN\r\n            }\r\n        }).then(res => res.json());\r\n        let userCats = [];\r\n        let cryptoKittiesID = [];\r\n\r\n        if(response.kitties[0] !== undefined){\r\n            userCats = response.kitties;\r\n            cryptoKittiesID = userCats.map((cat) => {\r\n                return {\r\n                    text: cat.name,\r\n                    value: cat.id,\r\n                    image: { avatar: true, src: cat.image_url_png }\r\n                }\r\n            });\r\n        } else {\r\n            console.log('There are no CryptoKitties');\r\n        }\r\n\r\n        return { userCats, userAccount, accounts, cryptoKittiesID }\r\n    }\r\n\r\n    onSubmit = async event => {\r\n        event.preventDefault(); // prevent default submission of the form to the backend (the browser does that automatically)\r\n\r\n        this.setState({ loading: true, errorMessage: '' });\r\n\r\n        let d = new Date();\r\n        let month = d.getMonth()+1;\r\n\r\n        try {\r\n            // Create a new post\r\n            await factory.methods\r\n            .createPost(this.state.postContent, d.getDate(), month, d.getFullYear(), this.state.cryptoKittyID)\r\n            .send({\r\n                from: this.props.accounts[0]\r\n            });\r\n\r\n            Router.pushRoute('/'); // Automatic redirect the user.\r\n        } catch (err) {\r\n            this.setState({ errorMessage: err.message });\r\n        }\r\n\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    render() {\r\n        if ( this.props.userCats[0] !== undefined ){\r\n            return (\r\n                <Layout>\r\n                    <Header as='h2' textAlign='center'>\r\n                        Create a New Post\r\n                    </Header>\r\n                    <span>Post created by{' '}\r\n                        <Dropdown\r\n                            value={this.state.cryptoKittyID}\r\n                            onChange={(event, data) => this.setState({ cryptoKittyID: data.value })}\r\n                            inline\r\n                            options={this.props.cryptoKittiesID}\r\n                        />\r\n                </span>\r\n                    <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage} style={{ marginTop: '10px' }}>\r\n                        <Form.Field>\r\n                            <label>Content</label>\r\n                            <Input\r\n                                value={this.state.postContent}\r\n                                onChange={event => this.setState({ postContent: event.target.value })}\r\n                                maxLength=\"200\"\r\n                                label={`${this.state.postContent.length}/200`}\r\n                                labelPosition=\"right\"\r\n                            />\r\n                        </Form.Field>\r\n                        <Message error header=\"Oops!\" content={this.state.errorMessage} />\r\n                        <Button loading={this.state.loading} primary>Create!</Button>\r\n                    </Form>\r\n                </Layout>\r\n            );\r\n        } else {\r\n            return (\r\n                <Layout>\r\n                    <Header as='h2' textAlign='center'>\r\n                        Create a New Post\r\n                    </Header>\r\n                    <Segment placeholder>\r\n                        <Header icon>\r\n                            Go adopt a cat!\r\n                        </Header>\r\n                        <a href=\"https://www.cryptokitties.co\">\r\n                            <Button content=\"cryptokitties.co\" primary />\r\n                        </a>\r\n                    </Segment>\r\n                </Layout>\r\n            );\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default NewPost;\r\n"]},"metadata":{},"sourceType":"module"}