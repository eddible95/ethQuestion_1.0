{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React, { Component } from 'react';\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport { Segment, Container, Divider, Header, Modal, Button, Loader, Embed } from 'semantic-ui-react';\nimport Layout from '../components/Layout';\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\nimport Profile from '../ethereum/profile';\nimport cookies from 'next-cookies';\n\nvar LeaderboardPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LeaderboardPage, _Component);\n\n  function LeaderboardPage(props) {\n    var _this;\n\n    _classCallCheck(this, LeaderboardPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LeaderboardPage).call(this, props));\n    _this.state = {\n      login: false,\n      loading: true,\n      accountType: null\n    };\n    return _this;\n  }\n\n  _createClass(LeaderboardPage, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var login, profileAddress, profile, accountType;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(typeof web3 === 'undefined')) {\n                  _context.next = 3;\n                  break;\n                }\n\n                this.setState({\n                  loading: false\n                });\n                return _context.abrupt(\"return\");\n\n              case 3:\n                login = false;\n\n                if (!this.props.isLogin) {\n                  _context.next = 16;\n                  break;\n                }\n\n                login = true; // Get Account Type\n\n                _context.next = 8;\n                return factory.methods.getProfile(this.props.account).call();\n\n              case 8:\n                profileAddress = _context.sent;\n                profile = Profile(profileAddress);\n                _context.next = 12;\n                return profile.methods.getAccountType().call();\n\n              case 12:\n                accountType = _context.sent;\n                accountType == 0 ? accountType = \"Admin\" : accountType = \"User\";\n                this.setState({\n                  login: login\n                });\n                this.setState({\n                  accountType: accountType\n                });\n\n              case 16:\n                this.setState({\n                  loading: false\n                });\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.login) {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType,\n          page: 'About'\n        }, React.createElement(Container, null, React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Segment, {\n          raised: true,\n          textAlign: \"left\"\n        }, React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"Current Leaderboard Standings\")), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, \"Points can be earned through the following ways:\"), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, React.createElement(\"b\", null, \"When you ask a question:\"), \" 5 Points\"), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, React.createElement(\"b\", null, \"When you are rewarded for your answer:\"), \" 4 Points\"), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, React.createElement(\"b\", null, \"When you submit an answer:\"), \" 2 Points\"), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, React.createElement(\"b\", null, \"When the answer you approved gets awarded:\"), \" 2 Points\"), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, React.createElement(\"b\", null, \"Approving An Answer:\"), \" 1 Point\"), React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Segment, {\n          raised: true\n        }, React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"System Functionality\")), React.createElement(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, \"Ask New Question\"), React.createElement(Divider, null), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, \"Access using \\\"\", React.createElement(\"b\", null, \"Ask Question\"), \"\\\" tab above. Each creation of new question requires at least\", React.createElement(\"b\", null, \" 1 EQT\"), \" as the reward. In the event that there are no answers provided within the duration specified, the reward will be returned to the owner of the question.\"), React.createElement(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, \"Provide Answer To Question\"), React.createElement(Divider, null), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, \"All questions posted can be view from the Home Page access via \", React.createElement(\"b\", null, \"\\\"Home\\\"\"), \" tab above. Clicking on the question title will provide additional details on the question as well as providing the form to submit an answer for the question. No EQT are required for answering of question.\"), React.createElement(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, \"Approving Of Answers\"), React.createElement(Divider, null), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, \"When the question is in the \", React.createElement(\"b\", null, \"\\\"Voting Phase\\\"\"), \", all users can view all answers that are submitted and approve each answer depending on its relevance and helpfulness. Each approval requires \", React.createElement(\"b\", null, \"1 EQT\"), \". Each user can only\", React.createElement(\"b\", null, \" approve each answer once\"), \". After the \\\"Voting Phase\\\", users who approved the answer with the highest approvals will have their \", React.createElement(\"b\", null, \"1 EQT\"), \" returned. Additionally, EQT from users who approve other answers would be distributed among users who approved the answer with the highest approvals.\"), React.createElement(Segment, {\n          raised: true\n        }, React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"User Guide\")), React.createElement(Embed, {\n          id: \"pdRTt2QabOg\",\n          source: \"youtube\"\n        })));\n      } else {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(AccountIssueModal, {\n          loading: this.state.loading,\n          login: this.state.login\n        }));\n      }\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(props) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", {\n                  isLogin: cookies(props).login || '',\n                  account: cookies(props).wallet || ''\n                });\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return LeaderboardPage;\n}(Component);\n\nexport default LeaderboardPage;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion_1.0\\pages\\leaderboard.js"],"names":["React","Component","AccountIssueModal","Segment","Container","Divider","Header","Modal","Button","Loader","Embed","Layout","web3","factory","Profile","cookies","LeaderboardPage","props","state","login","loading","accountType","setState","isLogin","methods","getProfile","account","call","profileAddress","profile","getAccountType","fontSize","wallet"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport AccountIssueModal from '../components/AccountIssueModal';\r\nimport { Segment, Container, Divider, Header, Modal, Button, Loader, Embed } from 'semantic-ui-react';\r\nimport Layout from '../components/Layout';\r\nimport web3 from '../ethereum/web3';\r\nimport factory from '../ethereum/factory';\r\nimport Profile from '../ethereum/profile';\r\nimport cookies from 'next-cookies';\r\n\r\nclass LeaderboardPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      login: false,\r\n      loading: true,\r\n      accountType: null\r\n    };\r\n  }\r\n\r\n  static async getInitialProps(props) {\r\n    return { isLogin: cookies(props).login || '' , account: cookies(props).wallet || '' };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (typeof web3 === 'undefined') {\r\n      this.setState({ loading: false })\r\n      return\r\n    }\r\n    let login = false;\r\n    if (this.props.isLogin) {\r\n      login = true;\r\n      // Get Account Type\r\n      let profileAddress = await factory.methods.getProfile(this.props.account).call();\r\n      let profile = Profile(profileAddress);\r\n      let accountType = await profile.methods.getAccountType().call();\r\n      accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"\r\n      this.setState( { login: login });\r\n      this.setState( { accountType: accountType });\r\n    }\r\n    this.setState( { loading: false });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.login) {\r\n      return (\r\n        <Layout accountType={this.state.accountType} page={'About'}>\r\n          <Container>\r\n            <Divider hidden/>\r\n            <Segment raised textAlign='left'>\r\n              <Header as='h2' textAlign='center'>\r\n                Current Leaderboard Standings\r\n              </Header>\r\n            </Segment>\r\n            <p style={{fontSize:'16px'}}>\r\n              Points can be earned through the following ways:\r\n            </p>\r\n            <p style={{fontSize:'16px'}}><b>When you ask a question:</b> 5 Points</p>\r\n            <p style={{fontSize:'16px'}}><b>When you are rewarded for your answer:</b> 4 Points</p>\r\n            <p style={{fontSize:'16px'}}><b>When you submit an answer:</b> 2 Points</p>\r\n            <p style={{fontSize:'16px'}}><b>When the answer you approved gets awarded:</b> 2 Points</p>\r\n            <p style={{fontSize:'16px'}}><b>Approving An Answer:</b> 1 Point</p>\r\n            <Divider hidden/>\r\n\r\n            <Segment raised>\r\n              <Header as='h2'textAlign='center'>\r\n                System Functionality\r\n              </Header>\r\n            </Segment>\r\n            <Header as='h3' textAlign='left'>\r\n              Ask New Question\r\n            </Header>\r\n            <Divider />\r\n            <p style={{fontSize:'16px'}}>\r\n              Access using \"<b>Ask Question</b>\" tab above. Each creation of new question requires at least\r\n              <b> 1 EQT</b> as the reward. In the event that there are no answers provided within the duration specified,\r\n              the reward will be returned to the owner of the question.\r\n            </p>\r\n            <Header as='h3' textAlign='left'>\r\n              Provide Answer To Question\r\n            </Header>\r\n            <Divider />\r\n            <p style={{fontSize:'16px'}}>\r\n              All questions posted can be view from the Home Page access via <b>\"Home\"</b> tab above. Clicking on the question title\r\n              will provide additional details on the question as well as providing the form to submit an answer for the question. No\r\n              EQT are required for answering of question.\r\n            </p>\r\n            <Header as='h3' textAlign='left'>\r\n              Approving Of Answers\r\n            </Header>\r\n            <Divider />\r\n            <p style={{fontSize:'16px'}}>\r\n              When the question is in the <b>\"Voting Phase\"</b>, all users can view all answers that are submitted and approve\r\n              each answer depending on its relevance and helpfulness. Each approval requires <b>1 EQT</b>. Each user can only\r\n              <b> approve each answer once</b>. After the \"Voting Phase\", users who approved the answer with the highest approvals\r\n              will have their <b>1 EQT</b> returned. Additionally, EQT from users who approve other answers would be distributed among\r\n              users who approved the answer with the highest approvals.\r\n            </p>\r\n            <Segment raised>\r\n              <Header as='h2' textAlign='center'>\r\n                User Guide\r\n              </Header>\r\n            </Segment>\r\n            <Embed\r\n              id='pdRTt2QabOg'\r\n              source='youtube'\r\n            />\r\n          </Container>\r\n        </Layout>\r\n      )\r\n    } else {\r\n      return (\r\n        <Layout accountType={this.state.accountType}>\r\n          <AccountIssueModal loading={this.state.loading} login={this.state.login} />\r\n        </Layout>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default LeaderboardPage;\r\n"]},"metadata":{},"sourceType":"module"}