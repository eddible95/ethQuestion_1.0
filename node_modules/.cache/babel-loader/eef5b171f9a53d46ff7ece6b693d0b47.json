{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport MobileDetect from 'mobile-detect';\nimport _ from 'lodash';\nimport { Button, Header, Table, Statistic, Rating, Grid, Loader, List, Divider, Container, Icon, Label, Progress, Segment, Modal, Responsive, Checkbox, Dropdown } from 'semantic-ui-react';\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport { getWidthFactory } from '../utils/device';\nimport factory from '../ethereum/factory';\nimport credentials from '../ethereum/credentials';\nimport Question from '../ethereum/question';\nimport Profile from '../ethereum/profile';\nimport Layout from '../components/Layout';\nimport { Link, Router } from '../routes';\nimport web3 from '../ethereum/web3';\nimport { search, checkLogin, sortingQuestions } from '../utils/functions';\n\nvar HomePage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(HomePage, _Component);\n\n  function HomePage(props) {\n    var _this;\n\n    _classCallCheck(this, HomePage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HomePage).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSort\", function (clickedColumn) {\n      return function () {\n        var _this$state = _this.state,\n            column = _this$state.column,\n            leaderboardData = _this$state.leaderboardData,\n            direction = _this$state.direction;\n\n        if (column !== clickedColumn) {\n          _this.setState({\n            column: clickedColumn,\n            leaderboardData: _.sortBy(leaderboardData, [clickedColumn]),\n            direction: 'ascending'\n          });\n\n          return;\n        }\n\n        _this.setState({\n          leaderboardData: leaderboardData.reverse(),\n          direction: direction === 'ascending' ? 'descending' : 'ascending'\n        });\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (e, _ref) {\n      var value = _ref.value;\n      return _this.setState({\n        sortBy: value\n      });\n    });\n\n    _this.state = {\n      login: false,\n      accountType: null,\n      column: null,\n      direction: null,\n      leaderboardData: [],\n      tags: [],\n      topTags: [],\n      loading: true,\n      sortBy: null,\n      data: [],\n      summaries: [],\n      questionLimit: 30,\n      questionLimitChoice: [],\n      isSSR: false\n    };\n    return _this;\n  }\n\n  _createClass(HomePage, [{\n    key: \"componentDidUpdate\",\n    value: function () {\n      var _componentDidUpdate = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(prevProps) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.props != prevProps) {\n                  this.fetchQuestionData();\n                }\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidUpdate(_x) {\n        return _componentDidUpdate.apply(this, arguments);\n      }\n\n      return componentDidUpdate;\n    }()\n  }, {\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var login, accounts, profileAddress, profile, accountType, ethWallet, accountPointMapping, i, points;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(typeof web3 === 'undefined')) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                this.setState({\n                  loading: false\n                });\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                login = false; // Retrieve the Ethereum Account from MetaMask\n\n                _context2.next = 6;\n                return web3.eth.getAccounts();\n\n              case 6:\n                accounts = _context2.sent;\n                _context2.next = 9;\n                return checkLogin(accounts[0]);\n\n              case 9:\n                if (!_context2.sent) {\n                  _context2.next = 41;\n                  break;\n                }\n\n                login = true; // Get Account Type\n\n                _context2.next = 13;\n                return factory.methods.getProfile(accounts[0]).call();\n\n              case 13:\n                profileAddress = _context2.sent;\n                profile = Profile(profileAddress);\n                _context2.next = 17;\n                return profile.methods.getAccountType().call();\n\n              case 17:\n                accountType = _context2.sent;\n                accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"; // Retireve an array of addresses of ethWallets registered\n\n                _context2.next = 21;\n                return factory.methods.getEthWallets().call();\n\n              case 21:\n                ethWallet = _context2.sent;\n                accountPointMapping = [];\n                i = 0;\n\n              case 24:\n                if (!(i < ethWallet.length)) {\n                  _context2.next = 36;\n                  break;\n                }\n\n                _context2.next = 27;\n                return factory.methods.getProfile(ethWallet[i]).call();\n\n              case 27:\n                profileAddress = _context2.sent;\n                profile = Profile(profileAddress);\n                _context2.next = 31;\n                return profile.methods.getPoints().call();\n\n              case 31:\n                points = _context2.sent;\n                accountPointMapping.push({\n                  account: ethWallet[i],\n                  points: _parseInt(points)\n                });\n\n              case 33:\n                i++;\n                _context2.next = 24;\n                break;\n\n              case 36:\n                _context2.next = 38;\n                return this.fetchQuestionData();\n\n              case 38:\n                // Set the states required for the Leaderboard and ensure it is descending by default\n                this.setState({\n                  leaderboardData: _.sortBy(accountPointMapping, ['points']).reverse()\n                });\n                this.setState({\n                  login: login\n                });\n                this.setState({\n                  accountType: accountType\n                });\n\n              case 41:\n                this.setState({\n                  loading: false\n                });\n\n              case 42:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"fetchQuestionData\",\n    value: function () {\n      var _fetchQuestionData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var deployedQuestions, deployedQuestionsCount, summaries, searchItem, i, question, summary, answerList, questionLimitChoice, choice, _i, tags, sortedTags, tagList;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return factory.methods.getDeployedQuestions().call();\n\n              case 2:\n                deployedQuestions = _context3.sent;\n                deployedQuestionsCount = deployedQuestions.length; // Retrieve the summaries of all deployed questions\n\n                summaries = [];\n\n                if (!(this.props.queryValue != undefined && this.props.queryValue != 'favicon.ico')) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                searchItem = decodeURIComponent(this.props.queryValue);\n                _context3.next = 9;\n                return search(searchItem, deployedQuestions);\n\n              case 9:\n                deployedQuestions = _context3.sent;\n                deployedQuestionsCount = deployedQuestions.length;\n\n              case 11:\n                i = 0;\n\n              case 12:\n                if (!(i < deployedQuestionsCount)) {\n                  _context3.next = 27;\n                  break;\n                }\n\n                question = Question(deployedQuestions[i]);\n                _context3.next = 16;\n                return question.methods.getSummary().call();\n\n              case 16:\n                summary = _context3.sent;\n\n                if (summary[9]) {\n                  _context3.next = 24;\n                  break;\n                }\n\n                summaries[i] = summary;\n                _context3.next = 21;\n                return question.methods.getAnswerList().call();\n\n              case 21:\n                answerList = _context3.sent;\n                summaries[i][10] = answerList.length;\n                summaries[i][11] = deployedQuestions[i];\n\n              case 24:\n                i++;\n                _context3.next = 12;\n                break;\n\n              case 27:\n                summaries = summaries.reverse(); // Displays questions in interval of 30\n\n                questionLimitChoice = [30];\n                choice = Math.floor(summaries.length / 30);\n\n                for (_i = 1; _i <= choice; _i++) {\n                  questionLimitChoice.push(30 * (_i + 1));\n                } // Get the top 10 used tags\n\n\n                tags = {};\n                summaries = summaries.slice(0, this.state.questionLimit);\n                summaries.forEach(function (summary) {\n                  summary[8].forEach(function (tag) {\n                    if (tags[tag] == undefined) {\n                      tags[tag] = 1;\n                    } else {\n                      tags[tag] = tags[tag] + 1;\n                    }\n                  });\n                });\n                sortedTags = _Object$keys(tags).map(function (key) {\n                  return [key, tags[key]];\n                }); // Sort the array based on the second element\n\n                sortedTags.sort(function (first, second) {\n                  return second[1] - first[1];\n                }); // Array of all tags\n\n                tagList = [];\n                sortedTags.forEach(function (tag) {\n                  tagList.push(tag[0]);\n                }); // Array with only the first 10 items\n\n                tags = [];\n                sortedTags.slice(0, 10).forEach(function (tag) {\n                  tags.push(tag[0]);\n                });\n                this.setState({\n                  topTags: tags\n                });\n                this.setState({\n                  tags: tagList\n                });\n                this.setState({\n                  summaries: summaries\n                });\n                this.setState({\n                  questionLimitChoice: questionLimitChoice\n                });\n\n              case 44:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function fetchQuestionData() {\n        return _fetchQuestionData.apply(this, arguments);\n      }\n\n      return fetchQuestionData;\n    }() // Function to handle the sorting of leaderboard\n\n  }, {\n    key: \"renderQuestionHeader\",\n    value: function renderQuestionHeader() {\n      return React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        width: 2\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Current Phase\")), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        width: 2\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Answers Submitted\")), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        width: 2\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Reward\")), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\"\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Question Title\")));\n    } // Renders out the list of question\n\n  }, {\n    key: \"renderQuestionList\",\n    value: function renderQuestionList() {\n      var _this2 = this;\n\n      var summaries = this.state.summaries;\n      summaries = sortingQuestions(summaries, this.state.sortBy);\n      return summaries.map(function (summary, index) {\n        var questionState = summary[4];\n        var tagList = summary[8];\n        return React.createElement(Table.Row, {\n          key: index\n        }, React.createElement(Table.Cell, {\n          textAlign: \"center\",\n          width: 2\n        }, questionState == 0 ? React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: 'red'\n          }\n        }, \" Answering\")), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"Phase\"))) : questionState == 1 ? React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#C9C633'\n          }\n        }, \" Voting\")), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"Phase\"))) : React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#10EE44'\n          }\n        }, \" Rewarded\")), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"Phase\")))), React.createElement(Table.Cell, {\n          textAlign: \"center\",\n          width: 2\n        }, React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, summary[10])), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"answer(s)\")))), React.createElement(Table.Cell, {\n          textAlign: \"center\",\n          width: 2\n        }, React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, summary[2] * 1e-4)), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"EQT(s)\")))), React.createElement(Table.Cell, {\n          textAlign: \"left\"\n        }, React.createElement(Grid.Row, {\n          textAlign: \"left\"\n        }, React.createElement(\"span\", {\n          style: {\n            fontSize: 18,\n            color: '#6A737C',\n            cursor: 'pointer'\n          },\n          onClick: function onClick() {\n            return Router.pushRoute(\"/questions/\".concat(summary[11]));\n          }\n        }, React.createElement(\"a\", null, summary[0]))), _this2.renderTag(tagList, \"mini\")));\n      });\n    }\n  }, {\n    key: \"renderMobileQuestionList\",\n    value: function renderMobileQuestionList() {\n      var _this3 = this;\n\n      return this.state.summaries.map(function (summary, index) {\n        var tags = summary[8];\n        var questionState = summary[4];\n        var tagList = summary[8];\n        return React.createElement(List.Item, {\n          key: index\n        }, React.createElement(List.Icon, {\n          name: \"question circle\",\n          size: \"large\",\n          verticalAlign: \"middle\"\n        }), React.createElement(List.Content, null, React.createElement(List.Header, {\n          as: \"a\",\n          onClick: function onClick() {\n            return Router.pushRoute(\"/questions/\".concat(summary[11]));\n          }\n        }, summary[0]), React.createElement(Grid, null, React.createElement(Grid.Column, {\n          width: 10\n        }, React.createElement(List.Description, null, \"Number of Answer(s): \" + summary[10]), React.createElement(List.Description, null, \"Reward: \" + summary[2] * 1e-4 + \" EQT(s)\"), _this3.renderTag(tags, \"mini\")), React.createElement(Grid.Column, {\n          width: 4\n        }, questionState == 0 ? React.createElement(List.Description, null, React.createElement(\"b\", null, React.createElement(\"font\", {\n          color: \"red\"\n        }, \"ANSWERING PHASE\"))) : questionState == 1 ? React.createElement(List.Description, null, React.createElement(\"b\", null, React.createElement(\"font\", {\n          color: \"#C9C633\"\n        }, \"VOTING PHASE\"))) : React.createElement(List.Description, null, React.createElement(\"b\", null, React.createElement(\"font\", {\n          color: \"#10EE44\"\n        }, \"REWARDED PHASE\")))))), React.createElement(Divider, {\n          hidden: true\n        }));\n      });\n    } // Render each tag individually for each question\n\n  }, {\n    key: \"renderTag\",\n    value: function renderTag(tagList, tagSize) {\n      var tagColours = [\"red\", \"olive\", \"blue\", \"teal\", \"green\"];\n      return tagList.map(function (tag, index) {\n        return React.createElement(Label, {\n          as: \"a\",\n          onClick: function onClick() {\n            return Router.pushRoute(\"/\".concat('search/' + encodeURIComponent(tag)));\n          },\n          tag: true,\n          size: tagSize,\n          key: index,\n          color: tagColours[index % 5]\n        }, tag);\n      });\n    }\n  }, {\n    key: \"renderLeaderBoard\",\n    value: function renderLeaderBoard() {\n      var _this$state2 = this.state,\n          column = _this$state2.column,\n          data = _this$state2.data,\n          direction = _this$state2.direction;\n      return React.createElement(Segment, null, React.createElement(Header, {\n        as: \"h3\",\n        textAlign: \"center\"\n      }, React.createElement(Icon, {\n        name: \"chess king\"\n      }), \"Leaderboard\"), React.createElement(\"p\", {\n        style: {\n          textAlign: 'center'\n        }\n      }, React.createElement(\"b\", null, \"Current Registered User(s):\"), \" \", this.state.leaderboardData.length), React.createElement(Table, {\n        basic: \"very\",\n        celled: true,\n        collapsing: true,\n        sortable: true\n      }, React.createElement(Table.Header, null, React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, null, \"Account\"), React.createElement(Table.HeaderCell, {\n        sorted: column === 'points' ? direction : null,\n        onClick: this.handleSort('points')\n      }, \"Point(s)\"))), React.createElement(Table.Body, null, this.renderUserList())));\n    }\n  }, {\n    key: \"renderTopTags\",\n    value: function renderTopTags() {\n      return React.createElement(Segment, null, React.createElement(Header, {\n        as: \"h3\",\n        textAlign: \"center\"\n      }, React.createElement(Icon, {\n        name: \"tags\"\n      }), \"Top 10 Tags\"), this.renderTag(this.state.topTags, \"medium\"));\n    }\n  }, {\n    key: \"renderUserList\",\n    value: function renderUserList() {\n      return this.state.leaderboardData.map(function (item, index) {\n        return React.createElement(Table.Row, {\n          key: index\n        }, React.createElement(Table.Cell, {\n          textAlign: \"center\"\n        }, React.createElement(\"p\", {\n          style: {\n            fontSize: \"12px\"\n          }\n        }, item.account)), React.createElement(Table.Cell, {\n          textAlign: \"center\"\n        }, React.createElement(\"p\", {\n          style: {\n            fontSize: \"12px\"\n          }\n        }, item.points)));\n      });\n    }\n  }, {\n    key: \"renderSortSettings\",\n    value: function renderSortSettings() {\n      return React.createElement(\"span\", null, React.createElement(Icon, {\n        name: \"sort\"\n      }), \"Sort Questions By: \", ' ', React.createElement(Dropdown, {\n        inline: true,\n        options: [{\n          key: 'Ascending Phase',\n          text: 'Ascending Phase',\n          value: 0\n        }, {\n          key: 'Descending Phase',\n          text: 'Descending Phase',\n          value: 1\n        }, {\n          key: 'Ascending Answers',\n          text: 'Ascending Answers',\n          value: 2\n        }, {\n          key: 'Descending Answers',\n          text: 'Descending Answers',\n          value: 3\n        }, {\n          key: 'Ascending Rewards',\n          text: 'Ascending Rewards',\n          value: 4\n        }, {\n          key: 'Descending Rewards',\n          text: 'Descending Rewards',\n          value: 5\n        }],\n        onChange: this.handleChange\n      }));\n    }\n  }, {\n    key: \"renderFilterSettings\",\n    value: function renderFilterSettings() {\n      var tagColours = [\"red\", \"olive\", \"blue\", \"teal\", \"green\"];\n      return React.createElement(\"span\", null, React.createElement(Icon, {\n        name: \"filter\"\n      }), React.createElement(Dropdown, {\n        text: \"Filter Questions\",\n        multiple: true\n      }, React.createElement(Dropdown.Menu, null, React.createElement(Dropdown.Header, {\n        icon: \"tags\",\n        content: \"Tag Label\"\n      }), React.createElement(Dropdown.Menu, {\n        scrolling: true\n      }, this.state.tags.map(function (tag, index) {\n        return React.createElement(Dropdown.Item, {\n          key: index,\n          text: tag,\n          label: {\n            color: tagColours[index % 6],\n            empty: true,\n            circular: true\n          },\n          onClick: function onClick() {\n            return Router.pushRoute(\"/\".concat('search/' + encodeURIComponent(tag)));\n          }\n        });\n      })))));\n    }\n  }, {\n    key: \"renderQuestionLimitSettings\",\n    value: function renderQuestionLimitSettings() {\n      var _this4 = this;\n\n      return React.createElement(Dropdown, {\n        text: \"Questions To Show\",\n        multiple: true\n      }, React.createElement(Dropdown.Menu, null, React.createElement(Dropdown.Header, {\n        icon: \"list\",\n        content: \"Question Limit\"\n      }), React.createElement(Dropdown.Menu, {\n        scrolling: true\n      }, this.state.questionLimitChoice.map(function (choice, index) {\n        return React.createElement(Dropdown.Item, {\n          key: index,\n          text: choice,\n          onClick:\n          /*#__PURE__*/\n          _asyncToGenerator(\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee4() {\n            return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.next = 2;\n                    return _this4.setState({\n                      questionLimit: choice\n                    });\n\n                  case 2:\n                    _this4.fetchQuestionData();\n\n                  case 3:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _callee4);\n          }))\n        });\n      }))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.login) {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType,\n          page: \"Home\"\n        }, React.createElement(Responsive, {\n          fireOnMount: true,\n          getWidth: getWidthFactory(this.props.isMobileFromSSR),\n          minWidth: Responsive.onlyTablet.minWidth\n        }, React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Grid, {\n          centered: true\n        }, React.createElement(Grid.Column, {\n          width: 4\n        }, this.renderLeaderBoard()), React.createElement(Grid.Column, {\n          width: 8\n        }, React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"Questions Posted\"), React.createElement(Grid, null, React.createElement(Grid.Column, {\n          width: 5\n        }, this.renderSortSettings()), React.createElement(Grid.Column, {\n          width: 5\n        }, this.renderFilterSettings()), React.createElement(Grid.Column, {\n          width: 6\n        }, this.renderQuestionLimitSettings())), React.createElement(Table, null, React.createElement(Table.Header, null, this.renderQuestionHeader()), React.createElement(Table.Body, null, this.renderQuestionList())), React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(\"div\", {\n          style: {\n            marginTop: 20\n          }\n        }, \"Found \", this.state.summaries.length, \" Item(s).\")), React.createElement(Grid.Column, {\n          width: 3\n        }, this.renderTopTags()))), React.createElement(Responsive, {\n          fireOnMount: true,\n          getWidth: getWidthFactory(this.props.isMobileFromSSR),\n          maxWidth: Responsive.onlyMobile.maxWidth\n        }, React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Grid, {\n          centered: true\n        }, React.createElement(Grid.Column, null, React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"Questions Posted\"), this.renderSortSettings(), this.renderFilterSettings(), this.renderQuestionLimitSettings(), React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(List, {\n          divided: true,\n          relaxed: true\n        }, this.renderMobileQuestionList()), React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(\"div\", {\n          style: {\n            marginTop: 20\n          }\n        }, \"Found \", this.state.summaries.length, \" Item(s).\")))));\n      } else {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(AccountIssueModal, {\n          loading: this.state.loading,\n          login: this.state.login\n        }));\n      }\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(props) {\n        var isMobileFromSSR, queryValue, device, md;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                isMobileFromSSR = false;\n                queryValue = props.query.value;\n\n                if (props.req) {\n                  device = props.req.headers[\"user-agent\"];\n                  md = new MobileDetect(device);\n                  isMobileFromSSR = !!md.mobile();\n                }\n\n                return _context5.abrupt(\"return\", {\n                  isMobileFromSSR: isMobileFromSSR,\n                  queryValue: queryValue\n                });\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function getInitialProps(_x2) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return HomePage;\n}(Component);\n\nexport default HomePage;","map":null,"metadata":{},"sourceType":"module"}