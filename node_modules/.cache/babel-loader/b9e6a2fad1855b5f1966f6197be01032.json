{"ast":null,"code":"import _Set from \"@babel/runtime-corejs2/core-js/set\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { Form, Button, Input, Message, Dropdown, Header, Icon, Segment, Container, TextArea, Divider, Label, Modal, Loader } from 'semantic-ui-react';\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport TimeOutModal from '../components/TimeOutModal';\nimport Layout from '../components/Layout';\nimport factory from '../ethereum/factory';\nimport Question from '../ethereum/question';\nimport Profile from '../ethereum/profile';\nimport web3 from '../ethereum/web3';\nimport EthQuestionToken from '../ethereum/token';\nimport credentials from '../ethereum/credentials';\nimport { Router } from '../routes';\nimport { getIpfsHash } from '../utils/ipfs';\nimport { logging, checkFieldEmpty, checkTimeField, checkRewardField, lowerCase } from '../utils/functions';\nimport cookies from 'next-cookies';\n\nvar NewQuestion =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NewQuestion, _Component);\n\n  function NewQuestion(props) {\n    var _this;\n\n    _classCallCheck(this, NewQuestion);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NewQuestion).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var account, logTransaction, address;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              }); // Ensures all fields are filled\n\n\n              if (!(checkFieldEmpty(_this.state.questionTitle) && checkFieldEmpty(_this.state.content) && checkRewardField(_this.state.reward) && checkTimeField(_this.state.maxDuration))) {\n                _context.next = 22;\n                break;\n              }\n\n              _context.prev = 2;\n              account = _this.props.account; // Logs the transactions\n\n              logTransaction = logging(\"Created New Question: \" + _this.state.questionTitle + \" [\" + _this.state.reward + \" EQT(s) as reward]\"); // Create new question\n\n              _context.next = 7;\n              return factory.methods.createQuestion(_this.state.questionTitle, _this.state.content, lowerCase(_this.state.tag), Number(_this.state.reward) * 10e3, _parseFloat(_this.state.maxDuration) * 60 * 60, _this.state.fileHashes_array, _this.state.fileNames_array, logTransaction, EthQuestionToken._address).send({\n                from: account,\n                gasPrice: '0'\n              });\n\n            case 7:\n              _context.next = 9;\n              return factory.methods.getLastDeployedQuestion().call();\n\n            case 9:\n              address = _context.sent;\n              _context.next = 12;\n              return EthQuestionToken.methods.transfer(address, Number(_this.state.reward) * 10e3).send({\n                from: account,\n                gasPrice: '0'\n              });\n\n            case 12:\n              Router.pushRoute('/home'); // Automatic redirect the user.\n\n              _context.next = 19;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](2);\n\n              if (_context.t0.message == \"Returned error: authentication needed: password or unlock\") {\n                _this.setState({\n                  loading: false\n                });\n\n                _this.setState({\n                  timeout: true\n                });\n              }\n\n              _this.setState({\n                errorMessage: _context.t0.message + \" Or check if you have sufficient EQT(s)\"\n              });\n\n            case 19:\n              _this.setState({\n                loading: false\n              });\n\n              _context.next = 24;\n              break;\n\n            case 22:\n              _this.setState({\n                errorMessage: \"Required Field(s) Empty or Invalid Input\"\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 15]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"onFileSelected\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var reader, file, _this$state, files_array, fileNames_array, fileHashes_array;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // Access JavaScript FileReader() method for conversion to buffer\n              reader = new FileReader();\n              file = _this.fileInput.files[0];\n\n              _this.setState({\n                fileLoading: true\n              });\n\n              if (file instanceof Blob) {\n                _this$state = _this.state, files_array = _this$state.files_array, fileNames_array = _this$state.fileNames_array, fileHashes_array = _this$state.fileHashes_array;\n                files_array.push(file);\n                fileNames_array.push(file.name);\n\n                _this.setState({\n                  files_array: files_array,\n                  fileNames_array: fileNames_array\n                });\n\n                console.log(\"fileNames_array: \", fileNames_array);\n                reader.onloadend =\n                /*#__PURE__*/\n                _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee2() {\n                  var fileHash;\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          _context2.next = 2;\n                          return _this.setState({\n                            fileUrl: reader.result,\n                            fileLoading: true,\n                            buffer: Buffer.from(reader.result) // File is converted to a buffer for upload to IPFS\n\n                          });\n\n                        case 2:\n                          if (!_this.state.buffer) {\n                            _context2.next = 8;\n                            break;\n                          }\n\n                          _context2.next = 5;\n                          return getIpfsHash(file);\n\n                        case 5:\n                          _context2.t0 = _context2.sent;\n                          _context2.next = 9;\n                          break;\n\n                        case 8:\n                          _context2.t0 = '0';\n\n                        case 9:\n                          fileHash = _context2.t0;\n                          fileHashes_array.push(fileHash);\n\n                          _this.setState({\n                            fileHashes_array: fileHashes_array\n                          });\n\n                          console.log(\"fileHashes_array: \", fileHashes_array);\n\n                          _this.setState({\n                            fileLoading: false\n                          });\n\n                        case 14:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }));\n                reader.readAsDataURL(file);\n              }\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"onFileRemoved\", function (file) {\n      var i = 0;\n      var _this$state2 = _this.state,\n          files_array = _this$state2.files_array,\n          fileHashes_array = _this$state2.fileHashes_array,\n          fileNames_array = _this$state2.fileNames_array;\n      console.log('file: ', file);\n\n      for (i = 0; i < files_array.length; i++) {\n        if (file === files_array[i]) {\n          files_array.splice(i, 1);\n          fileNames_array.splice(i, 1);\n          fileHashes_array.splice(i, 1);\n          break;\n        }\n      }\n\n      _this.setState({\n        files_array: files_array,\n        fileNames_array: fileNames_array,\n        fileHashes_array: fileHashes_array\n      });\n\n      console.log('fileNames_array', fileNames_array);\n      console.log(\"fileHashes_array: \", fileHashes_array);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleAddition\", function (e, _ref4) {\n      var value = _ref4.value;\n\n      _this.setState({\n        tagOptions: [{\n          text: value,\n          value: value\n        }].concat(_toConsumableArray(_this.state.tagOptions))\n      });\n    });\n\n    _this.state = {\n      questionTitle: '',\n      content: '',\n      tag: [],\n      tagOptions: [],\n      reward: '',\n      maxDuration: '',\n      errorMessage: '',\n      loading: false,\n      fileLoading: false,\n      buffer: null,\n      files_array: [],\n      fileHashes_array: [],\n      fileNames_array: [],\n      login: false,\n      resourceLoading: true,\n      timeout: false,\n      accountType: null\n    };\n    return _this;\n  }\n\n  _createClass(NewQuestion, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var login, profileAddress, profile, accountType, deployedQuestions, deployedQuestionsCount, tags, tagOptions, i, question, summary, _i;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(typeof web3 === 'undefined')) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                this.setState({\n                  loading: false\n                });\n                return _context4.abrupt(\"return\");\n\n              case 3:\n                login = false;\n\n                if (!this.props.isLogin) {\n                  _context4.next = 34;\n                  break;\n                }\n\n                login = true; // Get Account Type\n\n                _context4.next = 8;\n                return factory.methods.getProfile(this.props.account).call();\n\n              case 8:\n                profileAddress = _context4.sent;\n                profile = Profile(profileAddress);\n                _context4.next = 12;\n                return profile.methods.getAccountType().call();\n\n              case 12:\n                accountType = _context4.sent;\n                accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"; // Retrieve previously used tags and ether balance\n\n                _context4.next = 16;\n                return factory.methods.getDeployedQuestions().call();\n\n              case 16:\n                deployedQuestions = _context4.sent;\n                deployedQuestionsCount = deployedQuestions.length;\n                tags = [];\n                tagOptions = [];\n                i = 0;\n\n              case 21:\n                if (!(i < deployedQuestionsCount)) {\n                  _context4.next = 30;\n                  break;\n                }\n\n                question = Question(deployedQuestions[i]);\n                _context4.next = 25;\n                return question.methods.getSummary().call();\n\n              case 25:\n                summary = _context4.sent;\n                tags = [].concat(_toConsumableArray(tags), _toConsumableArray(summary[8]));\n\n              case 27:\n                i++;\n                _context4.next = 21;\n                break;\n\n              case 30:\n                // Remove duplicated tags and select recently used tags\n                tags = _toConsumableArray(new _Set(tags));\n                tags = tags.reverse().slice(0, 30);\n\n                for (_i = 0; _i < tags.length; _i++) {\n                  tagOptions.push({\n                    key: _i,\n                    text: tags[_i],\n                    value: tags[_i]\n                  });\n                }\n\n                this.setState({\n                  login: login,\n                  accountType: accountType,\n                  tagOptions: tagOptions\n                });\n\n              case 34:\n                this.setState({\n                  resourceLoading: false\n                });\n\n              case 35:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() // Submit the question to be stored on the Ethereum Blockchain\n\n  }, {\n    key: \"renderFilesUpload\",\n    value: function renderFilesUpload(files) {\n      var _this2 = this;\n\n      var files_array = this.state.files_array;\n\n      if (this.state.files_array.length == 0) {\n        return React.createElement(Segment, {\n          placeholder: true\n        }, React.createElement(Header, {\n          icon: true\n        }, React.createElement(Icon, {\n          name: \"images outline\"\n        }), \"No images are uploaded for this question\"), React.createElement(\"input\", {\n          style: {\n            display: 'none'\n          },\n          type: \"file\",\n          onChange: function onChange() {\n            return _this2.onFileSelected();\n          },\n          ref: function ref(fileInput) {\n            return _this2.fileInput = fileInput;\n          }\n        }), React.createElement(Button, {\n          primary: true,\n          onClick: function onClick() {\n            return _this2.fileInput.click();\n          },\n          loading: this.state.fileLoading\n        }, \"Upload Image\"));\n      } else {\n        return React.createElement(Segment, {\n          placeholder: true\n        }, React.createElement(\"center\", null, React.createElement(\"div\", {\n          style: {\n            marginBottom: '20px'\n          }\n        }, files), React.createElement(\"input\", {\n          style: {\n            display: 'none'\n          },\n          type: \"file\",\n          onChange: function onChange() {\n            return _this2.onFileSelected();\n          },\n          ref: function ref(fileInput) {\n            return _this2.fileInput = fileInput;\n          }\n        }), React.createElement(Button, {\n          primary: true,\n          onClick: function onClick() {\n            return _this2.fileInput.click();\n          },\n          loading: this.state.fileLoading\n        }, \"Upload Files\")));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      if (this.state.login) {\n        var files_array = this.state.files_array;\n        var elmFiles = null;\n\n        if (files_array !== null) {\n          elmFiles = files_array.map(function (item, index) {\n            return React.createElement(Label, {\n              as: \"a\",\n              key: index,\n              size: \"big\"\n            }, item.name, React.createElement(Icon, {\n              name: \"delete\",\n              onClick: function onClick() {\n                return _this3.onFileRemoved(item);\n              }\n            }));\n          });\n        }\n\n        return React.createElement(Layout, {\n          accountType: this.state.accountType,\n          page: \"New\"\n        }, React.createElement(Container, null, React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Segment, {\n          textAlign: \"center\",\n          as: \"h3\"\n        }, \"Creating Of New Question\"), React.createElement(Form, {\n          error: !!this.state.errorMessage,\n          style: {\n            marginTop: '10px'\n          }\n        }, React.createElement(Form.Field, {\n          required: true\n        }, React.createElement(\"label\", null, \"Question Title\"), React.createElement(Input, {\n          placeholder: \"Enter Title\",\n          value: this.state.questionTitle,\n          onChange: function onChange(event) {\n            return _this3.setState({\n              questionTitle: event.target.value\n            });\n          }\n        })), React.createElement(Form.Field, {\n          required: true\n        }, React.createElement(\"label\", null, \"Question Description (To include math questions, delimit the latex format with $$)\"), React.createElement(Label, null, \"Example: This is my equation: $$1 \\\\triangleright 1 \\\\bigcirc  \\\\bigcirc $$\"), React.createElement(\"a\", {\n          style: {\n            display: \"table-cell\"\n          },\n          href: \"https://www.codecogs.com/latex/eqneditor.php\",\n          target: \"_blank\"\n        }, \"Link to Supported Latex Editor\"), React.createElement(TextArea, {\n          placeholder: \"Enter Description\",\n          value: this.state.content,\n          onChange: function onChange(event) {\n            return _this3.setState({\n              content: event.target.value\n            });\n          }\n        })), React.createElement(Form.Field, null, React.createElement(\"label\", null, \"Tags\"), React.createElement(Dropdown, {\n          clearable: true,\n          options: this.state.tagOptions,\n          selection: true,\n          multiple: true,\n          allowAdditions: true,\n          search: true,\n          placeholder: \"Select from recently used tags or create your own tags\",\n          value: this.state.tag,\n          onChange: function onChange(e, _ref5) {\n            var value = _ref5.value;\n            return _this3.setState({\n              tag: value\n            });\n          },\n          onAddItem: this.handleAddition\n        })), React.createElement(Form.Field, {\n          required: true\n        }, React.createElement(\"label\", null, \"EQT(s)\"), React.createElement(Input, {\n          label: \"EQT(s)\",\n          labelPosition: \"right\",\n          placeholder: \"Enter your value of reward\",\n          value: this.state.reward,\n          onChange: function onChange(event) {\n            return _this3.setState({\n              reward: event.target.value\n            });\n          }\n        })), React.createElement(Form.Field, {\n          required: true\n        }, React.createElement(\"label\", null, \"Maximum Duration\"), React.createElement(Input, {\n          label: \"hour(s)\",\n          labelPosition: \"right\",\n          placeholder: \"Enter the duration for the question to be valid\",\n          value: this.state.maxDuration,\n          onChange: function onChange(event) {\n            return _this3.setState({\n              maxDuration: event.target.value\n            });\n          }\n        })), React.createElement(Form.Field, null, this.renderFilesUpload(elmFiles)), React.createElement(Message, {\n          error: true,\n          header: \"Oops!\",\n          content: this.state.errorMessage\n        }), React.createElement(Modal, {\n          open: this.state.loading,\n          trigger: React.createElement(Button, {\n            primary: true,\n            onClick: this.onSubmit\n          }, \"Submit Question\"),\n          basic: true,\n          size: \"small\"\n        }, React.createElement(Header, {\n          content: \"Posting New Question\"\n        }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"Please Confirm the MetaMask Transaction Request to submit your Question to the Block-Chain Network. Upon successful submission, you will be redirected to the Home Page. This process might take awhile.\"), React.createElement(Loader, {\n          active: true,\n          inline: \"centered\"\n        }, \"Loading\"))))), React.createElement(TimeOutModal, {\n          timeout: this.state.timeout\n        }));\n      } else {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(AccountIssueModal, {\n          loading: this.state.resourceLoading,\n          login: this.state.login\n        }));\n      }\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(props) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", {\n                  isLogin: cookies(props).login || '',\n                  account: cookies(props).wallet || ''\n                });\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return NewQuestion;\n}(Component);\n\nexport default NewQuestion;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion_1.0\\pages\\newQuestion.js"],"names":["React","Component","Form","Button","Input","Message","Dropdown","Header","Icon","Segment","Container","TextArea","Divider","Label","Modal","Loader","AccountIssueModal","TimeOutModal","Layout","factory","Question","Profile","web3","EthQuestionToken","credentials","Router","getIpfsHash","logging","checkFieldEmpty","checkTimeField","checkRewardField","lowerCase","cookies","NewQuestion","props","setState","loading","errorMessage","state","questionTitle","content","reward","maxDuration","account","logTransaction","methods","createQuestion","tag","Number","fileHashes_array","fileNames_array","_address","send","from","gasPrice","getLastDeployedQuestion","call","address","transfer","pushRoute","message","timeout","reader","FileReader","file","fileInput","files","fileLoading","Blob","files_array","push","name","console","log","onloadend","fileUrl","result","buffer","Buffer","fileHash","readAsDataURL","i","length","splice","e","value","tagOptions","text","login","resourceLoading","accountType","isLogin","getProfile","profileAddress","profile","getAccountType","getDeployedQuestions","deployedQuestions","deployedQuestionsCount","tags","question","getSummary","summary","reverse","slice","key","display","onFileSelected","click","marginBottom","elmFiles","map","item","index","onFileRemoved","marginTop","event","target","handleAddition","renderFilesUpload","onSubmit","wallet"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Form, Button, Input, Message, Dropdown, Header,\r\n  Icon, Segment, Container, TextArea, Divider, Label, Modal, Loader } from 'semantic-ui-react';\r\nimport AccountIssueModal from '../components/AccountIssueModal';\r\nimport TimeOutModal from '../components/TimeOutModal';\r\nimport Layout from '../components/Layout';\r\nimport factory from '../ethereum/factory';\r\nimport Question from '../ethereum/question';\r\nimport Profile from '../ethereum/profile';\r\nimport web3 from '../ethereum/web3';\r\nimport EthQuestionToken from '../ethereum/token';\r\nimport credentials from '../ethereum/credentials';\r\nimport { Router } from '../routes';\r\nimport { getIpfsHash } from '../utils/ipfs';\r\nimport { logging, checkFieldEmpty, checkTimeField, checkRewardField, lowerCase } from '../utils/functions';\r\nimport cookies from 'next-cookies';\r\n\r\nclass NewQuestion extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n          questionTitle: '',\r\n          content:'',\r\n          tag: [],\r\n          tagOptions: [],\r\n          reward:'',\r\n          maxDuration:'',\r\n          errorMessage: '',\r\n          loading: false,\r\n          fileLoading: false,\r\n          buffer: null,\r\n          files_array: [],\r\n          fileHashes_array: [],\r\n          fileNames_array: [],\r\n          login: false,\r\n          resourceLoading: true,\r\n          timeout: false,\r\n          accountType: null\r\n      };\r\n    }\r\n\r\n    static async getInitialProps(props) {\r\n      return { isLogin: cookies(props).login || '' , account: cookies(props).wallet || '' };\r\n    }\r\n\r\n    async componentDidMount() {\r\n      if (typeof web3 === 'undefined') {\r\n        this.setState({ loading: false })\r\n        return\r\n      }\r\n      let login = false;\r\n      if (this.props.isLogin) {\r\n        login = true;\r\n        // Get Account Type\r\n        let profileAddress = await factory.methods.getProfile(this.props.account).call();\r\n        let profile = Profile(profileAddress);\r\n        let accountType = await profile.methods.getAccountType().call();\r\n        accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"\r\n\r\n        // Retrieve previously used tags and ether balance\r\n        let deployedQuestions = await factory.methods.getDeployedQuestions().call();\r\n        let deployedQuestionsCount = deployedQuestions.length;\r\n        let tags = [];\r\n        let tagOptions = [];\r\n\r\n        for (let i=0; i<deployedQuestionsCount; i++) {\r\n          let question = Question(deployedQuestions[i])\r\n          let summary = await question.methods.getSummary().call();\r\n          tags = [...tags, ...summary[8]]\r\n        }\r\n        // Remove duplicated tags and select recently used tags\r\n        tags = [...new Set(tags)]\r\n        tags = tags.reverse().slice(0,30);\r\n\r\n        for (let i = 0; i<tags.length; i++) {\r\n            tagOptions.push({\r\n                key: i,\r\n                text: tags[i],\r\n                value: tags[i]\r\n            });\r\n        }\r\n\r\n        this.setState( { login: login,\r\n                         accountType: accountType,\r\n                         tagOptions: tagOptions });\r\n      }\r\n      this.setState( { resourceLoading: false });\r\n    }\r\n\r\n    // Submit the question to be stored on the Ethereum Blockchain\r\n    onSubmit = async () => {\r\n        this.setState({ loading: true, errorMessage: '' });\r\n        // Ensures all fields are filled\r\n        if (checkFieldEmpty(this.state.questionTitle) && checkFieldEmpty(this.state.content) && checkRewardField(this.state.reward) && checkTimeField(this.state.maxDuration)){\r\n          try {\r\n              const account = this.props.account;\r\n              // Logs the transactions\r\n              let logTransaction = logging(\"Created New Question: \" + this.state.questionTitle + \" [\" + this.state.reward + \" EQT(s) as reward]\");\r\n              // Create new question\r\n              await factory.methods\r\n              .createQuestion(this.state.questionTitle, this.state.content, lowerCase(this.state.tag), Number(this.state.reward)*10e3, parseFloat(this.state.maxDuration) * 60 * 60,\r\n                this.state.fileHashes_array, this.state.fileNames_array, logTransaction, EthQuestionToken._address)\r\n              .send({\r\n                  from: account,\r\n                  gasPrice: '0'\r\n              });\r\n              // Transfer EQT into question contract\r\n              const address = await factory.methods.getLastDeployedQuestion().call();\r\n              await EthQuestionToken.methods.transfer(address, Number(this.state.reward)*10e3)\r\n              .send({\r\n                  from: account,\r\n                  gasPrice: '0'\r\n              });\r\n              Router.pushRoute('/home'); // Automatic redirect the user.\r\n          } catch (err) {\r\n              if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n                this.setState({ loading: false });\r\n                this.setState({ timeout: true });\r\n              }\r\n              this.setState({ errorMessage: err.message + \" Or check if you have sufficient EQT(s)\"});\r\n          }\r\n          this.setState({ loading: false });\r\n        } else {\r\n          this.setState({ errorMessage: \"Required Field(s) Empty or Invalid Input\" });\r\n          this.setState({ loading: false });\r\n        }\r\n    };\r\n\r\n    // Select a file to upload\r\n    onFileSelected = async () => {\r\n        // Access JavaScript FileReader() method for conversion to buffer\r\n        const reader = new FileReader();\r\n        const file = this.fileInput.files[0];\r\n        this.setState({fileLoading: true});\r\n        if (file instanceof Blob ) {\r\n            let {files_array, fileNames_array, fileHashes_array} = this.state;\r\n            files_array.push(file);\r\n            fileNames_array.push(file.name);\r\n            this.setState({\r\n                files_array: files_array,\r\n                fileNames_array: fileNames_array\r\n            });\r\n            console.log(\"fileNames_array: \", fileNames_array);\r\n            reader.onloadend = async () => {\r\n                await this.setState({\r\n                    fileUrl: reader.result,\r\n                    fileLoading: true,\r\n                    buffer: Buffer.from(reader.result) // File is converted to a buffer for upload to IPFS\r\n                });\r\n                const fileHash = this.state.buffer ? (await getIpfsHash(file)) : '0';\r\n                fileHashes_array.push(fileHash);\r\n                this.setState({ fileHashes_array: fileHashes_array });\r\n                console.log(\"fileHashes_array: \", fileHashes_array);\r\n                this.setState({fileLoading: false});\r\n            }\r\n            reader.readAsDataURL(file);\r\n        }\r\n    }\r\n\r\n    // Remove a previously selected file to upload\r\n    onFileRemoved = (file) => {\r\n        var i = 0;\r\n        let {files_array, fileHashes_array, fileNames_array} = this.state;\r\n        console.log('file: ', file);\r\n        for (i = 0 ; i < files_array.length ; i++) {\r\n            if (file === files_array[i]) {\r\n                files_array.splice(i, 1);\r\n                fileNames_array.splice(i, 1);\r\n                fileHashes_array.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n        this.setState({\r\n            files_array: files_array,\r\n            fileNames_array: fileNames_array,\r\n            fileHashes_array: fileHashes_array\r\n        });\r\n        console.log('fileNames_array', fileNames_array);\r\n        console.log(\"fileHashes_array: \", fileHashes_array);\r\n    }\r\n\r\n    handleAddition = (e, { value }) => {\r\n      this.setState({ tagOptions: [{ text: value, value }, ...this.state.tagOptions] });\r\n    }\r\n\r\n    renderFilesUpload(files) {\r\n      let {files_array} = this.state;\r\n      if(this.state.files_array.length == 0){\r\n        return (\r\n          <Segment placeholder>\r\n            <Header icon>\r\n              <Icon name='images outline' />\r\n              No images are uploaded for this question\r\n            </Header>\r\n            <input\r\n                style={{ display: 'none' }}\r\n                type='file'\r\n                onChange={() => this.onFileSelected()}\r\n                ref={fileInput => this.fileInput = fileInput}/>\r\n            <Button primary onClick={() => this.fileInput.click()} loading={this.state.fileLoading}>Upload Image</Button>\r\n          </Segment>\r\n        )\r\n      } else {\r\n        return (\r\n          <Segment placeholder>\r\n            <center>\r\n                <div style={{marginBottom: '20px'}}>\r\n                    {files}\r\n                </div>\r\n                <input\r\n                    style={{ display: 'none' }}\r\n                    type='file'\r\n                    onChange={() => this.onFileSelected()}\r\n                    ref={fileInput => this.fileInput = fileInput}/>\r\n                <Button primary onClick={() => this.fileInput.click()} loading={this.state.fileLoading}>Upload Files</Button>\r\n            </center>\r\n          </Segment>\r\n        )\r\n      }\r\n    };\r\n\r\n    render() {\r\n      if (this.state.login) {\r\n        let {files_array} = this.state;\r\n        let elmFiles = null;\r\n\r\n        if (files_array !== null) {\r\n          elmFiles = files_array.map((item, index) =>\r\n              <Label as='a' key={index} size='big'>\r\n                  {item.name}\r\n                  <Icon name='delete'\r\n                        onClick={() => this.onFileRemoved(item)} />\r\n              </Label>\r\n          );\r\n        }\r\n        return (\r\n          <Layout accountType={this.state.accountType} page={\"New\"}>\r\n              <Container>\r\n                <Divider hidden/>\r\n                <Segment textAlign='center' as='h3'>Creating Of New Question</Segment>\r\n                <Form error={!!this.state.errorMessage} style={{ marginTop: '10px' }}>\r\n                    <Form.Field required={true}>\r\n                        <label>Question Title</label>\r\n                        <Input\r\n                            placeholder=\"Enter Title\"\r\n                            value={this.state.questionTitle}\r\n                            onChange={event => this.setState({ questionTitle: event.target.value })}\r\n                        />\r\n                    </Form.Field>\r\n                    <Form.Field required={true}>\r\n                        <label>Question Description (To include math questions, delimit the latex format with $$)</label>\r\n                        <Label>Example: This is my equation: $$1 \\triangleright 1 \\bigcirc  \\bigcirc $$</Label>\r\n                        <a style={{display: \"table-cell\"}} href=\"https://www.codecogs.com/latex/eqneditor.php\" target=\"_blank\">Link to Supported Latex Editor</a>\r\n                        <TextArea\r\n                            placeholder=\"Enter Description\"\r\n                            value={this.state.content}\r\n                            onChange={event => this.setState({ content: event.target.value })}\r\n                        />\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label>Tags</label>\r\n                        <Dropdown clearable\r\n                                  options={this.state.tagOptions}\r\n                                  selection\r\n                                  multiple\r\n                                  allowAdditions\r\n                                  search\r\n                                  placeholder='Select from recently used tags or create your own tags'\r\n                                  value={this.state.tag}\r\n                                  onChange={ (e, { value }) => this.setState({ tag: value })}\r\n                                  onAddItem={this.handleAddition} />\r\n\r\n                    </Form.Field>\r\n                    <Form.Field required={true}>\r\n                        <label>EQT(s)</label>\r\n                        <Input\r\n                            label=\"EQT(s)\"\r\n                            labelPosition=\"right\"\r\n                            placeholder='Enter your value of reward'\r\n                            value={this.state.reward}\r\n                            onChange={event => this.setState({ reward: event.target.value })}\r\n                        />\r\n                    </Form.Field>\r\n                    <Form.Field required={true}>\r\n                        <label>Maximum Duration</label>\r\n                        <Input\r\n                            label=\"hour(s)\"\r\n                            labelPosition=\"right\"\r\n                            placeholder='Enter the duration for the question to be valid'\r\n                            value={this.state.maxDuration}\r\n                            onChange={event => this.setState({ maxDuration: event.target.value })}\r\n                        />\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      {this.renderFilesUpload(elmFiles)}\r\n                    </Form.Field>\r\n                    <Message error header=\"Oops!\" content={this.state.errorMessage} />\r\n                    <Modal open={this.state.loading} trigger={<Button primary onClick={this.onSubmit}>Submit Question</Button>} basic size='small'>\r\n                      <Header content='Posting New Question' />\r\n                      <Modal.Content>\r\n                        <p>\r\n                          Please Confirm the MetaMask Transaction Request to submit your Question to the Block-Chain Network.\r\n                          Upon successful submission, you will be redirected to the Home Page. This process might take awhile.\r\n                        </p>\r\n                        <Loader active inline=\"centered\">\r\n                          Loading\r\n                        </Loader>\r\n                      </Modal.Content>\r\n                    </Modal>\r\n                </Form>\r\n              </Container>\r\n              <TimeOutModal timeout={this.state.timeout} />\r\n          </Layout>\r\n        );\r\n      } else {\r\n        return (\r\n          <Layout accountType={this.state.accountType}>\r\n            <AccountIssueModal loading={this.state.resourceLoading} login={this.state.login} />\r\n          </Layout>\r\n        );\r\n      }\r\n    }\r\n}\r\n\r\nexport default NewQuestion;\r\n"]},"metadata":{},"sourceType":"module"}