{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport credentials from '../ethereum/credentials';\nimport Question from '../ethereum/question';\n\nvar Fuse = require(\"fuse.js\"); // Check for user logins\n\n\nfunction checkLogin(_x) {\n  return _checkLogin.apply(this, arguments);\n} // Validate Email Address Format\n\n\nfunction _checkLogin() {\n  _checkLogin = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(account) {\n    var _emailAddress;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return credentials.methods.getBinding(account).call();\n\n          case 2:\n            _emailAddress = _context.sent;\n            _context.t0 = _emailAddress === \"\";\n\n            if (_context.t0) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.next = 7;\n            return credentials.methods.emailNotBlackList(_emailAddress).call();\n\n          case 7:\n            _context.t0 = _context.sent;\n\n          case 8:\n            if (!_context.t0) {\n              _context.next = 12;\n              break;\n            }\n\n            return _context.abrupt(\"return\", true);\n\n          case 12:\n            return _context.abrupt(\"return\", true);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _checkLogin.apply(this, arguments);\n}\n\nvar validate = function validate(emailAddress) {\n  if (emailAddress === \"admin\") {\n    return true;\n  } else {\n    var re = /\\S+@e\\.ntu\\.edu\\.sg$/;\n    return re.test(emailAddress);\n  }\n}; // Provides common logging method for logging every transactions\n\n\nvar logging = function logging(message) {\n  var today = new Date();\n  var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  var date = months[today.getMonth()] + \" \" + today.getDate() + \" \" + today.getFullYear();\n  var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n  var dateTime = date + ' ' + time + \": \" + message;\n  return dateTime;\n}; // Search Algorithm\n\n\nfunction search(_x2, _x3) {\n  return _search.apply(this, arguments);\n} // Checks required fields are filled up\n\n\nfunction _search() {\n  _search = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(value, questions) {\n    var list, i, summary, options, fuse, result;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            list = [];\n            i = 0;\n\n          case 2:\n            if (!(i < questions.length)) {\n              _context2.next = 10;\n              break;\n            }\n\n            _context2.next = 5;\n            return Question(questions[i]).methods.getSummary().call();\n\n          case 5:\n            summary = _context2.sent;\n            list.push({\n              'address': questions[i],\n              'title': summary[0],\n              'content': summary[1],\n              'tags': summary[8]\n            });\n\n          case 7:\n            i++;\n            _context2.next = 2;\n            break;\n\n          case 10:\n            options = {\n              id: \"address\",\n              threshold: 0.1,\n              shouldSort: true,\n              tokenize: true,\n              keys: [{\n                name: 'title',\n                weight: 0.3\n              }, {\n                name: 'content',\n                weight: 0.3\n              }, {\n                name: 'tags',\n                weight: 0.4\n              }]\n            };\n            fuse = new Fuse(list, options);\n            result = fuse.search(value);\n            return _context2.abrupt(\"return\", result);\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _search.apply(this, arguments);\n}\n\nvar checkFieldEmpty = function checkFieldEmpty(field) {\n  return field === \"\" ? false : true;\n}; // Checks time-related fields are filled up properly\n\n\nvar checkTimeField = function checkTimeField(field) {\n  return field > 0 ? true : false;\n}; // Checks ETQ fields are filled up properly\n\n\nvar checkRewardField = function checkRewardField(field) {\n  return field >= 1 ? true : false;\n}; // Convert to lower case letters in a string\n\n\nvar lowerCase = function lowerCase(item) {\n  for (var i = 0; i < item.length; i++) {\n    item[i] = item[i].toLowerCase();\n  }\n\n  return item;\n};\n\nexport { validate, logging, search, checkFieldEmpty, checkTimeField, checkRewardField, lowerCase };","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\utils\\functions.js"],"names":["credentials","Question","Fuse","require","checkLogin","account","methods","getBinding","call","_emailAddress","emailNotBlackList","validate","emailAddress","re","test","logging","message","today","Date","months","date","getMonth","getDate","getFullYear","time","getHours","getMinutes","getSeconds","dateTime","search","value","questions","list","i","length","getSummary","summary","push","options","id","threshold","shouldSort","tokenize","keys","name","weight","fuse","result","checkFieldEmpty","field","checkTimeField","checkRewardField","lowerCase","item","toLowerCase"],"mappings":"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","sourcesContent":["import credentials from '../ethereum/credentials';\r\nimport Question from '../ethereum/question';\r\nconst Fuse = require(\"fuse.js\");\r\n\r\n// Check for user logins\r\nasync function checkLogin(account) {\r\n  const _emailAddress = await credentials.methods.getBinding(account).call();\r\n  if (_emailAddress === \"\" || await credentials.methods.emailNotBlackList(_emailAddress).call()) {\r\n    return true;\r\n  } else {\r\n    return true;\r\n  }\r\n}\r\n\r\n// Validate Email Address Format\r\nconst validate = (emailAddress) => {\r\n  if (emailAddress === \"admin\") {\r\n    return true;\r\n  } else {\r\n    const re = /\\S+@e\\.ntu\\.edu\\.sg$/;\r\n    return re.test(emailAddress);\r\n  }\r\n};\r\n\r\n// Provides common logging method for logging every transactions\r\nconst logging = (message) => {\r\n    let today = new Date();\r\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\r\n    \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    let date = months[today.getMonth()]+\" \"+today.getDate()+\" \"+today.getFullYear();\r\n    let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n    let dateTime = date+' '+time+\": \"+message;\r\n    return dateTime;\r\n};\r\n\r\n// Search Algorithm\r\nasync function search(value, questions) {\r\n    let list = [];\r\n    for (let i = 0; i < questions.length; i++) {\r\n        var summary = await Question(questions[i]).methods.getSummary().call();\r\n        list.push({'address': questions[i], 'title': summary[0], 'content': summary[1], 'tags': summary[8]});\r\n    }\r\n    let options = {\r\n        id: \"address\",\r\n        threshold: 0.1,\r\n        shouldSort: true,\r\n        tokenize: true,\r\n        keys: [{\r\n            name: 'title',\r\n            weight: 0.3\r\n        }, {\r\n            name: 'content',\r\n            weight: 0.3\r\n        }, {\r\n           name:'tags',\r\n           weight: 0.4\r\n        }]\r\n    };\r\n    let fuse = new Fuse(list, options);\r\n    const result = fuse.search(value);\r\n    return result;\r\n}\r\n\r\n// Checks required fields are filled up\r\nconst checkFieldEmpty = (field) => {\r\n  return field === \"\" ? false : true;\r\n}\r\n\r\n// Checks time-related fields are filled up properly\r\nconst checkTimeField = (field) => {\r\n  return field > 0 ? true : false;\r\n}\r\n\r\n// Checks ETQ fields are filled up properly\r\nconst checkRewardField = (field) => {\r\n  return field >= 1 ? true : false;\r\n}\r\n\r\n// Convert to lower case letters in a string\r\nconst lowerCase = (item) => {\r\n  for (let i = 0; i<item.length; i++) {\r\n    item[i] = item[i].toLowerCase();\r\n  }\r\n  return item;\r\n}\r\n\r\nexport { validate, logging, search, checkFieldEmpty, checkTimeField, checkRewardField, lowerCase };\r\n"]},"metadata":{},"sourceType":"module"}