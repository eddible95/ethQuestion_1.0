{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { Button, Checkbox, Form, Container, Divider, Input, Segment, Message, Icon, Modal, Header, Loader } from 'semantic-ui-react';\nimport Head from 'next/head';\nimport web3 from '../ethereum/web3';\nimport credentials from '../ethereum/credentials';\nimport { Router } from '../routes';\n\nvar LoginPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LoginPage, _Component);\n\n  function LoginPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LoginPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LoginPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      emailAddress: '',\n      loading: false,\n      errorMessage: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var accounts, _emailAddress;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              }); // Check for valid NTU Student Email Address\n\n\n              if (!_this.validate(_this.state.emailAddress)) {\n                _context.next = 17;\n                break;\n              }\n\n              _context.prev = 2;\n              _context.next = 5;\n              return web3.eth.getAccounts();\n\n            case 5:\n              accounts = _context.sent;\n              _context.next = 8;\n              return credentials.methods.getBinding(accounts[0]).call();\n\n            case 8:\n              _emailAddress = _context.sent;\n\n              // Authenticate the Email Address\n              if (_this.state.emailAddress.localeCompare(_emailAddress) == 0) {\n                Router.pushRoute(\"/home\"); // Automatic redirect the user.\n              } else {\n                _this.setState({\n                  errorMessage: \"Wrong Email Address\"\n                });\n\n                _this.setState({\n                  loading: false\n                });\n              }\n\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](2);\n\n              _this.setState({\n                errorMessage: _context.t0.message\n              });\n\n            case 15:\n              _context.next = 19;\n              break;\n\n            case 17:\n              _this.setState({\n                errorMessage: \"Invalid Email Address\"\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 12]]);\n    })));\n\n    return _this;\n  }\n\n  _createClass(LoginPage, [{\n    key: \"validate\",\n    value: function validate(emailAddress) {\n      var re = /\\S+@e.ntu.edu.sg$/;\n      return re.test(emailAddress);\n    }\n  }, {\n    key: \"renderForm\",\n    value: function renderForm() {\n      var _this2 = this;\n\n      return React.createElement(Form, {\n        error: !!this.state.errorMessage\n      }, React.createElement(Segment, {\n        raised: true,\n        textAlign: \"center\"\n      }, \"Please \", React.createElement(\"b\", null, \"Login\"), \" Using Your Registered NTU Email Address or \", React.createElement(\"b\", null, \"Register\"), \" for an Account\"), React.createElement(Form.Field, null, React.createElement(\"label\", null, \"NTU Student Email Address\"), React.createElement(Input, {\n        placeholder: \"example@e.ntu.edu.sg\",\n        value: this.state.emailAddress,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            emailAddress: event.target.value\n          });\n        }\n      })), React.createElement(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.errorMessage\n      }), React.createElement(Modal, {\n        open: this.state.loading,\n        trigger: React.createElement(Button, {\n          primary: true,\n          onClick: this.onSubmit\n        }, \"Log In\"),\n        basic: true,\n        size: \"small\"\n      }, React.createElement(Header, {\n        icon: \"ethereum\",\n        textAlign: \"center\",\n        content: \"Verifying Your Email Address\"\n      }), React.createElement(Modal.Content, null, React.createElement(Loader, {\n        active: true,\n        inline: \"centered\"\n      }, \"Authenticating Credentials\"))), React.createElement(Button, {\n        primary: true,\n        onClick: function onClick() {\n          return Router.pushRoute(\"/register\");\n        }\n      }, \"Register\"));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, null, React.createElement(Head, null, React.createElement(\"link\", {\n        rel: \"stylesheet\",\n        href: \"//cdn.jsdelivr.net/npm/semantic-ui@2.4.1/dist/semantic.min.css\"\n      }), React.createElement(\"meta\", {\n        name: \"viewport\",\n        content: \"width=device-width, initial-scale=1.0\"\n      }), React.createElement(\"title\", null, \"Block-Chain Based Question Answering System\")), React.createElement(Segment, {\n        style: {\n          marginBottom: '0px',\n          fontSize: '20px',\n          borderRadius: '0px',\n          backgroundColor: '#EDC7B7',\n          border: '0px'\n        },\n        as: \"h1\",\n        textAlign: \"center\"\n      }, React.createElement(Icon, {\n        name: \"ethereum\"\n      }), \"Block-Chain Based Question Answering System\"), React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(Container, null, this.renderForm()));\n    }\n  }]);\n\n  return LoginPage;\n}(Component);\n\nexport default LoginPage;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\index.js"],"names":["React","Component","Button","Checkbox","Form","Container","Divider","Input","Segment","Message","Icon","Modal","Header","Loader","Head","web3","credentials","Router","LoginPage","emailAddress","loading","errorMessage","setState","validate","state","eth","getAccounts","accounts","methods","getBinding","call","_emailAddress","localeCompare","pushRoute","message","re","test","event","target","value","onSubmit","marginBottom","fontSize","borderRadius","backgroundColor","border","renderForm"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Checkbox, Form, Container, Divider, Input, Segment, Message, Icon, Modal, Header, Loader } from 'semantic-ui-react'\r\nimport Head from 'next/head';\r\nimport web3 from '../ethereum/web3';\r\nimport credentials from '../ethereum/credentials';\r\nimport { Router } from '../routes';\r\n\r\nclass LoginPage extends Component {\r\n\r\n  state = {\r\n    emailAddress:'',\r\n    loading: false,\r\n    errorMessage:''\r\n  };\r\n\r\n  validate(emailAddress){\r\n    const re = /\\S+@e.ntu.edu.sg$/;\r\n    return re.test(emailAddress);\r\n  };\r\n\r\n  onSubmit = async () => {\r\n      this.setState({ loading: true, errorMessage: '' });\r\n      // Check for valid NTU Student Email Address\r\n      if (this.validate(this.state.emailAddress)){\r\n        try {\r\n            const accounts = await web3.eth.getAccounts();\r\n            const _emailAddress = await credentials.methods.getBinding(accounts[0]).call();\r\n            // Authenticate the Email Address\r\n            if (this.state.emailAddress.localeCompare(_emailAddress) == 0){\r\n              Router.pushRoute(`/home`); // Automatic redirect the user.\r\n            }\r\n            else {\r\n              this.setState({ errorMessage: \"Wrong Email Address\" });\r\n              this.setState({ loading: false });\r\n            }\r\n        } catch (err) {\r\n            this.setState({ errorMessage: err.message });\r\n        }\r\n      } else {\r\n        this.setState({ errorMessage: \"Invalid Email Address\" });\r\n        this.setState({ loading: false });\r\n      }\r\n  };\r\n\r\n  renderForm() {\r\n    return(\r\n      <Form error={!!this.state.errorMessage}>\r\n        <Segment raised textAlign={\"center\"}>\r\n          Please <b>Login</b> Using Your Registered NTU Email Address or <b>Register</b> for an Account\r\n        </Segment>\r\n        <Form.Field>\r\n          <label>NTU Student Email Address</label>\r\n          <Input\r\n              placeholder='example@e.ntu.edu.sg'\r\n              value={this.state.emailAddress}\r\n              onChange={event => this.setState({ emailAddress: event.target.value})}\r\n          />\r\n        </Form.Field>\r\n        <Message error header=\"Oops!\" content={this.state.errorMessage} />\r\n        <Modal open={this.state.loading} trigger={<Button primary onClick={this.onSubmit}>Log In</Button>} basic size='small'>\r\n          <Header icon='ethereum' textAlign='center' content='Verifying Your Email Address' />\r\n          <Modal.Content>\r\n            <Loader active inline=\"centered\">\r\n              Authenticating Credentials\r\n            </Loader>\r\n          </Modal.Content>\r\n        </Modal>\r\n        <Button primary onClick={() => Router.pushRoute(`/register`)}>Register</Button>\r\n      </Form>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <React.Fragment>\r\n          <Head>\r\n              <link\r\n                  rel=\"stylesheet\"\r\n                  href=\"//cdn.jsdelivr.net/npm/semantic-ui@2.4.1/dist/semantic.min.css\"\r\n              />\r\n              <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n              <title>Block-Chain Based Question Answering System</title>\r\n          </Head>\r\n          <Segment style={{marginBottom:'0px', fontSize:'20px', borderRadius:'0px', backgroundColor:'#EDC7B7', border:'0px'}} as='h1' textAlign='center'>\r\n            <Icon name='ethereum' />Block-Chain Based Question Answering System\r\n          </Segment>\r\n          <Divider hidden/>\r\n          <Container>\r\n              {this.renderForm()}\r\n          </Container>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginPage;\r\n"]},"metadata":{},"sourceType":"module"}