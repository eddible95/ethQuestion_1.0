{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n// Ensure jsPDF does not import on Server Side\nvar jsPDF = null;\n\nif (typeof window !== \"undefined\") {\n  import(\"jspdf\").then(function (module) {\n    jsPDF = module.default;\n  });\n}\n\nvar exportQuestion =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(summary, answerList) {\n    var lMargin, rMargin, pdfInMM, doc, maxYPos, yPos, questionTitle, questionDescription, reward, lineHeight, splittedText, lines, blockHeight, pageCount;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // Initialise the PDF document to write\n            lMargin = 15; //left margin in mm\n\n            rMargin = 15; //right margin in mm\n\n            pdfInMM = 210; // width of A4 in mm\n\n            doc = new jsPDF(\"p\", \"mm\", \"a4\");\n            maxYPos = 830;\n            yPos = 55; // Question Information\n\n            questionTitle = \"Question Title: \" + summary[0];\n            questionDescription = \"Question Description: \" + summary[1];\n            reward = \"Reward: \" + summary[2] * 1e-4;\n            doc.setFontSize(18);\n            doc.text(lMargin, 45, \"Question Information\");\n            doc.setLineWidth(0.2);\n            doc.line(lMargin, 47, 190, 47);\n            lineHeight = doc.getLineHeight(questionDescription) / doc.internal.scaleFactor;\n            splittedText = doc.splitTextToSize(questionTitle, pdfInMM - lMargin - rMargin);\n            doc.setFontSize(13);\n            doc.text(lMargin, yPos, splittedText);\n            lines = splittedText.length;\n            blockHeight = lines * lineHeight;\n            yPos += lineHeight;\n            splittedText = doc.splitTextToSize(questionDescription, pdfInMM - lMargin - rMargin);\n            doc.text(lMargin, yPos, splittedText);\n            lines = splittedText.length;\n            blockHeight = lines * lineHeight;\n            yPos += lineHeight;\n            splittedText = doc.splitTextToSize(reward, pdfInMM - lMargin - rMargin);\n            doc.text(lMargin, yPos, splittedText);\n            lines = splittedText.length;\n            blockHeight = lines * lineHeight;\n            yPos += lineHeight;\n            splittedText = doc.splitTextToSize(\"Link(s) of Image(s) Uploaded For Question:\", pdfInMM - lMargin - rMargin);\n            doc.setFontType('bold');\n            doc.text(lMargin, yPos, splittedText); // If images are uploaded\n\n            if (summary[5].length != 0) {\n              summary[5].map(function (imageHash, index) {\n                var link = \"https://ipfs.io/ipfs/\" + imageHash;\n                lines = splittedText.length;\n                blockHeight = lines * lineHeight;\n                yPos += lineHeight;\n                lines = doc.splitTextToSize(link, pdfInMM - lMargin - rMargin);\n                doc.setFontSize(13);\n                doc.setFontType('normal');\n                doc.text(lMargin, yPos, lines);\n              });\n            }\n\n            lines = splittedText.length;\n            blockHeight = lines * lineHeight;\n            yPos += lineHeight;\n            splittedText = doc.splitTextToSize(\"Answer(s) Provided\", pdfInMM - lMargin - rMargin);\n            doc.setFontSize(18);\n            doc.setFontType('normal');\n            doc.text(lMargin, yPos, splittedText);\n            lines = splittedText.length;\n            blockHeight = lines * lineHeight;\n            yPos += lineHeight * 0.3;\n            doc.setLineWidth(0.2);\n            doc.line(lMargin, yPos, 190, yPos); // let j = 75;\n            // for (let i = 0; i < answerList.length; i++) {\n            //   let answer = \"(\" + (i+1) + \") \" + answerList[i][0];\n            //   lines = doc.splitTextToSize(answer, (pdfInMM-lMargin-rMargin));\n            //   // Creates a new page for every 10 answers\n            //   if (i % 10 == 0 && i != 0) {\n            //     doc.addPage();\n            //     j = 40;\n            //   }\n            //   doc.text(lMargin, j, lines);\n            //   j = j + 10;\n            // }\n\n            pageCount = doc.internal.getNumberOfPages();\n            doc = createFooter(doc, pageCount);\n            doc = createHeader(doc, pageCount);\n            doc.save(\"Answer.pdf\");\n\n          case 50:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function exportQuestion(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar createHeader = function createHeader(document, pageCount) {\n  for (var i = 0; i < pageCount; i++) {\n    if (i == 0) {\n      document.setPage(i);\n      document.setTextColor(0);\n      document.setFontSize(24);\n      document.text(15, 30, \"Ethereum Question & Answering System\");\n      document.setLineWidth(0.5);\n      document.line(15, 33, 190, 33);\n    } else {\n      document.setTextColor(150);\n      document.setFontSize(13);\n      document.text(110, 20, \"Ethereum Question & Answering System\");\n    }\n  }\n\n  return document;\n};\n\nvar createFooter = function createFooter(document, pageCount) {\n  for (var i = 0; i < pageCount; i++) {\n    document.setPage(i);\n    document.setFontSize(13);\n    document.setTextColor(150);\n    document.text(170, 285, \"Page \" + document.internal.getCurrentPageInfo().pageNumber + \" of \" + pageCount);\n  }\n\n  return document;\n};\n\nexport { exportQuestion };","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\utils\\pdf.js"],"names":["jsPDF","window","then","module","default","exportQuestion","summary","answerList","lMargin","rMargin","pdfInMM","doc","maxYPos","yPos","questionTitle","questionDescription","reward","setFontSize","text","setLineWidth","line","lineHeight","getLineHeight","internal","scaleFactor","splittedText","splitTextToSize","lines","length","blockHeight","setFontType","map","imageHash","index","link","pageCount","getNumberOfPages","createFooter","createHeader","save","document","i","setPage","setTextColor","getCurrentPageInfo","pageNumber"],"mappings":"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","sourcesContent":["// Ensure jsPDF does not import on Server Side\r\nlet jsPDF = null;\r\nif (typeof window !== \"undefined\") {\r\n  import(\"jspdf\").then(module => {\r\n    jsPDF = module.default;\r\n  });\r\n}\r\n\r\nconst exportQuestion = async(summary, answerList) => {\r\n  // Initialise the PDF document to write\r\n  let lMargin=15; //left margin in mm\r\n  let rMargin=15; //right margin in mm\r\n  let pdfInMM=210;  // width of A4 in mm\r\n  let doc = new jsPDF(\"p\",\"mm\",\"a4\");\r\n  let maxYPos = 830;\r\n  let yPos = 55\r\n\r\n  // Question Information\r\n  let questionTitle = \"Question Title: \" + summary[0];\r\n  let questionDescription = \"Question Description: \" + summary[1];\r\n  let reward = \"Reward: \" + summary[2]*1e-4;\r\n  doc.setFontSize(18)\r\n  doc.text(lMargin, 45, \"Question Information\");\r\n  doc.setLineWidth(0.2)\r\n  doc.line(lMargin, 47, 190, 47)\r\n  let lineHeight = doc.getLineHeight(questionDescription) / doc.internal.scaleFactor\r\n\r\n  let splittedText = doc.splitTextToSize(questionTitle, (pdfInMM-lMargin-rMargin));\r\n  doc.setFontSize(13)\r\n  doc.text(lMargin, yPos, splittedText);\r\n\r\n  let lines = splittedText.length\r\n  let blockHeight = lines * lineHeight\r\n  yPos += lineHeight\r\n  splittedText = doc.splitTextToSize(questionDescription, (pdfInMM-lMargin-rMargin));\r\n  doc.text(lMargin, yPos, splittedText);\r\n\r\n  lines = splittedText.length\r\n  blockHeight = lines * lineHeight\r\n  yPos += lineHeight\r\n  splittedText = doc.splitTextToSize(reward, (pdfInMM-lMargin-rMargin));\r\n  doc.text(lMargin, yPos, splittedText);\r\n\r\n  lines = splittedText.length\r\n  blockHeight = lines * lineHeight\r\n  yPos += lineHeight\r\n  splittedText = doc.splitTextToSize(\"Link(s) of Image(s) Uploaded For Question:\", (pdfInMM-lMargin-rMargin));\r\n  doc.setFontType('bold')\r\n  doc.text(lMargin, yPos, splittedText);\r\n\r\n  // If images are uploaded\r\n  if (summary[5].length != 0) {\r\n      summary[5].map((imageHash, index) => {\r\n        let link = \"https://ipfs.io/ipfs/\"+imageHash\r\n        lines = splittedText.length\r\n        blockHeight = lines * lineHeight\r\n        yPos += lineHeight\r\n        lines = doc.splitTextToSize(link, (pdfInMM-lMargin-rMargin));\r\n        doc.setFontSize(13)\r\n        doc.setFontType('normal')\r\n        doc.text(lMargin,yPos,lines);\r\n      })\r\n  }\r\n\r\n  lines = splittedText.length\r\n  blockHeight = lines * lineHeight\r\n  yPos += lineHeight\r\n  splittedText = doc.splitTextToSize(\"Answer(s) Provided\", (pdfInMM-lMargin-rMargin));\r\n  doc.setFontSize(18)\r\n  doc.setFontType('normal')\r\n  doc.text(lMargin, yPos, splittedText);\r\n  lines = splittedText.length\r\n  blockHeight = lines * lineHeight\r\n  yPos += lineHeight * 0.3\r\n  doc.setLineWidth(0.2)\r\n  doc.line(lMargin, yPos, 190, yPos)\r\n\r\n  // let j = 75;\r\n  // for (let i = 0; i < answerList.length; i++) {\r\n  //   let answer = \"(\" + (i+1) + \") \" + answerList[i][0];\r\n  //   lines = doc.splitTextToSize(answer, (pdfInMM-lMargin-rMargin));\r\n  //   // Creates a new page for every 10 answers\r\n  //   if (i % 10 == 0 && i != 0) {\r\n  //     doc.addPage();\r\n  //     j = 40;\r\n  //   }\r\n  //   doc.text(lMargin, j, lines);\r\n  //   j = j + 10;\r\n  // }\r\n  let pageCount = doc.internal.getNumberOfPages();\r\n  doc = createFooter(doc, pageCount);\r\n  doc = createHeader(doc, pageCount);\r\n  doc.save(\"Answer.pdf\");\r\n}\r\n\r\nconst createHeader = (document, pageCount) => {\r\n  for(let i = 0; i < pageCount; i++) {\r\n    if (i == 0) {\r\n      document.setPage(i)\r\n      document.setTextColor(0)\r\n      document.setFontSize(24)\r\n      document.text(15, 30, \"Ethereum Question & Answering System\");\r\n      document.setLineWidth(0.5)\r\n      document.line(15, 33, 190, 33)\r\n    } else {\r\n      document.setTextColor(150)\r\n      document.setFontSize(13)\r\n      document.text(110, 20, \"Ethereum Question & Answering System\");\r\n    }\r\n  }\r\n  return document\r\n}\r\n\r\nconst createFooter = (document, pageCount) => {\r\n  for(let i = 0; i < pageCount; i++) {\r\n    document.setPage(i)\r\n    document.setFontSize(13)\r\n    document.setTextColor(150)\r\n    document.text(170, 285, \"Page \" + document.internal.getCurrentPageInfo().pageNumber + \" of \" + pageCount)\r\n  }\r\n  return document\r\n}\r\n\r\nexport { exportQuestion }\r\n"]},"metadata":{},"sourceType":"module"}