{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React, { Component } from 'react';\nimport { Segment, Container, Divider, Header } from 'semantic-ui-react';\nimport Layout from '../components/Layout';\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\nimport Profile from '../ethereum/profile';\nimport { Router } from '../routes';\nimport credentials from '../ethereum/credentials';\n\nvar AboutPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AboutPage, _Component);\n\n  function AboutPage(props) {\n    _classCallCheck(this, AboutPage);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(AboutPage).call(this, props));\n  }\n\n  _createClass(AboutPage, [{\n    key: \"componentWillMount\",\n    // Redirect E-Wallet that are not Logged In to the Login Page\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context.sent;\n                _context.next = 5;\n                return credentials.methods.getBinding(accounts[0]).call();\n\n              case 5:\n                _context.t0 = _context.sent;\n\n                if (!(_context.t0 === \"\")) {\n                  _context.next = 9;\n                  break;\n                }\n\n                console.log(\"here1\");\n                Router.pushRoute(\"/\"); // Automatic redirect the user to Login or Sign Up\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Layout, {\n        accountType: this.props.accountType\n      }, React.createElement(Container, null, React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(Segment, {\n        raised: true,\n        textAlign: \"left\"\n      }, React.createElement(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"SCSE19-0299: Block-Chain Based Question Answering System\")), React.createElement(Header, {\n        as: \"h3\",\n        textAlign: \"left\"\n      }, \"Project Details\"), React.createElement(Divider, null), React.createElement(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, \"This is an experimental system for School Of Computer Science & Engineereing (SCSE) Final Year Project titled SCSE19-0299.\"), React.createElement(Header, {\n        as: \"h3\",\n        textAlign: \"left\"\n      }, \"System Rules & Guidelines\"), React.createElement(Divider, null), React.createElement(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, \"All users are to \", React.createElement(\"b\", null, \"only post questions from past year examinations\"), \". No posting of \", React.createElement(\"b\", null, \"Assignments \"), \"or \", React.createElement(\"b\", null, \"Tutorial Questions\"), \" is allowed. Fraudulent accounts will be \", React.createElement(\"b\", null, \"removed from the system and banned from future use\"), \".\"), React.createElement(Header, {\n        as: \"h3\",\n        textAlign: \"left\"\n      }, \"Earning Tokens\"), React.createElement(Divider, null), React.createElement(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, \"Each user is given \", React.createElement(\"b\", null, \"10 tokens\"), \" each. User can be rewarded additional tokens by providing answers with the highest up votes for each questions. User can also be rewarded \", React.createElement(\"b\", null, \"2 tokens\"), \" for up voting the answer that is awarded the reward for the question.\"), React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(Segment, {\n        raised: true,\n        textAlign: \"left\"\n      }, React.createElement(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"Leaderboard\")), React.createElement(Header, {\n        as: \"h3\",\n        textAlign: \"left\"\n      }, \"Accumulating Points\"), React.createElement(Divider, null), React.createElement(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, \"Points can be earned through the following ways:\"), React.createElement(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, React.createElement(\"b\", null, \"Creating Question:\"), \" 5 Points\"), React.createElement(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, React.createElement(\"b\", null, \"Answer Selected:\"), \" 4 Points\"), React.createElement(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, React.createElement(\"b\", null, \"Submit Answer:\"), \" 2 Points\"), React.createElement(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, React.createElement(\"b\", null, \"Vote for Answer Voted as Best Answer:\"), \" 2 Points\"), React.createElement(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, React.createElement(\"b\", null, \"Participate in Voting:\"), \" 1 Point\"), React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(Segment, null, React.createElement(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"System Functionality\")), React.createElement(Header, {\n        as: \"h3\",\n        textAlign: \"left\"\n      }, \"Post New Question\"), React.createElement(Divider, null), React.createElement(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, \"Access using \\\"\", React.createElement(\"b\", null, \"Create New Question\"), \"\\\" tab above. Each creation of new question requires at least\", React.createElement(\"b\", null, \" 1 token\"), \" as the reward. In the event that there are no answers provided within the duration specified, the reward will be returned to the owner of the question.\"), React.createElement(Header, {\n        as: \"h3\",\n        textAlign: \"left\"\n      }, \"Provide Answer To Question\"), React.createElement(Divider, null), React.createElement(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, \"All questions posted can be view from the Home Page access via \", React.createElement(\"b\", null, \"\\\"Home\\\"\"), \" tab above. Clicking on the question title will provide additional details on the question as well as providing the form to submit an answer for the question. No tokens are required for answering of question.\"), React.createElement(Header, {\n        as: \"h3\",\n        textAlign: \"left\"\n      }, \"Voting Of Answers\"), React.createElement(Divider, null), React.createElement(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, \"When the question is in the \", React.createElement(\"b\", null, \"\\\"Voting Phase\\\"\"), \", all users can view all answers that are submitted and up vote or down vote each answer depending on it's relevance and helpfulness. Each up vote or down vote requires \", React.createElement(\"b\", null, \"1 token\"), \". Each user can only\", React.createElement(\"b\", null, \" up vote or down each answer once\"), \".\")));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(props) {\n        var accounts, profileAddress, profile, accountType;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context2.sent;\n                console.log(accounts);\n                _context2.next = 6;\n                return credentials.methods.getBinding(accounts[0]).call();\n\n              case 6:\n                _context2.t0 = _context2.sent;\n\n                if (!(_context2.t0 === \"\")) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                Router.pushRoute(\"/\"); // Automatic redirect the user to Login or Sign Up\n\n              case 9:\n                _context2.next = 11;\n                return factory.methods.getProfile(accounts[0]).call();\n\n              case 11:\n                profileAddress = _context2.sent;\n                profile = Profile(profileAddress);\n                _context2.next = 15;\n                return profile.methods.getAccountType().call();\n\n              case 15:\n                accountType = _context2.sent;\n\n                if (accountType == 0) {\n                  accountType = \"Admin\";\n                } else {\n                  accountType = \"User\";\n                }\n\n                return _context2.abrupt(\"return\", {\n                  accountType: accountType\n                });\n\n              case 18:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return AboutPage;\n}(Component);\n\nexport default AboutPage;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\about.js"],"names":["React","Component","Segment","Container","Divider","Header","Layout","web3","factory","Profile","Router","credentials","AboutPage","props","eth","getAccounts","accounts","methods","getBinding","call","console","log","pushRoute","accountType","fontSize","getProfile","profileAddress","profile","getAccountType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Segment, Container, Divider, Header } from 'semantic-ui-react';\r\nimport Layout from '../components/Layout';\r\nimport web3 from '../ethereum/web3';\r\nimport factory from '../ethereum/factory';\r\nimport Profile from '../ethereum/profile';\r\nimport {Router} from '../routes';\r\nimport credentials from '../ethereum/credentials';\r\n\r\nclass AboutPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  static async getInitialProps(props) {\r\n    // Retrieve the Ethereum Account from MetaMask\r\n    const accounts = await web3.eth.getAccounts();\r\n    console.log(accounts);\r\n    if (await credentials.methods.getBinding(accounts[0]).call() === \"\"){\r\n      Router.pushRoute(`/`); // Automatic redirect the user to Login or Sign Up\r\n    }\r\n\r\n    // Get Account Type\r\n    const profileAddress = await factory.methods.getProfile(accounts[0]).call();\r\n    const profile = Profile(profileAddress);\r\n    let accountType = await profile.methods.getAccountType().call();\r\n    if (accountType == 0) {\r\n      accountType = \"Admin\"\r\n    } else {\r\n      accountType = \"User\"\r\n    }\r\n    return { accountType }\r\n  }\r\n\r\n  // Redirect E-Wallet that are not Logged In to the Login Page\r\n  async componentWillMount() {\r\n    // Retrieve the Ethereum Account from MetaMask\r\n    const accounts = await web3.eth.getAccounts();\r\n    if (await credentials.methods.getBinding(accounts[0]).call() === \"\"){\r\n      console.log(\"here1\")\r\n      Router.pushRoute(`/`); // Automatic redirect the user to Login or Sign Up\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Layout accountType={this.props.accountType}>\r\n        <Container>\r\n          <Divider hidden/>\r\n          <Segment raised textAlign='left'>\r\n            <Header as='h2' textAlign='center'>\r\n              SCSE19-0299: Block-Chain Based Question Answering System\r\n            </Header>\r\n          </Segment>\r\n          <Header as='h3' textAlign='left'>\r\n            Project Details\r\n          </Header>\r\n          <Divider />\r\n          <p style={{fontSize:'16px'}}>\r\n            This is an experimental system for School Of Computer Science & Engineereing (SCSE) Final Year Project\r\n            titled SCSE19-0299.\r\n          </p>\r\n          <Header as='h3' textAlign='left'>\r\n            System Rules & Guidelines\r\n          </Header>\r\n          <Divider />\r\n          <p style={{fontSize:'16px'}}>\r\n            All users are to <b>only post questions from past year examinations</b>. No posting of <b>Assignments </b>\r\n            or <b>Tutorial Questions</b> is allowed. Fraudulent accounts will be <b>removed from the system and banned from\r\n            future use</b>.\r\n          </p>\r\n          <Header as='h3' textAlign='left'>\r\n            Earning Tokens\r\n          </Header>\r\n          <Divider />\r\n          <p style={{fontSize:'16px'}}>\r\n            Each user is given <b>10 tokens</b> each. User can be rewarded additional tokens by providing answers with the\r\n            highest up votes for each questions. User can also be rewarded <b>2 tokens</b> for up voting the answer that is\r\n            awarded the reward for the question.\r\n          </p>\r\n          <Divider hidden/>\r\n\r\n          <Divider hidden/>\r\n          <Segment raised textAlign='left'>\r\n            <Header as='h2' textAlign='center'>\r\n              Leaderboard\r\n            </Header>\r\n          </Segment>\r\n          <Header as='h3' textAlign='left'>\r\n            Accumulating Points\r\n          </Header>\r\n          <Divider />\r\n          <p style={{fontSize:'16px'}}>\r\n            Points can be earned through the following ways:\r\n          </p>\r\n          <p style={{fontSize:'16px'}}><b>Creating Question:</b> 5 Points</p>\r\n          <p style={{fontSize:'16px'}}><b>Answer Selected:</b> 4 Points</p>\r\n          <p style={{fontSize:'16px'}}><b>Submit Answer:</b> 2 Points</p>\r\n          <p style={{fontSize:'16px'}}><b>Vote for Answer Voted as Best Answer:</b> 2 Points</p>\r\n          <p style={{fontSize:'16px'}}><b>Participate in Voting:</b> 1 Point</p>\r\n          <Divider hidden/>\r\n\r\n          <Segment>\r\n            <Header as='h2' textAlign='center'>\r\n              System Functionality\r\n            </Header>\r\n          </Segment>\r\n          <Header as='h3' textAlign='left'>\r\n            Post New Question\r\n          </Header>\r\n          <Divider />\r\n          <p style={{fontSize:'16px'}}>\r\n            Access using \"<b>Create New Question</b>\" tab above. Each creation of new question requires at least\r\n            <b> 1 token</b> as the reward. In the event that there are no answers provided within the duration specified,\r\n            the reward will be returned to the owner of the question.\r\n          </p>\r\n          <Header as='h3' textAlign='left'>\r\n            Provide Answer To Question\r\n          </Header>\r\n          <Divider />\r\n          <p style={{fontSize:'16px'}}>\r\n            All questions posted can be view from the Home Page access via <b>\"Home\"</b> tab above. Clicking on the question title\r\n            will provide additional details on the question as well as providing the form to submit an answer for the question. No\r\n            tokens are required for answering of question.\r\n          </p>\r\n          <Header as='h3' textAlign='left'>\r\n            Voting Of Answers\r\n          </Header>\r\n          <Divider />\r\n          <p style={{fontSize:'16px'}}>\r\n            When the question is in the <b>\"Voting Phase\"</b>, all users can view all answers that are submitted and up vote or down vote\r\n            each answer depending on it's relevance and helpfulness. Each up vote or down vote requires <b>1 token</b>. Each user can only\r\n            <b> up vote or down each answer once</b>.\r\n          </p>\r\n        </Container>\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AboutPage;\r\n"]},"metadata":{},"sourceType":"module"}