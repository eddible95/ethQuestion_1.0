{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { Button, Form, Container, Divider, Input, Segment, Message, Icon, Modal, Header, Loader } from 'semantic-ui-react';\nimport LoginLayout from '../components/LoginLayout';\nimport web3 from '../ethereum/web3';\nimport Profile from '../ethereum/profile';\nimport factory from '../ethereum/factory';\nimport EthQuestionToken from '../ethereum/token';\nimport credentials from '../ethereum/credentials';\nimport { Router } from '../routes';\nimport { validate } from '../utils/functions';\n\nvar RegisterPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(RegisterPage, _Component);\n\n  function RegisterPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, RegisterPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RegisterPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      emailAddress: '',\n      loading: false,\n      resetting: false,\n      errorMessage: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var accounts, validEmail, emailNotExist, ethWalletNotRegistered, profileAddress, profile;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              }); // Check for valid NTU Student Email Address, Existence of Email Address and EthWallet\n\n\n              _context.prev = 1;\n              _context.next = 4;\n              return web3.eth.getAccounts();\n\n            case 4:\n              accounts = _context.sent;\n              validEmail = validate(_this.state.emailAddress);\n              _context.next = 8;\n              return credentials.methods.emailNotExist(_this.state.emailAddress).call();\n\n            case 8:\n              emailNotExist = _context.sent;\n              _context.next = 11;\n              return credentials.methods.ethWalletNotRegistered(accounts[0]).call();\n\n            case 11:\n              ethWalletNotRegistered = _context.sent;\n\n              if (!(validEmail && !emailNotExist && !ethWalletNotRegistered)) {\n                _context.next = 26;\n                break;\n              }\n\n              // Create a new record\n              credentials.methods.createBinding(_this.state.emailAddress).send({\n                from: accounts[0]\n              }).on('receipt', function (receipt) {\n                console.log(receipt);\n              }); // Create a new Profile\n\n              _context.next = 16;\n              return factory.methods.createProfile().send({\n                from: accounts[0]\n              });\n\n            case 16:\n              if (!(_this.state.emailAddress === \"admin\")) {\n                _context.next = 23;\n                break;\n              }\n\n              _context.next = 19;\n              return factory.methods.getProfile(accounts[0]).call();\n\n            case 19:\n              profileAddress = _context.sent;\n              profile = Profile(profileAddress);\n              _context.next = 23;\n              return profile.methods.setAdmin().send({\n                from: accounts[0]\n              });\n\n            case 23:\n              // } else {\n              //   let owner = await EthQuestionToken.methods.getOwner().call();\n              //   await EthQuestionToken.methods.retrieveFrom(owner, accounts[0], 10e4)\n              //   .send({\n              //     from: accounts[0]\n              //   });\n              // }\n              Router.pushRoute(\"/home\"); // Automatic redirect the user.\n\n              _context.next = 28;\n              break;\n\n            case 26:\n              _this.setState({\n                errorMessage: \"Invalid Email Address or Email Address Already In Used\"\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 28:\n              _context.next = 34;\n              break;\n\n            case 30:\n              _context.prev = 30;\n              _context.t0 = _context[\"catch\"](1);\n\n              _this.setState({\n                errorMessage: _context.t0.message + \" If you have rejected second transaction, please click on reset account. Thereafter, redo the registration.\"\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 34:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 30]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"onReset\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var accounts, validEmail, emailNotExist, ethWalletNotRegistered;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _this.setState({\n                resetting: true,\n                errorMessage: ''\n              });\n\n              _context2.prev = 1;\n              _context2.next = 4;\n              return web3.eth.getAccounts();\n\n            case 4:\n              accounts = _context2.sent;\n              validEmail = validate(_this.state.emailAddress);\n              _context2.next = 8;\n              return credentials.methods.emailNotExist(_this.state.emailAddress).call();\n\n            case 8:\n              emailNotExist = _context2.sent;\n              _context2.next = 11;\n              return credentials.methods.ethWalletNotRegistered(accounts[0]).call();\n\n            case 11:\n              ethWalletNotRegistered = _context2.sent;\n\n              if (!(validEmail && emailNotExist && ethWalletNotRegistered)) {\n                _context2.next = 16;\n                break;\n              }\n\n              _context2.next = 15;\n              return credentials.methods.deleteMapping(accounts[0], _this.state.emailAddress).send({\n                from: accounts[0]\n              });\n\n            case 15:\n              _this.setState({\n                resetting: false\n              });\n\n            case 16:\n              _context2.next = 22;\n              break;\n\n            case 18:\n              _context2.prev = 18;\n              _context2.t0 = _context2[\"catch\"](1);\n\n              _this.setState({\n                errorMessage: _context2.t0.message + \" Please redo the resetting of account.\"\n              });\n\n              _this.setState({\n                resetting: false\n              });\n\n            case 22:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 18]]);\n    })));\n\n    return _this;\n  }\n\n  _createClass(RegisterPage, [{\n    key: \"renderForm\",\n    value: function renderForm() {\n      var _this2 = this;\n\n      return React.createElement(Form, {\n        error: !!this.state.errorMessage\n      }, React.createElement(Segment, {\n        raised: true,\n        textAlign: \"center\"\n      }, \"Please use a valid NTU Student Email Address to be bounded to the Etheruem Account to use the Application\"), React.createElement(Form.Field, null, React.createElement(\"label\", null, \"NTU Student Email Address\"), React.createElement(Input, {\n        placeholder: \"example@e.ntu.edu.sg\",\n        value: this.state.emailAddress,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            emailAddress: event.target.value\n          });\n        }\n      })), React.createElement(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.errorMessage\n      }), React.createElement(Modal, {\n        open: this.state.loading,\n        trigger: React.createElement(Button, {\n          primary: true,\n          onClick: this.onSubmit\n        }, \"Register\"),\n        basic: true,\n        size: \"small\"\n      }, React.createElement(Header, {\n        content: \"Registering Your Email Address\"\n      }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"Please confirm the 2 MetaMask transactions for creation of Profile and Registering of Email Address. Upon confirming the requests, please hold on while the system completes the registration process...\"), React.createElement(Loader, {\n        active: true,\n        inline: \"centered\"\n      }, \"Registering Your Email\"))), React.createElement(Modal, {\n        open: this.state.resetting,\n        trigger: React.createElement(Button, {\n          primary: true,\n          onClick: this.onReset\n        }, \"Reset\"),\n        basic: true,\n        size: \"small\"\n      }, React.createElement(Header, {\n        content: \"Resetting Account\"\n      }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"Please confirm the MetaMask transaction for resetting of account registration. Upon confirming the requests, please hold on while the system completes the resetting process...\"), React.createElement(Loader, {\n        active: true,\n        inline: \"centered\"\n      }, \"Resetting Account Registration\"))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(LoginLayout, null, React.createElement(Container, {\n        style: {\n          height: \"100vh\"\n        }\n      }, this.renderForm()));\n    }\n  }]);\n\n  return RegisterPage;\n}(Component);\n\nexport default RegisterPage;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\register.js"],"names":["React","Component","Button","Form","Container","Divider","Input","Segment","Message","Icon","Modal","Header","Loader","LoginLayout","web3","Profile","factory","EthQuestionToken","credentials","Router","validate","RegisterPage","emailAddress","loading","resetting","errorMessage","setState","eth","getAccounts","accounts","validEmail","state","methods","emailNotExist","call","ethWalletNotRegistered","createBinding","send","from","on","receipt","console","log","createProfile","getProfile","profileAddress","profile","setAdmin","pushRoute","message","deleteMapping","event","target","value","onSubmit","onReset","height","renderForm"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Form, Container, Divider, Input,\r\n   Segment, Message, Icon, Modal, Header, Loader } from 'semantic-ui-react'\r\nimport LoginLayout from '../components/LoginLayout';\r\nimport web3 from '../ethereum/web3';\r\nimport Profile from '../ethereum/profile';\r\nimport factory from '../ethereum/factory';\r\nimport EthQuestionToken from '../ethereum/token';\r\nimport credentials from '../ethereum/credentials';\r\nimport { Router } from '../routes';\r\nimport { validate } from '../utils/functions';\r\n\r\nclass RegisterPage extends Component {\r\n\r\n  state = {\r\n    emailAddress:'',\r\n    loading: false,\r\n    resetting: false,\r\n    errorMessage:''\r\n  };\r\n\r\n  onSubmit = async () => {\r\n    this.setState({ loading: true, errorMessage: '' });\r\n    // Check for valid NTU Student Email Address, Existence of Email Address and EthWallet\r\n    try {\r\n      const accounts = await web3.eth.getAccounts();\r\n      let validEmail = validate(this.state.emailAddress);\r\n      let emailNotExist = await credentials.methods.emailNotExist(this.state.emailAddress).call();\r\n      let ethWalletNotRegistered = await credentials.methods.ethWalletNotRegistered(accounts[0]).call();\r\n      if (validEmail && !emailNotExist && !ethWalletNotRegistered) {\r\n        // Create a new record\r\n        credentials.methods\r\n        .createBinding(this.state.emailAddress)\r\n        .send({\r\n            from: accounts[0]\r\n        }).on('receipt', function(receipt) {\r\n          console.log(receipt);\r\n        });\r\n        // Create a new Profile\r\n        await factory.methods\r\n        .createProfile()\r\n        .send({\r\n            from: accounts[0]\r\n        });\r\n        // Set Admin rights\r\n        if (this.state.emailAddress === \"admin\") {\r\n          const profileAddress = await factory.methods.getProfile(accounts[0]).call();\r\n          const profile = Profile(profileAddress);\r\n          await profile.methods.setAdmin().send({\r\n            from: accounts[0]\r\n          });\r\n        }\r\n        // } else {\r\n        //   let owner = await EthQuestionToken.methods.getOwner().call();\r\n        //   await EthQuestionToken.methods.retrieveFrom(owner, accounts[0], 10e4)\r\n        //   .send({\r\n        //     from: accounts[0]\r\n        //   });\r\n        // }\r\n        Router.pushRoute(`/home`); // Automatic redirect the user.\r\n      } else {\r\n        this.setState({ errorMessage: \"Invalid Email Address or Email Address Already In Used\" });\r\n        this.setState({ loading: false });\r\n      }\r\n    } catch (err) {\r\n      this.setState({ errorMessage: err.message + \" If you have rejected second transaction, please click on reset account. Thereafter, redo the registration.\" });\r\n      this.setState({ loading: false });\r\n    }\r\n  };\r\n\r\n  onReset = async () => {\r\n    this.setState({ resetting: true, errorMessage: '' });\r\n    try {\r\n      const accounts = await web3.eth.getAccounts();\r\n      let validEmail = validate(this.state.emailAddress);\r\n      let emailNotExist = await credentials.methods.emailNotExist(this.state.emailAddress).call();\r\n      let ethWalletNotRegistered = await credentials.methods.ethWalletNotRegistered(accounts[0]).call();\r\n      if (validEmail && emailNotExist && ethWalletNotRegistered) {\r\n        // Delete Existing Mapping\r\n        await credentials.methods\r\n        .deleteMapping(accounts[0], this.state.emailAddress)\r\n        .send({\r\n            from: accounts[0]\r\n        });\r\n        this.setState({ resetting: false });\r\n      }\r\n    } catch (err) {\r\n      this.setState({ errorMessage: err.message + \" Please redo the resetting of account.\" });\r\n      this.setState({ resetting: false });\r\n    }\r\n  }\r\n\r\n  renderForm() {\r\n    return(\r\n      <Form error={!!this.state.errorMessage}>\r\n        <Segment raised textAlign={\"center\"}>\r\n          Please use a valid NTU Student Email Address to be bounded to the Etheruem Account to use the Application\r\n        </Segment>\r\n        <Form.Field>\r\n          <label>NTU Student Email Address</label>\r\n          <Input\r\n              placeholder='example@e.ntu.edu.sg'\r\n              value={this.state.emailAddress}\r\n              onChange={event => this.setState({ emailAddress: event.target.value})}\r\n          />\r\n        </Form.Field>\r\n        <Message error header=\"Oops!\" content={this.state.errorMessage} />\r\n        <Modal open={this.state.loading} trigger={<Button primary onClick={this.onSubmit}>Register</Button>} basic size='small'>\r\n          <Header content='Registering Your Email Address' />\r\n          <Modal.Content>\r\n            <p>\r\n              Please confirm the 2 MetaMask transactions for creation of Profile and Registering of Email Address.\r\n              Upon confirming the requests, please hold on while the system completes the registration process...\r\n            </p>\r\n            <Loader active inline=\"centered\">\r\n              Registering Your Email\r\n            </Loader>\r\n          </Modal.Content>\r\n        </Modal>\r\n        <Modal open={this.state.resetting} trigger={<Button primary onClick={this.onReset}>Reset</Button>} basic size='small'>\r\n          <Header content='Resetting Account' />\r\n          <Modal.Content>\r\n            <p>\r\n              Please confirm the MetaMask transaction for resetting of account registration.\r\n              Upon confirming the requests, please hold on while the system completes the resetting process...\r\n            </p>\r\n            <Loader active inline=\"centered\">\r\n              Resetting Account Registration\r\n            </Loader>\r\n          </Modal.Content>\r\n        </Modal>\r\n      </Form>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <LoginLayout>\r\n          <Container style={{height:\"100vh\"}}>\r\n              {this.renderForm()}\r\n          </Container>\r\n      </LoginLayout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RegisterPage;\r\n"]},"metadata":{},"sourceType":"module"}