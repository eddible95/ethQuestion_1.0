{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { Table, Popup, Button, Container } from 'semantic-ui-react';\nimport { Link } from '../routes';\nimport moment from 'moment';\nimport web3 from '../ethereum/web3';\nimport Question from '../ethereum/question';\nimport factory from '../ethereum/factory';\nimport Layout from '../components/Layout';\nimport Countdown from 'react-countdown-now';\n\nvar QuestionRow =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(QuestionRow, _Component);\n\n  function QuestionRow() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, QuestionRow);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(QuestionRow)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      questionAddress: '',\n      questionState: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var accounts, question, _questionState;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(_this.state.questionState == 0)) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context.sent;\n              question = Question(_this.state.questionAddress);\n              _context.next = 7;\n              return question.methods.getQuestionState().send({\n                from: accounts[0]\n              });\n\n            case 7:\n              _questionState = _context.sent;\n\n              _this.setState({\n                questionState: _questionState\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    return _this;\n  }\n\n  _createClass(QuestionRow, [{\n    key: \"renderQuestion\",\n    value: function renderQuestion() {\n      var summary = this.props.summary;\n      var time = this.props.time;\n      console.log(this.state.questionState);\n      var currentTime = new Date().getTime();\n      var maxDuration = (_parseFloat(summary[3]) / 60 / 60).toFixed(2).toString().toString();\n      var publishTime = moment.unix(time[0]).format('dddd, Do MMMM YYYY, h:mm:ss a');\n      var votingTime = moment.unix(time[3]).format('dddd, Do MMMM YYYY, h:mm:ss a');\n      var publishTimeMs = moment.unix(time[0]).valueOf();\n      var maxDurationMs = moment.unix(time[2]).valueOf();\n      var votingTimeMs = moment.unix(time[3]).valueOf();\n      var remainingTime = 0;\n\n      if (this.state.questionState == 0) {\n        remainingTime = publishTimeMs + maxDurationMs - currentTime;\n\n        if (remainingTime < 0) {\n          remainingTime = 0;\n        }\n      } else {\n        remainingTime = votingTimeMs + maxDurationMs - currentTime;\n\n        if (remainingTime < 0) {\n          remainingTime = 0;\n        }\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(Table, {\n        definition: true\n      }, React.createElement(Table.Body, null, React.createElement(Table.Row, null, React.createElement(Table.Cell, {\n        width: 2\n      }, \"Question Title\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px',\n          lineHeight: '1.5'\n        }\n      }, summary[0])), React.createElement(Table.Row, null, React.createElement(Table.Cell, {\n        width: 2\n      }, \"Description\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px',\n          lineHeight: '1.5'\n        }\n      }, summary[1])), React.createElement(Table.Row, null, React.createElement(Table.Cell, null, \"Reward (ETH)\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px'\n        }\n      }, summary[2])), React.createElement(Table.Row, null, React.createElement(Table.Cell, null, \"Publish Time\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px'\n        }\n      }, publishTime)), React.createElement(Table.Row, null, React.createElement(Table.Cell, null, \"Answering Duration (hours)\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px'\n        }\n      }, React.createElement(\"span\", {\n        style: {\n          verticalAlign: 'middle',\n          lineHeight: '33px'\n        }\n      }, maxDuration), remainingTime > 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"violet\"\n        }),\n        content: React.createElement(\"span\", null, React.createElement(\"span\", null, \"Remaining time - \"), React.createElement(Countdown, {\n          date: _Date$now() + remainingTime\n        })),\n        position: \"bottom right\",\n        inverted: true\n      }) : React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"red\",\n          onClick: this.handleClick\n        }),\n        content: \"EXPIRED\",\n        position: \"bottom right\",\n        inverted: true\n      }))), React.createElement(Table.Row, null, React.createElement(Table.Cell, null, \"Voting Duration (hours)\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px'\n        }\n      }, React.createElement(\"span\", {\n        style: {\n          verticalAlign: 'middle',\n          lineHeight: '33px'\n        }\n      }, maxDuration), this.state.questionState == 1 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"violet\"\n        }),\n        content: React.createElement(\"span\", null, React.createElement(\"span\", null, \"Remaining time - \"), React.createElement(Countdown, {\n          date: _Date$now() + remainingTime\n        })),\n        position: \"bottom right\",\n        inverted: true\n      }) : this.state.questionState == 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"red\",\n          onClick: this.handleClick,\n          disabled: true\n        }),\n        position: \"bottom right\",\n        inverted: true\n      }) : React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"red\",\n          onClick: this.handleClick\n        }),\n        content: \"Reward\",\n        position: \"bottom right\",\n        inverted: true\n      }))))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Layout, null, React.createElement(Container, null, this.renderQuestion()));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(props) {\n        var questionAddress, question, summary, time, profileOwner;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                questionAddress = props.query.value;\n                question = Question(questionAddress);\n                _context2.next = 4;\n                return question.methods.getSummary().call();\n\n              case 4:\n                summary = _context2.sent;\n                _context2.next = 7;\n                return question.methods.getTime().call();\n\n              case 7:\n                time = _context2.sent;\n                _context2.next = 10;\n                return factory.methods.getProfile(summary[5]).call();\n\n              case 10:\n                profileOwner = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  summary: summary,\n                  time: time,\n                  questionAddress: questionAddress\n                });\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }, {\n    key: \"getDerivedStateFromProps\",\n    value: function () {\n      var _getDerivedStateFromProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(props, state) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                state.questionAddress = props.questionAddress;\n                state.questionState = props.summary[4];\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function getDerivedStateFromProps(_x2, _x3) {\n        return _getDerivedStateFromProps.apply(this, arguments);\n      }\n\n      return getDerivedStateFromProps;\n    }()\n  }]);\n\n  return QuestionRow;\n}(Component);\n\nexport default QuestionRow;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\showQuestion.js"],"names":["React","Component","Table","Popup","Button","Container","Link","moment","web3","Question","factory","Layout","Countdown","QuestionRow","questionAddress","questionState","state","eth","getAccounts","accounts","question","methods","getQuestionState","send","from","_questionState","setState","summary","props","time","console","log","currentTime","Date","getTime","maxDuration","toFixed","toString","publishTime","unix","format","votingTime","publishTimeMs","valueOf","maxDurationMs","votingTimeMs","remainingTime","fontSize","lineHeight","verticalAlign","float","handleClick","renderQuestion","query","value","getSummary","call","getProfile","profileOwner"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Table, Popup, Button, Container } from 'semantic-ui-react';\r\nimport { Link } from '../routes';\r\nimport moment from 'moment';\r\nimport web3 from '../ethereum/web3';\r\nimport Question from '../ethereum/question';\r\nimport factory from '../ethereum/factory';\r\nimport Layout from '../components/Layout';\r\nimport Countdown from 'react-countdown-now';\r\n\r\nclass QuestionRow extends Component {\r\n    state = {\r\n      questionAddress: '',\r\n      questionState: ''\r\n    }\r\n\r\n    static async getInitialProps(props) {\r\n      const questionAddress = props.query.value;\r\n      const question = Question(questionAddress);\r\n      const summary = await question.methods.getSummary().call();\r\n      const time = await question.methods.getTime().call();\r\n      const profileOwner = await factory.methods.getProfile(summary[5]).call();\r\n      return { summary, time, questionAddress };\r\n    };\r\n\r\n    static async getDerivedStateFromProps(props, state) {\r\n      state.questionAddress = props.questionAddress;\r\n      state.questionState = props.summary[4];\r\n    }\r\n\r\n    handleClick = async () => {\r\n      if(this.state.questionState == 0) {\r\n        const accounts = await web3.eth.getAccounts();\r\n        const question = Question(this.state.questionAddress);\r\n        let _questionState = await question.methods.getQuestionState().send(\r\n          { from: accounts[0]}\r\n        );\r\n        this.setState({questionState: _questionState});\r\n      }\r\n    };\r\n\r\n    renderQuestion() {\r\n        const summary = this.props.summary;\r\n        const time = this.props.time;\r\n        console.log(this.state.questionState)\r\n\r\n        var currentTime = (new Date).getTime();\r\n        var maxDuration =(parseFloat(summary[3]) / 60 / 60).toFixed(2).toString().toString();\r\n        var publishTime = moment.unix(time[0]).format('dddd, Do MMMM YYYY, h:mm:ss a');\r\n        var votingTime = moment.unix(time[3]).format('dddd, Do MMMM YYYY, h:mm:ss a');\r\n        var publishTimeMs = moment.unix(time[0]).valueOf();\r\n        var maxDurationMs = moment.unix(time[2]).valueOf();\r\n        var votingTimeMs = moment.unix(time[3]).valueOf();\r\n        let remainingTime = 0;\r\n        if (this.state.questionState == 0) {\r\n          remainingTime = publishTimeMs + maxDurationMs - currentTime;\r\n          if (remainingTime < 0) {\r\n              remainingTime = 0;\r\n          }\r\n        } else {\r\n          remainingTime = votingTimeMs + maxDurationMs - currentTime;\r\n          if (remainingTime < 0) {\r\n              remainingTime = 0;\r\n          }\r\n        }\r\n\r\n        return (\r\n          <React.Fragment>\r\n              <Table definition>\r\n                  <Table.Body>\r\n                    <Table.Row>\r\n                        <Table.Cell width={2}>Question Title</Table.Cell>\r\n                        <Table.Cell style={{fontSize: '20px', lineHeight: '1.5'}}>\r\n                            {summary[0]}\r\n                        </Table.Cell>\r\n                    </Table.Row>\r\n                      <Table.Row>\r\n                          <Table.Cell width={2}>Description</Table.Cell>\r\n                          <Table.Cell style={{fontSize: '20px', lineHeight: '1.5'}}>\r\n                              {summary[1]}\r\n                          </Table.Cell>\r\n                      </Table.Row>\r\n                      <Table.Row>\r\n                          <Table.Cell>Reward (ETH)</Table.Cell>\r\n                          <Table.Cell style={{fontSize: '20px'}}>{summary[2]}</Table.Cell>\r\n                      </Table.Row>\r\n                      <Table.Row>\r\n                          <Table.Cell>Publish Time</Table.Cell>\r\n                          <Table.Cell style={{fontSize: '20px'}}>{publishTime}</Table.Cell>\r\n                      </Table.Row>\r\n                      <Table.Row>\r\n                          <Table.Cell>Answering Duration (hours)</Table.Cell>\r\n                          <Table.Cell style={{fontSize: '20px'}}>\r\n                              <span style={{verticalAlign: 'middle', lineHeight: '33px'}}>\r\n                                  {maxDuration}\r\n                              </span>\r\n                              {remainingTime > 0\r\n                                  ? <Popup\r\n                                      trigger={\r\n                                          <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                  icon='clock'\r\n                                                  color=\"violet\"\r\n                                          />}\r\n                                      content={\r\n                                          <span>\r\n                                          <span>Remaining time - </span>\r\n                                          <Countdown date={Date.now() + remainingTime}>\r\n                                          </Countdown>\r\n                                      </span>}\r\n                                      position='bottom right'\r\n                                      inverted />\r\n                                  : <Popup\r\n                                      trigger={\r\n                                          <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                  icon='clock'\r\n                                                  color=\"red\"\r\n                                                  onClick={this.handleClick}\r\n                                          />\r\n                                      }\r\n                                      content={\"EXPIRED\"}\r\n                                      position='bottom right'\r\n                                      inverted />\r\n                              }\r\n                          </Table.Cell>\r\n                      </Table.Row>\r\n                      <Table.Row>\r\n                          <Table.Cell>Voting Duration (hours)</Table.Cell>\r\n                          <Table.Cell style={{fontSize: '20px'}}>\r\n                              <span style={{verticalAlign: 'middle', lineHeight: '33px'}}>\r\n                                  {maxDuration}\r\n                              </span>\r\n                              {this.state.questionState == 1\r\n                                  ? <Popup\r\n                                      trigger={\r\n                                          <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                  icon='clock'\r\n                                                  color=\"violet\"\r\n                                          />}\r\n                                      content={\r\n                                          <span>\r\n                                          <span>Remaining time - </span>\r\n                                          <Countdown date={Date.now() + remainingTime}>\r\n                                          </Countdown>\r\n                                      </span>}\r\n                                      position='bottom right'\r\n                                      inverted />\r\n                                  : this.state.questionState == 0\r\n                                  ? <Popup\r\n                                      trigger={\r\n                                          <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                  icon='clock'\r\n                                                  color=\"red\"\r\n                                                  onClick={this.handleClick}\r\n                                                  disabled\r\n                                          />\r\n                                      }\r\n                                      position='bottom right'\r\n                                      inverted />\r\n                                  : <Popup\r\n                                      trigger={\r\n                                          <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                  icon='clock'\r\n                                                  color=\"red\"\r\n                                                  onClick={this.handleClick}\r\n                                                    />\r\n                                      }\r\n                                      content={\"Reward\"}\r\n                                      position='bottom right'\r\n                                      inverted />\r\n                            }\r\n                          </Table.Cell>\r\n                      </Table.Row>\r\n                  </Table.Body>\r\n              </Table>\r\n          </React.Fragment>\r\n        );\r\n    }\r\n\r\n    render() {\r\n      return(\r\n        <Layout>\r\n          <Container>\r\n            {this.renderQuestion()}\r\n          </Container>\r\n        </Layout>\r\n      )\r\n    }\r\n\r\n}\r\n\r\nexport default QuestionRow;\r\n"]},"metadata":{},"sourceType":"module"}