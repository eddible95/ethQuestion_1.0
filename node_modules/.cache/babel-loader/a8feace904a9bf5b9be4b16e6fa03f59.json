{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React, { Component } from 'react';\nimport { Segment, Container, Divider, Header, Modal, Button, Loader, Embed, Icon } from 'semantic-ui-react';\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport Layout from '../components/Layout';\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\nimport Profile from '../ethereum/profile';\nimport credentials from '../ethereum/credentials';\nimport cookies from 'next-cookies';\n\nvar AboutPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AboutPage, _Component);\n\n  function AboutPage(props) {\n    var _this;\n\n    _classCallCheck(this, AboutPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AboutPage).call(this, props));\n    _this.state = {\n      login: false,\n      loading: true,\n      accountType: null\n    };\n    return _this;\n  }\n\n  _createClass(AboutPage, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var login, profileAddress, profile, accountType;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(typeof web3 === 'undefined')) {\n                  _context.next = 3;\n                  break;\n                }\n\n                this.setState({\n                  loading: false\n                });\n                return _context.abrupt(\"return\");\n\n              case 3:\n                login = false;\n\n                if (!this.props.isLogin) {\n                  _context.next = 16;\n                  break;\n                }\n\n                login = true; // Get Account Type\n\n                _context.next = 8;\n                return factory.methods.getProfile(this.props.account).call();\n\n              case 8:\n                profileAddress = _context.sent;\n                profile = Profile(profileAddress);\n                _context.next = 12;\n                return profile.methods.getAccountType().call();\n\n              case 12:\n                accountType = _context.sent;\n                accountType == 0 ? accountType = \"Admin\" : accountType = \"User\";\n                this.setState({\n                  login: login\n                });\n                this.setState({\n                  accountType: accountType\n                });\n\n              case 16:\n                this.setState({\n                  loading: false\n                });\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.login) {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType,\n          page: 'About'\n        }, React.createElement(Container, null, React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Segment, {\n          raised: true\n        }, React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"What Can I Do Here?\")), React.createElement(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, React.createElement(Icon, {\n          name: \"pencil alternate\"\n        }), \"Ask New Question\"), React.createElement(Divider, null), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, \"Access using \\\"\", React.createElement(\"b\", null, \"Ask Question\"), \"\\\" tab above. Each creation of new question requires at least\", React.createElement(\"b\", null, \" 1 EQT\"), \" as the reward. In the event that there are no answers provided within the duration specified, the reward will be returned to the owner of the question. No asking of \", React.createElement(\"b\", null, \"Assignments \"), \" or \", React.createElement(\"b\", null, \"Tutorial Questions\"), \" is allowed. Fraudulent accounts will be \", React.createElement(\"b\", null, \"removed from the system and banned from future use\"), \".\"), React.createElement(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, React.createElement(Icon, {\n          name: \"add\"\n        }), \"Answer Questions\"), React.createElement(Divider, null), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, \"All questions posted can be view from the Home Page access via \", React.createElement(\"b\", null, \"\\\"Home\\\"\"), \" tab above. Clicking on the question title will provide additional details on the question as well as providing the form to submit an answer for the question. No EQT are required for answering of question.\"), React.createElement(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, React.createElement(Icon, {\n          name: \"thumbs up\"\n        }), \"Approving Answers\"), React.createElement(Divider, null), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, \"When the question is in the \", React.createElement(\"b\", null, \"\\\"Voting Phase\\\"\"), \", all users can view all answers that are submitted and approve each answer depending on its relevance and helpfulness. Each approval requires \", React.createElement(\"b\", null, \"1 EQT\"), \". Each user can only\", React.createElement(\"b\", null, \" approve each answer once\"), \". After the \\\"Voting Phase\\\", users who approved the answer with the highest approvals will have their \", React.createElement(\"b\", null, \"1 EQT\"), \" returned. Additionally, EQT from users who approve other answers would be distributed among users who approved the answer with the highest approvals.\"), React.createElement(Segment, {\n          raised: true\n        }, React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"User Guide\")), React.createElement(Embed, {\n          id: \"pdRTt2QabOg\",\n          source: \"youtube\"\n        })));\n      } else {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(AccountIssueModal, {\n          loading: this.state.loading,\n          login: this.state.login\n        }));\n      }\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(props) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", {\n                  isLogin: cookies(props).login || '',\n                  account: cookies(props).wallet || ''\n                });\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return AboutPage;\n}(Component);\n\nexport default AboutPage;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion_1.0\\pages\\about.js"],"names":["React","Component","Segment","Container","Divider","Header","Modal","Button","Loader","Embed","Icon","AccountIssueModal","Layout","web3","factory","Profile","credentials","cookies","AboutPage","props","state","login","loading","accountType","setState","isLogin","methods","getProfile","account","call","profileAddress","profile","getAccountType","fontSize","wallet"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Segment, Container, Divider, Header, Modal, Button, Loader, Embed, Icon } from 'semantic-ui-react';\r\nimport AccountIssueModal from '../components/AccountIssueModal';\r\nimport Layout from '../components/Layout';\r\nimport web3 from '../ethereum/web3';\r\nimport factory from '../ethereum/factory';\r\nimport Profile from '../ethereum/profile';\r\nimport credentials from '../ethereum/credentials';\r\nimport cookies from 'next-cookies';\r\n\r\nclass AboutPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      login: false,\r\n      loading: true,\r\n      accountType: null\r\n    };\r\n  }\r\n\r\n  static async getInitialProps(props) {\r\n    return { isLogin: cookies(props).login || '' , account: cookies(props).wallet || '' };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (typeof web3 === 'undefined') {\r\n      this.setState({ loading: false })\r\n      return\r\n    }\r\n    let login = false;\r\n    if (this.props.isLogin) {\r\n      login = true;\r\n      // Get Account Type\r\n      let profileAddress = await factory.methods.getProfile(this.props.account).call();\r\n      let profile = Profile(profileAddress);\r\n      let accountType = await profile.methods.getAccountType().call();\r\n      accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"\r\n      this.setState( { login: login });\r\n      this.setState( { accountType: accountType });\r\n    }\r\n    this.setState( { loading: false });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.login) {\r\n      return (\r\n        <Layout accountType={this.state.accountType} page={'About'}>\r\n          <Container>\r\n            <Divider hidden/>\r\n            <Segment raised>\r\n              <Header as='h2'textAlign='center'>\r\n                What Can I Do Here?\r\n              </Header>\r\n            </Segment>\r\n            <Header as='h3' textAlign='left'>\r\n              <Icon name='pencil alternate'/>Ask New Question\r\n            </Header>\r\n            <Divider />\r\n            <p style={{fontSize:'16px'}}>\r\n              Access using \"<b>Ask Question</b>\" tab above. Each creation of new question requires at least\r\n              <b> 1 EQT</b> as the reward. In the event that there are no answers provided within the duration specified,\r\n              the reward will be returned to the owner of the question. No asking of <b>Assignments </b> or <b>Tutorial Questions</b> is allowed.\r\n              Fraudulent accounts will be <b>removed from the system and banned from future use</b>.\r\n            </p>\r\n            <Header as='h3' textAlign='left'>\r\n              <Icon name='add'/>Answer Questions\r\n            </Header>\r\n            <Divider />\r\n            <p style={{fontSize:'16px'}}>\r\n              All questions posted can be view from the Home Page access via <b>\"Home\"</b> tab above. Clicking on the question title\r\n              will provide additional details on the question as well as providing the form to submit an answer for the question. No\r\n              EQT are required for answering of question.\r\n            </p>\r\n            <Header as='h3' textAlign='left'>\r\n              <Icon name='thumbs up'/>Approving Answers\r\n            </Header>\r\n            <Divider />\r\n            <p style={{fontSize:'16px'}}>\r\n              When the question is in the <b>\"Voting Phase\"</b>, all users can view all answers that are submitted and approve\r\n              each answer depending on its relevance and helpfulness. Each approval requires <b>1 EQT</b>. Each user can only\r\n              <b> approve each answer once</b>. After the \"Voting Phase\", users who approved the answer with the highest approvals\r\n              will have their <b>1 EQT</b> returned. Additionally, EQT from users who approve other answers would be distributed among\r\n              users who approved the answer with the highest approvals.\r\n            </p>\r\n            <Segment raised>\r\n              <Header as='h2' textAlign='center'>\r\n                User Guide\r\n              </Header>\r\n            </Segment>\r\n            <Embed\r\n              id='pdRTt2QabOg'\r\n              source='youtube'\r\n            />\r\n          </Container>\r\n        </Layout>\r\n      )\r\n    } else {\r\n      return (\r\n        <Layout accountType={this.state.accountType}>\r\n          <AccountIssueModal loading={this.state.loading} login={this.state.login} />\r\n        </Layout>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default AboutPage;\r\n"]},"metadata":{},"sourceType":"module"}