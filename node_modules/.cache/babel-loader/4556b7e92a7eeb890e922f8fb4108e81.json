{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React, { Component } from 'react';\nimport { Button, Header, Table, Statistic, Rating, Grid, Message, Divider, Container, Icon } from 'semantic-ui-react';\nimport factory from '../ethereum/factory';\nimport credentials from '../ethereum/credential';\nimport Question from '../ethereum/question';\nimport Layout from '../components/Layout';\nimport { Link, Router } from '../routes';\nimport web3 from '../ethereum/web3';\nimport { search } from './search';\n\nvar HomePage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(HomePage, _Component);\n\n  function HomePage() {\n    _classCallCheck(this, HomePage);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(HomePage).apply(this, arguments));\n  }\n\n  _createClass(HomePage, [{\n    key: \"renderQuestionHeader\",\n    value: function renderQuestionHeader() {\n      return React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        width: 2\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Current Phase\")), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        width: 2\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Answers Submitted\")), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        width: 2\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Reward\")), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\"\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Question Title\")));\n    } // Renders out the list of question\n\n  }, {\n    key: \"renderQuestionList\",\n    value: function renderQuestionList() {\n      var _this = this;\n\n      return this.props.summaries.map(function (summary, index) {\n        var questionState = summary[4];\n        return React.createElement(Table.Row, {\n          key: index\n        }, React.createElement(Table.Cell, {\n          textAlign: \"center\",\n          width: 2\n        }, questionState == 0 ? React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \" Answering\")), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"Phase\"))) : questionState == 1 ? React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \" Voting\")), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"Phase\"))) : React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \" Rewarded\")), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"Phase\")))), React.createElement(Table.Cell, {\n          textAlign: \"center\",\n          width: 2\n        }, React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, _this.props.numOfAnswers[index])), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"answer(s)\")))), React.createElement(Table.Cell, {\n          textAlign: \"center\",\n          width: 2\n        }, React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, summary[2])), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"ether(s)\")))), React.createElement(Table.Cell, {\n          textAlign: \"left\"\n        }, React.createElement(Grid.Row, {\n          textAlign: \"left\"\n        }, React.createElement(\"span\", {\n          style: {\n            fontSize: 18,\n            color: '#6A737C',\n            cursor: 'pointer'\n          },\n          onClick: function onClick() {\n            return Router.pushRoute(\"/questions/\".concat(_this.props.deployedQuestions[index]));\n          }\n        }, React.createElement(\"a\", null, summary[0])))));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Layout, null, React.createElement(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"Questions Posted\"), React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(Container, null, React.createElement(Table, null, React.createElement(Table.Header, null, this.renderQuestionHeader()), React.createElement(Table.Body, null, this.renderQuestionList())), React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(\"div\", {\n        style: {\n          marginTop: 20\n        }\n      }, \"Found \", this.props.summaries.length, \" Item(s).\")));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(props) {\n        var accounts, _emailAddress, deployedQuestions, deployedQuestionsCount, questions, summaries, numOfAnswers, searchItem, i, answerList;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context.sent;\n                console.log(accounts);\n                _context.next = 6;\n                return credentials.methods.getBinding(accounts[0]).call();\n\n              case 6:\n                _emailAddress = _context.sent;\n                console.log(_emailAddress);\n\n                if (_emailAddress === \"\") {\n                  console.log(\"null\");\n                } // Retrieve an array of addresses of questions deployed\n\n\n                _context.next = 11;\n                return factory.methods.getDeployedQuestions().call();\n\n              case 11:\n                deployedQuestions = _context.sent;\n                deployedQuestionsCount = deployedQuestions.length; // Retrieve the summaries of all deployed questions\n\n                questions = [];\n                summaries = [];\n                numOfAnswers = [];\n\n                if (!(props.query.value != undefined && props.query.value != 'favicon.ico')) {\n                  _context.next = 22;\n                  break;\n                }\n\n                searchItem = decodeURIComponent(props.query.value);\n                _context.next = 20;\n                return search(searchItem, deployedQuestions);\n\n              case 20:\n                deployedQuestions = _context.sent;\n                deployedQuestionsCount = deployedQuestions.length;\n\n              case 22:\n                i = 0;\n\n              case 23:\n                if (!(i < deployedQuestionsCount)) {\n                  _context.next = 35;\n                  break;\n                }\n\n                questions[i] = Question(deployedQuestions[i]);\n                _context.next = 27;\n                return questions[i].methods.getSummary().call();\n\n              case 27:\n                summaries[i] = _context.sent;\n                _context.next = 30;\n                return questions[i].methods.getAnswerList().call();\n\n              case 30:\n                answerList = _context.sent;\n                numOfAnswers[i] = answerList.length;\n\n              case 32:\n                i++;\n                _context.next = 23;\n                break;\n\n              case 35:\n                return _context.abrupt(\"return\", {\n                  accounts: accounts,\n                  deployedQuestions: deployedQuestions,\n                  summaries: summaries,\n                  numOfAnswers: numOfAnswers\n                });\n\n              case 36:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return HomePage;\n}(Component);\n\nexport default HomePage;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\home.js"],"names":["React","Component","Button","Header","Table","Statistic","Rating","Grid","Message","Divider","Container","Icon","factory","credentials","Question","Layout","Link","Router","web3","search","HomePage","fontSize","color","props","summaries","map","summary","index","questionState","numOfAnswers","cursor","pushRoute","deployedQuestions","renderQuestionHeader","renderQuestionList","marginTop","length","eth","getAccounts","accounts","console","log","methods","getBinding","call","_emailAddress","getDeployedQuestions","deployedQuestionsCount","questions","query","value","undefined","searchItem","decodeURIComponent","i","getSummary","getAnswerList","answerList"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Header, Table, Statistic, Rating, Grid, Message, Divider, Container, Icon } from 'semantic-ui-react';\r\nimport factory from '../ethereum/factory';\r\nimport credentials from '../ethereum/credential';\r\nimport Question from '../ethereum/question';\r\nimport Layout from '../components/Layout';\r\nimport {Link, Router} from '../routes';\r\nimport web3 from '../ethereum/web3';\r\nimport {search} from './search';\r\n\r\nclass HomePage extends Component {\r\n    static async getInitialProps (props) {\r\n        // Retrieve the Ethereum Account from MetaMask\r\n        const accounts = await web3.eth.getAccounts();\r\n        console.log(accounts)\r\n        const _emailAddress = await credentials.methods.getBinding(accounts[0]).call();\r\n        console.log(_emailAddress)\r\n        if (_emailAddress === \"\"){\r\n          console.log(\"null\")\r\n        }\r\n\r\n        // Retrieve an array of addresses of questions deployed\r\n        let deployedQuestions = await factory.methods.getDeployedQuestions().call();\r\n        let deployedQuestionsCount = deployedQuestions.length;\r\n\r\n        // Retrieve the summaries of all deployed questions\r\n        let questions = [];\r\n        let summaries = [];\r\n        let numOfAnswers = [];\r\n        let searchItem;\r\n        //filter the questions based on search value\r\n        if (props.query.value != undefined && props.query.value != 'favicon.ico') {\r\n            searchItem = decodeURIComponent(props.query.value);\r\n            deployedQuestions = await search(searchItem,deployedQuestions);\r\n            deployedQuestionsCount = deployedQuestions.length;\r\n        }\r\n\r\n        for(let i=0; i<deployedQuestionsCount; i++) {\r\n          questions[i] = Question(deployedQuestions[i]);\r\n          summaries[i] = await questions[i].methods.getSummary().call();\r\n          let answerList = await questions[i].methods.getAnswerList().call();\r\n          numOfAnswers[i] = answerList.length;\r\n        }\r\n        return { accounts, deployedQuestions, summaries, numOfAnswers };\r\n    }\r\n\r\n    renderQuestionHeader() {\r\n      return(\r\n        <Table.Row>\r\n          <Table.HeaderCell textAlign='center' width={2}><span style={{fontSize: 15, color: '#6A737C'}}>Current Phase</span></Table.HeaderCell>\r\n          <Table.HeaderCell textAlign='center' width={2}><span style={{fontSize: 15, color: '#6A737C'}}>Answers Submitted</span></Table.HeaderCell>\r\n          <Table.HeaderCell textAlign='center' width={2}><span style={{fontSize: 15, color: '#6A737C'}}>Reward</span></Table.HeaderCell>\r\n          <Table.HeaderCell textAlign='center'><span style={{fontSize: 15, color: '#6A737C'}}>Question Title</span></Table.HeaderCell>\r\n        </Table.Row>\r\n      );\r\n    }\r\n\r\n    // Renders out the list of question\r\n    renderQuestionList() {\r\n        return this.props.summaries.map((summary, index) => {\r\n            const questionState = summary[4];\r\n            return <Table.Row key={index}>\r\n              <Table.Cell textAlign='center' width={2}>\r\n                  {\r\n                    questionState == 0 ? <Statistic size='mini' color='red'>\r\n                                    <Statistic.Value><span\r\n                                        style={{fontSize: 15, color: '#6A737C'}}> Answering\r\n                                                    </span></Statistic.Value>\r\n                                    <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>Phase</span></Statistic.Label>\r\n                                </Statistic>\r\n                              : questionState == 1 ?\r\n                              <Statistic size='mini' color='red'>\r\n                                    <Statistic.Value><span\r\n                                        style={{fontSize: 15, color: '#6A737C'}}> Voting\r\n                                                    </span></Statistic.Value>\r\n                                    <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>Phase</span></Statistic.Label>\r\n                                </Statistic>\r\n                              :<Statistic size='mini' color='red'>\r\n                                    <Statistic.Value><span\r\n                                        style={{fontSize: 15, color: '#6A737C'}}> Rewarded\r\n                                                    </span></Statistic.Value>\r\n                                    <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>Phase</span></Statistic.Label>\r\n                                </Statistic>\r\n                  }\r\n                </Table.Cell>\r\n                <Table.Cell textAlign='center' width={2}>\r\n                    <Statistic size='mini' color='red'>\r\n                        <Statistic.Value><span style={{fontSize: 15, color: '#6A737C'}}>{this.props.numOfAnswers[index]}</span></Statistic.Value>\r\n                        <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>answer(s)</span></Statistic.Label>\r\n                    </Statistic>\r\n                </Table.Cell>\r\n                <Table.Cell textAlign='center' width={2}>\r\n                    <Statistic size='mini' color='red'>\r\n                        <Statistic.Value><span style={{fontSize: 15, color: '#6A737C'}}>{summary[2]}</span></Statistic.Value>\r\n                        <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>ether(s)</span></Statistic.Label>\r\n                    </Statistic>\r\n                </Table.Cell>\r\n                <Table.Cell textAlign='left'>\r\n                    <Grid.Row textAlign='left'>\r\n                        <span style={{fontSize: 18, color: '#6A737C', cursor: 'pointer'}} onClick={() => Router.pushRoute(`/questions/${this.props.deployedQuestions[index]}`)}><a>{summary[0]}</a></span></Grid.Row>\r\n                </Table.Cell>\r\n            </Table.Row>\r\n      });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Layout>\r\n                <Header as='h2' textAlign='center'>\r\n                    Questions Posted\r\n                </Header>\r\n                <Divider hidden/>\r\n                <Container>\r\n                  <Table>\r\n                    <Table.Header>\r\n                      {this.renderQuestionHeader()}\r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                      {this.renderQuestionList()}\r\n                    </Table.Body>\r\n                  </Table>\r\n                  <Divider hidden/>\r\n                  <div style={{ marginTop: 20 }}>Found {this.props.summaries.length} Item(s).</div>\r\n                </Container>\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}