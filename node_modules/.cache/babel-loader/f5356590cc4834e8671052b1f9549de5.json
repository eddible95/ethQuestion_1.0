{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport Question from '../ethereum/question';\n\nvar Fuse = require(\"fuse.js\");\n\nfunction search(_x, _x2) {\n  return _search.apply(this, arguments);\n}\n\nfunction _search() {\n  _search = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(value, questions) {\n    var list, i, summary, options, fuse, result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            list = [];\n            i = 0;\n\n          case 2:\n            if (!(i < questions.length)) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 5;\n            return Question(questions[i]).methods.getSummary().call();\n\n          case 5:\n            summary = _context.sent;\n            list.push({\n              'address': questions[i],\n              'title': summary[0],\n              'content': summary[1],\n              'tags': summary[8]\n            });\n\n          case 7:\n            i++;\n            _context.next = 2;\n            break;\n\n          case 10:\n            options = {\n              id: \"address\",\n              threshold: 0.1,\n              shouldSort: true,\n              tokenize: true,\n              keys: [{\n                name: 'title',\n                weight: 0.3\n              }, {\n                name: 'content',\n                weight: 0.3\n              }, {\n                name: 'tags',\n                weight: 0.4\n              }]\n            };\n            fuse = new Fuse(list, options);\n            result = fuse.search(value);\n            return _context.abrupt(\"return\", result);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _search.apply(this, arguments);\n}\n\nexport { search };","map":null,"metadata":{},"sourceType":"module"}