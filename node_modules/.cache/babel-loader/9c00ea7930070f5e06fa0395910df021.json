{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport { Button, Header, Table, Statistic, Rating, Grid, Message, Divider, Container, Icon, Label, Rail, Progress, Segment } from 'semantic-ui-react';\nimport factory from '../ethereum/factory';\nimport credentials from '../ethereum/credentials';\nimport Question from '../ethereum/question';\nimport Profile from '../ethereum/profile';\nimport Layout from '../components/Layout';\nimport { Link, Router } from '../routes';\nimport web3 from '../ethereum/web3';\nimport feedback from '../ethereum/feedback';\nimport { search } from './search';\n\nvar HomePage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(HomePage, _Component);\n\n  function HomePage(props) {\n    var _this;\n\n    _classCallCheck(this, HomePage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HomePage).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSort\", function (clickedColumn) {\n      return function () {\n        var _this$state = _this.state,\n            column = _this$state.column,\n            leaderboardData = _this$state.leaderboardData,\n            direction = _this$state.direction;\n\n        if (column !== clickedColumn) {\n          _this.setState({\n            column: clickedColumn,\n            leaderboardData: _.sortBy(leaderboardData, [clickedColumn]),\n            direction: 'ascending'\n          });\n\n          return;\n        }\n\n        _this.setState({\n          leaderboardData: leaderboardData.reverse(),\n          direction: direction === 'ascending' ? 'descending' : 'ascending'\n        });\n      };\n    });\n\n    _this.state = {\n      column: null,\n      direction: null,\n      leaderboardData: []\n    };\n    return _this;\n  }\n\n  _createClass(HomePage, [{\n    key: \"componentWillMount\",\n    // Redirect E-Wallet that are not Logged In to the Login Page\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context.sent;\n                _context.next = 5;\n                return credentials.methods.getBinding(accounts[0]).call();\n\n              case 5:\n                _context.t0 = _context.sent;\n\n                if (!(_context.t0 === \"\")) {\n                  _context.next = 8;\n                  break;\n                }\n\n                Router.pushRoute(\"/\"); // Automatic redirect the user to Login or Sign Up\n\n              case 8:\n                // Set the states required for the Leaderboard\n                this.setState({\n                  leaderboardData: _.sortBy(this.props.accountTokenMapping, ['token']).reverse()\n                });\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"renderQuestionHeader\",\n    value: function renderQuestionHeader() {\n      return React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        width: 2\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Current Phase\")), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        width: 2\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Answers Submitted\")), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        width: 2\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Reward\")), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\"\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Question Title\")));\n    } // Renders out the list of question\n\n  }, {\n    key: \"renderQuestionList\",\n    value: function renderQuestionList() {\n      var _this2 = this;\n\n      return this.props.summaries.map(function (summary, index) {\n        var questionState = summary[4];\n        var tagList = summary[8];\n        return React.createElement(Table.Row, {\n          key: index\n        }, React.createElement(Table.Cell, {\n          textAlign: \"center\",\n          width: 2\n        }, questionState == 0 ? React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \" Answering\")), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"Phase\"))) : questionState == 1 ? React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \" Voting\")), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"Phase\"))) : React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \" Rewarded\")), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"Phase\")))), React.createElement(Table.Cell, {\n          textAlign: \"center\",\n          width: 2\n        }, React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, _this2.props.numOfAnswers[index])), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"answer(s)\")))), React.createElement(Table.Cell, {\n          textAlign: \"center\",\n          width: 2\n        }, React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, summary[2])), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"ether(s)\")))), React.createElement(Table.Cell, {\n          textAlign: \"left\"\n        }, React.createElement(Grid.Row, {\n          textAlign: \"left\"\n        }, React.createElement(\"span\", {\n          style: {\n            fontSize: 18,\n            color: '#6A737C',\n            cursor: 'pointer'\n          },\n          onClick: function onClick() {\n            return Router.pushRoute(\"/questions/\".concat(_this2.props.deployedQuestions[index]));\n          }\n        }, React.createElement(\"a\", null, summary[0]))), _this2.renderTag(tagList)));\n      });\n    } // Render each tag individually for each question\n\n  }, {\n    key: \"renderTag\",\n    value: function renderTag(tagList) {\n      var tagColours = [\"red\", \"olive\", \"blue\", \"olive\", \"green\"];\n      return tagList.map(function (tag, index) {\n        var id = index % 5;\n        return React.createElement(Label, {\n          as: \"a\",\n          onClick: function onClick() {\n            return Router.pushRoute(\"/\".concat('search/' + encodeURIComponent(tag)));\n          },\n          tag: true,\n          size: \"mini\",\n          key: index,\n          color: tagColours[id]\n        }, tag);\n      });\n    }\n  }, {\n    key: \"renderStatistic\",\n    value: function renderStatistic() {\n      var numOfLikes = this.props.statistics[0];\n      var numOfDislikes = this.props.statistics[1];\n      var numOfUseful = this.props.statistics[2];\n      var numOfNotUseful = this.props.statistics[3];\n      var numOfEasy = this.props.statistics[4];\n      var numOfNotEasy = this.props.statistics[5];\n      var totalRatings = Number(numOfLikes) + Number(numOfDislikes);\n      return React.createElement(Rail, {\n        position: \"right\",\n        style: {\n          top: \"22%\",\n          left: \"95%\"\n        }\n      }, React.createElement(Segment, {\n        style: {\n          width: \"155%\"\n        }\n      }, React.createElement(Header, {\n        as: \"h3\",\n        textAlign: \"center\"\n      }, React.createElement(Icon, {\n        name: \"star\"\n      }), \"Summary Statistics of System\"), React.createElement(\"p\", {\n        style: {\n          textAlign: 'center'\n        }\n      }, React.createElement(\"b\", null, \"Total Rating(s):\"), \" \", totalRatings), React.createElement(Grid, {\n        centered: true,\n        columns: 2\n      }, React.createElement(Grid.Column, {\n        style: {\n          paddingLeft: \"10px\",\n          paddingRight: \"0\",\n          width: \"30%\"\n        }\n      }, React.createElement(Label, {\n        horizontal: true\n      }, \"Likes\")), React.createElement(Grid.Column, {\n        style: {\n          paddingLeft: \"0\",\n          paddingRight: \"10px\",\n          width: \"70%\"\n        }\n      }, React.createElement(Progress, {\n        color: \"green\",\n        value: numOfLikes,\n        total: totalRatings,\n        progress: \"percent\",\n        style: {\n          margin: \"0\"\n        }\n      })), React.createElement(Grid.Column, {\n        style: {\n          paddingLeft: \"10px\",\n          paddingRight: \"0\",\n          width: \"30%\"\n        }\n      }, React.createElement(Label, {\n        horizontal: true\n      }, \"Useful\")), React.createElement(Grid.Column, {\n        style: {\n          paddingLeft: \"0\",\n          paddingRight: \"10px\",\n          width: \"70%\"\n        }\n      }, React.createElement(Progress, {\n        color: \"green\",\n        value: numOfUseful,\n        total: totalRatings,\n        progress: \"percent\",\n        style: {\n          margin: \"0\"\n        }\n      })), React.createElement(Grid.Column, {\n        style: {\n          paddingLeft: \"10px\",\n          paddingRight: \"0\",\n          width: \"30%\"\n        }\n      }, React.createElement(Label, {\n        horizontal: true\n      }, \"Easy To Use\")), React.createElement(Grid.Column, {\n        style: {\n          paddingLeft: \"0\",\n          paddingRight: \"10px\",\n          width: \"70%\"\n        }\n      }, React.createElement(Progress, {\n        color: \"green\",\n        value: numOfEasy,\n        total: totalRatings,\n        progress: \"percent\",\n        style: {\n          margin: \"0\"\n        }\n      })))));\n    }\n  }, {\n    key: \"renderLeaderBoard\",\n    value: function renderLeaderBoard() {\n      var _this$state2 = this.state,\n          column = _this$state2.column,\n          data = _this$state2.data,\n          direction = _this$state2.direction;\n      return React.createElement(Rail, {\n        position: \"left\",\n        style: {\n          top: \"22%\",\n          right: \"110%\"\n        }\n      }, React.createElement(Segment, {\n        style: {\n          width: \"155%\"\n        }\n      }, React.createElement(Header, {\n        as: \"h3\",\n        textAlign: \"center\"\n      }, React.createElement(Icon, {\n        name: \"chess king\"\n      }), \"Leaderboard\"), React.createElement(\"p\", {\n        style: {\n          textAlign: 'center'\n        }\n      }, React.createElement(\"b\", null, \"Current Registered User(s):\"), \" \", this.state.leaderboardData.length), React.createElement(Table, {\n        basic: \"very\",\n        celled: true,\n        collapsing: true,\n        sortable: true\n      }, React.createElement(Table.Header, null, React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, null, \"Account\"), React.createElement(Table.HeaderCell, {\n        sorted: column === 'name' ? direction : null,\n        onClick: this.handleSort('name')\n      }, \"Points\"))), React.createElement(Table.Body, null, this.renderUserList()))));\n    }\n  }, {\n    key: \"renderUserList\",\n    value: function renderUserList() {\n      return this.state.leaderboardData.map(function (item, index) {\n        return React.createElement(Table.Row, {\n          key: index\n        }, React.createElement(Table.Cell, {\n          textAlign: \"center\",\n          width: 1\n        }, React.createElement(\"p\", {\n          style: {\n            fontSize: \"13px\"\n          }\n        }, item.account)), React.createElement(Table.Cell, {\n          textAlign: \"center\",\n          width: 1\n        }, React.createElement(\"p\", {\n          style: {\n            fontSize: \"13px\"\n          }\n        }, item.token)));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Layout, null, React.createElement(Container, {\n        style: {\n          width: \"100%\",\n          height: \"100vh\"\n        }\n      }, React.createElement(Grid, {\n        centered: true,\n        columns: 2\n      }, React.createElement(Grid.Column, null, React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"Questions Posted\"), React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(Container, null, React.createElement(Table, null, React.createElement(Table.Header, null, this.renderQuestionHeader()), React.createElement(Table.Body, null, this.renderQuestionList())), React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(\"div\", {\n        style: {\n          marginTop: 20\n        }\n      }, \"Found \", this.props.summaries.length, \" Item(s).\")), this.renderStatistic(), this.renderLeaderBoard()))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(props) {\n        var accounts, deployedQuestions, deployedQuestionsCount, ethWallet, accountTokenMapping, i, profileAddress, profile, token, questions, summaries, numOfAnswers, searchItem, _i, answerList, statistics;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context2.sent;\n                _context2.next = 5;\n                return credentials.methods.getBinding(accounts[0]).call();\n\n              case 5:\n                _context2.t0 = _context2.sent;\n\n                if (!(_context2.t0 === \"\")) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                Router.pushRoute(\"/\"); // Automatic redirect the user to Login or Sign Up\n\n              case 8:\n                _context2.next = 10;\n                return factory.methods.getDeployedQuestions().call();\n\n              case 10:\n                deployedQuestions = _context2.sent;\n                deployedQuestionsCount = deployedQuestions.length; // Retireve an array of addresses of ethWallets registered\n\n                _context2.next = 14;\n                return factory.methods.getEthWallets().call();\n\n              case 14:\n                ethWallet = _context2.sent;\n                accountTokenMapping = [];\n                i = 0;\n\n              case 17:\n                if (!(i < ethWallet.length)) {\n                  _context2.next = 29;\n                  break;\n                }\n\n                _context2.next = 20;\n                return factory.methods.getProfile(ethWallet[i]).call();\n\n              case 20:\n                profileAddress = _context2.sent;\n                profile = Profile(profileAddress);\n                _context2.next = 24;\n                return profile.methods.getToken().call();\n\n              case 24:\n                token = _context2.sent;\n                accountTokenMapping.push({\n                  account: ethWallet[i],\n                  token: token\n                });\n\n              case 26:\n                i++;\n                _context2.next = 17;\n                break;\n\n              case 29:\n                // Retrieve the summaries of all deployed questions\n                questions = [];\n                summaries = [];\n                numOfAnswers = [];\n\n                if (!(props.query.value != undefined && props.query.value != 'favicon.ico')) {\n                  _context2.next = 38;\n                  break;\n                }\n\n                searchItem = decodeURIComponent(props.query.value);\n                _context2.next = 36;\n                return search(searchItem, deployedQuestions);\n\n              case 36:\n                deployedQuestions = _context2.sent;\n                deployedQuestionsCount = deployedQuestions.length;\n\n              case 38:\n                _i = 0;\n\n              case 39:\n                if (!(_i < deployedQuestionsCount)) {\n                  _context2.next = 51;\n                  break;\n                }\n\n                questions[_i] = Question(deployedQuestions[_i]);\n                _context2.next = 43;\n                return questions[_i].methods.getSummary().call();\n\n              case 43:\n                summaries[_i] = _context2.sent;\n                _context2.next = 46;\n                return questions[_i].methods.getAnswerList().call();\n\n              case 46:\n                answerList = _context2.sent;\n                numOfAnswers[_i] = answerList.length;\n\n              case 48:\n                _i++;\n                _context2.next = 39;\n                break;\n\n              case 51:\n                _context2.next = 53;\n                return feedback.methods.getSummaryStatistics().call();\n\n              case 53:\n                statistics = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  accounts: accounts,\n                  deployedQuestions: deployedQuestions,\n                  summaries: summaries,\n                  numOfAnswers: numOfAnswers,\n                  statistics: statistics,\n                  accountTokenMapping: accountTokenMapping\n                });\n\n              case 55:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return HomePage;\n}(Component);\n\nexport default HomePage;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\home.js"],"names":["_","React","Component","Button","Header","Table","Statistic","Rating","Grid","Message","Divider","Container","Icon","Label","Rail","Progress","Segment","factory","credentials","Question","Profile","Layout","Link","Router","web3","feedback","search","HomePage","props","clickedColumn","state","column","leaderboardData","direction","setState","sortBy","reverse","eth","getAccounts","accounts","methods","getBinding","call","pushRoute","accountTokenMapping","fontSize","color","summaries","map","summary","index","questionState","tagList","numOfAnswers","cursor","deployedQuestions","renderTag","tagColours","tag","id","encodeURIComponent","numOfLikes","statistics","numOfDislikes","numOfUseful","numOfNotUseful","numOfEasy","numOfNotEasy","totalRatings","Number","top","left","width","textAlign","paddingLeft","paddingRight","margin","data","right","length","handleSort","renderUserList","item","account","token","height","renderQuestionHeader","renderQuestionList","marginTop","renderStatistic","renderLeaderBoard","getDeployedQuestions","deployedQuestionsCount","getEthWallets","ethWallet","i","getProfile","profileAddress","profile","getToken","push","questions","query","value","undefined","searchItem","decodeURIComponent","getSummary","getAnswerList","answerList","getSummaryStatistics"],"mappings":";;;;;;;;;AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,KAAzB,EAAgCC,SAAhC,EAA2CC,MAA3C,EAAmDC,IAAnD,EAAyDC,OAAzD,EACGC,OADH,EACYC,SADZ,EACuBC,IADvB,EAC6BC,KAD7B,EACoCC,IADpC,EAC0CC,QAD1C,EACoDC,OADpD,QACmE,mBADnE;AAEA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAAQC,IAAR,EAAcC,MAAd,QAA2B,WAA3B;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,SAAQC,MAAR,QAAqB,UAArB;;IAEMC,Q;;;;;AACA,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,kFAAMA,KAAN;;AADiB,iEASN,UAACC,aAAD;AAAA,aAAmB,YAAM;AAAA,0BACS,MAAKC,KADd;AAAA,YAC9BC,MAD8B,eAC9BA,MAD8B;AAAA,YACtBC,eADsB,eACtBA,eADsB;AAAA,YACLC,SADK,eACLA,SADK;;AAGtC,YAAIF,MAAM,KAAKF,aAAf,EAA8B;AAC5B,gBAAKK,QAAL,CAAc;AACZH,YAAAA,MAAM,EAAEF,aADI;AAEZG,YAAAA,eAAe,EAAEhC,CAAC,CAACmC,MAAF,CAASH,eAAT,EAA0B,CAACH,aAAD,CAA1B,CAFL;AAGZI,YAAAA,SAAS,EAAE;AAHC,WAAd;;AAMA;AACD;;AAED,cAAKC,QAAL,CAAc;AACZF,UAAAA,eAAe,EAAEA,eAAe,CAACI,OAAhB,EADL;AAEZH,UAAAA,SAAS,EAAEA,SAAS,KAAK,WAAd,GAA4B,YAA5B,GAA2C;AAF1C,SAAd;AAID,OAjBc;AAAA,KATM;;AAEjB,UAAKH,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,IADG;AAEXE,MAAAA,SAAS,EAAE,IAFA;AAGXD,MAAAA,eAAe,EAAE;AAHN,KAAb;AAFiB;AAOlB;;;;AAqEH;;;;;;;;;;;uBAGyBR,IAAI,CAACa,GAAL,CAASC,WAAT,E;;;AAAjBC,gBAAAA,Q;;uBACIrB,WAAW,CAACsB,OAAZ,CAAoBC,UAApB,CAA+BF,QAAQ,CAAC,CAAD,CAAvC,EAA4CG,IAA5C,E;;;;;sCAAuD,E;;;;;AAC7DnB,gBAAAA,MAAM,CAACoB,SAAP,M,CAAuB;;;AAG3B;AACA,qBAAKT,QAAL,CAAe;AAAEF,kBAAAA,eAAe,EAAEhC,CAAC,CAACmC,MAAF,CAAS,KAAKP,KAAL,CAAWgB,mBAApB,EAAyC,CAAC,OAAD,CAAzC,EAAoDR,OAApD;AAAnB,iBAAf;;;;;;;;;;;;;;;;;;2CAGqB;AACrB,aACE,oBAAC,KAAD,CAAO,GAAP,QACE,oBAAC,KAAD,CAAO,UAAP;AAAkB,QAAA,SAAS,EAAC,QAA5B;AAAqC,QAAA,KAAK,EAAE;AAA5C,SAA+C;AAAM,QAAA,KAAK,EAAE;AAACS,UAAAA,QAAQ,EAAE,EAAX;AAAeC,UAAAA,KAAK,EAAE;AAAtB;AAAb,yBAA/C,CADF,EAEE,oBAAC,KAAD,CAAO,UAAP;AAAkB,QAAA,SAAS,EAAC,QAA5B;AAAqC,QAAA,KAAK,EAAE;AAA5C,SAA+C;AAAM,QAAA,KAAK,EAAE;AAACD,UAAAA,QAAQ,EAAE,EAAX;AAAeC,UAAAA,KAAK,EAAE;AAAtB;AAAb,6BAA/C,CAFF,EAGE,oBAAC,KAAD,CAAO,UAAP;AAAkB,QAAA,SAAS,EAAC,QAA5B;AAAqC,QAAA,KAAK,EAAE;AAA5C,SAA+C;AAAM,QAAA,KAAK,EAAE;AAACD,UAAAA,QAAQ,EAAE,EAAX;AAAeC,UAAAA,KAAK,EAAE;AAAtB;AAAb,kBAA/C,CAHF,EAIE,oBAAC,KAAD,CAAO,UAAP;AAAkB,QAAA,SAAS,EAAC;AAA5B,SAAqC;AAAM,QAAA,KAAK,EAAE;AAACD,UAAAA,QAAQ,EAAE,EAAX;AAAeC,UAAAA,KAAK,EAAE;AAAtB;AAAb,0BAArC,CAJF,CADF;AAQD,K,CAED;;;;yCACqB;AAAA;;AACjB,aAAO,KAAKlB,KAAL,CAAWmB,SAAX,CAAqBC,GAArB,CAAyB,UAACC,OAAD,EAAUC,KAAV,EAAoB;AAChD,YAAMC,aAAa,GAAGF,OAAO,CAAC,CAAD,CAA7B;AACA,YAAMG,OAAO,GAAGH,OAAO,CAAC,CAAD,CAAvB;AACA,eAAO,oBAAC,KAAD,CAAO,GAAP;AAAW,UAAA,GAAG,EAAEC;AAAhB,WACL,oBAAC,KAAD,CAAO,IAAP;AAAY,UAAA,SAAS,EAAC,QAAtB;AAA+B,UAAA,KAAK,EAAE;AAAtC,WAEMC,aAAa,IAAI,CAAjB,GAAqB,oBAAC,SAAD;AAAW,UAAA,IAAI,EAAC,MAAhB;AAAuB,UAAA,KAAK,EAAC;AAA7B,WACL,oBAAC,SAAD,CAAW,KAAX,QAAiB;AACb,UAAA,KAAK,EAAE;AAACN,YAAAA,QAAQ,EAAE,EAAX;AAAeC,YAAAA,KAAK,EAAE;AAAtB;AADM,wBAAjB,CADK,EAIL,oBAAC,SAAD,CAAW,KAAX,QAAiB;AAAM,UAAA,KAAK,EAAE;AAACD,YAAAA,QAAQ,EAAE,EAAX;AAAeC,YAAAA,KAAK,EAAE;AAAtB;AAAb,mBAAjB,CAJK,CAArB,GAMYK,aAAa,IAAI,CAAjB,GACF,oBAAC,SAAD;AAAW,UAAA,IAAI,EAAC,MAAhB;AAAuB,UAAA,KAAK,EAAC;AAA7B,WACM,oBAAC,SAAD,CAAW,KAAX,QAAiB;AACb,UAAA,KAAK,EAAE;AAACN,YAAAA,QAAQ,EAAE,EAAX;AAAeC,YAAAA,KAAK,EAAE;AAAtB;AADM,qBAAjB,CADN,EAIM,oBAAC,SAAD,CAAW,KAAX,QAAiB;AAAM,UAAA,KAAK,EAAE;AAACD,YAAAA,QAAQ,EAAE,EAAX;AAAeC,YAAAA,KAAK,EAAE;AAAtB;AAAb,mBAAjB,CAJN,CADE,GAOD,oBAAC,SAAD;AAAW,UAAA,IAAI,EAAC,MAAhB;AAAuB,UAAA,KAAK,EAAC;AAA7B,WACK,oBAAC,SAAD,CAAW,KAAX,QAAiB;AACb,UAAA,KAAK,EAAE;AAACD,YAAAA,QAAQ,EAAE,EAAX;AAAeC,YAAAA,KAAK,EAAE;AAAtB;AADM,uBAAjB,CADL,EAIK,oBAAC,SAAD,CAAW,KAAX,QAAiB;AAAM,UAAA,KAAK,EAAE;AAACD,YAAAA,QAAQ,EAAE,EAAX;AAAeC,YAAAA,KAAK,EAAE;AAAtB;AAAb,mBAAjB,CAJL,CAfjB,CADK,EAwBH,oBAAC,KAAD,CAAO,IAAP;AAAY,UAAA,SAAS,EAAC,QAAtB;AAA+B,UAAA,KAAK,EAAE;AAAtC,WACI,oBAAC,SAAD;AAAW,UAAA,IAAI,EAAC,MAAhB;AAAuB,UAAA,KAAK,EAAC;AAA7B,WACI,oBAAC,SAAD,CAAW,KAAX,QAAiB;AAAM,UAAA,KAAK,EAAE;AAACD,YAAAA,QAAQ,EAAE,EAAX;AAAeC,YAAAA,KAAK,EAAE;AAAtB;AAAb,WAAgD,MAAI,CAAClB,KAAL,CAAWyB,YAAX,CAAwBH,KAAxB,CAAhD,CAAjB,CADJ,EAEI,oBAAC,SAAD,CAAW,KAAX,QAAiB;AAAM,UAAA,KAAK,EAAE;AAACL,YAAAA,QAAQ,EAAE,EAAX;AAAeC,YAAAA,KAAK,EAAE;AAAtB;AAAb,uBAAjB,CAFJ,CADJ,CAxBG,EA8BH,oBAAC,KAAD,CAAO,IAAP;AAAY,UAAA,SAAS,EAAC,QAAtB;AAA+B,UAAA,KAAK,EAAE;AAAtC,WACI,oBAAC,SAAD;AAAW,UAAA,IAAI,EAAC,MAAhB;AAAuB,UAAA,KAAK,EAAC;AAA7B,WACI,oBAAC,SAAD,CAAW,KAAX,QAAiB;AAAM,UAAA,KAAK,EAAE;AAACD,YAAAA,QAAQ,EAAE,EAAX;AAAeC,YAAAA,KAAK,EAAE;AAAtB;AAAb,WAAgDG,OAAO,CAAC,CAAD,CAAvD,CAAjB,CADJ,EAEI,oBAAC,SAAD,CAAW,KAAX,QAAiB;AAAM,UAAA,KAAK,EAAE;AAACJ,YAAAA,QAAQ,EAAE,EAAX;AAAeC,YAAAA,KAAK,EAAE;AAAtB;AAAb,sBAAjB,CAFJ,CADJ,CA9BG,EAoCH,oBAAC,KAAD,CAAO,IAAP;AAAY,UAAA,SAAS,EAAC;AAAtB,WACI,oBAAC,IAAD,CAAM,GAAN;AAAU,UAAA,SAAS,EAAC;AAApB,WACI;AAAM,UAAA,KAAK,EAAE;AAACD,YAAAA,QAAQ,EAAE,EAAX;AAAeC,YAAAA,KAAK,EAAE,SAAtB;AAAiCQ,YAAAA,MAAM,EAAE;AAAzC,WAAb;AAAkE,UAAA,OAAO,EAAE;AAAA,mBAAM/B,MAAM,CAACoB,SAAP,sBAA+B,MAAI,CAACf,KAAL,CAAW2B,iBAAX,CAA6BL,KAA7B,CAA/B,EAAN;AAAA;AAA3E,WAAwJ,+BAAID,OAAO,CAAC,CAAD,CAAX,CAAxJ,CADJ,CADJ,EAIK,MAAI,CAACO,SAAL,CAAeJ,OAAf,CAJL,CApCG,CAAP;AA2CL,OA9CQ,CAAP;AA+CH,K,CAED;;;;8BACUA,O,EAAS;AACjB,UAAMK,UAAU,GAAG,CAAC,KAAD,EAAQ,OAAR,EAAiB,MAAjB,EAAyB,OAAzB,EAAkC,OAAlC,CAAnB;AACA,aAAOL,OAAO,CAACJ,GAAR,CAAY,UAACU,GAAD,EAAMR,KAAN,EAAgB;AACjC,YAAIS,EAAE,GAAGT,KAAK,GAAG,CAAjB;AACA,eACE,oBAAC,KAAD;AAAO,UAAA,EAAE,EAAC,GAAV;AAAc,UAAA,OAAO,EAAE;AAAA,mBAAM3B,MAAM,CAACoB,SAAP,YAAqB,YAAUiB,kBAAkB,CAACF,GAAD,CAAjD,EAAN;AAAA,WAAvB;AACE,UAAA,GAAG,MADL;AACM,UAAA,IAAI,EAAE,MADZ;AACoB,UAAA,GAAG,EAAER,KADzB;AACgC,UAAA,KAAK,EAAEO,UAAU,CAACE,EAAD;AADjD,WAEGD,GAFH,CADF;AAMD,OARM,CAAP;AASD;;;sCAEiB;AAChB,UAAMG,UAAU,GAAG,KAAKjC,KAAL,CAAWkC,UAAX,CAAsB,CAAtB,CAAnB;AACA,UAAMC,aAAa,GAAG,KAAKnC,KAAL,CAAWkC,UAAX,CAAsB,CAAtB,CAAtB;AACA,UAAME,WAAW,GAAG,KAAKpC,KAAL,CAAWkC,UAAX,CAAsB,CAAtB,CAApB;AACA,UAAMG,cAAc,GAAG,KAAKrC,KAAL,CAAWkC,UAAX,CAAsB,CAAtB,CAAvB;AACA,UAAMI,SAAS,GAAG,KAAKtC,KAAL,CAAWkC,UAAX,CAAsB,CAAtB,CAAlB;AACA,UAAMK,YAAY,GAAG,KAAKvC,KAAL,CAAWkC,UAAX,CAAsB,CAAtB,CAArB;AACA,UAAMM,YAAY,GAAGC,MAAM,CAACR,UAAD,CAAN,GAAqBQ,MAAM,CAACN,aAAD,CAAhD;AACA,aACE,oBAAC,IAAD;AAAM,QAAA,QAAQ,EAAC,OAAf;AAAuB,QAAA,KAAK,EAAE;AAACO,UAAAA,GAAG,EAAC,KAAL;AAAYC,UAAAA,IAAI,EAAC;AAAjB;AAA9B,SACE,oBAAC,OAAD;AAAS,QAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAC;AAAP;AAAhB,SACE,oBAAC,MAAD;AAAQ,QAAA,EAAE,EAAC,IAAX;AAAgB,QAAA,SAAS,EAAC;AAA1B,SACE,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC;AAAX,QADF,iCADF,EAIE;AAAG,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAC;AAAZ;AAAV,SACE,kDADF,OAC2BL,YAD3B,CAJF,EAOE,oBAAC,IAAD;AAAM,QAAA,QAAQ,MAAd;AAAe,QAAA,OAAO,EAAE;AAAxB,SACE,oBAAC,IAAD,CAAM,MAAN;AAAa,QAAA,KAAK,EAAE;AAACM,UAAAA,WAAW,EAAC,MAAb;AAAqBC,UAAAA,YAAY,EAAC,GAAlC;AAAuCH,UAAAA,KAAK,EAAC;AAA7C;AAApB,SACE,oBAAC,KAAD;AAAO,QAAA,UAAU;AAAjB,iBADF,CADF,EAME,oBAAC,IAAD,CAAM,MAAN;AAAa,QAAA,KAAK,EAAE;AAACE,UAAAA,WAAW,EAAC,GAAb;AAAkBC,UAAAA,YAAY,EAAC,MAA/B;AAAuCH,UAAAA,KAAK,EAAC;AAA7C;AAApB,SACE,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAC,OAAhB;AAAwB,QAAA,KAAK,EAAEX,UAA/B;AAA2C,QAAA,KAAK,EAAEO,YAAlD;AAAgE,QAAA,QAAQ,EAAC,SAAzE;AAAmF,QAAA,KAAK,EAAE;AAAEQ,UAAAA,MAAM,EAAC;AAAT;AAA1F,QADF,CANF,EASE,oBAAC,IAAD,CAAM,MAAN;AAAa,QAAA,KAAK,EAAE;AAACF,UAAAA,WAAW,EAAC,MAAb;AAAqBC,UAAAA,YAAY,EAAC,GAAlC;AAAuCH,UAAAA,KAAK,EAAC;AAA7C;AAApB,SACE,oBAAC,KAAD;AAAO,QAAA,UAAU;AAAjB,kBADF,CATF,EAcE,oBAAC,IAAD,CAAM,MAAN;AAAa,QAAA,KAAK,EAAE;AAACE,UAAAA,WAAW,EAAC,GAAb;AAAkBC,UAAAA,YAAY,EAAC,MAA/B;AAAuCH,UAAAA,KAAK,EAAC;AAA7C;AAApB,SACE,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAC,OAAhB;AAAwB,QAAA,KAAK,EAAER,WAA/B;AAA4C,QAAA,KAAK,EAAEI,YAAnD;AAAiE,QAAA,QAAQ,EAAC,SAA1E;AAAmF,QAAA,KAAK,EAAE;AAAEQ,UAAAA,MAAM,EAAC;AAAT;AAA1F,QADF,CAdF,EAiBE,oBAAC,IAAD,CAAM,MAAN;AAAa,QAAA,KAAK,EAAE;AAACF,UAAAA,WAAW,EAAC,MAAb;AAAqBC,UAAAA,YAAY,EAAC,GAAlC;AAAuCH,UAAAA,KAAK,EAAC;AAA7C;AAApB,SACE,oBAAC,KAAD;AAAO,QAAA,UAAU;AAAjB,uBADF,CAjBF,EAsBE,oBAAC,IAAD,CAAM,MAAN;AAAa,QAAA,KAAK,EAAE;AAACE,UAAAA,WAAW,EAAC,GAAb;AAAkBC,UAAAA,YAAY,EAAC,MAA/B;AAAuCH,UAAAA,KAAK,EAAC;AAA7C;AAApB,SACE,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAC,OAAhB;AAAwB,QAAA,KAAK,EAAEN,SAA/B;AAA0C,QAAA,KAAK,EAAEE,YAAjD;AAA+D,QAAA,QAAQ,EAAC,SAAxE;AAAkF,QAAA,KAAK,EAAE;AAAEQ,UAAAA,MAAM,EAAC;AAAT;AAAzF,QADF,CAtBF,CAPF,CADF,CADF;AAsCD;;;wCAEmB;AAAA,yBACkB,KAAK9C,KADvB;AAAA,UACVC,MADU,gBACVA,MADU;AAAA,UACF8C,IADE,gBACFA,IADE;AAAA,UACI5C,SADJ,gBACIA,SADJ;AAGlB,aACE,oBAAC,IAAD;AAAM,QAAA,QAAQ,EAAC,MAAf;AAAsB,QAAA,KAAK,EAAE;AAACqC,UAAAA,GAAG,EAAC,KAAL;AAAYQ,UAAAA,KAAK,EAAC;AAAlB;AAA7B,SACE,oBAAC,OAAD;AAAS,QAAA,KAAK,EAAE;AAACN,UAAAA,KAAK,EAAC;AAAP;AAAhB,SACE,oBAAC,MAAD;AAAQ,QAAA,EAAE,EAAC,IAAX;AAAgB,QAAA,SAAS,EAAC;AAA1B,SACE,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC;AAAX,QADF,gBADF,EAIE;AAAG,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAC;AAAZ;AAAV,SACE,6DADF,OACsC,KAAK3C,KAAL,CAAWE,eAAX,CAA2B+C,MADjE,CAJF,EAOE,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAC,MAAb;AAAoB,QAAA,MAAM,MAA1B;AAA2B,QAAA,UAAU,MAArC;AAAsC,QAAA,QAAQ;AAA9C,SACE,oBAAC,KAAD,CAAO,MAAP,QACE,oBAAC,KAAD,CAAO,GAAP,QACE,oBAAC,KAAD,CAAO,UAAP,kBADF,EAEE,oBAAC,KAAD,CAAO,UAAP;AACE,QAAA,MAAM,EAAEhD,MAAM,KAAK,MAAX,GAAoBE,SAApB,GAAgC,IAD1C;AAEE,QAAA,OAAO,EAAE,KAAK+C,UAAL,CAAgB,MAAhB;AAFX,kBAFF,CADF,CADF,EAWE,oBAAC,KAAD,CAAO,IAAP,QACG,KAAKC,cAAL,EADH,CAXF,CAPF,CADF,CADF;AA2BD;;;qCAEgB;AACf,aAAO,KAAKnD,KAAL,CAAWE,eAAX,CAA2BgB,GAA3B,CAA+B,UAACkC,IAAD,EAAOhC,KAAP,EAAiB;AACrD,eACE,oBAAC,KAAD,CAAO,GAAP;AAAW,UAAA,GAAG,EAAEA;AAAhB,WACE,oBAAC,KAAD,CAAO,IAAP;AAAY,UAAA,SAAS,EAAC,QAAtB;AAA+B,UAAA,KAAK,EAAE;AAAtC,WACE;AAAG,UAAA,KAAK,EAAE;AAACL,YAAAA,QAAQ,EAAC;AAAV;AAAV,WAA8BqC,IAAI,CAACC,OAAnC,CADF,CADF,EAIE,oBAAC,KAAD,CAAO,IAAP;AAAY,UAAA,SAAS,EAAC,QAAtB;AAA+B,UAAA,KAAK,EAAE;AAAtC,WACE;AAAG,UAAA,KAAK,EAAE;AAACtC,YAAAA,QAAQ,EAAC;AAAV;AAAV,WAA8BqC,IAAI,CAACE,KAAnC,CADF,CAJF,CADF;AAUD,OAXM,CAAP;AAYD;;;6BAEQ;AACL,aACI,oBAAC,MAAD,QACE,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAE;AAACZ,UAAAA,KAAK,EAAE,MAAR;AAAgBa,UAAAA,MAAM,EAAC;AAAvB;AAAlB,SACE,oBAAC,IAAD;AAAM,QAAA,QAAQ,MAAd;AAAe,QAAA,OAAO,EAAE;AAAxB,SACE,oBAAC,IAAD,CAAM,MAAN,QACE,oBAAC,OAAD;AAAS,QAAA,MAAM;AAAf,QADF,EAEE,oBAAC,MAAD;AAAQ,QAAA,EAAE,EAAC,IAAX;AAAgB,QAAA,SAAS,EAAC;AAA1B,4BAFF,EAKE,oBAAC,OAAD;AAAS,QAAA,MAAM;AAAf,QALF,EAME,oBAAC,SAAD,QACE,oBAAC,KAAD,QACE,oBAAC,KAAD,CAAO,MAAP,QACG,KAAKC,oBAAL,EADH,CADF,EAIE,oBAAC,KAAD,CAAO,IAAP,QACG,KAAKC,kBAAL,EADH,CAJF,CADF,EASE,oBAAC,OAAD;AAAS,QAAA,MAAM;AAAf,QATF,EAUE;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb;AAAZ,mBAAsC,KAAK5D,KAAL,CAAWmB,SAAX,CAAqBgC,MAA3D,cAVF,CANF,EAkBG,KAAKU,eAAL,EAlBH,EAmBG,KAAKC,iBAAL,EAnBH,CADF,CADF,CADF,CADJ;AA6BH;;;;;;iDArQ6B9D,K;;;;;;;;uBAEHJ,IAAI,CAACa,GAAL,CAASC,WAAT,E;;;AAAjBC,gBAAAA,Q;;uBACIrB,WAAW,CAACsB,OAAZ,CAAoBC,UAApB,CAA+BF,QAAQ,CAAC,CAAD,CAAvC,EAA4CG,IAA5C,E;;;;;uCAAuD,E;;;;;AAC7DnB,gBAAAA,MAAM,CAACoB,SAAP,M,CAAuB;;;;uBAIG1B,OAAO,CAACuB,OAAR,CAAgBmD,oBAAhB,GAAuCjD,IAAvC,E;;;AAA1Ba,gBAAAA,iB;AACAqC,gBAAAA,sB,GAAyBrC,iBAAiB,CAACwB,M,EAE/C;;;uBACsB9D,OAAO,CAACuB,OAAR,CAAgBqD,aAAhB,GAAgCnD,IAAhC,E;;;AAAlBoD,gBAAAA,S;AACAlD,gBAAAA,mB,GAAsB,E;AAEjBmD,gBAAAA,C,GAAE,C;;;sBAAGA,CAAC,GAACD,SAAS,CAACf,M;;;;;;uBACG9D,OAAO,CAACuB,OAAR,CAAgBwD,UAAhB,CAA2BF,SAAS,CAACC,CAAD,CAApC,EAAyCrD,IAAzC,E;;;AAAvBuD,gBAAAA,c;AACAC,gBAAAA,O,GAAU9E,OAAO,CAAC6E,cAAD,C;;uBACHC,OAAO,CAAC1D,OAAR,CAAgB2D,QAAhB,GAA2BzD,IAA3B,E;;;AAAd0C,gBAAAA,K;AACJxC,gBAAAA,mBAAmB,CAACwD,IAApB,CAAyB;AACvBjB,kBAAAA,OAAO,EAAEW,SAAS,CAACC,CAAD,CADK;AAEvBX,kBAAAA,KAAK,EAAEA;AAFgB,iBAAzB;;;AAJgCW,gBAAAA,CAAC,E;;;;;AAUnC;AACIM,gBAAAA,S,GAAY,E;AACZtD,gBAAAA,S,GAAY,E;AACZM,gBAAAA,Y,GAAe,E;;sBAGfzB,KAAK,CAAC0E,KAAN,CAAYC,KAAZ,IAAqBC,SAArB,IAAkC5E,KAAK,CAAC0E,KAAN,CAAYC,KAAZ,IAAqB,a;;;;;AACvDE,gBAAAA,UAAU,GAAGC,kBAAkB,CAAC9E,KAAK,CAAC0E,KAAN,CAAYC,KAAb,CAA/B;;uBAC0B7E,MAAM,CAAC+E,UAAD,EAAYlD,iBAAZ,C;;;AAAhCA,gBAAAA,iB;AACAqC,gBAAAA,sBAAsB,GAAGrC,iBAAiB,CAACwB,MAA3C;;;AAGIgB,gBAAAA,E,GAAE,C;;;sBAAGA,EAAC,GAACH,sB;;;;;AACbS,gBAAAA,SAAS,CAACN,EAAD,CAAT,GAAe5E,QAAQ,CAACoC,iBAAiB,CAACwC,EAAD,CAAlB,CAAvB;;uBACqBM,SAAS,CAACN,EAAD,CAAT,CAAavD,OAAb,CAAqBmE,UAArB,GAAkCjE,IAAlC,E;;;AAArBK,gBAAAA,SAAS,CAACgD,EAAD,C;;uBACcM,SAAS,CAACN,EAAD,CAAT,CAAavD,OAAb,CAAqBoE,aAArB,GAAqClE,IAArC,E;;;AAAnBmE,gBAAAA,U;AACJxD,gBAAAA,YAAY,CAAC0C,EAAD,CAAZ,GAAkBc,UAAU,CAAC9B,MAA7B;;;AAJqCgB,gBAAAA,EAAC,E;;;;;;uBAOjBtE,QAAQ,CAACe,OAAT,CAAiBsE,oBAAjB,GAAwCpE,IAAxC,E;;;AAAnBoB,gBAAAA,U;kDACG;AAAEvB,kBAAAA,QAAQ,EAARA,QAAF;AAAYgB,kBAAAA,iBAAiB,EAAjBA,iBAAZ;AAA+BR,kBAAAA,SAAS,EAATA,SAA/B;AAA0CM,kBAAAA,YAAY,EAAZA,YAA1C;AAAwDS,kBAAAA,UAAU,EAAVA,UAAxD;AAAoElB,kBAAAA,mBAAmB,EAAnBA;AAApE,iB;;;;;;;;;;;;;;;;;;;EA1EQ1C,S;;AAqSvB,eAAeyB,QAAf","sourcesContent":["import _ from 'lodash';\r\nimport React, { Component } from 'react';\r\nimport { Button, Header, Table, Statistic, Rating, Grid, Message,\r\n   Divider, Container, Icon, Label, Rail, Progress, Segment } from 'semantic-ui-react';\r\nimport factory from '../ethereum/factory';\r\nimport credentials from '../ethereum/credentials';\r\nimport Question from '../ethereum/question';\r\nimport Profile from '../ethereum/profile';\r\nimport Layout from '../components/Layout';\r\nimport {Link, Router} from '../routes';\r\nimport web3 from '../ethereum/web3';\r\nimport feedback from '../ethereum/feedback';\r\nimport {search} from './search';\r\n\r\nclass HomePage extends Component {\r\n      constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          column: null,\r\n          direction: null,\r\n          leaderboardData: []\r\n        };\r\n      }\r\n\r\n      handleSort = (clickedColumn) => () => {\r\n      const { column, leaderboardData, direction } = this.state\r\n\r\n      if (column !== clickedColumn) {\r\n        this.setState({\r\n          column: clickedColumn,\r\n          leaderboardData: _.sortBy(leaderboardData, [clickedColumn]),\r\n          direction: 'ascending',\r\n        })\r\n\r\n        return\r\n      }\r\n\r\n      this.setState({\r\n        leaderboardData: leaderboardData.reverse(),\r\n        direction: direction === 'ascending' ? 'descending' : 'ascending',\r\n      })\r\n    }\r\n\r\n    static async getInitialProps (props) {\r\n        // Retrieve the Ethereum Account from MetaMask\r\n        const accounts = await web3.eth.getAccounts();\r\n        if (await credentials.methods.getBinding(accounts[0]).call() === \"\"){\r\n            Router.pushRoute(`/`); // Automatic redirect the user to Login or Sign Up\r\n        }\r\n\r\n        // Retrieve an array of addresses of questions deployed\r\n        let deployedQuestions = await factory.methods.getDeployedQuestions().call();\r\n        let deployedQuestionsCount = deployedQuestions.length;\r\n\r\n        // Retireve an array of addresses of ethWallets registered\r\n        let ethWallet = await factory.methods.getEthWallets().call();\r\n        let accountTokenMapping = [];\r\n\r\n        for (let i=0; i<ethWallet.length; i++) {\r\n          let profileAddress = await factory.methods.getProfile(ethWallet[i]).call();\r\n          let profile = Profile(profileAddress);\r\n          let token = await profile.methods.getToken().call();\r\n          accountTokenMapping.push({\r\n            account: ethWallet[i],\r\n            token: token\r\n          });\r\n        }\r\n\r\n        // Retrieve the summaries of all deployed questions\r\n        let questions = [];\r\n        let summaries = [];\r\n        let numOfAnswers = [];\r\n        let searchItem;\r\n        //filter the questions based on search value\r\n        if (props.query.value != undefined && props.query.value != 'favicon.ico') {\r\n            searchItem = decodeURIComponent(props.query.value);\r\n            deployedQuestions = await search(searchItem,deployedQuestions);\r\n            deployedQuestionsCount = deployedQuestions.length;\r\n        }\r\n\r\n        for(let i=0; i<deployedQuestionsCount; i++) {\r\n          questions[i] = Question(deployedQuestions[i]);\r\n          summaries[i] = await questions[i].methods.getSummary().call();\r\n          let answerList = await questions[i].methods.getAnswerList().call();\r\n          numOfAnswers[i] = answerList.length;\r\n        }\r\n\r\n        let statistics = await feedback.methods.getSummaryStatistics().call();\r\n        return { accounts, deployedQuestions, summaries, numOfAnswers, statistics, accountTokenMapping };\r\n    }\r\n\r\n    // Redirect E-Wallet that are not Logged In to the Login Page\r\n    async componentWillMount() {\r\n      // Retrieve the Ethereum Account from MetaMask\r\n      const accounts = await web3.eth.getAccounts();\r\n      if (await credentials.methods.getBinding(accounts[0]).call() === \"\"){\r\n          Router.pushRoute(`/`); // Automatic redirect the user to Login or Sign Up\r\n      }\r\n\r\n      // Set the states required for the Leaderboard\r\n      this.setState( { leaderboardData: _.sortBy(this.props.accountTokenMapping, ['token']).reverse() });\r\n    }\r\n\r\n    renderQuestionHeader() {\r\n      return(\r\n        <Table.Row>\r\n          <Table.HeaderCell textAlign='center' width={2}><span style={{fontSize: 15, color: '#6A737C'}}>Current Phase</span></Table.HeaderCell>\r\n          <Table.HeaderCell textAlign='center' width={2}><span style={{fontSize: 15, color: '#6A737C'}}>Answers Submitted</span></Table.HeaderCell>\r\n          <Table.HeaderCell textAlign='center' width={2}><span style={{fontSize: 15, color: '#6A737C'}}>Reward</span></Table.HeaderCell>\r\n          <Table.HeaderCell textAlign='center'><span style={{fontSize: 15, color: '#6A737C'}}>Question Title</span></Table.HeaderCell>\r\n        </Table.Row>\r\n      );\r\n    }\r\n\r\n    // Renders out the list of question\r\n    renderQuestionList() {\r\n        return this.props.summaries.map((summary, index) => {\r\n            const questionState = summary[4];\r\n            const tagList = summary[8];\r\n            return <Table.Row key={index}>\r\n              <Table.Cell textAlign='center' width={2}>\r\n                  {\r\n                    questionState == 0 ? <Statistic size='mini' color='red'>\r\n                                    <Statistic.Value><span\r\n                                        style={{fontSize: 15, color: '#6A737C'}}> Answering\r\n                                                    </span></Statistic.Value>\r\n                                    <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>Phase</span></Statistic.Label>\r\n                                </Statistic>\r\n                              : questionState == 1 ?\r\n                              <Statistic size='mini' color='red'>\r\n                                    <Statistic.Value><span\r\n                                        style={{fontSize: 15, color: '#6A737C'}}> Voting\r\n                                                    </span></Statistic.Value>\r\n                                    <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>Phase</span></Statistic.Label>\r\n                                </Statistic>\r\n                              :<Statistic size='mini' color='red'>\r\n                                    <Statistic.Value><span\r\n                                        style={{fontSize: 15, color: '#6A737C'}}> Rewarded\r\n                                                    </span></Statistic.Value>\r\n                                    <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>Phase</span></Statistic.Label>\r\n                                </Statistic>\r\n                  }\r\n                </Table.Cell>\r\n                <Table.Cell textAlign='center' width={2}>\r\n                    <Statistic size='mini' color='red'>\r\n                        <Statistic.Value><span style={{fontSize: 15, color: '#6A737C'}}>{this.props.numOfAnswers[index]}</span></Statistic.Value>\r\n                        <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>answer(s)</span></Statistic.Label>\r\n                    </Statistic>\r\n                </Table.Cell>\r\n                <Table.Cell textAlign='center' width={2}>\r\n                    <Statistic size='mini' color='red'>\r\n                        <Statistic.Value><span style={{fontSize: 15, color: '#6A737C'}}>{summary[2]}</span></Statistic.Value>\r\n                        <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>ether(s)</span></Statistic.Label>\r\n                    </Statistic>\r\n                </Table.Cell>\r\n                <Table.Cell textAlign='left'>\r\n                    <Grid.Row textAlign='left'>\r\n                        <span style={{fontSize: 18, color: '#6A737C', cursor: 'pointer'}} onClick={() => Router.pushRoute(`/questions/${this.props.deployedQuestions[index]}`)}><a>{summary[0]}</a></span>\r\n                    </Grid.Row>\r\n                    {this.renderTag(tagList)}\r\n                </Table.Cell>\r\n            </Table.Row>\r\n      });\r\n    }\r\n\r\n    // Render each tag individually for each question\r\n    renderTag(tagList) {\r\n      const tagColours = [\"red\", \"olive\", \"blue\", \"olive\", \"green\"];\r\n      return tagList.map((tag, index) => {\r\n        let id = index % 5;\r\n        return(\r\n          <Label as='a' onClick={() => Router.pushRoute(`/${'search/'+encodeURIComponent(tag)}`)}\r\n            tag size={\"mini\"} key={index} color={tagColours[id]}>\r\n            {tag}\r\n          </Label>\r\n        )\r\n      });\r\n    }\r\n\r\n    renderStatistic() {\r\n      const numOfLikes = this.props.statistics[0];\r\n      const numOfDislikes = this.props.statistics[1];\r\n      const numOfUseful = this.props.statistics[2];\r\n      const numOfNotUseful = this.props.statistics[3];\r\n      const numOfEasy = this.props.statistics[4];\r\n      const numOfNotEasy = this.props.statistics[5];\r\n      const totalRatings = Number(numOfLikes) + Number(numOfDislikes);\r\n      return (\r\n        <Rail position='right' style={{top:\"22%\", left:\"95%\"}}>\r\n          <Segment style={{width:\"155%\"}}>\r\n            <Header as='h3' textAlign=\"center\">\r\n              <Icon name=\"star\"/>Summary Statistics of System\r\n            </Header>\r\n            <p style={{ textAlign:'center'}}>\r\n              <b>Total Rating(s):</b> {totalRatings}\r\n            </p>\r\n            <Grid centered columns={2}>\r\n              <Grid.Column style={{paddingLeft:\"10px\", paddingRight:\"0\", width:\"30%\"}}>\r\n                <Label horizontal>\r\n                  Likes\r\n                </Label>\r\n              </Grid.Column>\r\n              <Grid.Column style={{paddingLeft:\"0\", paddingRight:\"10px\", width:\"70%\"}}>\r\n                <Progress color='green' value={numOfLikes} total={totalRatings} progress='percent' style={{ margin:\"0\"}}/>\r\n              </Grid.Column>\r\n              <Grid.Column style={{paddingLeft:\"10px\", paddingRight:\"0\", width:\"30%\"}}>\r\n                <Label horizontal>\r\n                  Useful\r\n                </Label>\r\n              </Grid.Column>\r\n              <Grid.Column style={{paddingLeft:\"0\", paddingRight:\"10px\", width:\"70%\"}}>\r\n                <Progress color='green' value={numOfUseful} total={totalRatings} progress='percent'style={{ margin:\"0\"}}/>\r\n              </Grid.Column>\r\n              <Grid.Column style={{paddingLeft:\"10px\", paddingRight:\"0\", width:\"30%\"}}>\r\n                <Label horizontal>\r\n                  Easy To Use\r\n                </Label>\r\n              </Grid.Column>\r\n              <Grid.Column style={{paddingLeft:\"0\", paddingRight:\"10px\", width:\"70%\"}}>\r\n                <Progress color='green' value={numOfEasy} total={totalRatings} progress='percent' style={{ margin:\"0\"}}/>\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Segment>\r\n        </Rail>\r\n      );\r\n    }\r\n\r\n    renderLeaderBoard() {\r\n      const { column, data, direction } = this.state\r\n\r\n      return (\r\n        <Rail position='left' style={{top:\"22%\", right:\"110%\"}}>\r\n          <Segment style={{width:\"155%\"}}>\r\n            <Header as='h3' textAlign=\"center\">\r\n              <Icon name=\"chess king\"/>Leaderboard\r\n            </Header>\r\n            <p style={{ textAlign:'center'}}>\r\n              <b>Current Registered User(s):</b> {this.state.leaderboardData.length}\r\n            </p>\r\n            <Table basic='very' celled collapsing sortable>\r\n              <Table.Header>\r\n                <Table.Row>\r\n                  <Table.HeaderCell>Account</Table.HeaderCell>\r\n                  <Table.HeaderCell\r\n                    sorted={column === 'name' ? direction : null}\r\n                    onClick={this.handleSort('name')}>\r\n                  Points\r\n                  </Table.HeaderCell>\r\n                </Table.Row>\r\n              </Table.Header>\r\n              <Table.Body>\r\n                {this.renderUserList()}\r\n              </Table.Body>\r\n            </Table>\r\n          </Segment>\r\n        </Rail>\r\n      );\r\n    }\r\n\r\n    renderUserList() {\r\n      return this.state.leaderboardData.map((item, index) => {\r\n        return (\r\n          <Table.Row key={index}>\r\n            <Table.Cell textAlign='center' width={1}>\r\n              <p style={{fontSize:\"13px\"}}>{item.account}</p>\r\n            </Table.Cell>\r\n            <Table.Cell textAlign='center' width={1}>\r\n              <p style={{fontSize:\"13px\"}}>{item.token}</p>\r\n            </Table.Cell>\r\n          </Table.Row>\r\n        );\r\n      });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Layout>\r\n              <Container style={{width: \"100%\", height:\"100vh\"}}>\r\n                <Grid centered columns={2}>\r\n                  <Grid.Column>\r\n                    <Divider hidden/>\r\n                    <Header as='h2' textAlign='center'>\r\n                        Questions Posted\r\n                    </Header>\r\n                    <Divider hidden/>\r\n                    <Container>\r\n                      <Table>\r\n                        <Table.Header>\r\n                          {this.renderQuestionHeader()}\r\n                        </Table.Header>\r\n                        <Table.Body>\r\n                          {this.renderQuestionList()}\r\n                        </Table.Body>\r\n                      </Table>\r\n                      <Divider hidden/>\r\n                      <div style={{ marginTop: 20 }}>Found {this.props.summaries.length} Item(s).</div>\r\n                    </Container>\r\n                    {this.renderStatistic()}\r\n                    {this.renderLeaderBoard()}\r\n                  </Grid.Column>\r\n                </Grid>\r\n              </Container>\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}