{"ast":null,"code":"// // Imports Web3 API\n// import Web3 from 'web3';\n//\n// // New instance of Web3 with the provider that is automatically provided to us by MetaMask inside the browser.\n// // This makes the assumption that the user has MetaMask.\n// let web3;\n//\n// // Modern DApp broswer\n// if (typeof window !== 'undefined' && window.ethereum) {\n//   let instance = new Web3(window.ethereum);\n//   try {\n//     // Request account access if needed\n//     window.ethereum.enable();\n//     // Acccounts now exposed\n//     web3 = instance;\n//   } catch (error) {\n//     // User denied account access\n//     alert('Please allow access for the app to work');\n//   }\n// } else if (typeof window !== 'undefined' && window.web3) {\n//   //Legacy DApp browser\n//   web3 = new Web3(web3.currentProvider);\n//   // Acccounts always exposed\n//   resolve(web3);\n// } else {\n//   // Metamask not available\n//   console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n// }\n//\n// export default web3;\nimport Web3 from 'web3'; //assume user has metamask\n// const web3 = new Web3(window.web3.currentProvider); // cannot do with next because cannot see \"window\" from server\n\nvar web3; //We are on the server OR the user is not running metamask\n\nvar provider = new Web3.providers.HttpProvider('http://192.168.86.21:8543');\nweb3 = new Web3(provider);\nexport default web3;","map":null,"metadata":{},"sourceType":"module"}