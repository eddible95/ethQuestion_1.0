{"ast":null,"code":"import Web3 from 'web3'; // Web3 with capital W is the constructor.\n// New instance of Web3 with the provider that is automatically provided to us by MetaMask inside the browser.\n// This makes the assumption that the user has MetaMask.\n\nvar web3; // if - We execute inside the browser and MetaMask is available\n\nif (typeof window !== 'undefined' && typeof window.web3 !== 'undefined') {\n  web3 = new Web3(window.web3.currentProvider);\n  console.log(\"here\");\n} else {\n  // We are on the server *OR* the user is not running MetaMask.\n  // Create our own provider:\n  console.log(\"there\");\n  var provider = new Web3.providers.HttpProvider();\n  web3 = new Web3(provider);\n}\n\nexport default web3;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\ethereum\\web3.js"],"names":["Web3","web3","window","currentProvider","console","log","provider","providers","HttpProvider"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB,C,CAAyB;AAEzB;AACA;;AACA,IAAIC,IAAJ,C,CAEA;;AACA,IAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,OAAOA,MAAM,CAACD,IAAd,KAAuB,WAA5D,EAAyE;AACrEA,EAAAA,IAAI,GAAG,IAAID,IAAJ,CAASE,MAAM,CAACD,IAAP,CAAYE,eAArB,CAAP;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH,CAHD,MAGO;AACH;AACA;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,MAAMC,QAAQ,GAAG,IAAIN,IAAI,CAACO,SAAL,CAAeC,YAAnB,EAAjB;AAKAP,EAAAA,IAAI,GAAG,IAAID,IAAJ,CAASM,QAAT,CAAP;AACH;;AAED,eAAeL,IAAf","sourcesContent":["import Web3 from 'web3'; // Web3 with capital W is the constructor.\r\n\r\n// New instance of Web3 with the provider that is automatically provided to us by MetaMask inside the browser.\r\n// This makes the assumption that the user has MetaMask.\r\nlet web3;\r\n\r\n// if - We execute inside the browser and MetaMask is available\r\nif (typeof window !== 'undefined' && typeof window.web3 !== 'undefined') {\r\n    web3 = new Web3(window.web3.currentProvider);\r\n    console.log(\"here\")\r\n} else {\r\n    // We are on the server *OR* the user is not running MetaMask.\r\n    // Create our own provider:\r\n    console.log(\"there\")\r\n    const provider = new Web3.providers.HttpProvider(\r\n        // Pass the URL of some remote node that we have excess to (such as Infura node).\r\n        //'http://127.0.0.1:8543'\r\n        //'http://localhost:8545'\r\n    );\r\n    web3 = new Web3(provider);\r\n}\r\n\r\nexport default web3;\r\n"]},"metadata":{},"sourceType":"module"}