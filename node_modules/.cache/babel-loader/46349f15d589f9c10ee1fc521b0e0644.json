{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n// Ensure jsPDF does not import on Server Side\nvar jsPDF = null;\n\nif (typeof window !== \"undefined\") {\n  import(\"jspdf\").then(function (module) {\n    jsPDF = module.default;\n  });\n}\n\nvar exportQuestion =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(summary, answerList) {\n    var lMargin, rMargin, pdfInMM, doc, questionTitle, lines, j, i, answer, pageCount;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // Initialise the PDF document to write\n            lMargin = 15; //left margin in mm\n\n            rMargin = 15; //right margin in mm\n\n            pdfInMM = 210; // width of A4 in mm\n\n            doc = new jsPDF(\"p\", \"mm\", \"a4\");\n            questionTitle = \"Question: \" + summary[1]; // Writing to the PDF document\n\n            lines = doc.splitTextToSize(questionTitle, pdfInMM - lMargin - rMargin);\n            doc.text(lMargin, 40, lines);\n            doc.setLineWidth(0.5);\n            doc.line(lMargin, 42 + lines.length + 8, 195, 42 + lines.length + 8); // If images are uploaded\n\n            if (summary[5].length != 0) {\n              summary[6].map(function (imageName, index) {\n                var link = \"https://ipfs.io/ipfs/\" + summary[5][index];\n                doc.text(lMargin, 40 + lines.length + 15, \"Link(s) of Image(s) Uploaded For Question:\");\n                lines = doc.splitTextToSize(link, pdfInMM - lMargin - rMargin);\n                doc.text(lMargin, 45, lines);\n              });\n              doc.setLineWidth(0.5);\n              doc.line(lMargin, 40 + lines.length + 35, 195, 40 + lines.length + 35);\n              doc.text(lMargin, 40 + lines.length + 45, \"Answers:\");\n            } else {\n              doc.text(lMargin, 40 + lines.length + 15, \"Answers:\");\n            }\n\n            j = 75;\n\n            for (i = 0; i < answerList.length; i++) {\n              answer = \"(\" + (i + 1) + \") \" + answerList[i][0];\n              lines = doc.splitTextToSize(answer, pdfInMM - lMargin - rMargin); // Creates a new page for every 10 answers\n\n              if (i % 10 == 0 && i != 0) {\n                doc.addPage();\n                j = 40;\n              }\n\n              doc.text(lMargin, j, lines);\n              j = j + 10;\n            }\n\n            pageCount = doc.internal.getNumberOfPages();\n            doc = createFooter(doc, pageCount);\n            doc = createHeader(doc, pageCount);\n            doc.save(\"Answer.pdf\");\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function exportQuestion(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar createHeader = function createHeader(document, pageCount) {\n  for (var i = 0; i < pageCount; i++) {\n    document.setPage(i);\n    document.setTextColor(0);\n    document.setFontSize(24);\n    document.text(15, 30, \"Ethereum Question & Answering System\");\n    document.setLineWidth(0.5);\n    document.line(15, 32, 190, 32);\n  }\n\n  return document;\n};\n\nvar createFooter = function createFooter(document, pageCount) {\n  for (var i = 0; i < pageCount; i++) {\n    document.setPage(i);\n    document.setFontSize(13);\n    document.setTextColor(150);\n    document.text(170, 285, \"Page \" + document.internal.getCurrentPageInfo().pageNumber + \" of \" + pageCount);\n  }\n\n  return document;\n};\n\nexport { exportQuestion };","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\utils\\pdf.js"],"names":["jsPDF","window","then","module","default","exportQuestion","summary","answerList","lMargin","rMargin","pdfInMM","doc","questionTitle","lines","splitTextToSize","text","setLineWidth","line","length","map","imageName","index","link","j","i","answer","addPage","pageCount","internal","getNumberOfPages","createFooter","createHeader","save","document","setPage","setTextColor","setFontSize","getCurrentPageInfo","pageNumber"],"mappings":";;AAAA;AACA,IAAIA,KAAK,GAAG,IAAZ;;AACA,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjC,SAAO,OAAP,EAAgBC,IAAhB,CAAqB,UAAAC,MAAM,EAAI;AAC7BH,IAAAA,KAAK,GAAGG,MAAM,CAACC,OAAf;AACD,GAFD;AAGD;;AAED,IAAMC,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAMC,OAAN,EAAeC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACrB;AACIC,YAAAA,OAFiB,GAET,EAFS,EAEL;;AACZC,YAAAA,OAHiB,GAGT,EAHS,EAGL;;AACZC,YAAAA,OAJiB,GAIT,GAJS,EAIH;;AACdC,YAAAA,GALiB,GAKX,IAAIX,KAAJ,CAAU,GAAV,EAAc,IAAd,EAAmB,IAAnB,CALW;AAOjBY,YAAAA,aAPiB,GAOD,eAAeN,OAAO,CAAC,CAAD,CAPrB,EASrB;;AACIO,YAAAA,KAViB,GAUTF,GAAG,CAACG,eAAJ,CAAoBF,aAApB,EAAoCF,OAAO,GAACF,OAAR,GAAgBC,OAApD,CAVS;AAWrBE,YAAAA,GAAG,CAACI,IAAJ,CAASP,OAAT,EAAkB,EAAlB,EAAsBK,KAAtB;AACAF,YAAAA,GAAG,CAACK,YAAJ,CAAiB,GAAjB;AACAL,YAAAA,GAAG,CAACM,IAAJ,CAAST,OAAT,EAAkB,KAAGK,KAAK,CAACK,MAAT,GAAgB,CAAlC,EAAqC,GAArC,EAA0C,KAAGL,KAAK,CAACK,MAAT,GAAgB,CAA1D,EAbqB,CAerB;;AACA,gBAAIZ,OAAO,CAAC,CAAD,CAAP,CAAWY,MAAX,IAAqB,CAAzB,EAA4B;AACxBZ,cAAAA,OAAO,CAAC,CAAD,CAAP,CAAWa,GAAX,CAAe,UAACC,SAAD,EAAYC,KAAZ,EAAsB;AACnC,oBAAIC,IAAI,GAAG,0BAAwBhB,OAAO,CAAC,CAAD,CAAP,CAAWe,KAAX,CAAnC;AACAV,gBAAAA,GAAG,CAACI,IAAJ,CAASP,OAAT,EAAkB,KAAGK,KAAK,CAACK,MAAT,GAAgB,EAAlC,EAAsC,4CAAtC;AACAL,gBAAAA,KAAK,GAAGF,GAAG,CAACG,eAAJ,CAAoBQ,IAApB,EAA2BZ,OAAO,GAACF,OAAR,GAAgBC,OAA3C,CAAR;AACAE,gBAAAA,GAAG,CAACI,IAAJ,CAASP,OAAT,EAAiB,EAAjB,EAAoBK,KAApB;AACD,eALD;AAMAF,cAAAA,GAAG,CAACK,YAAJ,CAAiB,GAAjB;AACAL,cAAAA,GAAG,CAACM,IAAJ,CAAST,OAAT,EAAkB,KAAGK,KAAK,CAACK,MAAT,GAAgB,EAAlC,EAAsC,GAAtC,EAA2C,KAAGL,KAAK,CAACK,MAAT,GAAgB,EAA3D;AACAP,cAAAA,GAAG,CAACI,IAAJ,CAASP,OAAT,EAAkB,KAAGK,KAAK,CAACK,MAAT,GAAgB,EAAlC,EAAsC,UAAtC;AACH,aAVD,MAUO;AACLP,cAAAA,GAAG,CAACI,IAAJ,CAASP,OAAT,EAAkB,KAAGK,KAAK,CAACK,MAAT,GAAgB,EAAlC,EAAsC,UAAtC;AACD;;AACGK,YAAAA,CA7BiB,GA6Bb,EA7Ba;;AA8BrB,iBAASC,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGjB,UAAU,CAACW,MAA/B,EAAuCM,CAAC,EAAxC,EAA4C;AACtCC,cAAAA,MADsC,GAC7B,OAAOD,CAAC,GAAC,CAAT,IAAc,IAAd,GAAqBjB,UAAU,CAACiB,CAAD,CAAV,CAAc,CAAd,CADQ;AAE1CX,cAAAA,KAAK,GAAGF,GAAG,CAACG,eAAJ,CAAoBW,MAApB,EAA6Bf,OAAO,GAACF,OAAR,GAAgBC,OAA7C,CAAR,CAF0C,CAG1C;;AACA,kBAAIe,CAAC,GAAG,EAAJ,IAAU,CAAV,IAAeA,CAAC,IAAI,CAAxB,EAA2B;AACzBb,gBAAAA,GAAG,CAACe,OAAJ;AACAH,gBAAAA,CAAC,GAAG,EAAJ;AACD;;AACDZ,cAAAA,GAAG,CAACI,IAAJ,CAASP,OAAT,EAAkBe,CAAlB,EAAqBV,KAArB;AACAU,cAAAA,CAAC,GAAGA,CAAC,GAAG,EAAR;AACD;;AACGI,YAAAA,SAzCiB,GAyCLhB,GAAG,CAACiB,QAAJ,CAAaC,gBAAb,EAzCK;AA0CrBlB,YAAAA,GAAG,GAAGmB,YAAY,CAACnB,GAAD,EAAMgB,SAAN,CAAlB;AACAhB,YAAAA,GAAG,GAAGoB,YAAY,CAACpB,GAAD,EAAMgB,SAAN,CAAlB;AACAhB,YAAAA,GAAG,CAACqB,IAAJ,CAAS,YAAT;;AA5CqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAd3B,cAAc;AAAA;AAAA;AAAA,GAApB;;AA+CA,IAAM0B,YAAY,GAAG,SAAfA,YAAe,CAACE,QAAD,EAAWN,SAAX,EAAyB;AAC5C,OAAI,IAAIH,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGG,SAAnB,EAA8BH,CAAC,EAA/B,EAAmC;AACjCS,IAAAA,QAAQ,CAACC,OAAT,CAAiBV,CAAjB;AACAS,IAAAA,QAAQ,CAACE,YAAT,CAAsB,CAAtB;AACAF,IAAAA,QAAQ,CAACG,WAAT,CAAqB,EAArB;AACAH,IAAAA,QAAQ,CAAClB,IAAT,CAAc,EAAd,EAAkB,EAAlB,EAAsB,sCAAtB;AACAkB,IAAAA,QAAQ,CAACjB,YAAT,CAAsB,GAAtB;AACAiB,IAAAA,QAAQ,CAAChB,IAAT,CAAc,EAAd,EAAkB,EAAlB,EAAsB,GAAtB,EAA2B,EAA3B;AACD;;AACD,SAAOgB,QAAP;AACD,CAVD;;AAYA,IAAMH,YAAY,GAAG,SAAfA,YAAe,CAACG,QAAD,EAAWN,SAAX,EAAyB;AAC5C,OAAI,IAAIH,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGG,SAAnB,EAA8BH,CAAC,EAA/B,EAAmC;AACjCS,IAAAA,QAAQ,CAACC,OAAT,CAAiBV,CAAjB;AACAS,IAAAA,QAAQ,CAACG,WAAT,CAAqB,EAArB;AACAH,IAAAA,QAAQ,CAACE,YAAT,CAAsB,GAAtB;AACAF,IAAAA,QAAQ,CAAClB,IAAT,CAAc,GAAd,EAAmB,GAAnB,EAAwB,UAAUkB,QAAQ,CAACL,QAAT,CAAkBS,kBAAlB,GAAuCC,UAAjD,GAA8D,MAA9D,GAAuEX,SAA/F;AACD;;AACD,SAAOM,QAAP;AACD,CARD;;AAUA,SAAS5B,cAAT","sourcesContent":["// Ensure jsPDF does not import on Server Side\r\nlet jsPDF = null;\r\nif (typeof window !== \"undefined\") {\r\n  import(\"jspdf\").then(module => {\r\n    jsPDF = module.default;\r\n  });\r\n}\r\n\r\nconst exportQuestion = async(summary, answerList) => {\r\n  // Initialise the PDF document to write\r\n  let lMargin=15; //left margin in mm\r\n  let rMargin=15; //right margin in mm\r\n  let pdfInMM=210;  // width of A4 in mm\r\n  let doc = new jsPDF(\"p\",\"mm\",\"a4\");\r\n\r\n  let questionTitle = \"Question: \" + summary[1];\r\n\r\n  // Writing to the PDF document\r\n  let lines = doc.splitTextToSize(questionTitle, (pdfInMM-lMargin-rMargin));\r\n  doc.text(lMargin, 40, lines);\r\n  doc.setLineWidth(0.5)\r\n  doc.line(lMargin, 42+lines.length+8, 195, 42+lines.length+8)\r\n\r\n  // If images are uploaded\r\n  if (summary[5].length != 0) {\r\n      summary[6].map((imageName, index) => {\r\n        let link = \"https://ipfs.io/ipfs/\"+summary[5][index]\r\n        doc.text(lMargin, 40+lines.length+15, \"Link(s) of Image(s) Uploaded For Question:\")\r\n        lines = doc.splitTextToSize(link, (pdfInMM-lMargin-rMargin));\r\n        doc.text(lMargin,45,lines);\r\n      })\r\n      doc.setLineWidth(0.5)\r\n      doc.line(lMargin, 40+lines.length+35, 195, 40+lines.length+35)\r\n      doc.text(lMargin, 40+lines.length+45, \"Answers:\");\r\n  } else {\r\n    doc.text(lMargin, 40+lines.length+15, \"Answers:\");\r\n  }\r\n  let j = 75;\r\n  for (let i = 0; i < answerList.length; i++) {\r\n    let answer = \"(\" + (i+1) + \") \" + answerList[i][0];\r\n    lines = doc.splitTextToSize(answer, (pdfInMM-lMargin-rMargin));\r\n    // Creates a new page for every 10 answers\r\n    if (i % 10 == 0 && i != 0) {\r\n      doc.addPage();\r\n      j = 40;\r\n    }\r\n    doc.text(lMargin, j, lines);\r\n    j = j + 10;\r\n  }\r\n  let pageCount = doc.internal.getNumberOfPages();\r\n  doc = createFooter(doc, pageCount);\r\n  doc = createHeader(doc, pageCount);\r\n  doc.save(\"Answer.pdf\");\r\n}\r\n\r\nconst createHeader = (document, pageCount) => {\r\n  for(let i = 0; i < pageCount; i++) {\r\n    document.setPage(i)\r\n    document.setTextColor(0)\r\n    document.setFontSize(24)\r\n    document.text(15, 30, \"Ethereum Question & Answering System\");\r\n    document.setLineWidth(0.5)\r\n    document.line(15, 32, 190, 32)\r\n  }\r\n  return document\r\n}\r\n\r\nconst createFooter = (document, pageCount) => {\r\n  for(let i = 0; i < pageCount; i++) {\r\n    document.setPage(i)\r\n    document.setFontSize(13)\r\n    document.setTextColor(150)\r\n    document.text(170, 285, \"Page \" + document.internal.getCurrentPageInfo().pageNumber + \" of \" + pageCount)\r\n  }\r\n  return document\r\n}\r\n\r\nexport { exportQuestion }\r\n"]},"metadata":{},"sourceType":"module"}