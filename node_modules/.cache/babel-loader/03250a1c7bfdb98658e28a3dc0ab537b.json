{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { Button, Card, Segment, Container, List, Transition, Popup, Modal, Header, Icon, Divider, Form, Input, Message } from \"semantic-ui-react\";\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport web3 from '../ethereum/web3';\nimport Layout from '../components/Layout';\nimport factory from '../ethereum/factory';\nimport credentials from '../ethereum/credentials';\nimport EthQuestionToken from '../ethereum/token';\nimport EthQuestionTokenSale from '../ethereum/tokenSale';\nimport Profile from '../ethereum/profile';\nimport { Router } from '../routes';\nimport { checkRewardField, logging } from '../utils/functions';\nimport cookies from 'next-cookies';\n\nvar userProfile =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(userProfile, _Component);\n\n  function userProfile(props) {\n    var _this;\n\n    _classCallCheck(this, userProfile);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(userProfile).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleVisibility\", function () {\n      return _this.setState(function (prevState) {\n        return {\n          visible: !prevState.visible\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"topUp\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var account, profileAddress, logTransaction;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                toppingUp: true,\n                errorMessage: ''\n              });\n\n              if (!checkRewardField(_this.state.topUpAmount)) {\n                _context.next = 20;\n                break;\n              }\n\n              _context.prev = 2;\n              account = _this.state.account;\n              _context.next = 6;\n              return factory.methods.getProfile(account).call();\n\n            case 6:\n              profileAddress = _context.sent;\n              logTransaction = logging(\"Top Up: \" + _this.state.topUpAmount + \" EQT(s)\");\n              _context.next = 10;\n              return EthQuestionTokenSale.methods.buyTokens(_this.state.topUpAmount * 1e4, EthQuestionToken._address, profileAddress, logTransaction).send({\n                from: account,\n                value: _this.state.topUpAmount * 1e4 * _this.state.tokenPrice,\n                gasPrice: '0'\n              });\n\n            case 10:\n              Router.pushRoute('/home'); // Automatic redirect the user.\n\n              _context.next = 18;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](2);\n\n              _this.setState({\n                errorMessage: _context.t0.message\n              });\n\n              _this.setState({\n                error: true\n              });\n\n              _this.setState({\n                toppingUp: false\n              });\n\n            case 18:\n              _context.next = 23;\n              break;\n\n            case 20:\n              _this.setState({\n                errorMessage: \"Required Field(s) Empty or Invalid Input\"\n              });\n\n              _this.setState({\n                error: true\n              });\n\n              _this.setState({\n                toppingUp: false\n              });\n\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 13]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"exchange\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var account, profileAddress, logTransaction;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _this.setState({\n                exchanging: true,\n                errorMessage: ''\n              });\n\n              _context2.prev = 1;\n              account = _this.state.account;\n              _context2.next = 5;\n              return factory.methods.getProfile(account).call();\n\n            case 5:\n              profileAddress = _context2.sent;\n              logTransaction = logging(\"Exchange: 100 Points for 5 EQT(s)\");\n              _context2.next = 9;\n              return EthQuestionTokenSale.methods.exchangeTokens(EthQuestionToken._address, profileAddress, logTransaction).send({\n                from: account,\n                gasPrice: '0'\n              });\n\n            case 9:\n              Router.pushRoute('/home'); // Automatic redirect the user.\n\n              _context2.next = 17;\n              break;\n\n            case 12:\n              _context2.prev = 12;\n              _context2.t0 = _context2[\"catch\"](1);\n\n              _this.setState({\n                errorMessage: _context2.t0.message + \" Insufficient Points\"\n              });\n\n              _this.setState({\n                error: true\n              });\n\n              _this.setState({\n                exchanging: false\n              });\n\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 12]]);\n    })));\n\n    _this.state = {\n      visible: false,\n      login: false,\n      loading: true,\n      accountType: null,\n      account: null,\n      token: null,\n      emailAddress: null,\n      points: null,\n      transactions: [],\n      topUpModalOpen: false,\n      topUp: false,\n      topUpAmount: '',\n      error: false,\n      errorMessage: '',\n      tokenPrice: '',\n      exchanging: false\n    };\n    return _this;\n  }\n\n  _createClass(userProfile, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var login, account, profileAddress, profile, emailAddress, token, etherBalance, points, transactions, tokenPrice, accountType;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(typeof web3 === 'undefined')) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                this.setState({\n                  loading: false\n                });\n                return _context3.abrupt(\"return\");\n\n              case 3:\n                login = false;\n\n                if (!this.props.isLogin) {\n                  _context3.next = 35;\n                  break;\n                }\n\n                login = true; // Get profile data\n\n                account = this.props.account;\n                _context3.next = 9;\n                return factory.methods.getProfile(account).call();\n\n              case 9:\n                profileAddress = _context3.sent;\n                profile = Profile(profileAddress);\n                _context3.next = 13;\n                return credentials.methods.getBinding(account).call();\n\n              case 13:\n                emailAddress = _context3.sent;\n                _context3.next = 16;\n                return EthQuestionToken.methods.balanceOf(account).call();\n\n              case 16:\n                _context3.t0 = _context3.sent;\n                token = (_context3.t0 * 1e-4).toFixed(4);\n                _context3.next = 20;\n                return web3.eth.getBalance(account);\n\n              case 20:\n                etherBalance = _context3.sent;\n                _context3.next = 23;\n                return profile.methods.getPoints().call();\n\n              case 23:\n                points = _context3.sent;\n                _context3.next = 26;\n                return profile.methods.getTransactions().call();\n\n              case 26:\n                transactions = _context3.sent;\n                _context3.next = 29;\n                return EthQuestionTokenSale.methods.getTokenPrice().call();\n\n              case 29:\n                tokenPrice = _context3.sent;\n                _context3.next = 32;\n                return profile.methods.getAccountType().call();\n\n              case 32:\n                accountType = _context3.sent;\n                accountType == 0 ? accountType = \"Admin\" : accountType = \"User\";\n                this.setState({\n                  accountType: accountType,\n                  account: account,\n                  token: token,\n                  etherBalance: etherBalance,\n                  emailAddress: emailAddress,\n                  points: points,\n                  transactions: transactions,\n                  login: true,\n                  tokenPrice: tokenPrice\n                });\n\n              case 35:\n                this.setState({\n                  loading: false\n                });\n\n              case 36:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"renderTransactions\",\n    value: function renderTransactions() {\n      var transactions = this.state.transactions;\n      return transactions.map(function (transaction, index) {\n        return React.createElement(List.Item, {\n          key: index\n        }, React.createElement(List.Icon, {\n          name: \"calendar outline\",\n          size: \"large\",\n          verticalAlign: \"middle\"\n        }), React.createElement(List.Content, null, transaction));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.state.login) {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType,\n          page: \"Profile\"\n        }, React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Container, null, React.createElement(Card, {\n          color: \"red\",\n          centered: true,\n          fluid: true\n        }, React.createElement(Card.Content, null, React.createElement(Header, {\n          as: \"h1\",\n          textAlign: \"center\"\n        }, React.createElement(Icon, {\n          name: \"user\",\n          circular: true\n        })), React.createElement(Card.Header, {\n          textAlign: \"center\"\n        }, \"Account Details:\", React.createElement(\"div\", {\n          style: {\n            color: \"red\",\n            fontSize: \"small\",\n            wordWrap: \"break-word\"\n          }\n        }, this.state.account)), React.createElement(Card.Meta, {\n          textAlign: \"center\"\n        }, React.createElement(\"b\", null, this.state.accountType)), React.createElement(Card.Description, {\n          textAlign: \"center\"\n        }, React.createElement(\"b\", null, \"EQT Balance:\"), \" \", this.state.token, React.createElement(Popup, {\n          trigger: React.createElement(Button, {\n            icon: \"ethereum\",\n            onClick: function onClick() {\n              _this2.setState({\n                topUpModalOpen: true,\n                topUpAmount: '',\n                error: false,\n                errorMessage: ''\n              });\n            },\n            floated: \"right\",\n            size: \"mini\",\n            color: \"green\"\n          }),\n          content: \"Top Up EQT(s)\",\n          inverted: true\n        })), React.createElement(Card.Description, {\n          textAlign: \"center\"\n        }, React.createElement(\"b\", null, \"Ether Balance:\"), \" \", this.state.etherBalance), React.createElement(Card.Description, {\n          textAlign: \"center\"\n        }, React.createElement(\"b\", null, \"Points Accumulated:\"), \" \", this.state.points), React.createElement(Card.Description, {\n          textAlign: \"center\"\n        }, React.createElement(\"b\", null, \"Valid Email Address:\"), \" \", this.state.emailAddress)))), React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Container, null, React.createElement(Segment, {\n          textAlign: \"center\"\n        }, React.createElement(\"b\", {\n          style: {\n            fontSize: \"20px\"\n          }\n        }, \"Transaction History\"), React.createElement(Popup, {\n          trigger: React.createElement(Button, {\n            icon: this.state.visible ? \"minus\" : \"plus\",\n            onClick: this.toggleVisibility,\n            floated: \"right\",\n            size: \"mini\"\n          }),\n          content: \"Click to expand/close\",\n          inverted: true\n        })), React.createElement(Transition, {\n          visible: this.state.visible,\n          animation: \"scale\",\n          duration: 500\n        }, React.createElement(List, {\n          divided: true,\n          size: \"huge\"\n        }, this.renderTransactions())), React.createElement(Modal, {\n          open: this.state.topUpModalOpen,\n          size: \"small\"\n        }, React.createElement(Header, {\n          icon: \"ethereum\",\n          content: \"Topping Up EQT(s)\"\n        }), React.createElement(Modal.Content, null, React.createElement(Form, {\n          error: !!this.state.errorMessage,\n          style: {\n            marginTop: '10px'\n          }\n        }, React.createElement(Form.Field, {\n          required: true\n        }, React.createElement(\"label\", null, \"Top Up Amount (1 EQT = \", this.state.tokenPrice * 1e-18, \" Ether)\"), React.createElement(Input, {\n          label: \"EQT(s)\",\n          labelPosition: \"right\",\n          placeholder: \"Enter EQT Value\",\n          value: this.state.topUpAmount,\n          onChange: function onChange(event) {\n            return _this2.setState({\n              topUpAmount: event.target.value\n            });\n          }\n        }))), React.createElement(Message, {\n          error: true,\n          header: \"Oops!\",\n          content: this.state.errorMessage,\n          hidden: !this.state.error\n        })), React.createElement(Modal.Actions, null, React.createElement(Button, {\n          color: \"red\",\n          onClick: function onClick() {\n            _this2.setState({\n              topUpModalOpen: false\n            });\n          }\n        }, React.createElement(Icon, {\n          name: \"remove\"\n        }), \" Cancel\"), React.createElement(Button, {\n          color: \"green\",\n          onClick: this.topUp,\n          loading: this.state.toppingUp\n        }, React.createElement(Icon, {\n          name: \"checkmark\"\n        }), \" Top Up\"), React.createElement(Button, {\n          color: \"green\",\n          onClick: this.exchange,\n          loading: this.state.exchanging\n        }, React.createElement(Icon, {\n          name: \"exchange\"\n        }), \" Exchange With Points\")))));\n      } else {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(AccountIssueModal, {\n          loading: this.state.loading,\n          login: this.state.login\n        }));\n      }\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(props) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", {\n                  isLogin: cookies(props).login || '',\n                  account: cookies(props).wallet || ''\n                });\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return userProfile;\n}(Component);\n\nexport default userProfile;","map":null,"metadata":{},"sourceType":"module"}