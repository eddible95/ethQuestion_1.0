{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport web3 from '../ethereum/web3';\nimport Layout from '../components/Layout';\nimport factory from '../ethereum/factory';\nimport credentials from '../ethereum/credentials';\nimport ERC20 from '../ethereum/token';\nimport Profile from '../ethereum/profile';\nimport { Router } from '../routes';\nimport { Button, Card, Segment, Container, List, Transition, Popup, Modal, Header, Loader } from \"semantic-ui-react\";\n\nvar userProfile =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(userProfile, _Component);\n\n  function userProfile(props) {\n    var _this;\n\n    _classCallCheck(this, userProfile);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(userProfile).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleVisibility\", function () {\n      return _this.setState(function (prevState) {\n        return {\n          visible: !prevState.visible\n        };\n      });\n    });\n\n    _this.state = {\n      visible: false,\n      login: false,\n      loading: true,\n      accountType: null,\n      account: null,\n      token: null,\n      emailAddress: null,\n      points: null,\n      transactions: [],\n      erc20: null\n    };\n    return _this;\n  }\n\n  _createClass(userProfile, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var accounts, login, profileAddress, profile, emailAddress, token, points, transactions, accountType, erc20;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context.sent;\n                login = false;\n                _context.next = 6;\n                return credentials.methods.getBinding(accounts[0]).call();\n\n              case 6:\n                _context.t0 = _context.sent;\n\n                if (!(_context.t0 === \"\")) {\n                  _context.next = 10;\n                  break;\n                }\n\n                _context.next = 37;\n                break;\n\n              case 10:\n                login = true; // Get profile data\n\n                _context.next = 13;\n                return factory.methods.getProfile(accounts[0]).call();\n\n              case 13:\n                profileAddress = _context.sent;\n                profile = Profile(profileAddress);\n                _context.next = 17;\n                return credentials.methods.getBinding(accounts[0]).call();\n\n              case 17:\n                emailAddress = _context.sent;\n                _context.next = 20;\n                return profile.methods.getToken().call();\n\n              case 20:\n                token = _context.sent;\n                _context.next = 23;\n                return profile.methods.getPoints().call();\n\n              case 23:\n                points = _context.sent;\n                _context.next = 26;\n                return profile.methods.getTransactions().call();\n\n              case 26:\n                transactions = _context.sent;\n                _context.next = 29;\n                return profile.methods.getAccountType().call();\n\n              case 29:\n                accountType = _context.sent;\n                accountType == 0 ? accountType = \"Admin\" : accountType = \"User\";\n                this.setState({\n                  accountType: accountType,\n                  account: accounts[0],\n                  token: token,\n                  emailAddress: emailAddress,\n                  points: points,\n                  transactions: transactions,\n                  login: true\n                }); // Get ERC-20 Token balance\n\n                _context.next = 34;\n                return ERC20.methods.balanceOf(accounts[0]).call();\n\n              case 34:\n                _context.t1 = _context.sent;\n                erc20 = _context.t1 / 1000;\n                this.setState({\n                  erc20: erc20\n                });\n\n              case 37:\n                this.setState({\n                  loading: false\n                });\n\n              case 38:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"renderTransactions\",\n    value: function renderTransactions() {\n      var transactions = this.state.transactions;\n      return transactions.map(function (transaction, index) {\n        return React.createElement(List.Item, {\n          key: index\n        }, React.createElement(List.Icon, {\n          name: \"calendar outline\",\n          size: \"large\",\n          verticalAlign: \"middle\"\n        }), React.createElement(List.Content, null, transaction));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.login) {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(Card, {\n          color: \"red\",\n          centered: true,\n          style: {\n            width: \"20%\"\n          }\n        }, React.createElement(Card.Content, null, React.createElement(Card.Header, null, \"Account Details:\", React.createElement(\"div\", {\n          style: {\n            color: \"red\",\n            fontSize: \"small\",\n            wordWrap: \"break-word\"\n          }\n        }, this.state.account)), React.createElement(Card.Meta, null, React.createElement(\"b\", null, this.state.accountType)), React.createElement(Card.Description, null, React.createElement(\"b\", null, \"Token Available:\"), \" \", this.state.erc20), React.createElement(Card.Description, null, React.createElement(\"b\", null, \"Points Accumulated:\"), \" \", this.state.points), React.createElement(Card.Description, null, React.createElement(\"b\", null, \"Valid Email Address:\"), \" \", this.state.emailAddress))), React.createElement(Container, {\n          style: {\n            width: \"80%\",\n            height: \"100vh\"\n          }\n        }, React.createElement(Segment, {\n          textAlign: \"center\"\n        }, React.createElement(\"b\", {\n          style: {\n            fontSize: \"20px\"\n          }\n        }, \"Transaction History\"), React.createElement(Popup, {\n          trigger: React.createElement(Button, {\n            icon: this.state.visible ? \"minus\" : \"plus\",\n            onClick: this.toggleVisibility,\n            floated: \"right\",\n            size: \"mini\"\n          }),\n          content: \"Click to expand/close\",\n          inverted: true\n        })), React.createElement(Transition, {\n          visible: this.state.visible,\n          animation: \"scale\",\n          duration: 500\n        }, React.createElement(List, {\n          divided: true,\n          size: \"huge\"\n        }, this.renderTransactions()))));\n      } else {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(Container, {\n          style: {\n            width: \"100%\",\n            height: \"100vh\"\n          }\n        }, React.createElement(Modal, {\n          open: this.state.loading,\n          basic: true,\n          size: \"small\"\n        }, React.createElement(Header, {\n          icon: \"ethereum\",\n          content: \"Loading Resources\"\n        }), React.createElement(Modal.Content, null, React.createElement(Loader, {\n          active: true,\n          inline: \"centered\"\n        }, \"Loading Profile\"))), React.createElement(Modal, {\n          open: !this.state.login && !this.state.loading,\n          basic: true,\n          size: \"small\"\n        }, React.createElement(Header, {\n          icon: \"ethereum\",\n          content: \"Not Registered\"\n        }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"You are currently not registered to access the platform. Please have your account registered.\")), React.createElement(Modal.Actions, null, React.createElement(Button, {\n          color: \"green\",\n          inverted: true,\n          attached: \"bottom\",\n          onClick: function onClick() {\n            Router.pushRoute('/');\n          }\n        }, \"Register For Account\")))));\n      }\n    }\n  }]);\n\n  return userProfile;\n}(Component);\n\nexport default userProfile;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\userProfile.js"],"names":["React","Component","web3","Layout","factory","credentials","ERC20","Profile","Router","Button","Card","Segment","Container","List","Transition","Popup","Modal","Header","Loader","userProfile","props","setState","prevState","visible","state","login","loading","accountType","account","token","emailAddress","points","transactions","erc20","eth","getAccounts","accounts","methods","getBinding","call","getProfile","profileAddress","profile","getToken","getPoints","getTransactions","getAccountType","balanceOf","map","transaction","index","width","color","fontSize","wordWrap","height","toggleVisibility","renderTransactions","pushRoute"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport web3 from '../ethereum/web3'\r\nimport Layout from '../components/Layout';\r\nimport factory from '../ethereum/factory';\r\nimport credentials from '../ethereum/credentials';\r\nimport ERC20 from '../ethereum/token';\r\nimport Profile from '../ethereum/profile';\r\nimport { Router } from '../routes';\r\nimport { Button, Card, Segment, Container, List, Transition, Popup, Modal,\r\n         Header, Loader } from \"semantic-ui-react\";\r\n\r\nclass userProfile extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      visible: false,\r\n      login: false,\r\n      loading: true,\r\n      accountType: null,\r\n      account: null,\r\n      token: null,\r\n      emailAddress: null,\r\n      points: null,\r\n      transactions: [],\r\n      erc20: null\r\n    };\r\n  }\r\n\r\n  toggleVisibility = () =>\r\n    this.setState((prevState) => ({ visible: !prevState.visible }))\r\n\r\n  async componentDidMount() {\r\n    // Retrieve the Ethereum Account from MetaMask\r\n    const accounts = await web3.eth.getAccounts();\r\n    let login = false;\r\n    if (await credentials.methods.getBinding(accounts[0]).call() === \"\") {\r\n    } else {\r\n      login = true;\r\n      // Get profile data\r\n      const profileAddress = await factory.methods.getProfile(accounts[0]).call();\r\n      const profile = Profile(profileAddress);\r\n      const emailAddress = await credentials.methods.getBinding(accounts[0]).call();\r\n      const token = await profile.methods.getToken().call();\r\n      const points = await profile.methods.getPoints().call();\r\n      const transactions = await profile.methods.getTransactions().call();\r\n\r\n      // Get Account Type\r\n      let accountType = await profile.methods.getAccountType().call();\r\n      accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"\r\n      this.setState( { accountType: accountType,\r\n                       account: accounts[0],\r\n                       token: token,\r\n                       emailAddress: emailAddress,\r\n                       points: points,\r\n                       transactions: transactions,\r\n                       login: true });\r\n\r\n      // Get ERC-20 Token balance\r\n      let erc20 = await ERC20.methods.balanceOf(accounts[0]).call()/1000;\r\n      this.setState( {erc20: erc20 });\r\n    }\r\n    this.setState( { loading: false });\r\n  }\r\n\r\n  renderTransactions() {\r\n    const transactions = this.state.transactions;\r\n    return transactions.map((transaction, index) => {\r\n      return(\r\n        <List.Item key={index}>\r\n          <List.Icon name=\"calendar outline\" size='large' verticalAlign='middle'/>\r\n          <List.Content>\r\n            {transaction}\r\n          </List.Content>\r\n        </List.Item>\r\n      );\r\n    })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.login) {\r\n      return(\r\n        <Layout accountType={this.state.accountType}>\r\n          <Card color = \"red\" centered style={{width:\"20%\"}}>\r\n            <Card.Content>\r\n              <Card.Header>\r\n                Account Details:\r\n                <div style={{color: \"red\", fontSize: \"small\", wordWrap: \"break-word\" }}>{this.state.account}</div>\r\n              </Card.Header>\r\n              <Card.Meta>\r\n                <b>{this.state.accountType}</b>\r\n              </Card.Meta>\r\n              <Card.Description>\r\n                <b>Token Available:</b> {this.state.erc20}\r\n              </Card.Description>\r\n              <Card.Description>\r\n                <b>Points Accumulated:</b> {this.state.points}\r\n              </Card.Description>\r\n              <Card.Description>\r\n                <b>Valid Email Address:</b> {this.state.emailAddress}\r\n              </Card.Description>\r\n            </Card.Content>\r\n          </Card>\r\n          <Container style={{width:\"80%\", height:\"100vh\"}}>\r\n            <Segment textAlign=\"center\">\r\n              <b style={{fontSize:\"20px\"}}>Transaction History</b>\r\n              <Popup\r\n                trigger={\r\n                  <Button\r\n                    icon={this.state.visible ? \"minus\" : \"plus\"}\r\n                    onClick={this.toggleVisibility}\r\n                    floated=\"right\"\r\n                    size=\"mini\"\r\n                  />\r\n                }\r\n                content={\"Click to expand/close\"}\r\n                inverted/>\r\n            </Segment>\r\n            <Transition visible={this.state.visible} animation='scale' duration={500}>\r\n              <List divided size=\"huge\">\r\n                {this.renderTransactions()}\r\n              </List>\r\n            </Transition>\r\n          </Container>\r\n        </Layout>\r\n      );\r\n    } else {\r\n      return (\r\n        <Layout accountType={this.state.accountType}>\r\n          <Container style={{width: \"100%\", height:\"100vh\"}}>\r\n            <Modal open={this.state.loading} basic size='small'>\r\n              <Header icon='ethereum' content='Loading Resources' />\r\n              <Modal.Content>\r\n                <Loader active inline=\"centered\">\r\n                  Loading Profile\r\n                </Loader>\r\n              </Modal.Content>\r\n            </Modal>\r\n            <Modal open={!this.state.login && !this.state.loading} basic size='small'>\r\n              <Header icon='ethereum' content='Not Registered' />\r\n              <Modal.Content>\r\n                <p>\r\n                  You are currently not registered to access the platform. Please have your account registered.\r\n                </p>\r\n              </Modal.Content>\r\n              <Modal.Actions>\r\n                <Button color='green' inverted attached='bottom' onClick={() => {\r\n                  Router.pushRoute('/')}\r\n                }>\r\n                  Register For Account\r\n                </Button>\r\n              </Modal.Actions>\r\n            </Modal>\r\n          </Container>\r\n        </Layout>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default userProfile;\r\n"]},"metadata":{},"sourceType":"module"}