{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport web3 from '../ethereum/web3';\nimport Layout from '../components/Layout';\nimport factory from '../ethereum/factory';\nimport credentials from '../ethereum/credentials';\nimport EthQuestionToken from '../ethereum/token';\nimport Profile from '../ethereum/profile';\nimport { Router } from '../routes';\nimport { Button, Card, Segment, Container, List, Transition, Popup, Modal, Header, Loader, Icon } from \"semantic-ui-react\";\n\nvar userProfile =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(userProfile, _Component);\n\n  function userProfile(props) {\n    var _this;\n\n    _classCallCheck(this, userProfile);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(userProfile).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleVisibility\", function () {\n      return _this.setState(function (prevState) {\n        return {\n          visible: !prevState.visible\n        };\n      });\n    });\n\n    _this.state = {\n      visible: false,\n      login: false,\n      loading: true,\n      accountType: null,\n      account: null,\n      token: null,\n      emailAddress: null,\n      points: null,\n      transactions: []\n    };\n    return _this;\n  }\n\n  _createClass(userProfile, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var accounts, login, profileAddress, profile, emailAddress, token, points, transactions, accountType;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context.sent;\n                login = false;\n                _context.next = 6;\n                return credentials.methods.getBinding(accounts[0]).call();\n\n              case 6:\n                _context.t0 = _context.sent;\n\n                if (!(_context.t0 === \"\")) {\n                  _context.next = 10;\n                  break;\n                }\n\n                _context.next = 33;\n                break;\n\n              case 10:\n                login = true; // Get profile data\n\n                _context.next = 13;\n                return factory.methods.getProfile(accounts[0]).call();\n\n              case 13:\n                profileAddress = _context.sent;\n                profile = Profile(profileAddress);\n                _context.next = 17;\n                return credentials.methods.getBinding(accounts[0]).call();\n\n              case 17:\n                emailAddress = _context.sent;\n                _context.next = 20;\n                return EthQuestionToken.methods.balanceOf(accounts[0]).call();\n\n              case 20:\n                _context.t1 = _context.sent;\n                token = _context.t1 * 1e-4;\n                _context.next = 24;\n                return profile.methods.getPoints().call();\n\n              case 24:\n                points = _context.sent;\n                _context.next = 27;\n                return profile.methods.getTransactions().call();\n\n              case 27:\n                transactions = _context.sent;\n                _context.next = 30;\n                return profile.methods.getAccountType().call();\n\n              case 30:\n                accountType = _context.sent;\n                accountType == 0 ? accountType = \"Admin\" : accountType = \"User\";\n                this.setState({\n                  accountType: accountType,\n                  account: accounts[0],\n                  token: token,\n                  emailAddress: emailAddress,\n                  points: points,\n                  transactions: transactions,\n                  login: true\n                });\n\n              case 33:\n                this.setState({\n                  loading: false\n                });\n\n              case 34:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"renderTransactions\",\n    value: function renderTransactions() {\n      var transactions = this.state.transactions;\n      return transactions.map(function (transaction, index) {\n        return React.createElement(List.Item, {\n          key: index\n        }, React.createElement(List.Icon, {\n          name: \"calendar outline\",\n          size: \"large\",\n          verticalAlign: \"middle\"\n        }), React.createElement(List.Content, null, transaction));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.login) {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(Card, {\n          color: \"red\",\n          centered: true,\n          style: {\n            width: \"20%\"\n          }\n        }, React.createElement(Card.Content, null, React.createElement(Header, {\n          as: \"h1\",\n          textAlign: \"center\"\n        }, React.createElement(Icon, {\n          name: \"user\",\n          circular: true\n        })), React.createElement(Card.Header, null, \"Account Details:\", React.createElement(\"div\", {\n          style: {\n            color: \"red\",\n            fontSize: \"small\",\n            wordWrap: \"break-word\"\n          }\n        }, this.state.account)), React.createElement(Card.Meta, null, React.createElement(\"b\", null, this.state.accountType)), React.createElement(Card.Description, null, React.createElement(\"b\", null, \"EQT Balance:\"), \" \", this.state.token), React.createElement(Card.Description, null, React.createElement(\"b\", null, \"Points Accumulated:\"), \" \", this.state.points), React.createElement(Card.Description, null, React.createElement(\"b\", null, \"Valid Email Address:\"), \" \", this.state.emailAddress))), React.createElement(Container, {\n          style: {\n            width: \"80%\",\n            height: \"100vh\"\n          }\n        }, React.createElement(Segment, {\n          textAlign: \"center\"\n        }, React.createElement(\"b\", {\n          style: {\n            fontSize: \"20px\"\n          }\n        }, \"Transaction History\"), React.createElement(Popup, {\n          trigger: React.createElement(Button, {\n            icon: this.state.visible ? \"minus\" : \"plus\",\n            onClick: this.toggleVisibility,\n            floated: \"right\",\n            size: \"mini\"\n          }),\n          content: \"Click to expand/close\",\n          inverted: true\n        })), React.createElement(Transition, {\n          visible: this.state.visible,\n          animation: \"scale\",\n          duration: 500\n        }, React.createElement(List, {\n          divided: true,\n          size: \"huge\"\n        }, this.renderTransactions()))));\n      } else {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(Container, {\n          style: {\n            width: \"100%\",\n            height: \"100vh\"\n          }\n        }, React.createElement(Modal, {\n          open: this.state.loading,\n          basic: true,\n          size: \"small\"\n        }, React.createElement(Header, {\n          icon: \"ethereum\",\n          content: \"Loading Resources\"\n        }), React.createElement(Modal.Content, null, React.createElement(Loader, {\n          active: true,\n          inline: \"centered\"\n        }, \"Loading Profile\"))), React.createElement(Modal, {\n          open: !this.state.login && !this.state.loading,\n          basic: true,\n          size: \"small\"\n        }, React.createElement(Header, {\n          icon: \"ethereum\",\n          content: \"Not Registered\"\n        }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"You are currently not registered to access the platform. Please have your account registered.\")), React.createElement(Modal.Actions, null, React.createElement(Button, {\n          color: \"green\",\n          inverted: true,\n          attached: \"bottom\",\n          onClick: function onClick() {\n            Router.pushRoute('/');\n          }\n        }, \"Register For Account\")))));\n      }\n    }\n  }]);\n\n  return userProfile;\n}(Component);\n\nexport default userProfile;","map":null,"metadata":{},"sourceType":"module"}