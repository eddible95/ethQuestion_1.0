{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n// Ensure jsPDF does not import on Server Side\nvar jsPDF = null;\n\nif (typeof window !== \"undefined\") {\n  import(\"jspdf\").then(function (module) {\n    jsPDF = module.default;\n  });\n}\n\nvar exportQuestion =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(summary, answerList) {\n    var lMargin, rMargin, pdfInMM, doc, yPos, maxYPos, questionTitle, questionDescription, reward, lineHeight, splittedText, lines, blockHeight, pageCount;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // Initialise the PDF document to write\n            lMargin = 15; //left margin in mm\n\n            rMargin = 15; //right margin in mm\n\n            pdfInMM = 210; // width of A4 in mm\n\n            doc = new jsPDF(\"p\", \"mm\", \"a4\");\n            yPos = 55;\n            maxYPos = 280; // Question Information\n\n            questionTitle = \"Question Title: \" + summary[0];\n            questionDescription = \"Question Description: \" + summary[1];\n            reward = \"Reward: \" + summary[2] * 1e-4;\n            doc.setFontSize(18);\n            doc.text(lMargin, 45, \"Question Information\");\n            doc.setLineWidth(0.2);\n            doc.line(lMargin, 47, 190, 47);\n            lineHeight = doc.getLineHeight(questionDescription) / doc.internal.scaleFactor; // Question Title\n\n            splittedText = doc.splitTextToSize(questionTitle, pdfInMM - lMargin - rMargin);\n            doc.setFontSize(13);\n            doc.text(lMargin, yPos, splittedText); // Question Description\n\n            lines = splittedText.length;\n            lineHeight = doc.getLineHeight(splittedText) / doc.internal.scaleFactor;\n            blockHeight = lines * lineHeight;\n            yPos += blockHeight;\n            splittedText = doc.splitTextToSize(questionDescription, pdfInMM - lMargin - rMargin);\n            doc.text(lMargin, yPos, splittedText); // Question Reward\n\n            lines = splittedText.length;\n            lineHeight = doc.getLineHeight(splittedText) / doc.internal.scaleFactor;\n            blockHeight = lines * lineHeight;\n            yPos += blockHeight;\n            splittedText = doc.splitTextToSize(reward, pdfInMM - lMargin - rMargin);\n            doc.text(lMargin, yPos, splittedText); // Question's Images\n\n            lines = splittedText.length;\n            blockHeight = lines * lineHeight;\n            yPos += lineHeight;\n            splittedText = doc.splitTextToSize(\"Link(s) of Image(s) Uploaded For Question:\", pdfInMM - lMargin - rMargin);\n            doc.setFontType('bold');\n            doc.text(lMargin, yPos, splittedText);\n\n            if (summary[5].length != 0) {\n              summary[5].map(function (imageHash, index) {\n                var link = \"https://ipfs.io/ipfs/\" + imageHash;\n                lines = splittedText.length;\n                blockHeight = lines * lineHeight;\n                yPos += lineHeight;\n                lines = doc.splitTextToSize(link, pdfInMM - lMargin - rMargin);\n                doc.setFontSize(13);\n                doc.setFontType('normal');\n                doc.text(lMargin, yPos, lines);\n              });\n            } // Answer Header\n\n\n            lines = splittedText.length;\n            blockHeight = lines * lineHeight;\n            yPos += lineHeight * 2;\n            splittedText = doc.splitTextToSize(\"Answer(s) Provided\", pdfInMM - lMargin - rMargin);\n            doc.setFontSize(18);\n            doc.setFontType('normal');\n            doc.text(lMargin, yPos, splittedText);\n            lines = splittedText.length;\n            blockHeight = lines * lineHeight;\n            yPos += lineHeight * 0.3;\n            doc.setLineWidth(0.2);\n            doc.line(lMargin, yPos, 190, yPos); // Answer Body\n\n            if (answerList.length != 0) {\n              answerList.map(function (answer, index) {\n                var answerAddress = answer[2];\n                var content = answer[0];\n                var numOfApprovals = answer[4];\n                var rewarded = answer[1];\n                var answerLine = answerAddress + \": \" + content;\n                var approvalLine = \"Number of Approvals: \" + numOfApprovals;\n                var rewardedLine = \"Rewarded: \" + rewarded; // Answers\n\n                lineHeight = doc.getLineHeight(splittedText) / doc.internal.scaleFactor;\n                lines = splittedText.length;\n                blockHeight = lines * lineHeight;\n\n                if (yPos > maxYPos) {\n                  doc.addPage();\n                  yPos = 40;\n                } else {\n                  yPos += blockHeight;\n                }\n\n                splittedText = doc.splitTextToSize(answerLine, pdfInMM - lMargin - rMargin);\n                doc.setFontSize(12);\n                doc.setFontType('normal');\n                doc.text(lMargin, yPos, splittedText);\n\n                if (answer[8].length != 0) {\n                  answer[8].map(function (imageHash, index) {\n                    var link = \"https://ipfs.io/ipfs/\" + imageHash;\n                    lineHeight = doc.getLineHeight(splittedText) / doc.internal.scaleFactor;\n                    lines = splittedText.length;\n                    blockHeight = lines * lineHeight;\n                    yPos += lineHeight;\n                    splittedText = doc.splitTextToSize(link, pdfInMM - lMargin - rMargin);\n                    doc.text(lMargin, yPos, splittedText);\n                  });\n                } // Number Of Approvals\n\n\n                lineHeight = doc.getLineHeight(splittedText) / doc.internal.scaleFactor;\n                lines = splittedText.length;\n                blockHeight = lines * lineHeight;\n\n                if (yPos > maxYPos) {\n                  doc.addPage();\n                  yPos = 40;\n                } else {\n                  yPos += blockHeight;\n                }\n\n                splittedText = doc.splitTextToSize(approvalLine, pdfInMM - lMargin - rMargin);\n                doc.text(lMargin, yPos, splittedText); // Rewarded Or Not\n\n                lineHeight = doc.getLineHeight(splittedText) / doc.internal.scaleFactor;\n                lines = splittedText.length;\n                blockHeight = lines * lineHeight;\n\n                if (yPos > maxYPos) {\n                  doc.addPage();\n                  yPos = 40;\n                } else {\n                  yPos += blockHeight;\n                }\n\n                splittedText = doc.splitTextToSize(rewardedLine, pdfInMM - lMargin - rMargin);\n                doc.text(lMargin, yPos, splittedText);\n                yPos += lineHeight * 0.3;\n                doc.setLineWidth(0.1);\n                doc.line(lMargin, yPos, 190, yPos);\n              });\n            }\n\n            pageCount = doc.internal.getNumberOfPages();\n            doc = createFooter(doc, pageCount);\n            doc = createHeader(doc, pageCount);\n            doc.save(\"EthQuestion_\" + summary[0] + \".pdf\");\n\n          case 53:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function exportQuestion(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar exportComments =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(comments) {\n    var lMargin, rMargin, pdfInMM, doc, yPos, maxYPos, commentHeader, splittedText, pageCount;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            // Initialise the PDF document to write\n            lMargin = 15; //left margin in mm\n\n            rMargin = 15; //right margin in mm\n\n            pdfInMM = 210; // width of A4 in mm\n\n            doc = new jsPDF(\"p\", \"mm\", \"a4\");\n            yPos = 55;\n            maxYPos = 230; // Comments Header\n\n            doc.setFontSize(18);\n            commentHeader = \"Comment(s) Provided By Users\";\n            splittedText = doc.splitTextToSize(commentHeader, pdfInMM - lMargin - rMargin);\n            doc.text(lMargin, 45, splittedText);\n            doc.setLineWidth(0.2);\n            doc.line(lMargin, 47, 190, 47); // Comments Body\n\n            if (comments.length != 0) {\n              comments.map(function (comment, index) {\n                var lineHeight = doc.getLineHeight(splittedText) / doc.internal.scaleFactor;\n                var lines = splittedText.length;\n                var blockHeight = lines * lineHeight;\n\n                if (yPos > maxYPos) {\n                  doc.addPage();\n                  yPos = 40;\n                } else {\n                  yPos += blockHeight;\n                }\n\n                splittedText = doc.splitTextToSize(comment, pdfInMM - lMargin - rMargin);\n                doc.setFontSize(12);\n                doc.setFontType('normal');\n                doc.text(lMargin, yPos, splittedText);\n              });\n            }\n\n            pageCount = doc.internal.getNumberOfPages();\n            doc = createFooter(doc, pageCount);\n            doc = createHeader(doc, pageCount);\n            doc.save(\"EthQuestion_Comments.pdf\");\n\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function exportComments(_x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar createHeader = function createHeader(document, pageCount) {\n  for (var i = 1; i <= pageCount; i++) {\n    if (i == 1) {\n      document.setPage(i);\n      document.setTextColor(0);\n      document.setFontSize(24);\n      document.text(15, 30, \"Ethereum Question & Answering System\");\n      document.setLineWidth(0.5);\n      document.line(15, 33, 190, 33);\n    } else {\n      document.setPage(i);\n      document.setTextColor(150);\n      document.setFontSize(13);\n      document.text(105, 30, \"Ethereum Question & Answering System\");\n      document.setLineWidth(0.3);\n      document.line(15, 33, 190, 33);\n    }\n  }\n\n  return document;\n};\n\nvar createFooter = function createFooter(document, pageCount) {\n  for (var i = 1; i <= pageCount; i++) {\n    document.setPage(i);\n    document.setFontSize(13);\n    document.setTextColor(150);\n    document.text(170, 285, \"Page \" + document.internal.getCurrentPageInfo().pageNumber + \" of \" + pageCount);\n  }\n\n  return document;\n};\n\nexport { exportQuestion, exportComments };","map":null,"metadata":{},"sourceType":"module"}