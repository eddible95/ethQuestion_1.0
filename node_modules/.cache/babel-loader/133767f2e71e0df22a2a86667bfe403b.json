{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { Container, Segment, Header, Divider, Button, Popup, Form, Input, Icon, Dropdown, Table, Modal, Loader, Message, Transition, Grid } from \"semantic-ui-react\";\nimport Layout from '../components/Layout';\nimport LoadingModal from '../components/LoadingModal';\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport { Router } from '../routes';\nimport { logging, checkLogin, checkRewardField } from '../utils/functions';\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\nimport Profile from '../ethereum/profile';\nimport Question from '../ethereum/question';\nimport feedback from '../ethereum/feedback';\nimport EthQuestionToken from '../ethereum/token';\nimport EthQuestionTokenSale from '../ethereum/tokenSale';\nimport credentials from '../ethereum/credentials';\nimport { exportQuestion, exportComments } from '../utils/pdf';\n\nvar AdminPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AdminPage, _Component);\n\n  function AdminPage(props) {\n    var _this;\n\n    _classCallCheck(this, AdminPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AdminPage).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"export\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var questionNumber, question, summary, answerList;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(_this.state.questionNumber != null)) {\n                _context.next = 11;\n                break;\n              }\n\n              // Retrieve all the data of selected question\n              questionNumber = Number(_this.state.questionNumber) - 1;\n              question = Question(_this.state.deployedQuestions[questionNumber]);\n              _context.next = 5;\n              return question.methods.getSummary().call();\n\n            case 5:\n              summary = _context.sent;\n              _context.next = 8;\n              return question.methods.getAnswerList().call();\n\n            case 8:\n              answerList = _context.sent;\n              _context.next = 11;\n              return exportQuestion(summary, answerList);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"exportFeedback\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var comments;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return feedback.methods.getComments().call();\n\n            case 2:\n              comments = _context2.sent;\n              _context2.next = 5;\n              return exportComments(comments);\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"getUserTableData\", function () {\n      return _this.state.ethWalletEmailAddressBinding.map(function (item, index) {\n        return React.createElement(Table.Row, {\n          key: index\n        }, React.createElement(Table.Cell, null, item.ethWallet), React.createElement(Table.Cell, null, item.emailAddress), React.createElement(Table.Cell, null, item.status ? \"Blacklisted\" : \"Active\"), React.createElement(Table.Cell, null, item.status ? React.createElement(Button, {\n          onClick: function onClick() {\n            return _this.unblacklist(item.emailAddress);\n          },\n          color: \"green\",\n          size: \"mini\",\n          icon: true\n        }, React.createElement(Icon, {\n          name: \"add user\"\n        })) : React.createElement(Button, {\n          onClick: function onClick() {\n            return _this.blacklist(item.emailAddress);\n          },\n          color: \"red\",\n          size: \"mini\",\n          icon: true\n        }, React.createElement(Icon, {\n          name: \"remove user\"\n        }))), React.createElement(Table.Cell, null, React.createElement(Button, {\n          onClick: function onClick() {\n            return _this.dispense(item.ethWallet);\n          },\n          color: \"green\",\n          size: \"mini\",\n          icon: true\n        }, React.createElement(Icon, {\n          name: \"ethereum\"\n        }))));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"blacklist\",\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(emailAddress) {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this.setState({\n                  loading: true,\n                  errorMessage: ''\n                });\n\n                _context3.prev = 1;\n                _context3.next = 4;\n                return web3.eth.getAccounts();\n\n              case 4:\n                accounts = _context3.sent;\n                _context3.next = 7;\n                return credentials.methods.blacklistEmail(emailAddress).send({\n                  from: accounts[0]\n                });\n\n              case 7:\n                Router.pushRoute('/admin'); // Automatic redirect the user.\n\n                _context3.next = 14;\n                break;\n\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](1);\n\n                _this.setState({\n                  errorMessage: _context3.t0.message\n                });\n\n                _this.setState({\n                  error: true\n                });\n\n              case 14:\n                _this.setState({\n                  loading: false\n                });\n\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[1, 10]]);\n      }));\n\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"unblacklist\",\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(emailAddress) {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _this.setState({\n                  loading: true,\n                  errorMessage: ''\n                });\n\n                _context4.prev = 1;\n                _context4.next = 4;\n                return web3.eth.getAccounts();\n\n              case 4:\n                accounts = _context4.sent;\n                _context4.next = 7;\n                return credentials.methods.unBlacklistEmail(emailAddress).send({\n                  from: accounts[0]\n                });\n\n              case 7:\n                _context4.next = 13;\n                break;\n\n              case 9:\n                _context4.prev = 9;\n                _context4.t0 = _context4[\"catch\"](1);\n\n                _this.setState({\n                  errorMessage: _context4.t0.message\n                });\n\n                _this.setState({\n                  error: true\n                });\n\n              case 13:\n                _this.setState({\n                  loading: false\n                });\n\n              case 14:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[1, 9]]);\n      }));\n\n      return function (_x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"dispense\",\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(ethWallet) {\n        var accounts, profileAddress, _profile, logTransaction;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _this.setState({\n                  loading: true,\n                  errorMessage: ''\n                });\n\n                _context5.prev = 1;\n                _context5.next = 4;\n                return web3.eth.getAccounts();\n\n              case 4:\n                accounts = _context5.sent;\n                _context5.next = 7;\n                return EthQuestionToken.methods.transfer(ethWallet, 10e4).send({\n                  from: accounts[0]\n                });\n\n              case 7:\n                _context5.next = 9;\n                return factory.methods.getProfile(ethWallet).call();\n\n              case 9:\n                profileAddress = _context5.sent;\n                _profile = Profile(profileAddress);\n                logTransaction = logging(\"Awarded 10 EQT(s) for first time user\");\n                _context5.next = 14;\n                return _profile.methods.logTransaction(logTransaction).send({\n                  from: accounts[0]\n                });\n\n              case 14:\n                _context5.next = 20;\n                break;\n\n              case 16:\n                _context5.prev = 16;\n                _context5.t0 = _context5[\"catch\"](1);\n\n                _this.setState({\n                  errorMessage: _context5.t0.message\n                });\n\n                _this.setState({\n                  error: true\n                });\n\n              case 20:\n                _this.setState({\n                  loading: false\n                });\n\n              case 21:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, null, [[1, 16]]);\n      }));\n\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"getQuestionTableData\", function () {\n      return _this.state.questionAddressTitleBinding.map(function (item, index) {\n        return React.createElement(Table.Row, {\n          key: index\n        }, React.createElement(Table.Cell, null, item.questionAddress), React.createElement(Table.Cell, null, item.title), React.createElement(Table.Cell, null, item.flagged ? \"Flagged\" : \"Active\"), React.createElement(Table.Cell, null, item.flagged ? React.createElement(Button, {\n          onClick: function onClick() {\n            return _this.undoDeleteQuestion(item.questionAddress);\n          },\n          color: \"green\",\n          size: \"mini\",\n          icon: true\n        }, React.createElement(Icon, {\n          name: \"undo\"\n        })) : React.createElement(Button, {\n          onClick: function onClick() {\n            return _this.deleteQuestion(item.questionAddress);\n          },\n          color: \"red\",\n          size: \"mini\",\n          icon: true\n        }, React.createElement(Icon, {\n          name: \"flag\"\n        }))));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"deleteQuestion\",\n    /*#__PURE__*/\n    function () {\n      var _ref6 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(questionAddress, title) {\n        var accounts, logTransaction;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _this.setState({\n                  loading: true,\n                  errorMessage: ''\n                });\n\n                _context6.prev = 1;\n                _context6.next = 4;\n                return web3.eth.getAccounts();\n\n              case 4:\n                accounts = _context6.sent;\n                logTransaction = logging(\"Deleted Question Titled: \" + title);\n                _context6.next = 8;\n                return factory.methods.deleteQuestion(questionAddress, logTransaction).send({\n                  from: accounts[0]\n                });\n\n              case 8:\n                Router.pushRoute('/admin'); // Automatic redirect the user.\n\n                _context6.next = 15;\n                break;\n\n              case 11:\n                _context6.prev = 11;\n                _context6.t0 = _context6[\"catch\"](1);\n\n                _this.setState({\n                  errorMessage: _context6.t0.message\n                });\n\n                _this.setState({\n                  error: true\n                });\n\n              case 15:\n                _this.setState({\n                  loading: false\n                });\n\n              case 16:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, null, [[1, 11]]);\n      }));\n\n      return function (_x4, _x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"undoDeleteQuestion\",\n    /*#__PURE__*/\n    function () {\n      var _ref7 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(questionAddress, title) {\n        var accounts, logTransaction;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _this.setState({\n                  loading: true,\n                  errorMessage: ''\n                });\n\n                _context7.prev = 1;\n                _context7.next = 4;\n                return web3.eth.getAccounts();\n\n              case 4:\n                accounts = _context7.sent;\n                logTransaction = logging(\"Undo Deletion Of Question Titled: \" + title);\n                _context7.next = 8;\n                return factory.methods.undoDeleteQuestion(questionAddress, logTransaction).send({\n                  from: accounts[0]\n                });\n\n              case 8:\n                Router.pushRoute('/admin'); // Automatic redirect the user.\n\n                _context7.next = 15;\n                break;\n\n              case 11:\n                _context7.prev = 11;\n                _context7.t0 = _context7[\"catch\"](1);\n\n                _this.setState({\n                  errorMessage: _context7.t0.message\n                });\n\n                _this.setState({\n                  error: true\n                });\n\n              case 15:\n                _this.setState({\n                  loading: false\n                });\n\n              case 16:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, null, [[1, 11]]);\n      }));\n\n      return function (_x6, _x7) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"topUp\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee8() {\n      var accounts, profileAddress, _profile2, logTransaction;\n\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              });\n\n              if (!checkRewardField(_this.state.topUpAmount)) {\n                _context8.next = 25;\n                break;\n              }\n\n              _context8.prev = 2;\n              _context8.next = 5;\n              return web3.eth.getAccounts();\n\n            case 5:\n              accounts = _context8.sent;\n              _context8.next = 8;\n              return EthQuestionToken.methods.transfer(EthQuestionTokenSale._address, _this.state.topUpAmount * 1e4).send({\n                from: accounts[0]\n              });\n\n            case 8:\n              _context8.next = 10;\n              return factory.methods.getProfile(accounts[0]).call();\n\n            case 10:\n              profileAddress = _context8.sent;\n              _profile2 = Profile(profileAddress);\n              logTransaction = logging(\"Added \" + _this.state.topUpAmount + \" EQT(s) for exchange\");\n              _context8.next = 15;\n              return _profile2.methods.logTransaction(logTransaction).send({\n                from: accounts[0]\n              });\n\n            case 15:\n              Router.pushRoute('/admin'); // Automatic redirect the user.\n\n              _context8.next = 23;\n              break;\n\n            case 18:\n              _context8.prev = 18;\n              _context8.t0 = _context8[\"catch\"](2);\n\n              _this.setState({\n                errorMessage: _context8.t0.message\n              });\n\n              _this.setState({\n                error: true\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 23:\n              _context8.next = 28;\n              break;\n\n            case 25:\n              _this.setState({\n                errorMessage: \"Required Field(s) Empty or Invalid Input\"\n              });\n\n              _this.setState({\n                error: true\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 28:\n              _this.setState({\n                loading: false\n              });\n\n            case 29:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, null, [[2, 18]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"collectEther\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee9() {\n      var accounts, profileAddress, logTransaction;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              });\n\n              _context9.prev = 1;\n              _context9.next = 4;\n              return web3.eth.getAccounts();\n\n            case 4:\n              accounts = _context9.sent;\n              _context9.next = 7;\n              return factory.methods.getProfile(accounts[0]).call();\n\n            case 7:\n              profileAddress = _context9.sent;\n              logTransaction = logging(\"Collect Ether from exchange of EQT(s)\");\n              _context9.next = 11;\n              return EthQuestionTokenSale.methods.endSale(EthQuestionToken._address, profileAddress, logTransaction).send({\n                from: accounts[0]\n              });\n\n            case 11:\n              Router.pushRoute('/admin'); // Automatic redirect the user.\n\n              _context9.next = 19;\n              break;\n\n            case 14:\n              _context9.prev = 14;\n              _context9.t0 = _context9[\"catch\"](1);\n\n              _this.setState({\n                errorMessage: _context9.t0.message\n              });\n\n              _this.setState({\n                error: true\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 19:\n              _this.setState({\n                loading: false\n              });\n\n            case 20:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, null, [[1, 14]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"changeTokenPrice\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee10() {\n      var accounts, profileAddress, logTransaction;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              });\n\n              if (!checkRewardField(_this.state.newTokenPrice)) {\n                _context10.next = 24;\n                break;\n              }\n\n              _context10.prev = 2;\n              _context10.next = 5;\n              return web3.eth.getAccounts();\n\n            case 5:\n              accounts = _context10.sent;\n              _context10.next = 8;\n              return factory.methods.getProfile(accounts[0]).call();\n\n            case 8:\n              profileAddress = _context10.sent;\n              logTransaction = logging(\"Changed Token Price to \" + _this.state.newTokenPrice + \" wei per EQT.\");\n              _context10.next = 12;\n              return profile.methods.logTransaction(logTransaction);\n\n            case 12:\n              _context10.next = 14;\n              return EthQuestionTokenSale.methods.changeTokenPrice(_this.state.newTokenPrice, profileAddress, logTransaction).send({\n                from: accounts[0]\n              });\n\n            case 14:\n              Router.pushRoute('/admin'); // Automatic redirect the user.\n\n              _context10.next = 22;\n              break;\n\n            case 17:\n              _context10.prev = 17;\n              _context10.t0 = _context10[\"catch\"](2);\n\n              _this.setState({\n                errorMessage: _context10.t0.message\n              });\n\n              _this.setState({\n                error: true\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 22:\n              _context10.next = 27;\n              break;\n\n            case 24:\n              _this.setState({\n                errorMessage: \"Required Field(s) Empty or Invalid Input\"\n              });\n\n              _this.setState({\n                error: true\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 27:\n              _this.setState({\n                loading: false\n              });\n\n            case 28:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, null, [[2, 17]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleUserTableVisibility\", function () {\n      return _this.setState(function (prevState) {\n        return {\n          userVisible: !prevState.userVisible\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleQuestionTableVisibility\", function () {\n      return _this.setState(function (prevState) {\n        return {\n          questionVisible: !prevState.questionVisible\n        };\n      });\n    });\n\n    _this.state = {\n      account: null,\n      error: false,\n      loading: false,\n      loadingResource: true,\n      deployedQuestionsCount: null,\n      deployedQuestions: [],\n      ethWalletEmailAddressBinding: [],\n      questionAddressTitleBinding: [],\n      tokenPrice: null,\n      tokenBalance: null,\n      etherBalance: null,\n      errorMessage: '',\n      accountType: null,\n      userVisible: false,\n      questionOptions: [],\n      questionNumber: null,\n      questionVisible: false,\n      newTokenPrice: '',\n      topUpAmount: ''\n    };\n    return _this;\n  }\n\n  _createClass(AdminPage, [{\n    key: \"componentDidUpdate\",\n    value: function () {\n      var _componentDidUpdate = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee11(prevProps) {\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                if (this.props != prevProps) {\n                  this.fetchData();\n                }\n\n              case 1:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function componentDidUpdate(_x8) {\n        return _componentDidUpdate.apply(this, arguments);\n      }\n\n      return componentDidUpdate;\n    }()\n  }, {\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee12() {\n        var login, accounts, profileAddress, _profile3, accountType, questionOptions, i, question, summary;\n\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                if (!(typeof web3 === 'undefined')) {\n                  _context12.next = 3;\n                  break;\n                }\n\n                this.setState({\n                  loading: false\n                });\n                return _context12.abrupt(\"return\");\n\n              case 3:\n                login = false; // Retrieve the Ethereum Account from MetaMask\n\n                _context12.next = 6;\n                return web3.eth.getAccounts();\n\n              case 6:\n                accounts = _context12.sent;\n                _context12.next = 9;\n                return checkLogin(accounts[0]);\n\n              case 9:\n                if (!_context12.sent) {\n                  _context12.next = 37;\n                  break;\n                }\n\n                login = true; // Get Account Type\n\n                _context12.next = 13;\n                return factory.methods.getProfile(accounts[0]).call();\n\n              case 13:\n                profileAddress = _context12.sent;\n                _profile3 = Profile(profileAddress);\n                _context12.next = 17;\n                return _profile3.methods.getAccountType().call();\n\n              case 17:\n                accountType = _context12.sent;\n                accountType == 0 ? accountType = \"Admin\" : accountType = \"User\";\n\n                if (accountType != \"Admin\") {\n                  login = false;\n                }\n\n                _context12.next = 22;\n                return this.fetchData();\n\n              case 22:\n                // Get Question Deployed\n                questionOptions = [];\n                i = 0;\n\n              case 24:\n                if (!(i < this.state.deployedQuestionsCount)) {\n                  _context12.next = 33;\n                  break;\n                }\n\n                question = Question(this.state.deployedQuestions[i]);\n                _context12.next = 28;\n                return question.methods.getSummary().call();\n\n              case 28:\n                summary = _context12.sent;\n                questionOptions.push({\n                  key: i + 1,\n                  text: summary[0],\n                  value: i + 1\n                });\n\n              case 30:\n                i++;\n                _context12.next = 24;\n                break;\n\n              case 33:\n                this.setState({\n                  questionOptions: questionOptions\n                });\n                this.setState({\n                  account: accounts[0]\n                });\n                this.setState({\n                  login: login\n                });\n                this.setState({\n                  accountType: accountType\n                });\n\n              case 37:\n                this.setState({\n                  loadingResource: false\n                });\n\n              case 38:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"fetchData\",\n    value: function () {\n      var _fetchData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee13() {\n        var deployedQuestions, deployedQuestionsCount, questionAddressTitleBinding, i, question, summary, ethWallets, ethWalletEmailAddressBinding, _i, emailAddress, status, tokenPrice, tokenBalance, etherBalance;\n\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return factory.methods.getDeployedQuestions().call();\n\n              case 2:\n                deployedQuestions = _context13.sent;\n                deployedQuestionsCount = deployedQuestions.length;\n                questionAddressTitleBinding = [];\n                i = 0;\n\n              case 6:\n                if (!(i < deployedQuestionsCount)) {\n                  _context13.next = 15;\n                  break;\n                }\n\n                question = Question(deployedQuestions[i]);\n                _context13.next = 10;\n                return question.methods.getSummary().call();\n\n              case 10:\n                summary = _context13.sent;\n                questionAddressTitleBinding.push({\n                  questionAddress: deployedQuestions[i],\n                  title: summary[0],\n                  flagged: summary[9]\n                });\n\n              case 12:\n                i++;\n                _context13.next = 6;\n                break;\n\n              case 15:\n                _context13.next = 17;\n                return factory.methods.getEthWallets().call();\n\n              case 17:\n                ethWallets = _context13.sent;\n                ethWalletEmailAddressBinding = [];\n                _i = 0;\n\n              case 20:\n                if (!(_i < ethWallets.length)) {\n                  _context13.next = 31;\n                  break;\n                }\n\n                _context13.next = 23;\n                return credentials.methods.getBinding(ethWallets[_i]).call();\n\n              case 23:\n                emailAddress = _context13.sent;\n                _context13.next = 26;\n                return credentials.methods.emailNotBlackList(emailAddress).call();\n\n              case 26:\n                status = _context13.sent;\n                ethWalletEmailAddressBinding.push({\n                  ethWallet: ethWallets[_i],\n                  emailAddress: emailAddress,\n                  status: status\n                });\n\n              case 28:\n                _i++;\n                _context13.next = 20;\n                break;\n\n              case 31:\n                _context13.next = 33;\n                return EthQuestionTokenSale.methods.getTokenPrice().call();\n\n              case 33:\n                tokenPrice = _context13.sent;\n                _context13.next = 36;\n                return EthQuestionToken.methods.balanceOf(EthQuestionTokenSale._address).call();\n\n              case 36:\n                tokenBalance = _context13.sent;\n                _context13.next = 39;\n                return EthQuestionTokenSale.methods.getEtherBalance().call();\n\n              case 39:\n                etherBalance = _context13.sent;\n                this.setState({\n                  deployedQuestionsCount: deployedQuestionsCount,\n                  deployedQuestions: deployedQuestions,\n                  ethWalletEmailAddressBinding: ethWalletEmailAddressBinding,\n                  questionAddressTitleBinding: questionAddressTitleBinding,\n                  tokenPrice: tokenPrice,\n                  tokenBalance: tokenBalance,\n                  etherBalance: etherBalance\n                });\n\n              case 41:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function fetchData() {\n        return _fetchData.apply(this, arguments);\n      }\n\n      return fetchData;\n    }()\n  }, {\n    key: \"renderExport\",\n    value: function renderExport() {\n      var _this2 = this;\n\n      return React.createElement(React.Fragment, null, React.createElement(Segment, {\n        raised: true,\n        textAlign: \"left\"\n      }, React.createElement(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"Exporting Questions & Answers As PDF\")), React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, \"Select the question to export the question and it's corresponding answers\"), React.createElement(Dropdown, {\n        clearable: true,\n        options: this.state.questionOptions,\n        selection: true,\n        placeholder: \"Select the question to export\",\n        value: this.state.questionNumber,\n        onChange: function onChange(e, _ref11) {\n          var value = _ref11.value;\n          return _this2.setState({\n            questionNumber: value\n          });\n        }\n      }), React.createElement(Button, {\n        icon: true,\n        labelPosition: \"left\",\n        color: \"red\",\n        onClick: this.export,\n        style: {\n          left: \"20px\"\n        }\n      }, React.createElement(Icon, {\n        name: \"download\"\n      }), \"Export As PDF\"), React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(Segment, {\n        raised: true,\n        textAlign: \"left\"\n      }, React.createElement(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"Exporting Feedback\")), React.createElement(Button, {\n        icon: true,\n        labelPosition: \"left\",\n        color: \"red\",\n        onClick: this.exportFeedback,\n        style: {\n          left: \"20px\"\n        }\n      }, React.createElement(Icon, {\n        name: \"download\"\n      }), \"Export As PDF\"));\n    }\n  }, {\n    key: \"renderEQTSettings\",\n    value: function renderEQTSettings() {\n      var _this3 = this;\n\n      return React.createElement(React.Fragment, null, React.createElement(Segment, {\n        raised: true,\n        textAlign: \"left\"\n      }, React.createElement(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"EthQuestionTokens (EQT) Exchange Settings\")), React.createElement(Grid, {\n        container: true\n      }, React.createElement(Grid.Row, null, React.createElement(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, \"Balance Available For Exchange: \", React.createElement(\"b\", null, this.state.tokenBalance * 1e-4, \" EQT(s)\"))), React.createElement(Grid.Row, null, React.createElement(Form, {\n        error: !!this.state.errorMessage,\n        style: {\n          marginTop: '10px'\n        }\n      }, React.createElement(Form.Field, {\n        required: true\n      }, React.createElement(\"label\", null, \"Top Up Amount\"), React.createElement(Input, {\n        label: \"EQT(s)\",\n        labelPosition: \"right\",\n        placeholder: \"Enter EQT Value\",\n        value: this.state.topUpAmount,\n        onChange: function onChange(event) {\n          return _this3.setState({\n            topUpAmount: event.target.value\n          });\n        }\n      })))), React.createElement(Grid.Row, null, React.createElement(Button, {\n        icon: true,\n        labelPosition: \"left\",\n        color: \"red\",\n        onClick: this.topUp\n      }, React.createElement(Icon, {\n        name: \"dollar sign\"\n      }), \"Top Up Balance\")), React.createElement(Grid.Row, null, React.createElement(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, \"Ether Collected From Exchange: \", React.createElement(\"b\", null, this.state.etherBalance * 1e-18, \" Ether(s)\"))), React.createElement(Grid.Row, null, React.createElement(Button, {\n        icon: true,\n        labelPosition: \"left\",\n        color: \"red\",\n        onClick: this.collectEther\n      }, React.createElement(Icon, {\n        name: \"ethereum\"\n      }), \"Collect Ether\")), React.createElement(Grid.Row, null, React.createElement(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, \"Current Token Price: \", React.createElement(\"b\", null, this.state.tokenPrice * 1e-18, \" Ether(s)\"))), React.createElement(Grid.Row, null, React.createElement(Form, {\n        error: !!this.state.errorMessage,\n        style: {\n          marginTop: '10px'\n        }\n      }, React.createElement(Form.Field, {\n        required: true\n      }, React.createElement(\"label\", null, \"Token Price\"), React.createElement(Input, {\n        label: \"Wei\",\n        labelPosition: \"right\",\n        placeholder: \"New Token Price\",\n        value: this.state.newTokenPrice,\n        onChange: function onChange(event) {\n          return _this3.setState({\n            newTokenPrice: event.target.value\n          });\n        }\n      })))), React.createElement(Grid.Row, null, React.createElement(Button, {\n        icon: true,\n        labelPosition: \"left\",\n        color: \"red\",\n        onClick: this.changeTokenPrice\n      }, React.createElement(Icon, {\n        name: \"ethereum\"\n      }), \"Change Token Price\"))), React.createElement(Divider, {\n        hidden: true\n      }));\n    }\n  }, {\n    key: \"renderUserManagement\",\n    value: function renderUserManagement() {\n      return React.createElement(React.Fragment, null, React.createElement(Segment, {\n        raised: true,\n        textAlign: \"center\"\n      }, React.createElement(\"b\", {\n        style: {\n          fontSize: \"20px\"\n        }\n      }, \"Users Management\"), React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          icon: this.state.userVisible ? \"minus\" : \"plus\",\n          onClick: this.toggleUserTableVisibility,\n          floated: \"right\",\n          size: \"mini\"\n        }),\n        content: \"Click to expand/close\",\n        inverted: true\n      })), React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(Transition, {\n        visible: this.state.userVisible,\n        animation: \"scale\",\n        duration: 500\n      }, React.createElement(Segment, null, React.createElement(Header, null, React.createElement(Icon, {\n        name: \"user\",\n        circular: true\n      }), \"Registered Users\"), React.createElement(Table, {\n        compact: true,\n        celled: true,\n        stackable: true\n      }, React.createElement(Table.Header, {\n        fullWidth: true\n      }, React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, {\n        width: 2\n      }, \"Ethereum Wallet\"), React.createElement(Table.HeaderCell, {\n        width: 3\n      }, \"Email\"), React.createElement(Table.HeaderCell, {\n        width: 2\n      }, \"Status\"), React.createElement(Table.HeaderCell, {\n        width: 2\n      }, \"Blacklist\"), React.createElement(Table.HeaderCell, {\n        width: 2\n      }, \"Dispense Tokens\"))), React.createElement(Table.Body, null, this.getUserTableData()), React.createElement(Table.Footer, {\n        fullWidth: true\n      }, React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, {\n        colSpan: 5\n      })))))), React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(Segment, {\n        raised: true,\n        textAlign: \"center\"\n      }, React.createElement(\"b\", {\n        style: {\n          fontSize: \"20px\"\n        }\n      }, \"Removing Question\"), React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          icon: this.state.questionVisible ? \"minus\" : \"plus\",\n          onClick: this.toggleQuestionTableVisibility,\n          floated: \"right\",\n          size: \"mini\"\n        }),\n        content: \"Click to expand/close\",\n        inverted: true\n      })));\n    }\n  }, {\n    key: \"renderQuestionSettings\",\n    value: function renderQuestionSettings() {\n      return React.createElement(React.Fragment, null, React.createElement(Transition, {\n        visible: this.state.questionVisible,\n        animation: \"scale\",\n        duration: 500\n      }, React.createElement(Segment, null, React.createElement(Header, null, React.createElement(Icon, {\n        name: \"question circle\",\n        circular: true\n      }), \"Questions Posted\"), React.createElement(Table, {\n        compact: true,\n        celled: true,\n        stackable: true\n      }, React.createElement(Table.Header, {\n        fullWidth: true\n      }, React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, {\n        width: 2\n      }, \"Question Address\"), React.createElement(Table.HeaderCell, {\n        width: 3\n      }, \"Title\"), React.createElement(Table.HeaderCell, {\n        width: 2\n      }, \"Status\"), React.createElement(Table.HeaderCell, {\n        width: 2\n      }, \"Actions\"))), React.createElement(Table.Body, null, this.getQuestionTableData()), React.createElement(Table.Footer, {\n        fullWidth: true\n      }, React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, {\n        colSpan: 5\n      })))))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.login) {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType,\n          page: \"Admin\"\n        }, React.createElement(Container, null, React.createElement(Divider, {\n          hidden: true\n        }), this.renderExport(), this.renderEQTSettings(), React.createElement(Message, {\n          error: true,\n          header: \"Oops!\",\n          content: this.state.errorMessage,\n          hidden: !this.state.error\n        }), this.renderUserManagement(), React.createElement(Divider, {\n          hidden: true\n        }), this.renderQuestionSettings(), React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(LoadingModal, {\n          trigger: this.state.loading,\n          title: 'Performing Admin Actions',\n          content: \"Please Confirm the MetaMask Transaction Request. This process might take awhile.\",\n          loader: \"Loading\"\n        })));\n      } else {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(AccountIssueModal, {\n          loading: this.state.loadingResource,\n          login: this.state.login\n        }));\n      }\n    }\n  }]);\n\n  return AdminPage;\n}(Component);\n\nexport default AdminPage;","map":null,"metadata":{},"sourceType":"module"}