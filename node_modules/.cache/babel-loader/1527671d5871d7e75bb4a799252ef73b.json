{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport Question from '../ethereum/question';\n\nvar Fuse = require(\"fuse.js\");\n\nfunction search(_x, _x2) {\n  return _search.apply(this, arguments);\n}\n\nfunction _search() {\n  _search = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(value, questions) {\n    var list, i, summary, options, fuse, result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            list = [];\n            i = 0;\n\n          case 2:\n            if (!(i < questions.length)) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 5;\n            return Question(questions[i]).methods.getSummary().call();\n\n          case 5:\n            summary = _context.sent;\n            list.push({\n              'address': questions[i],\n              'title': summary[0],\n              'replyContent': summary[1]\n            });\n\n          case 7:\n            i++;\n            _context.next = 2;\n            break;\n\n          case 10:\n            options = {\n              id: \"address\",\n              threshold: 0.1,\n              shouldSort: true,\n              tokenize: true,\n              keys: [{\n                name: 'title',\n                weight: 0.7\n              }, {\n                name: 'content',\n                weight: 0.3\n              }]\n            };\n            fuse = new Fuse(list, options);\n            result = fuse.search(value);\n            return _context.abrupt(\"return\", result);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _search.apply(this, arguments);\n}\n\nexport { search };","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\search.js"],"names":["Question","Fuse","require","search","value","questions","list","i","length","methods","getSummary","call","summary","push","options","id","threshold","shouldSort","tokenize","keys","name","weight","fuse","result"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,sBAArB;;AAEA,IAAMC,IAAI,GAAGC,OAAO,CAAC,SAAD,CAApB;;SAEeC,M;;;;;;;2BAAf,iBAAsBC,KAAtB,EAA6BC,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,YAAAA,IADR,GACe,EADf;AAEaC,YAAAA,CAFb,GAEiB,CAFjB;;AAAA;AAAA,kBAEoBA,CAAC,GAAGF,SAAS,CAACG,MAFlC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAG4BR,QAAQ,CAACK,SAAS,CAACE,CAAD,CAAV,CAAR,CAAuBE,OAAvB,CAA+BC,UAA/B,GAA4CC,IAA5C,EAH5B;;AAAA;AAGYC,YAAAA,OAHZ;AAIQN,YAAAA,IAAI,CAACO,IAAL,CAAU;AAAC,yBAAWR,SAAS,CAACE,CAAD,CAArB;AAA0B,uBAASK,OAAO,CAAC,CAAD,CAA1C;AAA+C,8BAAgBA,OAAO,CAAC,CAAD;AAAtE,aAAV;;AAJR;AAE0CL,YAAAA,CAAC,EAF3C;AAAA;AAAA;;AAAA;AAMQO,YAAAA,OANR,GAMkB;AACVC,cAAAA,EAAE,EAAE,SADM;AAEVC,cAAAA,SAAS,EAAE,GAFD;AAGVC,cAAAA,UAAU,EAAE,IAHF;AAIVC,cAAAA,QAAQ,EAAE,IAJA;AAKVC,cAAAA,IAAI,EAAE,CAAC;AACHC,gBAAAA,IAAI,EAAE,OADH;AAEHC,gBAAAA,MAAM,EAAE;AAFL,eAAD,EAGH;AACCD,gBAAAA,IAAI,EAAE,SADP;AAECC,gBAAAA,MAAM,EAAE;AAFT,eAHG;AALI,aANlB;AAmBQC,YAAAA,IAnBR,GAmBe,IAAIrB,IAAJ,CAASK,IAAT,EAAeQ,OAAf,CAnBf;AAoBUS,YAAAA,MApBV,GAoBmBD,IAAI,CAACnB,MAAL,CAAYC,KAAZ,CApBnB;AAAA,6CAqBWmB,MArBX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAwBA,SAAQpB,MAAR","sourcesContent":["import Question from '../ethereum/question';\r\n\r\nconst Fuse = require(\"fuse.js\");\r\n\r\nasync function search(value, questions) {\r\n    let list = [];\r\n    for (let i = 0; i < questions.length; i++) {\r\n        var summary = await Question(questions[i]).methods.getSummary().call();\r\n        list.push({'address': questions[i], 'title': summary[0], 'replyContent': summary[1]});\r\n    }\r\n    let options = {\r\n        id: \"address\",\r\n        threshold: 0.1,\r\n        shouldSort: true,\r\n        tokenize: true,\r\n        keys: [{\r\n            name: 'title',\r\n            weight: 0.7\r\n        }, {\r\n            name: 'content',\r\n            weight: 0.3\r\n        }]\r\n    };\r\n    let fuse = new Fuse(list, options);\r\n    const result = fuse.search(value);\r\n    return result;\r\n}\r\n\r\nexport {search};\r\n"]},"metadata":{},"sourceType":"module"}