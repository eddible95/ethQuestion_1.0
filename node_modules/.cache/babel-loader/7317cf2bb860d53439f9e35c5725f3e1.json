{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n// Ensure jsPDF does not import on Server Side\nvar jsPDF = null;\n\nif (typeof window !== \"undefined\") {\n  import(\"jspdf\").then(function (module) {\n    jsPDF = module.default;\n  });\n}\n\nvar exportQuestion =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(summary, answerList) {\n    var lMargin, rMargin, pdfInMM, doc, maxYPos, yPos, questionTitle, lines, pageCount;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // Initialise the PDF document to write\n            lMargin = 15; //left margin in mm\n\n            rMargin = 15; //right margin in mm\n\n            pdfInMM = 210; // width of A4 in mm\n\n            doc = new jsPDF(\"p\", \"mm\", \"a4\");\n            maxYPos = 830;\n            yPos = 50; // Question Information\n\n            questionTitle = \"Question: \" + summary[1];\n            doc.setFontSize(18);\n            doc.text(lMargin, 45, \"Question Information\");\n            doc.setLineWidth(0.2);\n            doc.line(lMargin, 47, 195, 47);\n            lines = doc.splitTextToSize(questionTitle, pdfInMM - lMargin - rMargin);\n            doc.setFontSize(13);\n            doc.text(lMargin, yPos, lines); // // If images are uploaded\n            // if (summary[5].length != 0) {\n            //     summary[6].map((imageName, index) => {\n            //       let link = \"https://ipfs.io/ipfs/\"+summary[5][index]\n            //       doc.text(lMargin, 40+lines.length+15, \"Link(s) of Image(s) Uploaded For Question:\")\n            //       lines = doc.splitTextToSize(link, (pdfInMM-lMargin-rMargin));\n            //       doc.text(lMargin,45,lines);\n            //     })\n            //     doc.setLineWidth(0.5)\n            //     doc.line(lMargin, 40+lines.length+35, 195, 40+lines.length+35)\n            //     doc.text(lMargin, 40+lines.length+45, \"Answers:\");\n            // } else {\n            //   doc.text(lMargin, 40+lines.length+15, \"Answers:\");\n            // }\n            // let j = 75;\n            // for (let i = 0; i < answerList.length; i++) {\n            //   let answer = \"(\" + (i+1) + \") \" + answerList[i][0];\n            //   lines = doc.splitTextToSize(answer, (pdfInMM-lMargin-rMargin));\n            //   // Creates a new page for every 10 answers\n            //   if (i % 10 == 0 && i != 0) {\n            //     doc.addPage();\n            //     j = 40;\n            //   }\n            //   doc.text(lMargin, j, lines);\n            //   j = j + 10;\n            // }\n\n            pageCount = doc.internal.getNumberOfPages();\n            doc = createFooter(doc, pageCount);\n            doc = createHeader(doc, pageCount);\n            doc.save(\"Answer.pdf\");\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function exportQuestion(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar createHeader = function createHeader(document, pageCount) {\n  for (var i = 0; i < pageCount; i++) {\n    if (i == 0) {\n      document.setPage(i);\n      document.setTextColor(0);\n      document.setFontSize(24);\n      document.text(15, 30, \"Ethereum Question & Answering System\");\n      document.setLineWidth(0.5);\n      document.line(15, 33, 190, 33);\n    } else {\n      document.setTextColor(150);\n      document.setFontSize(13);\n      document.text(110, 20, \"Ethereum Question & Answering System\");\n    }\n  }\n\n  return document;\n};\n\nvar createFooter = function createFooter(document, pageCount) {\n  for (var i = 0; i < pageCount; i++) {\n    document.setPage(i);\n    document.setFontSize(13);\n    document.setTextColor(150);\n    document.text(170, 285, \"Page \" + document.internal.getCurrentPageInfo().pageNumber + \" of \" + pageCount);\n  }\n\n  return document;\n};\n\nexport { exportQuestion };","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\utils\\pdf.js"],"names":["jsPDF","window","then","module","default","exportQuestion","summary","answerList","lMargin","rMargin","pdfInMM","doc","maxYPos","yPos","questionTitle","setFontSize","text","setLineWidth","line","lines","splitTextToSize","pageCount","internal","getNumberOfPages","createFooter","createHeader","save","document","i","setPage","setTextColor","getCurrentPageInfo","pageNumber"],"mappings":"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","sourcesContent":["// Ensure jsPDF does not import on Server Side\r\nlet jsPDF = null;\r\nif (typeof window !== \"undefined\") {\r\n  import(\"jspdf\").then(module => {\r\n    jsPDF = module.default;\r\n  });\r\n}\r\n\r\nconst exportQuestion = async(summary, answerList) => {\r\n  // Initialise the PDF document to write\r\n  let lMargin=15; //left margin in mm\r\n  let rMargin=15; //right margin in mm\r\n  let pdfInMM=210;  // width of A4 in mm\r\n  let doc = new jsPDF(\"p\",\"mm\",\"a4\");\r\n  let maxYPos = 830;\r\n  let yPos = 50\r\n\r\n  // Question Information\r\n  let questionTitle = \"Question: \" + summary[1];\r\n  doc.setFontSize(18)\r\n  doc.text(lMargin, 45, \"Question Information\");\r\n  doc.setLineWidth(0.2)\r\n  doc.line(lMargin, 47, 195, 47)\r\n\r\n  let lines = doc.splitTextToSize(questionTitle, (pdfInMM-lMargin-rMargin));\r\n  doc.setFontSize(13)\r\n  doc.text(lMargin, yPos, lines);\r\n\r\n  // // If images are uploaded\r\n  // if (summary[5].length != 0) {\r\n  //     summary[6].map((imageName, index) => {\r\n  //       let link = \"https://ipfs.io/ipfs/\"+summary[5][index]\r\n  //       doc.text(lMargin, 40+lines.length+15, \"Link(s) of Image(s) Uploaded For Question:\")\r\n  //       lines = doc.splitTextToSize(link, (pdfInMM-lMargin-rMargin));\r\n  //       doc.text(lMargin,45,lines);\r\n  //     })\r\n  //     doc.setLineWidth(0.5)\r\n  //     doc.line(lMargin, 40+lines.length+35, 195, 40+lines.length+35)\r\n  //     doc.text(lMargin, 40+lines.length+45, \"Answers:\");\r\n  // } else {\r\n  //   doc.text(lMargin, 40+lines.length+15, \"Answers:\");\r\n  // }\r\n  // let j = 75;\r\n  // for (let i = 0; i < answerList.length; i++) {\r\n  //   let answer = \"(\" + (i+1) + \") \" + answerList[i][0];\r\n  //   lines = doc.splitTextToSize(answer, (pdfInMM-lMargin-rMargin));\r\n  //   // Creates a new page for every 10 answers\r\n  //   if (i % 10 == 0 && i != 0) {\r\n  //     doc.addPage();\r\n  //     j = 40;\r\n  //   }\r\n  //   doc.text(lMargin, j, lines);\r\n  //   j = j + 10;\r\n  // }\r\n  let pageCount = doc.internal.getNumberOfPages();\r\n  doc = createFooter(doc, pageCount);\r\n  doc = createHeader(doc, pageCount);\r\n  doc.save(\"Answer.pdf\");\r\n}\r\n\r\nconst createHeader = (document, pageCount) => {\r\n  for(let i = 0; i < pageCount; i++) {\r\n    if (i == 0) {\r\n      document.setPage(i)\r\n      document.setTextColor(0)\r\n      document.setFontSize(24)\r\n      document.text(15, 30, \"Ethereum Question & Answering System\");\r\n      document.setLineWidth(0.5)\r\n      document.line(15, 33, 190, 33)\r\n    } else {\r\n      document.setTextColor(150)\r\n      document.setFontSize(13)\r\n      document.text(110, 20, \"Ethereum Question & Answering System\");\r\n    }\r\n  }\r\n  return document\r\n}\r\n\r\nconst createFooter = (document, pageCount) => {\r\n  for(let i = 0; i < pageCount; i++) {\r\n    document.setPage(i)\r\n    document.setFontSize(13)\r\n    document.setTextColor(150)\r\n    document.text(170, 285, \"Page \" + document.internal.getCurrentPageInfo().pageNumber + \" of \" + pageCount)\r\n  }\r\n  return document\r\n}\r\n\r\nexport { exportQuestion }\r\n"]},"metadata":{},"sourceType":"module"}