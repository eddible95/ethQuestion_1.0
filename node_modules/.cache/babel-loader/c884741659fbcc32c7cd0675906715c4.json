{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { Table, Popup, Button, Container, Form, Header, Comment, Segment, Message, Divider, Icon, Label, Modal, Loader, Image } from 'semantic-ui-react';\nimport { Link, Router } from '../routes';\nimport moment from 'moment';\nimport web3 from '../ethereum/web3';\nimport Question from '../ethereum/question';\nimport credentials from '../ethereum/credentials';\nimport Profile from '../ethereum/profile';\nimport factory from '../ethereum/factory';\nimport Layout from '../components/Layout';\nimport Countdown from 'react-countdown-now';\nimport { Context, Text } from 'react-mathjax2';\nimport Footer from '../components/Footer';\n\nvar QuestionRow =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(QuestionRow, _Component);\n\n  function QuestionRow() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, QuestionRow);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(QuestionRow)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      profileOwnerAddress: '',\n      questionAddress: '',\n      questionState: '',\n      votingTime: '',\n      answer: '',\n      errorMessage: '',\n      loading: false,\n      voteError: false,\n      ownerError: false,\n      voteMultipleError: false,\n      stateChange: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"votePhase\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var accounts, question, _questionState, _votingTime;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n\n              if (!(_this.state.questionState == 0)) {\n                _context.next = 23;\n                break;\n              }\n\n              _context.next = 4;\n              return web3.eth.getAccounts();\n\n            case 4:\n              accounts = _context.sent;\n              question = Question(_this.state.questionAddress); // Ensure that only Creator of Question can access this function\n\n              _context.t0 = accounts[0];\n              _context.next = 9;\n              return question.methods.getCreator().call();\n\n            case 9:\n              _context.t1 = _context.sent;\n\n              if (!(_context.t0 == _context.t1)) {\n                _context.next = 22;\n                break;\n              }\n\n              _this.setState({\n                stateChange: true\n              });\n\n              _context.next = 14;\n              return question.methods.getQuestionState().send({\n                from: accounts[0]\n              });\n\n            case 14:\n              _questionState = _context.sent;\n              _context.next = 17;\n              return question.methods.getTime().call();\n\n            case 17:\n              _votingTime = _context.sent;\n\n              _this.setState({\n                questionState: _questionState,\n                votingTime: _votingTime[3]\n              });\n\n              Router.pushRoute(\"/questions/\".concat(_this.state.questionAddress));\n              _context.next = 23;\n              break;\n\n            case 22:\n              _this.setState({\n                ownerError: true\n              });\n\n            case 23:\n              _context.next = 28;\n              break;\n\n            case 25:\n              _context.prev = 25;\n              _context.t2 = _context[\"catch\"](0);\n\n              _this.setState({\n                errorMessage: _context.t2.message\n              });\n\n            case 28:\n              _this.setState({\n                stateChange: false\n              });\n\n            case 29:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 25]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"rewardPhase\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var accounts, question, _questionState;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n\n              if (!(_this.state.questionState == 1)) {\n                _context2.next = 22;\n                break;\n              }\n\n              _context2.next = 4;\n              return web3.eth.getAccounts();\n\n            case 4:\n              accounts = _context2.sent;\n              question = Question(_this.state.questionAddress); // Ensure that only Creator of Question can access this function\n\n              _context2.t0 = accounts[0];\n              _context2.next = 9;\n              return question.methods.getCreator().call();\n\n            case 9:\n              _context2.t1 = _context2.sent;\n\n              if (!(_context2.t0 == _context2.t1)) {\n                _context2.next = 21;\n                break;\n              }\n\n              _this.setState({\n                stateChange: true\n              });\n\n              _context2.next = 14;\n              return question.methods.getQuestionState().send({\n                from: accounts[0]\n              });\n\n            case 14:\n              _questionState = _context2.sent;\n              _context2.next = 17;\n              return factory.methods.shareTokenAt(_this.state.questionAddress).send({\n                from: accounts[0]\n              });\n\n            case 17:\n              _this.setState({\n                questionState: _questionState\n              });\n\n              Router.pushRoute(\"/questions/\".concat(_this.state.questionAddress));\n              _context2.next = 22;\n              break;\n\n            case 21:\n              _this.setState({\n                ownerError: true\n              });\n\n            case 22:\n              _context2.next = 27;\n              break;\n\n            case 24:\n              _context2.prev = 24;\n              _context2.t2 = _context2[\"catch\"](0);\n\n              _this.setState({\n                errorMessage: _context2.t2.message\n              });\n\n            case 27:\n              _this.setState({\n                stateChange: false\n              });\n\n            case 28:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 24]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmitAnswer\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var accounts, question;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              });\n\n              _context3.prev = 1;\n              _context3.next = 4;\n              return web3.eth.getAccounts();\n\n            case 4:\n              accounts = _context3.sent;\n              question = Question(_this.state.questionAddress); // Ensure that creator of question cannot provide answers\n\n              _context3.t0 = accounts[0];\n              _context3.next = 9;\n              return question.methods.getCreator().call();\n\n            case 9:\n              _context3.t1 = _context3.sent;\n\n              if (!(_context3.t0 != _context3.t1)) {\n                _context3.next = 16;\n                break;\n              }\n\n              _context3.next = 13;\n              return factory.methods.createAnswer(_this.state.questionAddress, _this.state.answer).send({\n                from: accounts[0]\n              });\n\n            case 13:\n              Router.pushRoute(\"/questions/\".concat(_this.state.questionAddress));\n              _context3.next = 17;\n              break;\n\n            case 16:\n              _this.setState({\n                loading: false,\n                errorMessage: \"You cannot provide answer for your own question\"\n              });\n\n            case 17:\n              _context3.next = 22;\n              break;\n\n            case 19:\n              _context3.prev = 19;\n              _context3.t2 = _context3[\"catch\"](1);\n\n              _this.setState({\n                errorMessage: _context3.t2.message\n              });\n\n            case 22:\n              _this.setState({\n                loading: false,\n                answer: ''\n              });\n\n            case 23:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[1, 19]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"upVote\",\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(index) {\n        var accounts, question, profile;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context4.sent;\n                _context4.next = 5;\n                return Question(_this.state.questionAddress);\n\n              case 5:\n                question = _context4.sent;\n                _context4.next = 8;\n                return factory.methods.getProfile(accounts[0]).call();\n\n              case 8:\n                profile = _context4.sent;\n                _context4.t0 = accounts[0];\n                _context4.next = 12;\n                return question.methods.getAnswerer(index).call();\n\n              case 12:\n                _context4.t1 = _context4.sent;\n\n                if (!(_context4.t0 != _context4.t1)) {\n                  _context4.next = 25;\n                  break;\n                }\n\n                _context4.next = 16;\n                return question.methods.checkVoter(index, profile).call();\n\n              case 16:\n                if (_context4.sent) {\n                  _context4.next = 22;\n                  break;\n                }\n\n                _context4.next = 19;\n                return factory.methods.upVote(_this.state.questionAddress, index).send({\n                  from: accounts[0]\n                });\n\n              case 19:\n                Router.pushRoute(\"/questions/\".concat(_this.state.questionAddress));\n                _context4.next = 23;\n                break;\n\n              case 22:\n                _this.setState({\n                  voteMultipleError: true\n                });\n\n              case 23:\n                _context4.next = 26;\n                break;\n\n              case 25:\n                _this.setState({\n                  voteError: true\n                });\n\n              case 26:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"downVote\",\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(index) {\n        var accounts, question, profile;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context5.sent;\n                _context5.next = 5;\n                return Question(_this.state.questionAddress);\n\n              case 5:\n                question = _context5.sent;\n                _context5.next = 8;\n                return factory.methods.getProfile(accounts[0]).call();\n\n              case 8:\n                profile = _context5.sent;\n                _context5.t0 = accounts[0];\n                _context5.next = 12;\n                return question.methods.getAnswerer(index).call();\n\n              case 12:\n                _context5.t1 = _context5.sent;\n\n                if (!(_context5.t0 != _context5.t1)) {\n                  _context5.next = 25;\n                  break;\n                }\n\n                _context5.next = 16;\n                return question.methods.checkVoter(index, profile).call();\n\n              case 16:\n                if (_context5.sent) {\n                  _context5.next = 22;\n                  break;\n                }\n\n                _context5.next = 19;\n                return factory.methods.downVote(_this.state.questionAddress, index).send({\n                  from: accounts[0]\n                });\n\n              case 19:\n                Router.pushRoute(\"/questions/\".concat(_this.state.questionAddress));\n                _context5.next = 23;\n                break;\n\n              case 22:\n                _this.setState({\n                  voteMultipleError: true\n                });\n\n              case 23:\n                _context5.next = 26;\n                break;\n\n              case 25:\n                _this.setState({\n                  voteError: true\n                });\n\n              case 26:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x2) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n\n    return _this;\n  }\n\n  _createClass(QuestionRow, [{\n    key: \"componentWillMount\",\n    // Redirect E-Wallet that are not Logged In to the Login Page\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6() {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context6.sent;\n                _context6.next = 5;\n                return credentials.methods.getBinding(accounts[0]).call();\n\n              case 5:\n                _context6.t0 = _context6.sent;\n\n                if (!(_context6.t0 === \"\")) {\n                  _context6.next = 8;\n                  break;\n                }\n\n                Router.pushRoute(\"/\"); // Automatic redirect the user to Login or Sign Up\n\n              case 8:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                this.setState({\n                  profileOwnerAddress: this.props.profileOwnerAddress,\n                  questionAddress: this.props.questionAddress,\n                  questionState: this.props.summary[4],\n                  votingTime: this.props.time[3]\n                });\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"renderQuestion\",\n    value: function renderQuestion() {\n      var summary = this.props.summary;\n      var time = this.props.time;\n      var currentTime = new Date().getTime();\n      var maxDuration = (_parseFloat(summary[3]) / 60 / 60).toFixed(2).toString().toString();\n      var publishTime = moment.unix(time[0]).format('dddd, Do MMMM YYYY, h:mm:ss a');\n      var votingTime = moment.unix(this.state.votingTime).format('dddd, Do MMMM YYYY, h:mm:ss a');\n      var publishTimeMs = moment.unix(time[0]).valueOf();\n      var maxDurationMs = moment.unix(time[2]).valueOf();\n      var votingTimeMs = moment.unix(this.state.votingTime).valueOf();\n      var remainingTime = 0;\n\n      if (this.state.questionState == 0) {\n        remainingTime = publishTimeMs + maxDurationMs - currentTime;\n\n        if (remainingTime < 0) {\n          remainingTime = 0;\n        }\n      } else {\n        remainingTime = votingTimeMs + maxDurationMs - currentTime;\n\n        if (remainingTime < 0) {\n          remainingTime = 0;\n        }\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(Table, {\n        definition: true\n      }, React.createElement(Table.Body, null, React.createElement(Table.Row, null, React.createElement(Table.Cell, {\n        width: 2\n      }, \"Question Title\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px',\n          lineHeight: '1.5'\n        }\n      }, summary[0])), React.createElement(Table.Row, null, React.createElement(Table.Cell, {\n        width: 2\n      }, \"Description\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px',\n          lineHeight: '1.5'\n        }\n      }, React.createElement(Context, {\n        input: \"tex\",\n        onLoad: function onLoad() {\n          return console.log(\"Loaded MathJax script!\");\n        },\n        onError: function onError(MathJax, error) {\n          console.warn(error);\n          console.log(\"Encountered a MathJax error, re-attempting a typeset!\");\n          MathJax.Hub.Queue(MathJax.Hub.Typeset());\n        },\n        options: {\n          asciimath2jax: {\n            useMathMLspacing: true,\n            delimiters: [[\"$$\", \"$$\"]],\n            preview: \"none\"\n          }\n        }\n      }, React.createElement(Text, {\n        text: summary[1]\n      })))), React.createElement(Table.Row, null, React.createElement(Table.Cell, null, \"Reward (ETH)\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px'\n        }\n      }, summary[2])), React.createElement(Table.Row, null, React.createElement(Table.Cell, null, \"Publish Time\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px'\n        }\n      }, publishTime)), React.createElement(Table.Row, null, React.createElement(Table.Cell, null, \"Answering Duration (hours)\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px'\n        }\n      }, React.createElement(\"span\", {\n        style: {\n          verticalAlign: 'middle',\n          lineHeight: '33px'\n        }\n      }, maxDuration), this.state.questionState == 0 && remainingTime > 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"violet\"\n        }),\n        content: React.createElement(\"span\", null, React.createElement(\"span\", null, \"Remaining time - \"), React.createElement(Countdown, {\n          date: _Date$now() + remainingTime\n        })),\n        position: \"bottom right\",\n        inverted: true\n      }) : this.state.questionState == 0 && remainingTime == 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"red\",\n          onClick: this.votePhase\n        }),\n        content: \"Proceed to Voting\",\n        position: \"bottom right\",\n        inverted: true\n      }) : React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"red\",\n          disabled: true\n        }),\n        position: \"bottom right\",\n        inverted: true\n      }))), React.createElement(Table.Row, null, React.createElement(Table.Cell, null, \"Voting Duration (hours)\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px'\n        }\n      }, React.createElement(\"span\", {\n        style: {\n          verticalAlign: 'middle',\n          lineHeight: '33px'\n        }\n      }, maxDuration), this.state.questionState == 1 && remainingTime > 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"violet\"\n        }),\n        content: React.createElement(\"span\", null, React.createElement(\"span\", null, \"Remaining time - \"), React.createElement(Countdown, {\n          date: _Date$now() + remainingTime\n        })),\n        position: \"bottom right\",\n        inverted: true\n      }) : this.state.questionState == 1 && remainingTime == 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, null, \"Show flowing popup\"),\n        flowing: true,\n        hoverable: true\n      }, React.createElement(Grid, {\n        centered: true,\n        divided: true,\n        columns: 3\n      }, React.createElement(Grid.Column, {\n        textAlign: \"center\"\n      }, React.createElement(Header, {\n        as: \"h4\"\n      }, \"Basic Plan\"), React.createElement(\"p\", null, React.createElement(\"b\", null, \"2\"), \" projects, $10 a month\"), React.createElement(Button, null, \"Choose\")), React.createElement(Grid.Column, {\n        textAlign: \"center\"\n      }, React.createElement(Header, {\n        as: \"h4\"\n      }, \"Business Plan\"), React.createElement(\"p\", null, React.createElement(\"b\", null, \"5\"), \" projects, $20 a month\"), React.createElement(Button, null, \"Choose\")), React.createElement(Grid.Column, {\n        textAlign: \"center\"\n      }, React.createElement(Header, {\n        as: \"h4\"\n      }, \"Premium Plan\"), React.createElement(\"p\", null, React.createElement(\"b\", null, \"8\"), \" projects, $25 a month\"), React.createElement(Button, null, \"Choose\")))) : this.state.questionState == 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"red\",\n          disabled: true\n        }),\n        position: \"bottom right\",\n        inverted: true\n      }) : React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"red\",\n          disabled: true\n        }),\n        position: \"bottom right\",\n        inverted: true\n      }))))));\n    }\n  }, {\n    key: \"renderAnswers\",\n    value: function renderAnswers() {\n      var _this2 = this;\n\n      var answers = this.props.answerList; // Answering Phase no answers are shown\n\n      if (this.state.questionState != 0) {\n        return answers.map(function (answer, index) {\n          var answeredTime = moment.unix(answer[5]).format('Do MMMM YYYY, h:mm a');\n          var id = index % 70;\n          return React.createElement(Comment, {\n            key: index\n          }, React.createElement(Comment.Avatar, {\n            src: _this2.props.avatarListIcon[id],\n            style: {\n              backgroundColor: '#8D8741'\n            }\n          }), React.createElement(Comment.Content, {\n            style: {\n              width: \"1000px\"\n            }\n          }, React.createElement(Comment.Author, {\n            as: \"a\"\n          }, answer[1]), React.createElement(Comment.Metadata, null, React.createElement(\"div\", null, answeredTime)), React.createElement(\"br\", null), _this2.state.questionState == 2 ? React.createElement(Comment.Metadata, null, React.createElement(\"div\", null, React.createElement(Icon, {\n            name: \"thumbs up\"\n          }), answer[3]), React.createElement(\"div\", null, React.createElement(Icon, {\n            name: \"thumbs down\"\n          }), answer[4])) : React.createElement(Comment.Metadata, null, React.createElement(\"div\", null, React.createElement(Icon, {\n            name: \"thumbs up\"\n          }), \"0\"), React.createElement(\"div\", null, React.createElement(Icon, {\n            name: \"thumbs down\"\n          }), \"0\")), React.createElement(Comment.Text, null, React.createElement(Context, {\n            input: \"tex\",\n            onLoad: function onLoad() {\n              return console.log(\"Loaded MathJax script!\");\n            },\n            onError: function onError(MathJax, error) {\n              console.warn(error);\n              console.log(\"Encountered a MathJax error, re-attempting a typeset!\");\n              MathJax.Hub.Queue(MathJax.Hub.Typeset());\n            },\n            options: {\n              asciimath2jax: {\n                useMathMLspacing: true,\n                delimiters: [[\"$$\", \"$$\"]],\n                preview: \"none\"\n              }\n            }\n          }, React.createElement(Text, {\n            text: answer[0]\n          }))), React.createElement(Comment.Actions, null, React.createElement(Comment.Action, null, React.createElement(Button, {\n            style: {\n              float: 'right',\n              verticalAlign: 'middle'\n            },\n            icon: \"thumbs down\",\n            onClick: function onClick() {\n              return _this2.downVote(index);\n            },\n            size: \"tiny\"\n          }), React.createElement(Button, {\n            style: {\n              float: 'right',\n              verticalAlign: 'middle'\n            },\n            icon: \"thumbs up\",\n            onClick: function onClick() {\n              return _this2.upVote(index);\n            },\n            size: \"tiny\"\n          })))));\n        });\n      }\n    }\n  }, {\n    key: \"renderFiles\",\n    value: function renderFiles() {\n      var fileHashes = this.props.summary[5];\n      var fileNames = this.props.summary[6];\n\n      if (fileHashes.length == 0) {\n        return React.createElement(Segment, {\n          placeholder: true\n        }, React.createElement(Header, {\n          icon: true\n        }, React.createElement(Icon, {\n          name: \"images outline\"\n        }), \"No files are uploaded for this question.\"));\n      } else {\n        return React.createElement(Segment, {\n          placeholder: true\n        }, React.createElement(\"center\", null, React.createElement(\"p\", null, \"Image(s) Uploaded\"), fileNames.map(function (fileName, index) {\n          return React.createElement(\"div\", {\n            style: {\n              marginBottom: '10px'\n            }\n          }, React.createElement(Image, {\n            src: \"https://ipfs.io/ipfs/\" + fileHashes[index]\n          }), React.createElement(Divider, {\n            hidden: true\n          }), React.createElement(\"p\", null, \" To download: \"), React.createElement(Label, {\n            as: \"a\",\n            size: \"big\",\n            href: \"https://ipfs.io/ipfs/\" + fileHashes[index]\n          }, React.createElement(Icon, {\n            name: \"download\"\n          }), fileName));\n        })));\n      }\n    }\n  }, {\n    key: \"renderAnswersForm\",\n    value: function renderAnswersForm() {\n      var _this3 = this;\n\n      return React.createElement(Form, {\n        onSubmit: this.onSubmitAnswer,\n        error: !!this.state.errorMessage\n      }, React.createElement(Form.TextArea, {\n        placeholder: \"Enter Answers\",\n        value: this.state.answer,\n        onChange: function onChange(event) {\n          return _this3.setState({\n            answer: event.target.value\n          });\n        }\n      }), React.createElement(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.errorMessage\n      }), this.state.questionState == 1 ? React.createElement(Button, {\n        content: \"Submit Answers\",\n        disabled: true,\n        labelPosition: \"left\",\n        icon: \"edit\",\n        primary: true\n      }) : React.createElement(Button, {\n        content: \"Submit Answers\",\n        loading: this.state.loading,\n        labelPosition: \"left\",\n        icon: \"edit\",\n        primary: true\n      }), React.createElement(Modal, {\n        open: this.state.loading,\n        basic: true,\n        size: \"small\"\n      }, React.createElement(Header, {\n        content: \"Posting New Answers\"\n      }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"Please Confirm the MetaMask Transaction Request to submit your Answers to the Block-Chain Network. Upon successful submission, you will be redirected back to the Question Page. This process might take awhile.\"), React.createElement(Loader, {\n        active: true,\n        inline: \"centered\"\n      }, \"Loading\"))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(Layout, null, React.createElement(Container, null, this.renderQuestion(), React.createElement(Divider, null), this.renderFiles(), React.createElement(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"Submit Your Answers Here\"), React.createElement(\"p\", null, React.createElement(\"b\", null, \"Note:\"), \" To include math equations, delimit the latex format with $$.\"), React.createElement(\"a\", {\n        style: {\n          display: \"table-cell\"\n        },\n        href: \"https://www.codecogs.com/latex/eqneditor.php\",\n        target: \"_blank\"\n      }, \"Link to Supported Latex Editor\"), this.renderAnswersForm(), React.createElement(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"Answer(s) Submitted: \", this.props.answerList.length), React.createElement(Divider, null), React.createElement(Comment.Group, {\n        size: \"large\"\n      }, this.renderAnswers()), React.createElement(Modal, {\n        open: this.state.voteError,\n        basic: true,\n        size: \"small\"\n      }, React.createElement(Header, {\n        icon: \"ethereum\",\n        content: \"Cannot Vote Own Answers\"\n      }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"You have selected to vote the answer you have provided. Please only vote answers provided by others.\")), React.createElement(Modal.Actions, null, React.createElement(Button, {\n        color: \"green\",\n        inverted: true,\n        attached: \"bottom\",\n        onClick: function onClick() {\n          Router.pushRoute(\"/questions/\".concat(_this4.state.questionAddress));\n\n          _this4.setState({\n            voteError: false\n          });\n        }\n      }, \"Go Back\"))), React.createElement(Modal, {\n        open: this.state.ownerError,\n        basic: true,\n        size: \"small\"\n      }, React.createElement(Header, {\n        icon: \"ethereum\",\n        content: \"Only Available For Owner Of Question\"\n      }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"You cannot change the state of the question as you are not the owner.\")), React.createElement(Modal.Actions, null, React.createElement(Button, {\n        color: \"green\",\n        inverted: true,\n        attached: \"bottom\",\n        onClick: function onClick() {\n          Router.pushRoute(\"/questions/\".concat(_this4.state.questionAddress));\n\n          _this4.setState({\n            ownerError: false\n          });\n        }\n      }, \"Go Back\"))), React.createElement(Modal, {\n        open: this.state.voteMultipleError,\n        basic: true,\n        size: \"small\"\n      }, React.createElement(Header, {\n        icon: \"ethereum\",\n        content: \"Answer Already Voted\"\n      }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"You cannot vote for the same answer more than once. Please vote for another answer.\")), React.createElement(Modal.Actions, null, React.createElement(Button, {\n        color: \"green\",\n        inverted: true,\n        attached: \"bottom\",\n        onClick: function onClick() {\n          Router.pushRoute(\"/questions/\".concat(_this4.state.questionAddress));\n\n          _this4.setState({\n            voteMultipleError: false\n          });\n        }\n      }, \"Go Back\"))), React.createElement(Modal, {\n        open: this.state.stateChange,\n        basic: true,\n        size: \"small\"\n      }, React.createElement(Header, {\n        content: \"Proceeding To Voting/Rewarding Phase\"\n      }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"Please Confirm the MetaMask Transaction Request to proceed towards Voting/Rewarding Phase.\"), React.createElement(Loader, {\n        active: true,\n        inline: \"centered\"\n      }, \"State Changing\")))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(props) {\n        var accounts, questionAddress, question, summary, time, profileOwnerAddress, answerList, iconList, avatarListIcon;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context8.sent;\n                _context8.next = 5;\n                return credentials.methods.getBinding(accounts[0]).call();\n\n              case 5:\n                _context8.t0 = _context8.sent;\n\n                if (!(_context8.t0 === \"\")) {\n                  _context8.next = 8;\n                  break;\n                }\n\n                Router.pushRoute(\"/\"); // Automatic redirect the user to Login or Sign Up\n\n              case 8:\n                questionAddress = props.query.value;\n                question = Question(questionAddress);\n                _context8.next = 12;\n                return question.methods.getSummary().call();\n\n              case 12:\n                summary = _context8.sent;\n                _context8.next = 15;\n                return question.methods.getTime().call();\n\n              case 15:\n                time = _context8.sent;\n                _context8.next = 18;\n                return factory.methods.getProfile(summary[7]).call();\n\n              case 18:\n                profileOwnerAddress = _context8.sent;\n                _context8.next = 21;\n                return question.methods.getAnswerList().call();\n\n              case 21:\n                answerList = _context8.sent;\n                iconList = ['alligator', 'anteater', 'armadillo', 'auroch', 'axolotl', 'badger', 'bat', 'beaver', 'buffalo', 'camel', 'capybara', 'chameleon', 'cheetah', 'chinchilla', 'chipmunk', 'chupacabra', 'cormorant', 'coyote', 'crow', 'dingo', 'dinosaur', 'dolphin', 'duck', 'elephant', 'ferret', 'fox', 'frog', 'giraffe', 'gopher', 'grizzly', 'hedgehog', 'hippo', 'hyena', 'ibex', 'ifrit', 'iguana', 'jackal', 'kangaroo', 'koala', 'kraken', 'lemur', 'leopard', 'liger', 'llama', 'manatee', 'mink', 'monkey', 'moose', 'narwhal', 'orangutan', 'otter', 'panda', 'penguin', 'platypus', 'pumpkin', 'python', 'quagga', 'rabbit', 'raccoon', 'rhino', 'sheep', 'shrew', 'skunk', 'squirrel', 'tiger', 'turtle', 'walrus', 'wolf', 'wolverine', 'wombat'];\n                avatarListIcon = iconList.map(function (item) {\n                  return 'https://ssl.gstatic.com/docs/common/profile/' + item + '_lg.png';\n                });\n                return _context8.abrupt(\"return\", {\n                  summary: summary,\n                  time: time,\n                  questionAddress: questionAddress,\n                  answerList: answerList,\n                  avatarListIcon: avatarListIcon,\n                  profileOwnerAddress: profileOwnerAddress\n                });\n\n              case 25:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function getInitialProps(_x3) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return QuestionRow;\n}(Component);\n\nexport default QuestionRow;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\showQuestion.js"],"names":["React","Component","Table","Popup","Button","Container","Form","Header","Comment","Segment","Message","Divider","Icon","Label","Modal","Loader","Image","Link","Router","moment","web3","Question","credentials","Profile","factory","Layout","Countdown","Context","Text","Footer","QuestionRow","profileOwnerAddress","questionAddress","questionState","votingTime","answer","errorMessage","loading","voteError","ownerError","voteMultipleError","stateChange","state","eth","getAccounts","accounts","question","methods","getCreator","call","setState","getQuestionState","send","from","_questionState","getTime","_votingTime","pushRoute","message","shareTokenAt","createAnswer","index","getProfile","profile","getAnswerer","checkVoter","upVote","downVote","getBinding","props","summary","time","currentTime","Date","maxDuration","toFixed","toString","publishTime","unix","format","publishTimeMs","valueOf","maxDurationMs","votingTimeMs","remainingTime","fontSize","lineHeight","console","log","MathJax","error","warn","Hub","Queue","Typeset","asciimath2jax","useMathMLspacing","delimiters","preview","verticalAlign","float","votePhase","answers","answerList","map","answeredTime","id","avatarListIcon","backgroundColor","width","fileHashes","fileNames","length","fileName","marginBottom","onSubmitAnswer","event","target","value","renderQuestion","renderFiles","display","renderAnswersForm","renderAnswers","query","getSummary","getAnswerList","iconList","item"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Table, Popup, Button, Container, Form, Header, Comment,\r\n  Segment, Message, Divider, Icon, Label, Modal, Loader, Image } from 'semantic-ui-react';\r\nimport { Link, Router } from '../routes';\r\nimport moment from 'moment';\r\nimport web3 from '../ethereum/web3';\r\nimport Question from '../ethereum/question';\r\nimport credentials from '../ethereum/credentials';\r\nimport Profile from '../ethereum/profile'\r\nimport factory from '../ethereum/factory';\r\nimport Layout from '../components/Layout';\r\nimport Countdown from 'react-countdown-now';\r\nimport { Context, Text } from 'react-mathjax2';\r\nimport Footer from '../components/Footer';\r\n\r\nclass QuestionRow extends Component {\r\n    state = {\r\n      profileOwnerAddress: '',\r\n      questionAddress: '',\r\n      questionState: '',\r\n      votingTime:'',\r\n      answer:'',\r\n      errorMessage: '',\r\n      loading: false,\r\n      voteError: false,\r\n      ownerError: false,\r\n      voteMultipleError: false,\r\n      stateChange: false\r\n    }\r\n\r\n    static async getInitialProps(props) {\r\n      const accounts = await web3.eth.getAccounts();\r\n      if (await credentials.methods.getBinding(accounts[0]).call() === \"\"){\r\n          Router.pushRoute(`/`); // Automatic redirect the user to Login or Sign Up\r\n      }\r\n      const questionAddress = props.query.value;\r\n      const question = Question(questionAddress);\r\n      const summary = await question.methods.getSummary().call();\r\n      const time = await question.methods.getTime().call();\r\n      const profileOwnerAddress = await factory.methods.getProfile(summary[7]).call();\r\n      const answerList = await question.methods.getAnswerList().call();\r\n      const iconList = ['alligator', 'anteater', 'armadillo', 'auroch', 'axolotl',\r\n          'badger', 'bat', 'beaver', 'buffalo', 'camel', 'capybara',\r\n          'chameleon', 'cheetah', 'chinchilla', 'chipmunk', 'chupacabra',\r\n          'cormorant', 'coyote', 'crow', 'dingo', 'dinosaur', 'dolphin',\r\n          'duck', 'elephant', 'ferret', 'fox', 'frog', 'giraffe', 'gopher',\r\n          'grizzly', 'hedgehog', 'hippo', 'hyena', 'ibex', 'ifrit', 'iguana',\r\n          'jackal', 'kangaroo', 'koala', 'kraken', 'lemur', 'leopard',\r\n          'liger', 'llama', 'manatee', 'mink', 'monkey', 'moose', 'narwhal',\r\n          'orangutan', 'otter', 'panda', 'penguin', 'platypus',\r\n          'pumpkin', 'python', 'quagga', 'rabbit', 'raccoon', 'rhino',\r\n          'sheep', 'shrew', 'skunk', 'squirrel', 'tiger', 'turtle', 'walrus',\r\n          'wolf', 'wolverine', 'wombat'];\r\n      const avatarListIcon = iconList.map((item)=>{\r\n          return 'https://ssl.gstatic.com/docs/common/profile/' + item + '_lg.png';\r\n      });\r\n      return { summary, time, questionAddress, answerList, avatarListIcon, profileOwnerAddress };\r\n    };\r\n\r\n    // Redirect E-Wallet that are not Logged In to the Login Page\r\n    async componentWillMount() {\r\n      // Retrieve the Ethereum Account from MetaMask\r\n      const accounts = await web3.eth.getAccounts();\r\n      if (await credentials.methods.getBinding(accounts[0]).call() === \"\"){\r\n          Router.pushRoute(`/`); // Automatic redirect the user to Login or Sign Up\r\n      }\r\n    }\r\n\r\n    async componentDidMount() {\r\n      this.setState({\r\n        profileOwnerAddress: this.props.profileOwnerAddress,\r\n        questionAddress: this.props.questionAddress,\r\n        questionState: this.props.summary[4],\r\n        votingTime: this.props.time[3]\r\n      });\r\n    }\r\n\r\n    votePhase = async () => {\r\n      try {\r\n        if(this.state.questionState == 0) {\r\n          const accounts = await web3.eth.getAccounts();\r\n          const question = Question(this.state.questionAddress);\r\n          // Ensure that only Creator of Question can access this function\r\n          if (accounts[0] == await question.methods.getCreator().call()){\r\n            this.setState({ stateChange: true});\r\n            let _questionState = await question.methods.getQuestionState().send(\r\n              { from: accounts[0]}\r\n            );\r\n            // Set voting time inside smart contract as +1hr of now end time\r\n            let _votingTime = await question.methods.getTime().call();\r\n            this.setState({questionState: _questionState, votingTime: _votingTime[3] });\r\n            Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n          } else {\r\n            this.setState({ ownerError: true});\r\n          }\r\n        }\r\n      } catch (err) {\r\n          this.setState({ errorMessage: err.message });\r\n      }\r\n      this.setState({ stateChange: false});\r\n    }\r\n\r\n    rewardPhase = async () => {\r\n      try {\r\n        if(this.state.questionState == 1) {\r\n          const accounts = await web3.eth.getAccounts();\r\n          const question = Question(this.state.questionAddress);\r\n          // Ensure that only Creator of Question can access this function\r\n          if (accounts[0] == await question.methods.getCreator().call()){\r\n            this.setState({ stateChange: true});\r\n            let _questionState = await question.methods.getQuestionState().send(\r\n              { from: accounts[0]}\r\n            );\r\n            await factory.methods\r\n            .shareTokenAt(this.state.questionAddress)\r\n            .send({\r\n                from: accounts[0]\r\n            });\r\n            this.setState({questionState: _questionState });\r\n            Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n          } else {\r\n            this.setState({ ownerError: true});\r\n          }\r\n        }\r\n      } catch (err) {\r\n        this.setState({ errorMessage: err.message });\r\n      }\r\n      this.setState({ stateChange: false});\r\n    };\r\n\r\n    onSubmitAnswer = async () => {\r\n      this.setState({ loading: true, errorMessage: '' });\r\n      try {\r\n          const accounts = await web3.eth.getAccounts();\r\n          const question = Question(this.state.questionAddress);\r\n          // Ensure that creator of question cannot provide answers\r\n          if (accounts[0] != await question.methods.getCreator().call()){\r\n            // Create new answer\r\n            await factory.methods\r\n            .createAnswer(this.state.questionAddress, this.state.answer)\r\n            .send({\r\n                from: accounts[0]\r\n            });\r\n            Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n          } else {\r\n            this.setState({ loading: false, errorMessage: \"You cannot provide answer for your own question\"})\r\n          }\r\n      } catch (err) {\r\n          this.setState({ errorMessage: err.message });\r\n      }\r\n      this.setState({ loading: false, answer:'' });\r\n    };\r\n\r\n    upVote = async(index) => {\r\n      const accounts = await web3.eth.getAccounts();\r\n      const question = await Question(this.state.questionAddress);\r\n      const profile = await factory.methods.getProfile(accounts[0]).call();\r\n      // Ensure that voter is not the answerer\r\n      if (accounts[0] != await question.methods.getAnswerer(index).call()){\r\n        // Cannot vote twice\r\n        if (! await question.methods.checkVoter(index, profile).call()) {\r\n          await factory.methods\r\n          .upVote(this.state.questionAddress, index)\r\n          .send({\r\n              from: accounts[0]\r\n          });\r\n          Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n        } else {\r\n          this.setState({ voteMultipleError: true});\r\n        }\r\n      } else {\r\n        this.setState({ voteError: true});\r\n      }\r\n    };\r\n\r\n    downVote = async(index) => {\r\n      const accounts = await web3.eth.getAccounts();\r\n      const question = await Question(this.state.questionAddress);\r\n      const profile = await factory.methods.getProfile(accounts[0]).call();\r\n      // Ensure that voter is not the answerer\r\n      if (accounts[0] != await question.methods.getAnswerer(index).call()){\r\n        // Cannot vote twice\r\n        if (! await question.methods.checkVoter(index, profile).call()) {\r\n          await factory.methods\r\n          .downVote(this.state.questionAddress, index)\r\n          .send({\r\n              from: accounts[0]\r\n          });\r\n          Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n        } else {\r\n          this.setState({ voteMultipleError: true});\r\n        }\r\n      } else {\r\n        this.setState({ voteError: true});\r\n      }\r\n    };\r\n\r\n    renderQuestion() {\r\n        const summary = this.props.summary;\r\n        const time = this.props.time;\r\n        var currentTime = (new Date).getTime();\r\n        var maxDuration =(parseFloat(summary[3]) / 60 / 60).toFixed(2).toString().toString();\r\n        var publishTime = moment.unix(time[0]).format('dddd, Do MMMM YYYY, h:mm:ss a');\r\n        var votingTime = moment.unix(this.state.votingTime).format('dddd, Do MMMM YYYY, h:mm:ss a');\r\n        var publishTimeMs = moment.unix(time[0]).valueOf();\r\n        var maxDurationMs = moment.unix(time[2]).valueOf();\r\n        var votingTimeMs = moment.unix(this.state.votingTime).valueOf();\r\n\r\n        let remainingTime = 0;\r\n        if (this.state.questionState == 0) {\r\n          remainingTime = publishTimeMs + maxDurationMs - currentTime;\r\n          if (remainingTime < 0) {\r\n              remainingTime = 0;\r\n          }\r\n        } else {\r\n          remainingTime = votingTimeMs + maxDurationMs - currentTime;\r\n          if (remainingTime < 0) {\r\n              remainingTime = 0;\r\n          }\r\n        }\r\n\r\n        return (\r\n          <React.Fragment>\r\n              <Table definition>\r\n                  <Table.Body>\r\n                    <Table.Row>\r\n                        <Table.Cell width={2}>Question Title</Table.Cell>\r\n                        <Table.Cell style={{fontSize: '20px', lineHeight: '1.5'}}>\r\n                            {summary[0]}\r\n                        </Table.Cell>\r\n                    </Table.Row>\r\n                      <Table.Row>\r\n                          <Table.Cell width={2}>Description</Table.Cell>\r\n                          <Table.Cell style={{fontSize: '20px', lineHeight: '1.5'}}>\r\n                              <Context\r\n                                  input='tex'\r\n                                  onLoad={ () => console.log(\"Loaded MathJax script!\") }\r\n                                  onError={ (MathJax, error) => {\r\n                                      console.warn(error);\r\n                                      console.log(\"Encountered a MathJax error, re-attempting a typeset!\");\r\n                                      MathJax.Hub.Queue(\r\n                                        MathJax.Hub.Typeset()\r\n                                      );\r\n                                  } }\r\n                                  options={{\r\n                                      asciimath2jax: {\r\n                                           useMathMLspacing: true,\r\n                                           delimiters: [[\"$$\",\"$$\"]],\r\n                                           preview: \"none\",\r\n                                      }\r\n                                  }}>\r\n                                  <Text text={summary[1]}/>\r\n                              </Context>\r\n                          </Table.Cell>\r\n                      </Table.Row>\r\n                      <Table.Row>\r\n                          <Table.Cell>Reward (ETH)</Table.Cell>\r\n                          <Table.Cell style={{fontSize: '20px'}}>{summary[2]}</Table.Cell>\r\n                      </Table.Row>\r\n                      <Table.Row>\r\n                          <Table.Cell>Publish Time</Table.Cell>\r\n                          <Table.Cell style={{fontSize: '20px'}}>{publishTime}</Table.Cell>\r\n                      </Table.Row>\r\n                      <Table.Row>\r\n                          <Table.Cell>Answering Duration (hours)</Table.Cell>\r\n                          <Table.Cell style={{fontSize: '20px'}}>\r\n                              <span style={{verticalAlign: 'middle', lineHeight: '33px'}}>\r\n                                  {maxDuration}\r\n                              </span>\r\n                              {this.state.questionState == 0 && remainingTime > 0\r\n                                  ? <Popup\r\n                                      trigger={\r\n                                          <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                  icon='clock'\r\n                                                  color=\"violet\"\r\n                                          />}\r\n                                      content={\r\n                                          <span>\r\n                                          <span>Remaining time - </span>\r\n                                          <Countdown date={Date.now() + remainingTime}>\r\n                                          </Countdown>\r\n                                      </span>}\r\n                                      position='bottom right'\r\n                                      inverted />\r\n                                  : this.state.questionState == 0 && remainingTime == 0\r\n                                  ? <Popup\r\n                                      trigger={\r\n                                          <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                  icon='clock'\r\n                                                  color=\"red\"\r\n                                                  onClick={this.votePhase}\r\n                                          />\r\n                                      }\r\n                                      content={\"Proceed to Voting\"}\r\n                                      position='bottom right'\r\n                                      inverted />\r\n                                  : <Popup\r\n                                      trigger={\r\n                                          <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                  icon='clock'\r\n                                                  color=\"red\"\r\n                                                  disabled\r\n                                          />\r\n                                      }\r\n                                      position='bottom right'\r\n                                      inverted />\r\n                              }\r\n                          </Table.Cell>\r\n                      </Table.Row>\r\n                      <Table.Row>\r\n                          <Table.Cell>Voting Duration (hours)</Table.Cell>\r\n                          <Table.Cell style={{fontSize: '20px'}}>\r\n                              <span style={{verticalAlign: 'middle', lineHeight: '33px'}}>\r\n                                  {maxDuration}\r\n                              </span>\r\n                              {this.state.questionState == 1 && remainingTime > 0\r\n                                  ? <Popup\r\n                                      trigger={\r\n                                          <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                  icon='clock'\r\n                                                  color=\"violet\"\r\n                                          />}\r\n                                      content={\r\n                                          <span>\r\n                                          <span>Remaining time - </span>\r\n                                          <Countdown date={Date.now() + remainingTime}>\r\n                                          </Countdown>\r\n                                      </span>}\r\n                                      position='bottom right'\r\n                                      inverted />\r\n                                  : this.state.questionState == 1 && remainingTime == 0\r\n                                  ? <Popup trigger={<Button>Show flowing popup</Button>} flowing hoverable>\r\n                                      <Grid centered divided columns={3}>\r\n                                        <Grid.Column textAlign='center'>\r\n                                          <Header as='h4'>Basic Plan</Header>\r\n                                          <p>\r\n                                            <b>2</b> projects, $10 a month\r\n                                          </p>\r\n                                          <Button>Choose</Button>\r\n                                        </Grid.Column>\r\n                                        <Grid.Column textAlign='center'>\r\n                                          <Header as='h4'>Business Plan</Header>\r\n                                          <p>\r\n                                            <b>5</b> projects, $20 a month\r\n                                          </p>\r\n                                          <Button>Choose</Button>\r\n                                        </Grid.Column>\r\n                                        <Grid.Column textAlign='center'>\r\n                                          <Header as='h4'>Premium Plan</Header>\r\n                                          <p>\r\n                                            <b>8</b> projects, $25 a month\r\n                                          </p>\r\n                                          <Button>Choose</Button>\r\n                                        </Grid.Column>\r\n                                      </Grid>\r\n                                    </Popup> \r\n                                  : this.state.questionState == 0\r\n                                  ? <Popup\r\n                                      trigger={\r\n                                          <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                  icon='clock'\r\n                                                  color=\"red\"\r\n                                                  disabled\r\n                                          />\r\n                                      }\r\n                                      position='bottom right'\r\n                                      inverted />\r\n                                  : <Popup\r\n                                      trigger={\r\n                                          <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                  icon='clock'\r\n                                                  color=\"red\"\r\n                                                  disabled\r\n                                                    />\r\n                                      }\r\n                                      position='bottom right'\r\n                                      inverted />\r\n                            }\r\n                          </Table.Cell>\r\n                      </Table.Row>\r\n                  </Table.Body>\r\n              </Table>\r\n          </React.Fragment>\r\n        );\r\n    }\r\n\r\n    renderAnswers() {\r\n      const answers = this.props.answerList;\r\n      // Answering Phase no answers are shown\r\n      if (this.state.questionState != 0){\r\n        return answers.map((answer, index) => {\r\n            var answeredTime = moment.unix(answer[5]).format('Do MMMM YYYY, h:mm a');\r\n            var id = index % 70;\r\n            return <Comment key={index}>\r\n                <Comment.Avatar src={this.props.avatarListIcon[id]} style={{backgroundColor: '#8D8741'}}/>\r\n                <Comment.Content style={{width:\"1000px\"}}>\r\n                  <Comment.Author as='a'>{answer[1]}</Comment.Author>\r\n                  <Comment.Metadata>\r\n                    <div>{answeredTime}</div>\r\n                  </Comment.Metadata>\r\n                  <br/>\r\n                  {this.state.questionState == 2\r\n                    ? <Comment.Metadata>\r\n                      <div><Icon name='thumbs up' />{answer[3]}</div>\r\n                      <div><Icon name='thumbs down' />{answer[4]}</div>\r\n                    </Comment.Metadata>\r\n                    : <Comment.Metadata>\r\n                      <div><Icon name='thumbs up' />0</div>\r\n                      <div><Icon name='thumbs down' />0</div>\r\n                    </Comment.Metadata>\r\n                  }\r\n                  <Comment.Text>\r\n                    <Context\r\n                        input='tex'\r\n                        onLoad={ () => console.log(\"Loaded MathJax script!\") }\r\n                        onError={ (MathJax, error) => {\r\n                            console.warn(error);\r\n                            console.log(\"Encountered a MathJax error, re-attempting a typeset!\");\r\n                            MathJax.Hub.Queue(\r\n                              MathJax.Hub.Typeset()\r\n                            );\r\n                        } }\r\n                        options={{\r\n                            asciimath2jax: {\r\n                                 useMathMLspacing: true,\r\n                                 delimiters: [[\"$$\",\"$$\"]],\r\n                                 preview: \"none\",\r\n                            }\r\n                        }}>\r\n                        <Text text={answer[0]}/>\r\n                    </Context>\r\n                  </Comment.Text>\r\n                  <Comment.Actions>\r\n                    <Comment.Action>\r\n                      <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                              icon='thumbs down'\r\n                              onClick={() => this.downVote(index)}\r\n                              size='tiny'\r\n                      />\r\n                      <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                              icon='thumbs up'\r\n                              onClick={() => this.upVote(index)}\r\n                              size='tiny'\r\n                      />\r\n                        </Comment.Action>\r\n                  </Comment.Actions>\r\n                </Comment.Content>\r\n              </Comment>\r\n        });\r\n      }\r\n    }\r\n\r\n    renderFiles () {\r\n      let fileHashes = this.props.summary[5];\r\n      let fileNames = this.props.summary[6];\r\n\r\n      if (fileHashes.length == 0) {\r\n          return(\r\n              <Segment placeholder>\r\n                  <Header icon>\r\n                      <Icon name='images outline' />\r\n                      No files are uploaded for this question.\r\n                  </Header>\r\n              </Segment>\r\n          );\r\n      } else {\r\n          return(\r\n              <Segment placeholder>\r\n                  <center>\r\n                      <p>Image(s) Uploaded</p>\r\n                      {fileNames.map((fileName, index) =>\r\n                          <div style={{marginBottom: '10px'}}>\r\n                              <Image src={\"https://ipfs.io/ipfs/\"+fileHashes[index]}/>\r\n                              <Divider hidden/>\r\n                              <p> To download: </p>\r\n                              <Label as='a' size='big' href={\"https://ipfs.io/ipfs/\"+fileHashes[index]}>\r\n                                  <Icon name='download' />\r\n                                  {fileName}\r\n                              </Label>\r\n                          </div>\r\n                      )}\r\n                  </center>\r\n              </Segment>\r\n          );\r\n      }\r\n    }\r\n\r\n    renderAnswersForm() {\r\n      return(\r\n        <Form onSubmit={this.onSubmitAnswer} error={!!this.state.errorMessage}>\r\n          <Form.TextArea\r\n            placeholder=\"Enter Answers\"\r\n            value={this.state.answer}\r\n            onChange={event => this.setState({ answer: event.target.value })}\r\n          />\r\n          <Message error header=\"Oops!\" content={this.state.errorMessage} />\r\n          {this.state.questionState == 1 ?\r\n              <Button content='Submit Answers' disabled labelPosition='left' icon='edit' primary />\r\n              : <Button content='Submit Answers' loading={this.state.loading} labelPosition='left' icon='edit' primary />\r\n          }\r\n          <Modal open={this.state.loading} basic size='small'>\r\n            <Header content='Posting New Answers' />\r\n            <Modal.Content>\r\n              <p>\r\n                Please Confirm the MetaMask Transaction Request to submit your Answers to the Block-Chain Network.\r\n                Upon successful submission, you will be redirected back to the Question Page. This process might take awhile.\r\n              </p>\r\n              <Loader active inline=\"centered\">\r\n                Loading\r\n              </Loader>\r\n            </Modal.Content>\r\n          </Modal>\r\n        </Form>\r\n      );\r\n    }\r\n\r\n    render() {\r\n      return(\r\n        <Layout>\r\n          <Container>\r\n            {this.renderQuestion()}\r\n            <Divider />\r\n            {this.renderFiles()}\r\n            <Header as='h2' textAlign='center'>\r\n                Submit Your Answers Here\r\n            </Header>\r\n            <p><b>Note:</b> To include math equations, delimit the latex format with $$.</p>\r\n            <a style={{display: \"table-cell\"}} href=\"https://www.codecogs.com/latex/eqneditor.php\" target=\"_blank\">Link to Supported Latex Editor</a>\r\n            {this.renderAnswersForm()}\r\n            <Header as='h2' textAlign='center'>\r\n              Answer(s) Submitted: {this.props.answerList.length}\r\n            </Header>\r\n            <Divider />\r\n            <Comment.Group size='large'>\r\n            {this.renderAnswers()}\r\n            </Comment.Group>\r\n            <Modal open={this.state.voteError} basic size='small'>\r\n              <Header icon='ethereum' content='Cannot Vote Own Answers' />\r\n              <Modal.Content>\r\n                <p>\r\n                  You have selected to vote the answer you have provided. Please only vote answers provided by\r\n                  others.\r\n                </p>\r\n              </Modal.Content>\r\n              <Modal.Actions>\r\n                <Button color='green' inverted attached='bottom' onClick={() => {\r\n                  Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n                  this.setState({ voteError: false})}\r\n                }>\r\n                  Go Back\r\n                </Button>\r\n              </Modal.Actions>\r\n            </Modal>\r\n            <Modal open={this.state.ownerError} basic size='small'>\r\n              <Header icon='ethereum' content='Only Available For Owner Of Question' />\r\n              <Modal.Content>\r\n                <p>\r\n                  You cannot change the state of the question as you are not the owner.\r\n                </p>\r\n              </Modal.Content>\r\n              <Modal.Actions>\r\n                <Button color='green' inverted attached='bottom' onClick={() => {\r\n                  Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n                  this.setState({ ownerError: false})}\r\n                }>\r\n                  Go Back\r\n                </Button>\r\n              </Modal.Actions>\r\n            </Modal>\r\n            <Modal open={this.state.voteMultipleError} basic size='small'>\r\n              <Header icon='ethereum' content='Answer Already Voted' />\r\n              <Modal.Content>\r\n                <p>\r\n                  You cannot vote for the same answer more than once. Please vote for another answer.\r\n                </p>\r\n              </Modal.Content>\r\n              <Modal.Actions>\r\n                <Button color='green' inverted attached='bottom' onClick={() => {\r\n                  Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n                  this.setState({ voteMultipleError: false})}\r\n                }>\r\n                  Go Back\r\n                </Button>\r\n              </Modal.Actions>\r\n            </Modal>\r\n            <Modal open={this.state.stateChange} basic size='small'>\r\n              <Header content='Proceeding To Voting/Rewarding Phase' />\r\n              <Modal.Content>\r\n                <p>\r\n                  Please Confirm the MetaMask Transaction Request to proceed towards Voting/Rewarding Phase.\r\n                </p>\r\n                <Loader active inline=\"centered\">\r\n                  State Changing\r\n                </Loader>\r\n              </Modal.Content>\r\n            </Modal>\r\n          </Container>\r\n        </Layout>\r\n      )\r\n    }\r\n}\r\n\r\nexport default QuestionRow;\r\n"]},"metadata":{},"sourceType":"module"}