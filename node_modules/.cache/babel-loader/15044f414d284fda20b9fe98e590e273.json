{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport moment from 'moment';\nimport React, { Component } from 'react';\nimport Countdown from 'react-countdown-now';\nimport { Context, Text } from 'react-mathjax2';\nimport { Table, Popup, Button, Container, Form, Header, Comment, Segment, Message, Divider, Icon, Label, Modal, Loader, Image, Grid } from 'semantic-ui-react';\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport TimeOutModal from '../components/TimeOutModal';\nimport ErrorModal from '../components/ErrorModal';\nimport LoadingModal from '../components/LoadingModal';\nimport web3 from '../ethereum/web3';\nimport Question from '../ethereum/question';\nimport EthQuestionToken from '../ethereum/token';\nimport credentials from '../ethereum/credentials';\nimport Profile from '../ethereum/profile';\nimport factory from '../ethereum/factory';\nimport Layout from '../components/Layout';\nimport Footer from '../components/Footer';\nimport { Link, Router } from '../routes';\nimport { getIpfsHash } from '../utils/ipfs';\nimport { logging, checkFieldEmpty, sortingAnswers } from \"../utils/functions\";\nimport cookies from 'next-cookies';\n\nvar QuestionRow =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(QuestionRow, _Component);\n\n  function QuestionRow(props) {\n    var _this;\n\n    _classCallCheck(this, QuestionRow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(QuestionRow).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"votePhase\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var accounts, question, account, logTransaction;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n\n              if (!(_this.state.questionState == 0)) {\n                _context.next = 20;\n                break;\n              }\n\n              _context.next = 4;\n              return web3.eth.getAccounts();\n\n            case 4:\n              accounts = _context.sent;\n              question = Question(_this.state.questionAddress); // Ensure that only Creator of Question can access this function\n\n              account = _this.props.account;\n              _context.t0 = account;\n              _context.next = 10;\n              return question.methods.getCreator().call();\n\n            case 10:\n              _context.t1 = _context.sent;\n\n              if (!(_context.t0 == _context.t1)) {\n                _context.next = 19;\n                break;\n              }\n\n              _this.setState({\n                changeToVoting: true\n              });\n\n              logTransaction = logging(\"Change to Voting Phase for Question Titled: \" + _this.state.summary[0]);\n              _context.next = 16;\n              return factory.methods.changeQuestionPhase(_this.state.questionAddress, logTransaction).send({\n                from: account,\n                gasPrice: '0'\n              });\n\n            case 16:\n              Router.pushRoute(\"/questions/\".concat(_this.state.questionAddress));\n              _context.next = 20;\n              break;\n\n            case 19:\n              _this.setState({\n                ownerError: true\n              });\n\n            case 20:\n              _context.next = 26;\n              break;\n\n            case 22:\n              _context.prev = 22;\n              _context.t2 = _context[\"catch\"](0);\n\n              if (_context.t2.message == \"Returned error: authentication needed: password or unlock\") {\n                _this.setState({\n                  timeout: true\n                });\n              }\n\n              _this.setState({\n                errorMessage: _context.t2.message\n              });\n\n            case 26:\n              _this.setState({\n                changeToVoting: false\n              });\n\n            case 27:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 22]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"rewardPhase\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var accounts, question, account, logTransaction, rewardMessage, voteMessage, refundMessage;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n\n              if (!(_this.state.questionState == 1)) {\n                _context2.next = 23;\n                break;\n              }\n\n              _context2.next = 4;\n              return web3.eth.getAccounts();\n\n            case 4:\n              accounts = _context2.sent;\n              question = Question(_this.state.questionAddress); // Ensure that only Creator of Question can access this function\n\n              account = _this.props.account;\n              _context2.t0 = account;\n              _context2.next = 10;\n              return question.methods.getCreator().call();\n\n            case 10:\n              _context2.t1 = _context2.sent;\n\n              if (!(_context2.t0 == _context2.t1)) {\n                _context2.next = 22;\n                break;\n              }\n\n              _this.setState({\n                changeToRewarded: true\n              });\n\n              logTransaction = logging(\"Awarded \" + _this.state.summary[2] * 1e-4 + \" EQT(s) as reward for Question Titled: \" + _this.state.summary[0]);\n              rewardMessage = logging(\"Rewarded \" + _this.state.summary[2] * 1e-4 + \" EQT(s) for most approved answer\");\n              voteMessage = logging(\"Rewarded EQT(s) for approving the most approved answer\");\n              refundMessage = logging(\"Refunded \" + _this.state.summary[2] * 1e-4 + \" EQT(s) as there are no answers or answers with approvals\");\n              _context2.next = 19;\n              return factory.methods.shareTokenAt(_this.state.questionAddress, logTransaction, rewardMessage, voteMessage, refundMessage, EthQuestionToken._address).send({\n                from: account,\n                gasPrice: '0'\n              });\n\n            case 19:\n              Router.pushRoute(\"/questions/\".concat(_this.state.questionAddress));\n              _context2.next = 23;\n              break;\n\n            case 22:\n              _this.setState({\n                ownerError: true\n              });\n\n            case 23:\n              _context2.next = 29;\n              break;\n\n            case 25:\n              _context2.prev = 25;\n              _context2.t2 = _context2[\"catch\"](0);\n\n              if (_context2.t2.message == \"Returned error: authentication needed: password or unlock\") {\n                _this.setState({\n                  timeout: true\n                });\n              }\n\n              _this.setState({\n                errorMessage: _context2.t2.message\n              });\n\n            case 29:\n              _this.setState({\n                changeToRewarded: false\n              });\n\n            case 30:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 25]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"fixBalance\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var accounts, question, account, balance;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context3.sent;\n              question = Question(_this.state.questionAddress); // Ensure that only Creator of Question can access this function\n\n              account = _this.props.account;\n              _context3.t0 = account;\n              _context3.next = 9;\n              return question.methods.getCreator().call();\n\n            case 9:\n              _context3.t1 = _context3.sent;\n\n              if (!(_context3.t0 == _context3.t1)) {\n                _context3.next = 22;\n                break;\n              }\n\n              _this.setState({\n                fixError: true\n              });\n\n              _context3.t2 = _this.state.summary[2];\n              _context3.next = 15;\n              return EthQuestionToken.methods.balanceOf(_this.state.questionAddress).call();\n\n            case 15:\n              _context3.t3 = _context3.sent;\n              balance = _context3.t2 - _context3.t3;\n              _context3.next = 19;\n              return EthQuestionToken.methods.transfer(_this.state.questionAddress, balance).send({\n                from: account,\n                gasPrice: '0'\n              });\n\n            case 19:\n              Router.pushRoute(\"/home\");\n              _context3.next = 23;\n              break;\n\n            case 22:\n              _this.setState({\n                ownerError: true\n              });\n\n            case 23:\n              _context3.next = 29;\n              break;\n\n            case 25:\n              _context3.prev = 25;\n              _context3.t4 = _context3[\"catch\"](0);\n\n              if (_context3.t4.message == \"Returned error: authentication needed: password or unlock\") {\n                _this.setState({\n                  timeout: true\n                });\n              }\n\n              _this.setState({\n                errorMessage: _context3.t4.message\n              });\n\n            case 29:\n              _this.setState({\n                fixError: false\n              });\n\n            case 30:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[0, 25]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"timeExtension\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var accounts, question, account, logTransaction;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context4.sent;\n              question = Question(_this.state.questionAddress); // Ensure that only Creator of Question can access this function\n\n              account = _this.props.account;\n              _context4.t0 = account;\n              _context4.next = 9;\n              return question.methods.getCreator().call();\n\n            case 9:\n              _context4.t1 = _context4.sent;\n\n              if (!(_context4.t0 == _context4.t1)) {\n                _context4.next = 18;\n                break;\n              }\n\n              _this.setState({\n                timeExtension: true\n              });\n\n              logTransaction = logging(\"Duration Extended for Question Titled: \" + _this.state.summary[0]);\n              _context4.next = 15;\n              return factory.methods.timeExtension(_this.state.questionAddress, logTransaction).send({\n                from: account,\n                gasPrice: '0'\n              });\n\n            case 15:\n              Router.pushRoute(\"/questions/\".concat(_this.state.questionAddress));\n              _context4.next = 19;\n              break;\n\n            case 18:\n              _this.setState({\n                ownerError: true\n              });\n\n            case 19:\n              _context4.next = 25;\n              break;\n\n            case 21:\n              _context4.prev = 21;\n              _context4.t2 = _context4[\"catch\"](0);\n\n              if (_context4.t2.message == \"Returned error: authentication needed: password or unlock\") {\n                _this.setState({\n                  timeExtension: false\n                });\n\n                _this.setState({\n                  timeout: true\n                });\n              }\n\n              _this.setState({\n                errorMessage: _context4.t2.message\n              });\n\n            case 25:\n              _this.setState({\n                timeExtension: false\n              });\n\n            case 26:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[0, 21]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"increaseReward\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee5() {\n      var accounts, question, account, logTransaction;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.prev = 0;\n              _context5.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context5.sent;\n              question = Question(_this.state.questionAddress); // Ensure that only Creator of Question can access this function\n\n              account = _this.props.account;\n              _context5.t0 = account;\n              _context5.next = 9;\n              return question.methods.getCreator().call();\n\n            case 9:\n              _context5.t1 = _context5.sent;\n\n              if (!(_context5.t0 == _context5.t1)) {\n                _context5.next = 20;\n                break;\n              }\n\n              _this.setState({\n                changeReward: true\n              });\n\n              logTransaction = logging(\"Increase Reward by 1 EQT(s) for Question Titled: \" + _this.state.summary[0]);\n              _context5.next = 15;\n              return factory.methods.increaseReward(_this.state.questionAddress, logTransaction, EthQuestionToken._address).send({\n                from: account,\n                gasPrice: '0'\n              });\n\n            case 15:\n              _context5.next = 17;\n              return EthQuestionToken.methods.transfer(_this.state.questionAddress, 10e3).send({\n                from: account,\n                gasPrice: '0'\n              });\n\n            case 17:\n              Router.pushRoute(\"/questions/\".concat(_this.state.questionAddress));\n              _context5.next = 21;\n              break;\n\n            case 20:\n              _this.setState({\n                ownerError: true\n              });\n\n            case 21:\n              _context5.next = 27;\n              break;\n\n            case 23:\n              _context5.prev = 23;\n              _context5.t2 = _context5[\"catch\"](0);\n\n              if (_context5.t2.message == \"Returned error: authentication needed: password or unlock\") {\n                _this.setState({\n                  timeout: true\n                });\n              }\n\n              _this.setState({\n                errorMessage: _context5.t2.message\n              });\n\n            case 27:\n              _this.setState({\n                changeReward: false\n              });\n\n            case 28:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[0, 23]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmitAnswer\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee6() {\n      var question, account, logTransaction;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              });\n\n              if (!checkFieldEmpty(_this.state.answer)) {\n                _context6.next = 30;\n                break;\n              }\n\n              _context6.prev = 2;\n              question = Question(_this.state.questionAddress); // Ensure that creator of question cannot provide answers\n\n              account = _this.props.account;\n              _context6.t1 = account;\n              _context6.next = 8;\n              return question.methods.getCreator().call();\n\n            case 8:\n              _context6.t2 = _context6.sent;\n              _context6.t0 = _context6.t1 != _context6.t2;\n\n              if (!_context6.t0) {\n                _context6.next = 14;\n                break;\n              }\n\n              _context6.next = 13;\n              return question.methods.checkIfAnswered(account).call();\n\n            case 13:\n              _context6.t0 = !_context6.sent;\n\n            case 14:\n              if (!_context6.t0) {\n                _context6.next = 21;\n                break;\n              }\n\n              // Logs the transactions\n              logTransaction = logging(\"Submitted Answer for Question Titled: \" + _this.state.summary[0]); // Create new answer\n\n              _context6.next = 18;\n              return factory.methods.createAnswer(_this.state.questionAddress, _this.state.answer, _this.state.fileHashes_array, _this.state.fileNames_array, logTransaction).send({\n                from: account,\n                gasPrice: '0'\n              });\n\n            case 18:\n              Router.pushRoute(\"/questions/\".concat(_this.state.questionAddress));\n              _context6.next = 22;\n              break;\n\n            case 21:\n              _this.setState({\n                loading: false,\n                errorMessage: \"You cannot provide answer for your own question or already provided answer.\"\n              });\n\n            case 22:\n              _context6.next = 28;\n              break;\n\n            case 24:\n              _context6.prev = 24;\n              _context6.t3 = _context6[\"catch\"](2);\n\n              if (_context6.t3.message == \"Returned error: authentication needed: password or unlock\") {\n                _this.setState({\n                  timeout: true\n                });\n              }\n\n              _this.setState({\n                errorMessage: _context6.t3.message\n              });\n\n            case 28:\n              _context6.next = 31;\n              break;\n\n            case 30:\n              _this.setState({\n                loading: false,\n                errorMessage: \"Answer Field Empty\"\n              });\n\n            case 31:\n              _this.setState({\n                loading: false,\n                answer: ''\n              });\n\n            case 32:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[2, 24]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"approveAnswer\",\n    /*#__PURE__*/\n    function () {\n      var _ref7 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(answerer) {\n        var account, question, profile, answerList, index, i, logTransaction;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _this.setState({\n                  voting: true\n                });\n\n                account = _this.props.account;\n                _context7.next = 4;\n                return Question(_this.state.questionAddress);\n\n              case 4:\n                question = _context7.sent;\n                _context7.next = 7;\n                return factory.methods.getProfile(account).call();\n\n              case 7:\n                profile = _context7.sent;\n                _context7.next = 10;\n                return question.methods.getAnswerList().call();\n\n              case 10:\n                answerList = _context7.sent;\n\n                for (i = 0; i < answerList.length; i++) {\n                  if (answerList[i][2] == answerer) {\n                    index = i;\n                  }\n                } //Ensure that voter is not the answerer\n\n\n                _context7.prev = 12;\n\n                if (!(account != answerer)) {\n                  _context7.next = 37;\n                  break;\n                }\n\n                _context7.next = 16;\n                return question.methods.checkVoter(index, profile).call();\n\n              case 16:\n                if (_context7.sent) {\n                  _context7.next = 34;\n                  break;\n                }\n\n                _context7.next = 19;\n                return question.methods.state().call();\n\n              case 19:\n                _context7.t0 = _context7.sent;\n\n                if (!(_context7.t0 != 2)) {\n                  _context7.next = 28;\n                  break;\n                }\n\n                _context7.t1 = EthQuestionToken.methods;\n                _context7.next = 24;\n                return _this.state.questionAddress;\n\n              case 24:\n                _context7.t2 = _context7.sent;\n                _context7.t3 = {\n                  from: account,\n                  gasPrice: '0'\n                };\n                _context7.next = 28;\n                return _context7.t1.transfer.call(_context7.t1, _context7.t2, 10e3).send(_context7.t3);\n\n              case 28:\n                logTransaction = logging(\"Approved An Answer for Question Titled: \" + _this.state.summary[0]);\n                _context7.next = 31;\n                return factory.methods.approveAnswer(_this.state.questionAddress, index, logTransaction).send({\n                  from: account,\n                  gasPrice: '0'\n                });\n\n              case 31:\n                Router.pushRoute(\"/questions/\".concat(_this.state.questionAddress));\n                _context7.next = 35;\n                break;\n\n              case 34:\n                _this.setState({\n                  voteMultipleError: true\n                });\n\n              case 35:\n                _context7.next = 38;\n                break;\n\n              case 37:\n                _this.setState({\n                  voteError: true\n                });\n\n              case 38:\n                _context7.next = 44;\n                break;\n\n              case 40:\n                _context7.prev = 40;\n                _context7.t4 = _context7[\"catch\"](12);\n\n                if (_context7.t4.message == \"Returned error: authentication needed: password or unlock\") {\n                  _this.setState({\n                    timeout: true\n                  });\n                }\n\n                _this.setState({\n                  errorMessage: _context7.t4.message\n                });\n\n              case 44:\n                _this.setState({\n                  voting: false\n                });\n\n              case 45:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, null, [[12, 40]]);\n      }));\n\n      return function (_x) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"onFileSelected\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee9() {\n      var reader, file, _this$state, files_array, fileNames_array, fileHashes_array;\n\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              // Access JavaScript FileReader() method for conversion to buffer\n              reader = new FileReader();\n              file = _this.fileInput.files[0];\n\n              _this.setState({\n                fileLoading: true\n              });\n\n              if (file instanceof Blob) {\n                _this$state = _this.state, files_array = _this$state.files_array, fileNames_array = _this$state.fileNames_array, fileHashes_array = _this$state.fileHashes_array;\n                files_array.push(file);\n                fileNames_array.push(file.name);\n\n                _this.setState({\n                  files_array: files_array,\n                  fileNames_array: fileNames_array\n                });\n\n                console.log(\"fileNames_array: \", fileNames_array);\n                reader.onloadend =\n                /*#__PURE__*/\n                _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee8() {\n                  var fileHash;\n                  return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n                    while (1) {\n                      switch (_context8.prev = _context8.next) {\n                        case 0:\n                          _context8.next = 2;\n                          return _this.setState({\n                            fileUrl: reader.result,\n                            fileLoading: true,\n                            buffer: Buffer.from(reader.result) // File is converted to a buffer for upload to IPFS\n\n                          });\n\n                        case 2:\n                          if (!_this.state.buffer) {\n                            _context8.next = 8;\n                            break;\n                          }\n\n                          _context8.next = 5;\n                          return getIpfsHash(file);\n\n                        case 5:\n                          _context8.t0 = _context8.sent;\n                          _context8.next = 9;\n                          break;\n\n                        case 8:\n                          _context8.t0 = '0';\n\n                        case 9:\n                          fileHash = _context8.t0;\n                          fileHashes_array.push(fileHash);\n\n                          _this.setState({\n                            fileHashes_array: fileHashes_array\n                          });\n\n                          console.log(\"fileHashes_array: \", fileHashes_array);\n\n                          _this.setState({\n                            fileLoading: false\n                          });\n\n                        case 14:\n                        case \"end\":\n                          return _context8.stop();\n                      }\n                    }\n                  }, _callee8);\n                }));\n                reader.readAsDataURL(file);\n              }\n\n            case 4:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"onFileRemoved\", function (file) {\n      var i = 0;\n      var _this$state2 = _this.state,\n          files_array = _this$state2.files_array,\n          fileHashes_array = _this$state2.fileHashes_array,\n          fileNames_array = _this$state2.fileNames_array;\n      console.log('file: ', file);\n\n      for (i = 0; i < files_array.length; i++) {\n        if (file === files_array[i]) {\n          files_array.splice(i, 1);\n          fileNames_array.splice(i, 1);\n          fileHashes_array.splice(i, 1);\n          break;\n        }\n      }\n\n      _this.setState({\n        files_array: files_array,\n        fileNames_array: fileNames_array,\n        fileHashes_array: fileHashes_array\n      });\n\n      console.log('fileNames_array', fileNames_array);\n      console.log(\"fileHashes_array: \", fileHashes_array);\n    });\n\n    _this.state = {\n      questionAddress: '',\n      questionState: '',\n      summary: [],\n      time: '',\n      answerList: [],\n      avatarListIcon: [],\n      votingTime: '',\n      voting: false,\n      answer: '',\n      errorMessage: '',\n      loading: false,\n      voteError: false,\n      ownerError: false,\n      voteMultipleError: false,\n      changeToVoting: false,\n      changeToRewarded: false,\n      timeExtension: false,\n      changeReward: false,\n      fileLoading: false,\n      buffer: null,\n      files_array: [],\n      fileHashes_array: [],\n      fileNames_array: [],\n      login: false,\n      timeout: false,\n      resourceLoading: true,\n      accountType: null,\n      balanceError: false,\n      fixError: false,\n      sorted: false\n    };\n    return _this;\n  }\n\n  _createClass(QuestionRow, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee10() {\n        var login, account, profileAddress, profile, accountType;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                if (!(typeof web3 === 'undefined')) {\n                  _context10.next = 3;\n                  break;\n                }\n\n                this.setState({\n                  resourceLoading: false\n                });\n                return _context10.abrupt(\"return\");\n\n              case 3:\n                login = false;\n\n                if (!this.props.isLogin) {\n                  _context10.next = 18;\n                  break;\n                }\n\n                login = true; // Get Account Type\n\n                account = this.props.account;\n                _context10.next = 9;\n                return factory.methods.getProfile(account).call();\n\n              case 9:\n                profileAddress = _context10.sent;\n                profile = Profile(profileAddress);\n                _context10.next = 13;\n                return profile.methods.getAccountType().call();\n\n              case 13:\n                accountType = _context10.sent;\n                accountType == 0 ? accountType = \"Admin\" : accountType = \"User\";\n                _context10.next = 17;\n                return this.fetchQuestionData();\n\n              case 17:\n                this.setState({\n                  login: login,\n                  accountType: accountType\n                });\n\n              case 18:\n                this.setState({\n                  resourceLoading: false\n                });\n\n              case 19:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"componentDidUpdate\",\n    value: function () {\n      var _componentDidUpdate = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee11(prevProps) {\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                if (this.props != prevProps) {\n                  this.fetchQuestionData();\n                }\n\n              case 1:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function componentDidUpdate(_x2) {\n        return _componentDidUpdate.apply(this, arguments);\n      }\n\n      return componentDidUpdate;\n    }()\n  }, {\n    key: \"fetchQuestionData\",\n    value: function () {\n      var _fetchQuestionData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee12() {\n        var error, questionAddress, question, summary, time, answerList, iconList, avatarListIcon;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                error = false;\n                questionAddress = this.props.questionAddress;\n                question = Question(questionAddress); // Fetch Question Information\n\n                _context12.next = 5;\n                return question.methods.getSummary().call();\n\n              case 5:\n                summary = _context12.sent;\n                _context12.next = 8;\n                return question.methods.getTime().call();\n\n              case 8:\n                time = _context12.sent;\n                _context12.next = 11;\n                return question.methods.getAnswerList().call();\n\n              case 11:\n                answerList = _context12.sent;\n                // Fetch Avatar Icons\n                iconList = ['alligator', 'anteater', 'armadillo', 'auroch', 'axolotl', 'badger', 'bat', 'beaver', 'buffalo', 'camel', 'capybara', 'chameleon', 'cheetah', 'chinchilla', 'chipmunk', 'chupacabra', 'cormorant', 'coyote', 'crow', 'dingo', 'dinosaur', 'dolphin', 'duck', 'elephant', 'ferret', 'fox', 'frog', 'giraffe', 'gopher', 'grizzly', 'hedgehog', 'hippo', 'hyena', 'ibex', 'ifrit', 'iguana', 'jackal', 'kangaroo', 'koala', 'kraken', 'lemur', 'leopard', 'liger', 'llama', 'manatee', 'mink', 'monkey', 'moose', 'narwhal', 'orangutan', 'otter', 'panda', 'penguin', 'platypus', 'pumpkin', 'python', 'quagga', 'rabbit', 'raccoon', 'rhino', 'sheep', 'shrew', 'skunk', 'squirrel', 'tiger', 'turtle', 'walrus', 'wolf', 'wolverine', 'wombat'];\n                avatarListIcon = iconList.map(function (item) {\n                  return 'https://ssl.gstatic.com/docs/common/profile/' + item + '_lg.png';\n                }); // Check for balance error\n\n                _context12.next = 16;\n                return EthQuestionToken.methods.balanceOf(questionAddress).call();\n\n              case 16:\n                _context12.t0 = _context12.sent;\n                _context12.t1 = summary[2];\n\n                if (!(_context12.t0 != _context12.t1)) {\n                  _context12.next = 22;\n                  break;\n                }\n\n                error = true;\n                _context12.next = 23;\n                break;\n\n              case 22:\n                error = false;\n\n              case 23:\n                this.setState({\n                  questionAddress: questionAddress,\n                  questionState: summary[4],\n                  summary: summary,\n                  time: time,\n                  avatarListIcon: avatarListIcon,\n                  answerList: answerList.reverse(),\n                  votingTime: time[3],\n                  balanceError: error\n                });\n\n              case 24:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function fetchQuestionData() {\n        return _fetchQuestionData.apply(this, arguments);\n      }\n\n      return fetchQuestionData;\n    }()\n  }, {\n    key: \"renderTag\",\n    // Render each tag individually for each question\n    value: function renderTag(tagList, tagSize) {\n      var tagColours = [\"red\", \"olive\", \"blue\", \"teal\", \"green\"];\n      return tagList.map(function (tag, index) {\n        var id = index % 5;\n        return React.createElement(Label, {\n          as: \"a\",\n          onClick: function onClick() {\n            return Router.pushRoute(\"/\".concat('search/' + encodeURIComponent(tag)));\n          },\n          tag: true,\n          size: tagSize,\n          key: index,\n          color: tagColours[id]\n        }, tag);\n      });\n    }\n  }, {\n    key: \"renderQuestion\",\n    value: function renderQuestion() {\n      var summary = this.state.summary;\n      var time = this.state.time;\n      var currentTime = new Date().getTime();\n      var maxDuration = (_parseFloat(summary[3]) / 60 / 60).toFixed(2).toString().toString();\n      var publishTime = moment.unix(time[0]).format('dddd, Do MMMM YYYY, h:mm:ss a');\n      var votingTime = moment.unix(this.state.votingTime).format('dddd, Do MMMM YYYY, h:mm:ss a');\n      var publishTimeMs = moment.unix(time[0]).valueOf();\n      var maxDurationMs = moment.unix(time[2]).valueOf();\n      var votingTimeMs = moment.unix(this.state.votingTime).valueOf();\n      var remainingTime = 0;\n\n      if (this.state.questionState == 0) {\n        remainingTime = publishTimeMs + maxDurationMs - currentTime;\n\n        if (remainingTime < 0) {\n          remainingTime = 0;\n        }\n      } else {\n        remainingTime = votingTimeMs + maxDurationMs - currentTime;\n\n        if (remainingTime < 0) {\n          remainingTime = 0;\n        }\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(Table, {\n        definition: true\n      }, React.createElement(Table.Body, null, React.createElement(Table.Row, null, React.createElement(Table.Cell, {\n        width: 2\n      }, \"Question Title\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px',\n          lineHeight: '1.5'\n        }\n      }, summary[0])), React.createElement(Table.Row, null, React.createElement(Table.Cell, {\n        width: 2\n      }, \"Description\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px',\n          lineHeight: '1.5'\n        }\n      }, React.createElement(Context, {\n        input: \"tex\",\n        onLoad: function onLoad() {\n          return console.log(\"Loaded MathJax script!\");\n        },\n        onError: function onError(MathJax, error) {\n          console.warn(error);\n          console.log(\"Encountered a MathJax error, re-attempting a typeset!\");\n          MathJax.Hub.Queue(MathJax.Hub.Typeset());\n        },\n        options: {\n          asciimath2jax: {\n            useMathMLspacing: true,\n            delimiters: [[\"$$\", \"$$\"]],\n            preview: \"none\"\n          }\n        }\n      }, React.createElement(Text, {\n        text: summary[1]\n      })))), React.createElement(Table.Row, null, React.createElement(Table.Cell, {\n        width: 2\n      }, \"Tags\"), React.createElement(Table.Cell, null, this.renderTag(summary[8], \"small\"))), React.createElement(Table.Row, null, React.createElement(Table.Cell, null, \"Reward (EQT)\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px'\n        }\n      }, summary[2] * 1e-4, this.state.questionState == 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"ethereum\",\n          color: \"black\",\n          onClick: this.increaseReward\n        }),\n        content: \"Increase Reward\",\n        position: \"bottom right\",\n        inverted: true\n      }) : React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"ethereum\",\n          color: \"black\",\n          disabled: true\n        }),\n        position: \"bottom right\",\n        inverted: true\n      }))), React.createElement(Table.Row, null, React.createElement(Table.Cell, null, \"Publish Time\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px'\n        }\n      }, publishTime)), React.createElement(Table.Row, null, React.createElement(Table.Cell, null, \"Answering Duration (hours)\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px'\n        }\n      }, React.createElement(\"span\", {\n        style: {\n          verticalAlign: 'middle',\n          lineHeight: '33px'\n        }\n      }, maxDuration), this.state.questionState == 0 && remainingTime > 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"violet\"\n        }),\n        content: React.createElement(\"span\", null, React.createElement(\"span\", null, \"Remaining time - \"), React.createElement(Countdown, {\n          date: _Date$now() + remainingTime\n        })),\n        position: \"bottom right\",\n        inverted: true\n      }) : this.state.questionState == 0 && remainingTime == 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"red\"\n        }),\n        flowing: true,\n        hoverable: true\n      }, React.createElement(Grid, {\n        centered: true,\n        divided: true,\n        columns: 2\n      }, React.createElement(Grid.Column, {\n        textAlign: \"center\"\n      }, React.createElement(\"p\", null, \"Extends the validity of question by 1 hour\"), React.createElement(Button, {\n        onClick: this.timeExtension\n      }, \"Extend Deadline\")), this.state.balanceError == true ? React.createElement(Grid.Column, {\n        textAlign: \"center\"\n      }, React.createElement(\"p\", null, \"Reward Balance Error\"), React.createElement(Button, {\n        onClick: this.fixBalance\n      }, \"Fix Balance\")) : React.createElement(Grid.Column, {\n        textAlign: \"center\"\n      }, React.createElement(\"p\", null, \"Proceed to the voting phase\"), React.createElement(Button, {\n        onClick: this.votePhase\n      }, \"Voting Phase\")))) : React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"red\",\n          disabled: true\n        }),\n        position: \"bottom right\",\n        inverted: true\n      }))), React.createElement(Table.Row, null, React.createElement(Table.Cell, null, \"Voting Duration (hours)\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px'\n        }\n      }, React.createElement(\"span\", {\n        style: {\n          verticalAlign: 'middle',\n          lineHeight: '33px'\n        }\n      }, maxDuration), this.state.questionState == 1 && remainingTime > 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"violet\"\n        }),\n        content: React.createElement(\"span\", null, React.createElement(\"span\", null, \"Remaining time - \"), React.createElement(Countdown, {\n          date: _Date$now() + remainingTime\n        })),\n        position: \"bottom right\",\n        inverted: true\n      }) : this.state.questionState == 1 && remainingTime == 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"red\",\n          onClick: this.rewardPhase\n        }),\n        content: \"Reward\",\n        position: \"bottom right\",\n        inverted: true\n      }) : this.state.questionState == 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"red\",\n          disabled: true\n        }),\n        position: \"bottom right\",\n        inverted: true\n      }) : React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"red\",\n          disabled: true\n        }),\n        position: \"bottom right\",\n        inverted: true\n      }))))));\n    }\n  }, {\n    key: \"renderAnswers\",\n    value: function renderAnswers() {\n      var _this2 = this;\n\n      var answers = this.state.answerList;\n      answers = sortingAnswers(answers, this.state.sorted); // Answering Phase no answers are shown\n\n      if (this.state.questionState != 0) {\n        return answers.map(function (answer, index) {\n          var answeredTime = moment.unix(answer[5]).format('Do MMMM YYYY, h:mm a');\n          var id = index % 70;\n          return React.createElement(Comment, {\n            key: index\n          }, React.createElement(Comment.Avatar, {\n            src: _this2.state.avatarListIcon[id],\n            style: {\n              backgroundColor: '#8D8741'\n            }\n          }), React.createElement(Comment.Content, null, React.createElement(Comment.Author, {\n            as: \"a\"\n          }, answer[2]), React.createElement(Comment.Metadata, null, React.createElement(\"div\", null, answeredTime)), React.createElement(\"br\", null), answer[1] ? React.createElement(\"b\", null, React.createElement(\"font\", {\n            color: \"red\"\n          }, React.createElement(Icon, {\n            name: \"certificate\"\n          }), \"Rewarded\")) : null, _this2.state.questionState == 2 ? React.createElement(Comment.Metadata, null, React.createElement(\"div\", null, React.createElement(Icon, {\n            name: \"thumbs up\"\n          }), answer[4])) : React.createElement(Comment.Metadata, null, React.createElement(\"div\", null, React.createElement(Icon, {\n            name: \"thumbs up\"\n          }), \"0\")), React.createElement(Comment.Text, null, React.createElement(Context, {\n            input: \"tex\",\n            onLoad: function onLoad() {\n              return console.log(\"Loaded MathJax script!\");\n            },\n            onError: function onError(MathJax, error) {\n              console.warn(error);\n              console.log(\"Encountered a MathJax error, re-attempting a typeset!\");\n              MathJax.Hub.Queue(MathJax.Hub.Typeset());\n            },\n            options: {\n              asciimath2jax: {\n                useMathMLspacing: true,\n                delimiters: [[\"$$\", \"$$\"]],\n                preview: \"none\"\n              }\n            }\n          }, React.createElement(Text, {\n            text: answer[0]\n          })), answer[7].map(function (imageName, index) {\n            return React.createElement(\"div\", {\n              style: {\n                marginBottom: '10px'\n              },\n              key: index\n            }, React.createElement(Image, {\n              src: \"https://ipfs.io/ipfs/\" + answer[8][index],\n              centered: true\n            }));\n          })), React.createElement(Comment.Actions, null, React.createElement(Comment.Action, null, React.createElement(Button, {\n            style: {\n              float: 'right',\n              verticalAlign: 'middle'\n            },\n            icon: \"thumbs up\",\n            onClick: function onClick() {\n              return _this2.approveAnswer(answer[2]);\n            },\n            size: \"tiny\",\n            content: \"Approve Answer\",\n            color: \"green\"\n          })))));\n        });\n      }\n    }\n  }, {\n    key: \"renderFiles\",\n    value: function renderFiles() {\n      var fileHashes = this.state.summary[5];\n      var fileNames = this.state.summary[6];\n\n      if (fileHashes.length != 0) {\n        return React.createElement(Segment, {\n          placeholder: true\n        }, React.createElement(\"center\", null, React.createElement(\"p\", null, \"Image(s) Uploaded\"), fileNames.map(function (fileName, index) {\n          return React.createElement(\"div\", {\n            style: {\n              marginBottom: '10px'\n            },\n            key: index\n          }, React.createElement(Image, {\n            src: \"https://ipfs.io/ipfs/\" + fileHashes[index],\n            size: \"massive\"\n          }), React.createElement(Divider, {\n            hidden: true\n          }), React.createElement(\"p\", null, \" To download: \"), React.createElement(Label, {\n            as: \"a\",\n            size: \"big\",\n            href: \"https://ipfs.io/ipfs/\" + fileHashes[index]\n          }, React.createElement(Icon, {\n            name: \"download\"\n          }), fileName));\n        })));\n      }\n    }\n  }, {\n    key: \"renderAnswersForm\",\n    value: function renderAnswersForm() {\n      var _this3 = this;\n\n      var files_array = this.state.files_array;\n      var elmFiles = null;\n\n      if (files_array !== null) {\n        elmFiles = files_array.map(function (item, index) {\n          return React.createElement(Label, {\n            as: \"a\",\n            key: index,\n            size: \"big\"\n          }, item.name, React.createElement(Icon, {\n            name: \"delete\",\n            onClick: function onClick() {\n              return _this3.onFileRemoved(item);\n            }\n          }));\n        });\n      }\n\n      return React.createElement(Form, {\n        error: !!this.state.errorMessage\n      }, React.createElement(Form.TextArea, {\n        placeholder: \"Enter Answers\",\n        value: this.state.answer,\n        onChange: function onChange(event) {\n          return _this3.setState({\n            answer: event.target.value\n          });\n        }\n      }), React.createElement(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.errorMessage\n      }), React.createElement(Form.Field, null, this.renderFilesUpload(elmFiles)), React.createElement(Modal, {\n        open: this.state.loading,\n        trigger: this.state.questionState == 1 ? React.createElement(Button, {\n          content: \"Submit Answers\",\n          disabled: true,\n          labelPosition: \"left\",\n          icon: \"edit\",\n          primary: true\n        }) : React.createElement(Button, {\n          content: \"Submit Answers\",\n          onClick: this.onSubmitAnswer,\n          loading: this.state.loading,\n          labelPosition: \"left\",\n          icon: \"edit\",\n          primary: true\n        }),\n        basic: true,\n        size: \"small\"\n      }, React.createElement(Header, {\n        content: \"Posting New Answers\"\n      }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"Please wait patiently as the system is submitting your answer to the blockchain.\"), React.createElement(Loader, {\n        active: true,\n        inline: \"centered\"\n      }, \"Loading\"))));\n    }\n  }, {\n    key: \"renderFilesUpload\",\n    value: function renderFilesUpload(files) {\n      var _this4 = this;\n\n      var files_array = this.state.files_array;\n\n      if (this.state.files_array.length == 0) {\n        return React.createElement(Container, null, React.createElement(\"input\", {\n          style: {\n            display: 'none'\n          },\n          type: \"file\",\n          onChange: function onChange() {\n            return _this4.onFileSelected();\n          },\n          ref: function ref(fileInput) {\n            return _this4.fileInput = fileInput;\n          }\n        }), this.state.questionState == 1 ? React.createElement(Button, {\n          content: \"Upload Image\",\n          disabled: true,\n          primary: true\n        }) : React.createElement(Button, {\n          primary: true,\n          onClick: function onClick() {\n            return _this4.fileInput.click();\n          },\n          loading: this.state.fileLoading\n        }, \"Upload Image\"));\n      } else {\n        return React.createElement(Segment, {\n          placeholder: true\n        }, React.createElement(\"center\", null, React.createElement(\"div\", {\n          style: {\n            marginBottom: '20px'\n          }\n        }, files), React.createElement(\"input\", {\n          style: {\n            display: 'none'\n          },\n          type: \"file\",\n          onChange: function onChange() {\n            return _this4.onFileSelected();\n          },\n          ref: function ref(fileInput) {\n            return _this4.fileInput = fileInput;\n          }\n        }), React.createElement(Button, {\n          primary: true,\n          onClick: function onClick() {\n            return _this4.fileInput.click();\n          },\n          loading: this.state.fileLoading\n        }, \"Upload Files\")));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      if (this.state.login) {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(Container, null, React.createElement(Divider, {\n          hidden: true\n        }), this.renderQuestion(), React.createElement(Divider, {\n          hidden: true\n        }), this.renderFiles(), React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"Submit Your Answers Here\"), React.createElement(Container, null, React.createElement(\"p\", null, React.createElement(\"b\", null, \"Note:\"), \" To include math equations, delimit the latex format with $$.\"), React.createElement(\"a\", {\n          style: {\n            display: \"table-cell\"\n          },\n          href: \"https://www.codecogs.com/latex/eqneditor.php\",\n          target: \"_blank\"\n        }, \"Link to Supported Latex Editor\")), this.state.questionState == 1 ? null : this.renderAnswersForm(), React.createElement(Button, {\n          icon: this.state.sorted ? \"sort numeric down\" : \"sort numeric up\",\n          onClick: function onClick() {\n            _this5.setState({\n              sorted: !_this5.state.sorted\n            });\n          },\n          floated: \"right\",\n          size: \"mini\"\n        }), React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"Answer(s) Submitted: \", this.state.answerList.length), React.createElement(Divider, null), React.createElement(Comment.Group, {\n          size: \"large\"\n        }, this.renderAnswers()), React.createElement(ErrorModal, {\n          error: this.state.voteError,\n          title: 'Cannot Approve Own Answers',\n          content: \"You have selected to approve the answer you have provided. Please only approve answers provided by others.\",\n          questionAddress: this.state.questionAddress,\n          stateChange: function stateChange() {\n            _this5.setState({\n              voteError: false\n            });\n          }\n        }), React.createElement(ErrorModal, {\n          error: this.state.ownerError,\n          title: 'Only Available For Owner Of Question',\n          content: \"You cannot change the state of the question as you are not the owner.\",\n          questionAddress: this.state.questionAddress,\n          stateChange: function stateChange() {\n            _this5.setState({\n              ownerError: false\n            });\n          }\n        }), React.createElement(ErrorModal, {\n          error: this.state.voteMultipleError,\n          title: 'Answer Already Approved',\n          content: \"You cannot approve the same answer more than once. Please approve another answer.\",\n          questionAddress: this.state.questionAddress,\n          stateChange: function stateChange() {\n            _this5.setState({\n              voteMultipleError: false\n            });\n          }\n        }), React.createElement(ErrorModal, {\n          error: this.state.voteMultipleError,\n          title: 'Answer Already Approved',\n          content: \"You cannot approve the same answer more than once. Please approve another answer.\",\n          questionAddress: this.state.questionAddress,\n          stateChange: function stateChange() {\n            _this5.setState({\n              voteMultipleError: false\n            });\n          }\n        }), React.createElement(LoadingModal, {\n          trigger: this.state.changeToVoting,\n          title: 'Changing Question State to Voting Phase',\n          content: \"Please wait patiently as the system changes your question state.\",\n          loader: \"Changing Question State\"\n        }), React.createElement(LoadingModal, {\n          trigger: this.state.changeToRewarded,\n          title: 'Changing Question State to Rewarded Phase',\n          content: \"Please wait patiently as the system changes your question state.\",\n          loader: \"Changing Question State\"\n        }), React.createElement(LoadingModal, {\n          trigger: this.state.timeExtension,\n          title: 'Extending Question Deadline',\n          content: \"Please wait patiently as the system extends the duration of your question.\",\n          loader: \"Extending Deadline\"\n        }), React.createElement(LoadingModal, {\n          trigger: this.state.changeReward,\n          title: 'Increasing Reward',\n          content: \"Please wait patiently as the system increases the reward of your question.\",\n          loader: \"Increasing Reward\"\n        }), React.createElement(LoadingModal, {\n          trigger: this.state.voting,\n          title: 'Approving Answer',\n          content: \"Please wait patiently as the system submits your approval.\",\n          loader: \"Approving\"\n        }), React.createElement(LoadingModal, {\n          trigger: this.state.fixError,\n          title: 'Fixing Balance Error',\n          content: \"Please wait as the system fixes the balance error of your question.\",\n          loader: \"Fixing Balance\"\n        }), React.createElement(TimeOutModal, {\n          timeout: this.state.timeout\n        })));\n      } else {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(AccountIssueModal, {\n          loading: this.state.resourceLoading,\n          login: this.state.login\n        }));\n      }\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee13(props) {\n        var questionAddress;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                // Retrieve question data\n                questionAddress = props.query.value;\n                return _context13.abrupt(\"return\", {\n                  questionAddress: questionAddress,\n                  isLogin: cookies(props).login || '',\n                  account: cookies(props).wallet || ''\n                });\n\n              case 2:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13);\n      }));\n\n      function getInitialProps(_x3) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return QuestionRow;\n}(Component);\n\nexport default QuestionRow;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion_1.0\\pages\\showQuestion.js"],"names":["moment","React","Component","Countdown","Context","Text","Table","Popup","Button","Container","Form","Header","Comment","Segment","Message","Divider","Icon","Label","Modal","Loader","Image","Grid","AccountIssueModal","TimeOutModal","ErrorModal","LoadingModal","web3","Question","EthQuestionToken","credentials","Profile","factory","Layout","Footer","Link","Router","getIpfsHash","logging","checkFieldEmpty","sortingAnswers","cookies","QuestionRow","props","state","questionState","eth","getAccounts","accounts","question","questionAddress","account","methods","getCreator","call","setState","changeToVoting","logTransaction","summary","changeQuestionPhase","send","from","gasPrice","pushRoute","ownerError","message","timeout","errorMessage","changeToRewarded","rewardMessage","voteMessage","refundMessage","shareTokenAt","_address","fixError","balanceOf","balance","transfer","timeExtension","changeReward","increaseReward","loading","answer","checkIfAnswered","createAnswer","fileHashes_array","fileNames_array","answerer","voting","getProfile","profile","getAnswerList","answerList","i","length","index","checkVoter","approveAnswer","voteMultipleError","voteError","reader","FileReader","file","fileInput","files","fileLoading","Blob","files_array","push","name","console","log","onloadend","fileUrl","result","buffer","Buffer","fileHash","readAsDataURL","splice","time","avatarListIcon","votingTime","login","resourceLoading","accountType","balanceError","sorted","isLogin","profileAddress","getAccountType","fetchQuestionData","prevProps","error","getSummary","getTime","iconList","map","item","reverse","tagList","tagSize","tagColours","tag","id","encodeURIComponent","currentTime","Date","maxDuration","toFixed","toString","publishTime","unix","format","publishTimeMs","valueOf","maxDurationMs","votingTimeMs","remainingTime","fontSize","lineHeight","MathJax","warn","Hub","Queue","Typeset","asciimath2jax","useMathMLspacing","delimiters","preview","renderTag","float","verticalAlign","fixBalance","votePhase","rewardPhase","answers","answeredTime","backgroundColor","imageName","marginBottom","fileHashes","fileNames","fileName","elmFiles","onFileRemoved","event","target","value","renderFilesUpload","onSubmitAnswer","display","onFileSelected","click","renderQuestion","renderFiles","renderAnswersForm","renderAnswers","query","wallet"],"mappings":"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","sourcesContent":["import moment from 'moment';\r\nimport React, { Component } from 'react';\r\nimport Countdown from 'react-countdown-now';\r\nimport { Context, Text } from 'react-mathjax2';\r\nimport { Table, Popup, Button, Container, Form, Header, Comment,\r\n  Segment, Message, Divider, Icon, Label, Modal, Loader, Image, Grid } from 'semantic-ui-react';\r\nimport AccountIssueModal from '../components/AccountIssueModal';\r\nimport TimeOutModal from '../components/TimeOutModal';\r\nimport ErrorModal from '../components/ErrorModal';\r\nimport LoadingModal from '../components/LoadingModal';\r\nimport web3 from '../ethereum/web3';\r\nimport Question from '../ethereum/question';\r\nimport EthQuestionToken from '../ethereum/token';\r\nimport credentials from '../ethereum/credentials';\r\nimport Profile from '../ethereum/profile'\r\nimport factory from '../ethereum/factory';\r\nimport Layout from '../components/Layout';\r\nimport Footer from '../components/Footer';\r\nimport { Link, Router } from '../routes';\r\nimport { getIpfsHash } from '../utils/ipfs';\r\nimport { logging, checkFieldEmpty, sortingAnswers } from \"../utils/functions\";\r\nimport cookies from 'next-cookies';\r\n\r\nclass QuestionRow extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      questionAddress: '',\r\n      questionState: '',\r\n      summary: [],\r\n      time: '',\r\n      answerList: [],\r\n      avatarListIcon: [],\r\n      votingTime:'',\r\n      voting: false,\r\n      answer:'',\r\n      errorMessage: '',\r\n      loading: false,\r\n      voteError: false,\r\n      ownerError: false,\r\n      voteMultipleError: false,\r\n      changeToVoting: false,\r\n      changeToRewarded: false,\r\n      timeExtension: false,\r\n      changeReward: false,\r\n      fileLoading: false,\r\n      buffer: null,\r\n      files_array: [],\r\n      fileHashes_array: [],\r\n      fileNames_array: [],\r\n      login: false,\r\n      timeout: false,\r\n      resourceLoading: true,\r\n      accountType: null,\r\n      balanceError: false,\r\n      fixError: false,\r\n      sorted: false\r\n    };\r\n  }\r\n\r\n  static async getInitialProps(props) {\r\n    // Retrieve question data\r\n    let questionAddress = props.query.value;\r\n    return { questionAddress, isLogin: cookies(props).login || '', account: cookies(props).wallet || '' };\r\n  };\r\n\r\n  async componentDidMount() {\r\n    if (typeof web3 === 'undefined') {\r\n      this.setState({ resourceLoading: false })\r\n      return\r\n    }\r\n    let login = false;\r\n    if (this.props.isLogin) {\r\n      login = true;\r\n      // Get Account Type\r\n      const account = this.props.account;\r\n      let profileAddress = await factory.methods.getProfile(account).call();\r\n      let profile = Profile(profileAddress);\r\n      let accountType = await profile.methods.getAccountType().call();\r\n      accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"\r\n      await this.fetchQuestionData();\r\n      this.setState({ login: login,\r\n                      accountType: accountType });\r\n    }\r\n    this.setState({ resourceLoading: false })\r\n  }\r\n\r\n  async componentDidUpdate(prevProps) {\r\n    if(this.props != prevProps) {\r\n      this.fetchQuestionData()\r\n    }\r\n  }\r\n\r\n  async fetchQuestionData() {\r\n    let error = false;\r\n    const questionAddress = this.props.questionAddress;\r\n    const question = Question(questionAddress);\r\n    // Fetch Question Information\r\n    const summary = await question.methods.getSummary().call();\r\n    const time = await question.methods.getTime().call();\r\n    const answerList = await question.methods.getAnswerList().call();\r\n    // Fetch Avatar Icons\r\n    const iconList = ['alligator', 'anteater', 'armadillo', 'auroch', 'axolotl',\r\n        'badger', 'bat', 'beaver', 'buffalo', 'camel', 'capybara',\r\n        'chameleon', 'cheetah', 'chinchilla', 'chipmunk', 'chupacabra',\r\n        'cormorant', 'coyote', 'crow', 'dingo', 'dinosaur', 'dolphin',\r\n        'duck', 'elephant', 'ferret', 'fox', 'frog', 'giraffe', 'gopher',\r\n        'grizzly', 'hedgehog', 'hippo', 'hyena', 'ibex', 'ifrit', 'iguana',\r\n        'jackal', 'kangaroo', 'koala', 'kraken', 'lemur', 'leopard',\r\n        'liger', 'llama', 'manatee', 'mink', 'monkey', 'moose', 'narwhal',\r\n        'orangutan', 'otter', 'panda', 'penguin', 'platypus',\r\n        'pumpkin', 'python', 'quagga', 'rabbit', 'raccoon', 'rhino',\r\n        'sheep', 'shrew', 'skunk', 'squirrel', 'tiger', 'turtle', 'walrus',\r\n        'wolf', 'wolverine', 'wombat'];\r\n    const avatarListIcon = iconList.map((item)=>{\r\n        return 'https://ssl.gstatic.com/docs/common/profile/' + item + '_lg.png';\r\n    });\r\n    // Check for balance error\r\n    await EthQuestionToken.methods.balanceOf(questionAddress).call() != summary[2] ? error = true : error = false\r\n    this.setState({\r\n      questionAddress: questionAddress,\r\n      questionState: summary[4],\r\n      summary: summary,\r\n      time: time,\r\n      avatarListIcon: avatarListIcon,\r\n      answerList: answerList.reverse(),\r\n      votingTime: time[3],\r\n      balanceError: error\r\n    });\r\n  }\r\n\r\n  votePhase = async () => {\r\n    try {\r\n      if(this.state.questionState == 0) {\r\n        const accounts = await web3.eth.getAccounts();\r\n        const question = Question(this.state.questionAddress);\r\n        // Ensure that only Creator of Question can access this function\r\n        const account = this.props.account;\r\n        if (account == await question.methods.getCreator().call()){\r\n          this.setState({ changeToVoting: true});\r\n          let logTransaction = logging(\"Change to Voting Phase for Question Titled: \" + this.state.summary[0]);\r\n          await factory.methods.changeQuestionPhase(this.state.questionAddress, logTransaction).send(\r\n            { from: account,\r\n              gasPrice: '0'\r\n            });\r\n          Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n        } else {\r\n          this.setState({ ownerError: true});\r\n        }\r\n      }\r\n    } catch (err) {\r\n        if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n          this.setState({ timeout: true });\r\n        }\r\n        this.setState({ errorMessage: err.message });\r\n    }\r\n    this.setState({ changeToVoting: false});\r\n  }\r\n\r\n  rewardPhase = async () => {\r\n    try {\r\n      if(this.state.questionState == 1) {\r\n        const accounts = await web3.eth.getAccounts();\r\n        const question = Question(this.state.questionAddress);\r\n        // Ensure that only Creator of Question can access this function\r\n        const account = this.props.account;\r\n        if (account == await question.methods.getCreator().call()){\r\n          this.setState({ changeToRewarded: true});\r\n          let logTransaction = logging(\"Awarded \" + this.state.summary[2]*1e-4 + \" EQT(s) as reward for Question Titled: \" + this.state.summary[0]);\r\n          let rewardMessage = logging(\"Rewarded \" + this.state.summary[2]*1e-4 + \" EQT(s) for most approved answer\");\r\n          let voteMessage = logging(\"Rewarded EQT(s) for approving the most approved answer\");\r\n          let refundMessage = logging(\"Refunded \" + this.state.summary[2]*1e-4 + \" EQT(s) as there are no answers or answers with approvals\");\r\n          await factory.methods\r\n          .shareTokenAt(this.state.questionAddress, logTransaction, rewardMessage, voteMessage, refundMessage, EthQuestionToken._address)\r\n          .send({\r\n              from: account,\r\n              gasPrice: '0'\r\n          });\r\n          Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n        } else {\r\n          this.setState({ ownerError: true});\r\n        }\r\n      }\r\n    } catch (err) {\r\n      if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n        this.setState({ timeout: true });\r\n      }\r\n      this.setState({ errorMessage: err.message });\r\n    }\r\n    this.setState({ changeToRewarded: false});\r\n  };\r\n\r\n  fixBalance = async () => {\r\n    try {\r\n      const accounts = await web3.eth.getAccounts();\r\n      const question = Question(this.state.questionAddress);\r\n      // Ensure that only Creator of Question can access this function\r\n      const account = this.props.account;\r\n      if (account == await question.methods.getCreator().call()){\r\n        this.setState({ fixError: true});\r\n        let balance = this.state.summary[2] - await EthQuestionToken.methods.balanceOf(this.state.questionAddress).call()\r\n        await EthQuestionToken.methods.transfer(this.state.questionAddress, balance)\r\n        .send({\r\n          from: account,\r\n          gasPrice: '0'\r\n        })\r\n        Router.pushRoute(`/home`)\r\n      } else {\r\n        this.setState({ ownerError: true});\r\n      }\r\n    } catch (err) {\r\n      if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n        this.setState({ timeout: true });\r\n      }\r\n      this.setState({ errorMessage: err.message });\r\n    }\r\n    this.setState({ fixError: false})\r\n  }\r\n\r\n  timeExtension = async () => {\r\n    try {\r\n      const accounts = await web3.eth.getAccounts();\r\n      const question = Question(this.state.questionAddress);\r\n      // Ensure that only Creator of Question can access this function\r\n      const account = this.props.account;\r\n      if (account == await question.methods.getCreator().call()){\r\n        this.setState({ timeExtension: true});\r\n        let logTransaction = logging(\"Duration Extended for Question Titled: \" + this.state.summary[0]);\r\n        await factory.methods.timeExtension(this.state.questionAddress, logTransaction).send({\r\n          from: account,\r\n          gasPrice: '0'\r\n        });\r\n        Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n      } else {\r\n        this.setState({ ownerError: true});\r\n      }\r\n    } catch (err) {\r\n      if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n        this.setState({ timeExtension: false });\r\n        this.setState({ timeout: true });\r\n      }\r\n      this.setState({ errorMessage: err.message });\r\n    }\r\n    this.setState({ timeExtension: false})\r\n  }\r\n\r\n  increaseReward = async () => {\r\n    try {\r\n      const accounts = await web3.eth.getAccounts();\r\n      const question = Question(this.state.questionAddress);\r\n      // Ensure that only Creator of Question can access this function\r\n      const account = this.props.account;\r\n      if (account == await question.methods.getCreator().call()){\r\n        this.setState({ changeReward: true});\r\n        let logTransaction = logging(\"Increase Reward by 1 EQT(s) for Question Titled: \" + this.state.summary[0]);\r\n        await factory.methods.increaseReward(this.state.questionAddress, logTransaction, EthQuestionToken._address).send({\r\n          from: account,\r\n          gasPrice: '0'\r\n        });\r\n        await EthQuestionToken.methods.transfer(this.state.questionAddress, 10e3).send({\r\n          from: account,\r\n          gasPrice: '0'\r\n        })\r\n        Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n      } else {\r\n        this.setState({ ownerError: true});\r\n      }\r\n    } catch (err) {\r\n      if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n        this.setState({ timeout: true });\r\n      }\r\n      this.setState({ errorMessage: err.message });\r\n    }\r\n    this.setState({ changeReward: false})\r\n  }\r\n\r\n  onSubmitAnswer = async () => {\r\n    this.setState({ loading: true, errorMessage: '' });\r\n    if (checkFieldEmpty(this.state.answer)){\r\n      try {\r\n          const question = Question(this.state.questionAddress);\r\n          // Ensure that creator of question cannot provide answers\r\n          const account = this.props.account;\r\n          if (account != await question.methods.getCreator().call() && !await question.methods.checkIfAnswered(account).call()) {\r\n            // Logs the transactions\r\n            let logTransaction = logging(\"Submitted Answer for Question Titled: \" + this.state.summary[0]);\r\n            // Create new answer\r\n            await factory.methods\r\n            .createAnswer(this.state.questionAddress, this.state.answer, this.state.fileHashes_array, this.state.fileNames_array, logTransaction)\r\n            .send({\r\n                from: account,\r\n                gasPrice: '0'\r\n            });\r\n            Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n          } else {\r\n            this.setState({ loading: false, errorMessage: \"You cannot provide answer for your own question or already provided answer.\"})\r\n          }\r\n      } catch (err) {\r\n          if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n            this.setState({ timeout: true });\r\n          }\r\n          this.setState({ errorMessage: err.message });\r\n      }\r\n    } else {\r\n      this.setState({loading: false, errorMessage: \"Answer Field Empty\"})\r\n    }\r\n    this.setState({ loading: false, answer:'' });\r\n  };\r\n\r\n  approveAnswer = async(answerer) => {\r\n    this.setState({ voting: true })\r\n    const account = this.props.account;\r\n    const question = await Question(this.state.questionAddress);\r\n    const profile = await factory.methods.getProfile(account).call();\r\n    const answerList = await question.methods.getAnswerList().call();\r\n    let index;\r\n    for (let i=0; i<answerList.length; i++) {\r\n      if (answerList[i][2] == answerer) {\r\n        index = i;\r\n      }\r\n    }\r\n    //Ensure that voter is not the answerer\r\n    try {\r\n      if (account != answerer){\r\n        // Cannot vote twice\r\n        if (! await question.methods.checkVoter(index, profile).call()) {\r\n          //No cost for voting after the voting phase\r\n          if (await question.methods.state().call() != 2) {\r\n            await EthQuestionToken.methods.transfer(await this.state.questionAddress, 10e3)\r\n            .send({\r\n                from: account,\r\n                gasPrice: '0'\r\n            })\r\n          }\r\n          let logTransaction = logging(\"Approved An Answer for Question Titled: \" + this.state.summary[0]);\r\n          await factory.methods\r\n          .approveAnswer(this.state.questionAddress, index, logTransaction)\r\n          .send({\r\n              from: account,\r\n              gasPrice: '0'\r\n          });\r\n          Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n        } else {\r\n          this.setState({ voteMultipleError: true});\r\n        }\r\n      } else {\r\n        this.setState({ voteError: true});\r\n      }\r\n    } catch (err) {\r\n      if (err.message == \"Returned error: authentication needed: password or unlock\") {\r\n        this.setState({ timeout: true });\r\n      }\r\n      this.setState({ errorMessage: err.message });\r\n    }\r\n    this.setState({ voting: false })\r\n  };\r\n\r\n  // Select a file to upload\r\n  onFileSelected = async () => {\r\n      // Access JavaScript FileReader() method for conversion to buffer\r\n      const reader = new FileReader();\r\n      const file = this.fileInput.files[0];\r\n      this.setState({fileLoading: true});\r\n      if (file instanceof Blob ) {\r\n          let {files_array, fileNames_array, fileHashes_array} = this.state;\r\n          files_array.push(file);\r\n          fileNames_array.push(file.name);\r\n          this.setState({\r\n              files_array: files_array,\r\n              fileNames_array: fileNames_array\r\n          });\r\n          console.log(\"fileNames_array: \", fileNames_array);\r\n          reader.onloadend = async () => {\r\n              await this.setState({\r\n                  fileUrl: reader.result,\r\n                  fileLoading: true,\r\n                  buffer: Buffer.from(reader.result) // File is converted to a buffer for upload to IPFS\r\n              });\r\n              const fileHash = this.state.buffer ? (await getIpfsHash(file)) : '0';\r\n              fileHashes_array.push(fileHash);\r\n              this.setState({ fileHashes_array: fileHashes_array });\r\n              console.log(\"fileHashes_array: \", fileHashes_array);\r\n              this.setState({fileLoading: false});\r\n          }\r\n          reader.readAsDataURL(file);\r\n      }\r\n  }\r\n\r\n  // Remove a previously selected file to upload\r\n  onFileRemoved = (file) => {\r\n      var i = 0;\r\n      let {files_array, fileHashes_array, fileNames_array} = this.state;\r\n      console.log('file: ', file);\r\n      for (i = 0 ; i < files_array.length ; i++) {\r\n          if (file === files_array[i]) {\r\n              files_array.splice(i, 1);\r\n              fileNames_array.splice(i, 1);\r\n              fileHashes_array.splice(i, 1);\r\n              break;\r\n          }\r\n      }\r\n      this.setState({\r\n          files_array: files_array,\r\n          fileNames_array: fileNames_array,\r\n          fileHashes_array: fileHashes_array\r\n      });\r\n      console.log('fileNames_array', fileNames_array);\r\n      console.log(\"fileHashes_array: \", fileHashes_array);\r\n  }\r\n\r\n  // Render each tag individually for each question\r\n  renderTag(tagList, tagSize) {\r\n    const tagColours = [\"red\", \"olive\", \"blue\", \"teal\", \"green\"];\r\n    return tagList.map((tag, index) => {\r\n      let id = index % 5;\r\n      return(\r\n        <Label as='a' onClick={() => Router.pushRoute(`/${'search/'+encodeURIComponent(tag)}`)}\r\n          tag size={tagSize} key={index} color={tagColours[id]}>\r\n          {tag}\r\n        </Label>\r\n      )\r\n    });\r\n  }\r\n\r\n  renderQuestion() {\r\n      const summary = this.state.summary;\r\n      const time = this.state.time;\r\n      var currentTime = (new Date).getTime();\r\n      var maxDuration =(parseFloat(summary[3]) / 60 / 60).toFixed(2).toString().toString();\r\n      var publishTime = moment.unix(time[0]).format('dddd, Do MMMM YYYY, h:mm:ss a');\r\n      var votingTime = moment.unix(this.state.votingTime).format('dddd, Do MMMM YYYY, h:mm:ss a');\r\n      var publishTimeMs = moment.unix(time[0]).valueOf();\r\n      var maxDurationMs = moment.unix(time[2]).valueOf();\r\n      var votingTimeMs = moment.unix(this.state.votingTime).valueOf();\r\n\r\n      let remainingTime = 0;\r\n      if (this.state.questionState == 0) {\r\n        remainingTime = publishTimeMs + maxDurationMs - currentTime;\r\n        if (remainingTime < 0) {\r\n            remainingTime = 0;\r\n        }\r\n      } else {\r\n        remainingTime = votingTimeMs + maxDurationMs - currentTime;\r\n        if (remainingTime < 0) {\r\n            remainingTime = 0;\r\n        }\r\n      }\r\n\r\n      return (\r\n        <React.Fragment>\r\n          <Table definition>\r\n            <Table.Body>\r\n              <Table.Row>\r\n                <Table.Cell width={2}>Question Title</Table.Cell>\r\n                <Table.Cell style={{fontSize: '20px', lineHeight: '1.5'}}>\r\n                    {summary[0]}\r\n                </Table.Cell>\r\n              </Table.Row>\r\n              <Table.Row>\r\n                <Table.Cell width={2}>Description</Table.Cell>\r\n                <Table.Cell style={{fontSize: '20px', lineHeight: '1.5'}}>\r\n                    <Context\r\n                        input='tex'\r\n                        onLoad={ () => console.log(\"Loaded MathJax script!\") }\r\n                        onError={ (MathJax, error) => {\r\n                            console.warn(error);\r\n                            console.log(\"Encountered a MathJax error, re-attempting a typeset!\");\r\n                            MathJax.Hub.Queue(\r\n                              MathJax.Hub.Typeset()\r\n                            );\r\n                        } }\r\n                        options={{\r\n                            asciimath2jax: {\r\n                                 useMathMLspacing: true,\r\n                                 delimiters: [[\"$$\",\"$$\"]],\r\n                                 preview: \"none\",\r\n                            }\r\n                        }}>\r\n                        <Text text={summary[1]}/>\r\n                    </Context>\r\n                  </Table.Cell>\r\n                </Table.Row>\r\n                <Table.Row>\r\n                  <Table.Cell width={2}>Tags</Table.Cell>\r\n                  <Table.Cell>\r\n                    {this.renderTag(summary[8], \"small\")}\r\n                  </Table.Cell>\r\n                </Table.Row>\r\n                <Table.Row>\r\n                  <Table.Cell>Reward (EQT)</Table.Cell>\r\n                  <Table.Cell style={{fontSize: '20px'}}>{summary[2]*1e-4}\r\n                  {this.state.questionState == 0\r\n                      ?  <Popup\r\n                          trigger={\r\n                              <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                      icon='ethereum'\r\n                                      color=\"black\"\r\n                                      onClick={this.increaseReward}\r\n                                        />\r\n                          }\r\n                          content={\"Increase Reward\"}\r\n                          position='bottom right'\r\n                          inverted />\r\n                      :  <Popup\r\n                          trigger={\r\n                              <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                      icon='ethereum'\r\n                                      color=\"black\"\r\n                                      disabled\r\n                              />\r\n                          }\r\n                          position='bottom right'\r\n                          inverted />\r\n                  }\r\n                  </Table.Cell>\r\n                </Table.Row>\r\n                <Table.Row>\r\n                  <Table.Cell>Publish Time</Table.Cell>\r\n                  <Table.Cell style={{fontSize: '20px'}}>{publishTime}</Table.Cell>\r\n                </Table.Row>\r\n                <Table.Row>\r\n                  <Table.Cell>Answering Duration (hours)</Table.Cell>\r\n                  <Table.Cell style={{fontSize: '20px'}}>\r\n                      <span style={{verticalAlign: 'middle', lineHeight: '33px'}}>\r\n                          {maxDuration}\r\n                      </span>\r\n                      {this.state.questionState == 0 && remainingTime > 0\r\n                          ? <Popup\r\n                              trigger={\r\n                                  <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                          icon='clock'\r\n                                          color=\"violet\"\r\n                                  />}\r\n                              content={\r\n                                  <span>\r\n                                  <span>Remaining time - </span>\r\n                                  <Countdown date={Date.now() + remainingTime}>\r\n                                  </Countdown>\r\n                              </span>}\r\n                              position='bottom right'\r\n                              inverted />\r\n                          : this.state.questionState == 0 && remainingTime == 0\r\n                          ? <Popup trigger={<Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                    icon='clock'\r\n                                                    color=\"red\"/>}\r\n                                  flowing hoverable>\r\n                              <Grid centered divided columns={2}>\r\n                                <Grid.Column textAlign='center'>\r\n                                  <p>Extends the validity of question by 1 hour</p>\r\n                                  <Button onClick={this.timeExtension}>Extend Deadline</Button>\r\n                                </Grid.Column>\r\n                                {this.state.balanceError == true ?\r\n                                  <Grid.Column textAlign='center'>\r\n                                    <p>Reward Balance Error</p>\r\n                                    <Button onClick={this.fixBalance}>Fix Balance</Button>\r\n                                  </Grid.Column> :\r\n                                  <Grid.Column textAlign='center'>\r\n                                    <p>Proceed to the voting phase</p>\r\n                                    <Button onClick={this.votePhase}>Voting Phase</Button>\r\n                                  </Grid.Column> }\r\n                              </Grid>\r\n                            </Popup>\r\n                          : <Popup\r\n                              trigger={\r\n                                  <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                          icon='clock'\r\n                                          color=\"red\"\r\n                                          disabled\r\n                                  />\r\n                              }\r\n                              position='bottom right'\r\n                              inverted />\r\n                        }\r\n                    </Table.Cell>\r\n                  </Table.Row>\r\n                  <Table.Row>\r\n                    <Table.Cell>Voting Duration (hours)</Table.Cell>\r\n                    <Table.Cell style={{fontSize: '20px'}}>\r\n                      <span style={{verticalAlign: 'middle', lineHeight: '33px'}}>\r\n                          {maxDuration}\r\n                      </span>\r\n                      {this.state.questionState == 1 && remainingTime > 0\r\n                          ? <Popup\r\n                              trigger={\r\n                                  <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                          icon='clock'\r\n                                          color=\"violet\"\r\n                                  />}\r\n                              content={\r\n                                  <span>\r\n                                  <span>Remaining time - </span>\r\n                                  <Countdown date={Date.now() + remainingTime}>\r\n                                  </Countdown>\r\n                              </span>}\r\n                              position='bottom right'\r\n                              inverted />\r\n                          : this.state.questionState == 1 && remainingTime == 0\r\n                          ? <Popup\r\n                              trigger={\r\n                                  <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                          icon='clock'\r\n                                          color=\"red\"\r\n                                          onClick={this.rewardPhase}\r\n                                            />\r\n                              }\r\n                              content={\"Reward\"}\r\n                              position='bottom right'\r\n                              inverted />\r\n                          : this.state.questionState == 0\r\n                          ? <Popup\r\n                              trigger={\r\n                                  <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                          icon='clock'\r\n                                          color=\"red\"\r\n                                          disabled\r\n                                  />\r\n                              }\r\n                              position='bottom right'\r\n                              inverted />\r\n                          : <Popup\r\n                              trigger={\r\n                                  <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                          icon='clock'\r\n                                          color=\"red\"\r\n                                          disabled\r\n                                            />\r\n                              }\r\n                              position='bottom right'\r\n                              inverted />\r\n                      }\r\n                    </Table.Cell>\r\n                </Table.Row>\r\n              </Table.Body>\r\n            </Table>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n\r\n  renderAnswers() {\r\n    let answers = this.state.answerList\r\n    answers = sortingAnswers(answers, this.state.sorted);\r\n    // Answering Phase no answers are shown\r\n    if (this.state.questionState != 0){\r\n      return answers.map((answer, index) => {\r\n          var answeredTime = moment.unix(answer[5]).format('Do MMMM YYYY, h:mm a');\r\n          var id = index % 70;\r\n          return <Comment key={index}>\r\n              <Comment.Avatar src={this.state.avatarListIcon[id]} style={{backgroundColor: '#8D8741'}}/>\r\n              <Comment.Content>\r\n                <Comment.Author as='a'>{answer[2]}</Comment.Author>\r\n                <Comment.Metadata>\r\n                  <div>{answeredTime}</div>\r\n                </Comment.Metadata>\r\n                <br/>\r\n                {answer[1] ? <b><font color='red'><Icon name='certificate'/>Rewarded</font></b> : null}\r\n                {this.state.questionState == 2\r\n                  ? <Comment.Metadata>\r\n                    <div><Icon name='thumbs up' />{answer[4]}</div>\r\n                    </Comment.Metadata>\r\n                  : <Comment.Metadata>\r\n                    <div><Icon name='thumbs up' />0</div>\r\n                    </Comment.Metadata>\r\n                }\r\n                <Comment.Text>\r\n                  <Context\r\n                      input='tex'\r\n                      onLoad={ () => console.log(\"Loaded MathJax script!\") }\r\n                      onError={ (MathJax, error) => {\r\n                          console.warn(error);\r\n                          console.log(\"Encountered a MathJax error, re-attempting a typeset!\");\r\n                          MathJax.Hub.Queue(\r\n                            MathJax.Hub.Typeset()\r\n                          );\r\n                      } }\r\n                      options={{\r\n                          asciimath2jax: {\r\n                               useMathMLspacing: true,\r\n                               delimiters: [[\"$$\",\"$$\"]],\r\n                               preview: \"none\",\r\n                          }\r\n                      }}>\r\n                      <Text text={answer[0]}/>\r\n                  </Context>\r\n                  {answer[7].map((imageName, index) =>\r\n                      <div style={{marginBottom: '10px'}} key={index}>\r\n                          <Image src={\"https://ipfs.io/ipfs/\"+answer[8][index]} centered={true}/>\r\n                      </div>\r\n                  )}\r\n                </Comment.Text>\r\n                <Comment.Actions>\r\n                  <Comment.Action>\r\n                    <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                            icon='thumbs up'\r\n                            onClick={() => this.approveAnswer(answer[2])}\r\n                            size='tiny'\r\n                            content='Approve Answer'\r\n                            color='green'\r\n                    />\r\n                      </Comment.Action>\r\n                </Comment.Actions>\r\n              </Comment.Content>\r\n            </Comment>\r\n      });\r\n    }\r\n  }\r\n\r\n  renderFiles () {\r\n    let fileHashes = this.state.summary[5];\r\n    let fileNames = this.state.summary[6];\r\n\r\n    if (fileHashes.length != 0) {\r\n        return(\r\n            <Segment placeholder>\r\n                <center>\r\n                    <p>Image(s) Uploaded</p>\r\n                    {fileNames.map((fileName, index) =>\r\n                        <div style={{marginBottom: '10px'}} key={index}>\r\n                            <Image src={\"https://ipfs.io/ipfs/\"+fileHashes[index]} size='massive'/>\r\n                            <Divider hidden/>\r\n                            <p> To download: </p>\r\n                            <Label as='a' size='big' href={\"https://ipfs.io/ipfs/\"+fileHashes[index]}>\r\n                                <Icon name='download' />\r\n                                {fileName}\r\n                            </Label>\r\n                        </div>\r\n                    )}\r\n                </center>\r\n            </Segment>\r\n        );\r\n    }\r\n  }\r\n\r\n  renderAnswersForm() {\r\n    let {files_array} = this.state;\r\n    let elmFiles = null;\r\n\r\n    if (files_array !== null) {\r\n        elmFiles = files_array.map((item, index) =>\r\n            <Label as='a' key={index} size='big'>\r\n                {item.name}\r\n                <Icon name='delete'\r\n                      onClick={() => this.onFileRemoved(item)} />\r\n            </Label>\r\n        );\r\n    }\r\n    return(\r\n      <Form error={!!this.state.errorMessage}>\r\n        <Form.TextArea\r\n          placeholder=\"Enter Answers\"\r\n          value={this.state.answer}\r\n          onChange={event => this.setState({ answer: event.target.value })}\r\n        />\r\n        <Message error header=\"Oops!\" content={this.state.errorMessage} />\r\n        <Form.Field>\r\n          {this.renderFilesUpload(elmFiles)}\r\n        </Form.Field>\r\n        <Modal open={this.state.loading} trigger={ this.state.questionState == 1 ? <Button content='Submit Answers' disabled labelPosition='left' icon='edit' primary />\r\n            : <Button content='Submit Answers' onClick={this.onSubmitAnswer} loading={this.state.loading} labelPosition='left' icon='edit' primary />} basic size='small'>\r\n          <Header content='Posting New Answers' />\r\n          <Modal.Content>\r\n            <p>\r\n              Please wait patiently as the system is submitting your answer to the blockchain.\r\n            </p>\r\n            <Loader active inline=\"centered\">\r\n              Loading\r\n            </Loader>\r\n          </Modal.Content>\r\n        </Modal>\r\n      </Form>\r\n    );\r\n  }\r\n\r\n  renderFilesUpload(files) {\r\n    let {files_array} = this.state;\r\n    if(this.state.files_array.length == 0){\r\n      return (\r\n        <Container>\r\n          <input\r\n              style={{ display: 'none' }}\r\n              type='file'\r\n              onChange={() => this.onFileSelected()}\r\n              ref={fileInput => this.fileInput = fileInput}/>\r\n          { this.state.questionState == 1 ? <Button content='Upload Image' disabled primary />\r\n              : <Button primary onClick={() => this.fileInput.click()} loading={this.state.fileLoading}>Upload Image</Button>\r\n          }\r\n        </Container>\r\n      )\r\n    } else {\r\n      return (\r\n        <Segment placeholder>\r\n          <center>\r\n              <div style={{marginBottom: '20px'}}>\r\n                  {files}\r\n              </div>\r\n              <input\r\n                  style={{ display: 'none' }}\r\n                  type='file'\r\n                  onChange={() => this.onFileSelected()}\r\n                  ref={fileInput => this.fileInput = fileInput}/>\r\n              <Button primary onClick={() => this.fileInput.click()} loading={this.state.fileLoading}>Upload Files</Button>\r\n          </center>\r\n        </Segment>\r\n      )\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (this.state.login) {\r\n      return (\r\n        <Layout accountType={this.state.accountType}>\r\n          <Container>\r\n            <Divider hidden/>\r\n            {this.renderQuestion()}\r\n            <Divider hidden/>\r\n            {this.renderFiles()}\r\n            <Header as='h2' textAlign='center'>\r\n                Submit Your Answers Here\r\n            </Header>\r\n            <Container>\r\n              <p><b>Note:</b> To include math equations, delimit the latex format with $$.</p>\r\n              <a style={{display: \"table-cell\"}} href=\"https://www.codecogs.com/latex/eqneditor.php\" target=\"_blank\">Link to Supported Latex Editor</a>\r\n              </Container>\r\n            {this.state.questionState == 1 ? null : this.renderAnswersForm()}\r\n            <Button\r\n              icon={this.state.sorted ? \"sort numeric down\" : \"sort numeric up\"}\r\n              onClick={ () => { this.setState({ sorted: !this.state.sorted }) }}\r\n              floated=\"right\"\r\n              size=\"mini\"\r\n            />\r\n            <Header as='h2' textAlign='center'>\r\n              Answer(s) Submitted: {this.state.answerList.length}\r\n            </Header>\r\n            <Divider />\r\n            <Comment.Group size='large'>\r\n            {this.renderAnswers()}\r\n            </Comment.Group>\r\n            <ErrorModal error={this.state.voteError}\r\n                        title={'Cannot Approve Own Answers'}\r\n                        content={\"You have selected to approve the answer you have provided. Please only approve answers provided by others.\"}\r\n                        questionAddress={this.state.questionAddress}\r\n                        stateChange={() => {this.setState({ voteError: false })}} />\r\n\r\n            <ErrorModal error={this.state.ownerError}\r\n                        title={'Only Available For Owner Of Question'}\r\n                        content={\"You cannot change the state of the question as you are not the owner.\"}\r\n                        questionAddress={this.state.questionAddress}\r\n                        stateChange={() => {this.setState({ ownerError: false })}} />\r\n\r\n            <ErrorModal error={this.state.voteMultipleError}\r\n                        title={'Answer Already Approved'}\r\n                        content={\"You cannot approve the same answer more than once. Please approve another answer.\"}\r\n                        questionAddress={this.state.questionAddress}\r\n                        stateChange={() => {this.setState({ voteMultipleError: false })}} />\r\n\r\n            <ErrorModal error={this.state.voteMultipleError}\r\n                        title={'Answer Already Approved'}\r\n                        content={\"You cannot approve the same answer more than once. Please approve another answer.\"}\r\n                        questionAddress={this.state.questionAddress}\r\n                        stateChange={() => {this.setState({ voteMultipleError: false })}} />\r\n\r\n            <LoadingModal trigger={this.state.changeToVoting}\r\n                          title={'Changing Question State to Voting Phase'}\r\n                          content={\"Please wait patiently as the system changes your question state.\"}\r\n                          loader={\"Changing Question State\"}/>\r\n\r\n            <LoadingModal trigger={this.state.changeToRewarded}\r\n                          title={'Changing Question State to Rewarded Phase'}\r\n                          content={\"Please wait patiently as the system changes your question state.\"}\r\n                          loader={\"Changing Question State\"}/>\r\n\r\n            <LoadingModal trigger={this.state.timeExtension}\r\n                          title={'Extending Question Deadline'}\r\n                          content={\"Please wait patiently as the system extends the duration of your question.\"}\r\n                          loader={\"Extending Deadline\"}/>\r\n\r\n            <LoadingModal trigger={this.state.changeReward}\r\n                          title={'Increasing Reward'}\r\n                          content={\"Please wait patiently as the system increases the reward of your question.\"}\r\n                          loader={\"Increasing Reward\"}/>\r\n\r\n            <LoadingModal trigger={this.state.voting}\r\n                          title={'Approving Answer'}\r\n                          content={\"Please wait patiently as the system submits your approval.\"}\r\n                          loader={\"Approving\"}/>\r\n\r\n            <LoadingModal trigger={this.state.fixError}\r\n                          title={'Fixing Balance Error'}\r\n                          content={\"Please wait as the system fixes the balance error of your question.\"}\r\n                          loader={\"Fixing Balance\"}/>\r\n            <TimeOutModal timeout={this.state.timeout} />\r\n          </Container>\r\n        </Layout>\r\n      );\r\n    } else {\r\n      return (\r\n        <Layout accountType={this.state.accountType}>\r\n          <AccountIssueModal loading={this.state.resourceLoading} login={this.state.login} />\r\n        </Layout>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default QuestionRow;\r\n"]},"metadata":{},"sourceType":"module"}