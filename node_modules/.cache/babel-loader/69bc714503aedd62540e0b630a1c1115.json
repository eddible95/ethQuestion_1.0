{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React, { Component } from 'react';\nimport { Segment, Container, Divider, Header, Modal, Button, Loader } from 'semantic-ui-react';\nimport Layout from '../components/Layout';\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\nimport Profile from '../ethereum/profile';\nimport { Router } from '../routes';\nimport credentials from '../ethereum/credentials';\n\nvar AboutPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AboutPage, _Component);\n\n  function AboutPage(props) {\n    var _this;\n\n    _classCallCheck(this, AboutPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AboutPage).call(this, props));\n    _this.state = {\n      login: false,\n      loading: true,\n      accountType: null\n    };\n    return _this;\n  }\n\n  _createClass(AboutPage, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var accounts, login, profileAddress, profile, accountType;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context.sent;\n                login = false;\n                _context.next = 6;\n                return credentials.methods.getBinding(accounts[0]).call();\n\n              case 6:\n                _context.t0 = _context.sent;\n\n                if (!(_context.t0 === \"\")) {\n                  _context.next = 10;\n                  break;\n                }\n\n                _context.next = 21;\n                break;\n\n              case 10:\n                login = true; // Get Account Type\n\n                _context.next = 13;\n                return factory.methods.getProfile(accounts[0]).call();\n\n              case 13:\n                profileAddress = _context.sent;\n                profile = Profile(profileAddress);\n                _context.next = 17;\n                return profile.methods.getAccountType().call();\n\n              case 17:\n                accountType = _context.sent;\n                accountType == 0 ? accountType = \"Admin\" : accountType = \"User\";\n                this.setState({\n                  login: login\n                });\n                this.setState({\n                  accountType: accountType\n                });\n\n              case 21:\n                this.setState({\n                  loading: false\n                });\n\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.login) {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(Container, null, React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Segment, {\n          raised: true,\n          textAlign: \"left\"\n        }, React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"SCSE19-0299: Block-Chain Based Question Answering System\")), React.createElement(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, \"Project Details\"), React.createElement(Divider, null), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, \"This is an experimental system for School Of Computer Science & Engineereing (SCSE) Final Year Project titled SCSE19-0299.\"), React.createElement(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, \"System Rules & Guidelines\"), React.createElement(Divider, null), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, \"All users are to \", React.createElement(\"b\", null, \"only post questions from past year examinations\"), \". No posting of \", React.createElement(\"b\", null, \"Assignments \"), \"or \", React.createElement(\"b\", null, \"Tutorial Questions\"), \" is allowed. Fraudulent accounts will be \", React.createElement(\"b\", null, \"removed from the system and banned from future use\"), \".\"), React.createElement(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, \"Earning EthQuestionToken (EQT)\"), React.createElement(Divider, null), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, \"EthQuestionToken (EQT) is a cryptocurrency that is used within the Question Answering System. Each user is given \", React.createElement(\"b\", null, \"10 EQTs\"), \" upon signing up. User can be rewarded additional EQTs by providing answers with the highest approvals for each question. User can also be rewarded \", React.createElement(\"b\", null, \"2 EQTs\"), \" for approving the answer that is awarded the reward for the question.\"), React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Segment, {\n          raised: true,\n          textAlign: \"left\"\n        }, React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"Leaderboard\")), React.createElement(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, \"Accumulating Points\"), React.createElement(Divider, null), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, \"Points can be earned through the following ways:\"), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, React.createElement(\"b\", null, \"Creating Question:\"), \" 5 Points\"), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, React.createElement(\"b\", null, \"Answer Selected:\"), \" 4 Points\"), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, React.createElement(\"b\", null, \"Submit Answer:\"), \" 2 Points\"), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, React.createElement(\"b\", null, \"Approve Answer with Highest Approvals:\"), \" 2 Points\"), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, React.createElement(\"b\", null, \"Approving An Answer:\"), \" 1 Point\"), React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Segment, null, React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"System Functionality\")), React.createElement(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, \"Post New Question\"), React.createElement(Divider, null), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, \"Access using \\\"\", React.createElement(\"b\", null, \"Create New Question\"), \"\\\" tab above. Each creation of new question requires at least\", React.createElement(\"b\", null, \" 1 EQT\"), \" as the reward. In the event that there are no answers provided within the duration specified, the reward will be returned to the owner of the question.\"), React.createElement(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, \"Provide Answer To Question\"), React.createElement(Divider, null), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, \"All questions posted can be view from the Home Page access via \", React.createElement(\"b\", null, \"\\\"Home\\\"\"), \" tab above. Clicking on the question title will provide additional details on the question as well as providing the form to submit an answer for the question. No EQT are required for answering of question.\"), React.createElement(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, \"Approving Of Answers\"), React.createElement(Divider, null), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, \"When the question is in the \", React.createElement(\"b\", null, \"\\\"Voting Phase\\\"\"), \", all users can view all answers that are submitted and approve each answer depending on it's relevance and helpfulness. Each approval requires \", React.createElement(\"b\", null, \"1 EQT\"), \". Each user can only\", React.createElement(\"b\", null, \" approve each answer once\"), \". After the \\\"Voting Phase\\\", users who approved the answer with the highest approvals will have their \", React.createElement(\"b\", null, \"1 EQT\"), \" returned. Additionally, EQT from users who approve other answers would be distributed among users who approved the answer with the highest approvals.\")));\n      } else {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(Container, {\n          style: {\n            width: \"100%\",\n            height: \"100vh\"\n          }\n        }, React.createElement(Modal, {\n          open: this.state.loading,\n          basic: true,\n          size: \"small\"\n        }, React.createElement(Header, {\n          icon: \"ethereum\",\n          content: \"Loading Resources\"\n        }), React.createElement(Modal.Content, null, React.createElement(Loader, {\n          active: true,\n          inline: \"centered\"\n        }, \"Loading About Page\"))), React.createElement(Modal, {\n          open: !this.state.login && !this.state.loading,\n          basic: true,\n          size: \"small\"\n        }, React.createElement(Header, {\n          icon: \"ethereum\",\n          content: \"Not Registered\"\n        }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"You are currently not registered to access the platform. Please have your account registered.\")), React.createElement(Modal.Actions, null, React.createElement(Button, {\n          color: \"green\",\n          inverted: true,\n          attached: \"bottom\",\n          onClick: function onClick() {\n            Router.pushRoute('/');\n          }\n        }, \"Register For Account\")))));\n      }\n    }\n  }]);\n\n  return AboutPage;\n}(Component);\n\nexport default AboutPage;","map":null,"metadata":{},"sourceType":"module"}