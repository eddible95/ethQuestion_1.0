{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport Layout from '../components/Layout';\nimport { Container, Segment, Header, Divider, Button, Icon, Dropdown } from \"semantic-ui-react\";\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\nimport Question from '../ethereum/question';\nimport credentials from '../ethereum/credentials'; // Ensure jsPDF does not import on Server Side\n\nvar jsPDF = null;\n\nif (typeof window !== \"undefined\") {\n  import(\"jspdf\").then(function (module) {\n    jsPDF = module.default;\n  });\n}\n\nvar AdminPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AdminPage, _Component);\n\n  function AdminPage(props) {\n    var _this;\n\n    _classCallCheck(this, AdminPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AdminPage).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"export\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var lMargin, rMargin, pdfInMM, doc, questionNumber, question, summary, answerList, questionTitle, lines, j, i, answer;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(_this.state.questionNumber != \"\")) {\n                _context.next = 24;\n                break;\n              }\n\n              // Initialise the PDF document to write\n              lMargin = 15; //left margin in mm\n\n              rMargin = 15; //right margin in mm\n\n              pdfInMM = 210; // width of A4 in mm\n\n              doc = new jsPDF(\"p\", \"mm\", \"a4\"); // Retrieve all the data of selected question\n\n              questionNumber = Number(_this.state.questionNumber) - 1;\n              question = Question(_this.props.deployedQuestions[questionNumber]);\n              _context.next = 9;\n              return question.methods.getSummary().call();\n\n            case 9:\n              summary = _context.sent;\n              _context.next = 12;\n              return question.methods.getAnswerList().call();\n\n            case 12:\n              answerList = _context.sent;\n              questionTitle = \"Question: \" + summary[1]; // Writing to the PDF document\n\n              lines = doc.splitTextToSize(questionTitle, pdfInMM - lMargin - rMargin);\n              doc.text(lMargin, 20, lines);\n              doc.setLineWidth(0.5);\n              doc.line(lMargin, 20 + lines.length + 8, 195, 20 + lines.length + 8); // If images are uploaded\n\n              if (summary[5].length != 0) {\n                summary[6].map(function (imageName, index) {\n                  var link = \"https://ipfs.io/ipfs/\" + summary[5][index];\n                  doc.text(lMargin, 20 + lines.length + 15, \"Images Link:\");\n                  lines = doc.splitTextToSize(link, pdfInMM - lMargin - rMargin);\n                  doc.text(lMargin, 45, lines);\n                });\n                doc.text(lMargin, 20 + lines.length + 40, \"Answers:\");\n              } else {\n                doc.text(lMargin, 20 + lines.length + 15, \"Answers:\");\n              }\n\n              j = 70;\n\n              for (i = 0; i < answerList.length; i++) {\n                answer = \"(\" + (i + 1) + \") \" + answerList[i][0];\n                lines = doc.splitTextToSize(answer, pdfInMM - lMargin - rMargin); // Creates a new page for every 10 answers\n\n                if (i % 10 == 0 && i != 0) {\n                  doc.addPage();\n                  j = 30;\n                }\n\n                doc.text(lMargin, j, lines);\n                j = j + 10;\n              }\n\n              doc.save(\"Answer.pdf\");\n              _context.next = 25;\n              break;\n\n            case 24:\n              console.log(\"Please select a question\");\n\n            case 25:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    _this.state = {\n      questionOptions: [],\n      questionNumber: ''\n    };\n    return _this;\n  }\n\n  _createClass(AdminPage, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context2.sent;\n                _context2.next = 5;\n                return credentials.methods.getBinding(accounts[0]).call();\n\n              case 5:\n                _context2.t0 = _context2.sent;\n\n                if (!(_context2.t0 === \"\")) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                Router.pushRoute(\"/\"); // Automatic redirect the user to Login or Sign Up\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var questionOptions, i, question, summary;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                questionOptions = [];\n                i = 0;\n\n              case 2:\n                if (!(i < this.props.deployedQuestionsCount)) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                question = Question(this.props.deployedQuestions[i]);\n                _context3.next = 6;\n                return question.methods.getSummary().call();\n\n              case 6:\n                summary = _context3.sent;\n                questionOptions.push({\n                  key: i + 1,\n                  text: summary[0],\n                  value: i + 1\n                });\n\n              case 8:\n                i++;\n                _context3.next = 2;\n                break;\n\n              case 11:\n                this.setState({\n                  questionOptions: questionOptions\n                });\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Layout, null, React.createElement(Container, {\n        style: {\n          height: \"100vh\"\n        }\n      }, React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(Segment, {\n        raised: true,\n        textAlign: \"left\"\n      }, React.createElement(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"Exporting Questions & Answers As PDF\")), React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, \"Select the question to export the question and it's corresponding answers\"), React.createElement(Dropdown, {\n        clearable: true,\n        options: this.state.questionOptions,\n        selection: true,\n        placeholder: \"Select the question to export\",\n        value: this.state.questionNumber,\n        onChange: function onChange(e, _ref2) {\n          var value = _ref2.value;\n          return _this2.setState({\n            questionNumber: value\n          });\n        }\n      }), React.createElement(Button, {\n        icon: true,\n        labelPosition: \"left\",\n        color: \"red\",\n        onClick: this.export,\n        style: {\n          left: \"20px\"\n        }\n      }, React.createElement(Icon, {\n        name: \"download\"\n      }), \"Export As PDF\")));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var accounts, deployedQuestions, deployedQuestionsCount;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context4.sent;\n                _context4.next = 5;\n                return credentials.methods.getBinding(accounts[0]).call();\n\n              case 5:\n                _context4.t0 = _context4.sent;\n\n                if (!(_context4.t0 === \"\")) {\n                  _context4.next = 8;\n                  break;\n                }\n\n                Router.pushRoute(\"/\");\n\n              case 8:\n                _context4.next = 10;\n                return factory.methods.getDeployedQuestions().call();\n\n              case 10:\n                deployedQuestions = _context4.sent;\n                deployedQuestionsCount = deployedQuestions.length;\n                return _context4.abrupt(\"return\", {\n                  accounts: accounts,\n                  deployedQuestionsCount: deployedQuestionsCount,\n                  deployedQuestions: deployedQuestions\n                });\n\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function getInitialProps() {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return AdminPage;\n}(Component);\n\nexport default AdminPage;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\admin.js"],"names":["React","Component","Layout","Container","Segment","Header","Divider","Button","Icon","Dropdown","web3","factory","Question","credentials","jsPDF","window","then","module","default","AdminPage","props","state","questionNumber","lMargin","rMargin","pdfInMM","doc","Number","question","deployedQuestions","methods","getSummary","call","summary","getAnswerList","answerList","questionTitle","lines","splitTextToSize","text","setLineWidth","line","length","map","imageName","index","link","j","i","answer","addPage","save","console","log","questionOptions","eth","getAccounts","accounts","getBinding","Router","pushRoute","deployedQuestionsCount","push","key","value","setState","height","fontSize","e","export","left","getDeployedQuestions"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from '../components/Layout';\r\nimport { Container, Segment, Header, Divider, Button, Icon, Dropdown } from \"semantic-ui-react\";\r\nimport web3 from '../ethereum/web3';\r\nimport factory from '../ethereum/factory';\r\nimport Question from '../ethereum/question';\r\nimport credentials from '../ethereum/credentials';\r\n\r\n// Ensure jsPDF does not import on Server Side\r\nlet jsPDF = null;\r\nif (typeof window !== \"undefined\") {\r\n  import(\"jspdf\").then(module => {\r\n    jsPDF = module.default;\r\n  });\r\n}\r\n\r\nclass AdminPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      questionOptions: [],\r\n      questionNumber: ''\r\n    };\r\n  }\r\n\r\n  static async getInitialProps () {\r\n      const accounts = await web3.eth.getAccounts();\r\n      // Redirect E-Wallet that are not Logged In to the Login Page\r\n      if (await credentials.methods.getBinding(accounts[0]).call() === \"\"){\r\n          Router.pushRoute(`/`);\r\n      }\r\n\r\n      // Retrieve an array of addresses of questions deployed\r\n      let deployedQuestions = await factory.methods.getDeployedQuestions().call();\r\n      let deployedQuestionsCount = deployedQuestions.length;\r\n\r\n      return { accounts, deployedQuestionsCount, deployedQuestions }\r\n  }\r\n\r\n  async componentWillMount() {\r\n    // Retrieve the Ethereum Account from MetaMask\r\n    const accounts = await web3.eth.getAccounts();\r\n    // Redirect E-Wallet that are not Logged In to the Login Page\r\n    if (await credentials.methods.getBinding(accounts[0]).call() === \"\"){\r\n        Router.pushRoute(`/`); // Automatic redirect the user to Login or Sign Up\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let questionOptions = [];\r\n    for (let i = 0; i < this.props.deployedQuestionsCount; i++) {\r\n        let question = Question(this.props.deployedQuestions[i])\r\n        let summary = await question.methods.getSummary().call();\r\n        questionOptions.push({\r\n            key: i+1,\r\n            text: summary[0],\r\n            value: i+1\r\n        });\r\n    }\r\n    this.setState( { questionOptions: questionOptions });\r\n  }\r\n\r\n  export = async () => {\r\n    // Check that a question must be selected\r\n    if (this.state.questionNumber != \"\") {\r\n      // Initialise the PDF document to write\r\n      let lMargin=15; //left margin in mm\r\n      let rMargin=15; //right margin in mm\r\n      let pdfInMM=210;  // width of A4 in mm\r\n      let doc = new jsPDF(\"p\",\"mm\",\"a4\");\r\n\r\n      // Retrieve all the data of selected question\r\n      let questionNumber = Number(this.state.questionNumber) - 1;\r\n      let question = Question(this.props.deployedQuestions[questionNumber])\r\n      let summary = await question.methods.getSummary().call();\r\n      let answerList = await question.methods.getAnswerList().call();\r\n      let questionTitle = \"Question: \" + summary[1];\r\n\r\n      // Writing to the PDF document\r\n      let lines = doc.splitTextToSize(questionTitle, (pdfInMM-lMargin-rMargin));\r\n      doc.text(lMargin,20,lines);\r\n      doc.setLineWidth(0.5)\r\n      doc.line(lMargin, 20+lines.length+8, 195, 20+lines.length+8)\r\n\r\n      // If images are uploaded\r\n      if (summary[5].length != 0) {\r\n          summary[6].map((imageName, index) => {\r\n            let link = \"https://ipfs.io/ipfs/\"+summary[5][index]\r\n            doc.text(lMargin,20+lines.length+15,\"Images Link:\")\r\n            lines = doc.splitTextToSize(link, (pdfInMM-lMargin-rMargin));\r\n            doc.text(lMargin,45,lines);\r\n          })\r\n          doc.text(lMargin, 20+lines.length+40, \"Answers:\");\r\n      } else {\r\n        doc.text(lMargin, 20+lines.length+15, \"Answers:\");\r\n      }\r\n      let j = 70;\r\n      for (let i = 0; i < answerList.length; i++) {\r\n        let answer = \"(\" + (i+1) + \") \" + answerList[i][0];\r\n        lines = doc.splitTextToSize(answer, (pdfInMM-lMargin-rMargin));\r\n        // Creates a new page for every 10 answers\r\n        if (i % 10 == 0 && i != 0) {\r\n          doc.addPage();\r\n          j = 30;\r\n        }\r\n        doc.text(lMargin, j, lines);\r\n        j = j + 10;\r\n      }\r\n      doc.save(\"Answer.pdf\");\r\n    } else {\r\n      console.log(\"Please select a question\")\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <Container style={{height:\"100vh\"}}>\r\n          <Divider hidden/>\r\n          <Segment raised textAlign='left'>\r\n            <Header as='h2' textAlign='center'>\r\n              Exporting Questions & Answers As PDF\r\n            </Header>\r\n          </Segment>\r\n          <Divider hidden/>\r\n          <p style={{fontSize:'16px'}}>\r\n            Select the question to export the question and it's corresponding answers\r\n          </p>\r\n          <Dropdown clearable\r\n                    options={this.state.questionOptions}\r\n                    selection\r\n                    placeholder='Select the question to export'\r\n                    value={this.state.questionNumber}\r\n                    onChange={ (e, { value }) => this.setState({ questionNumber: value })}/>\r\n          <Button icon labelPosition='left' color=\"red\" onClick={this.export} style={{left:\"20px\"}}>\r\n            <Icon name='download'/>\r\n            Export As PDF\r\n          </Button>\r\n        </Container>\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AdminPage;\r\n"]},"metadata":{},"sourceType":"module"}