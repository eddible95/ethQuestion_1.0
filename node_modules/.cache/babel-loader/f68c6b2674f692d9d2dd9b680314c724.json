{"ast":null,"code":"import _Set from \"@babel/runtime-corejs2/core-js/set\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { Form, Button, Input, Message, Dropdown, Header, Icon, Segment, Container, TextArea, Divider, Label, Modal, Loader } from 'semantic-ui-react';\nimport Layout from '../components/Layout';\nimport factory from '../ethereum/factory';\nimport Question from '../ethereum/question';\nimport Profile from '../ethereum/profile';\nimport web3 from '../ethereum/web3';\nimport EthQuestionToken from '../ethereum/token';\nimport credentials from '../ethereum/credentials';\nimport { Router } from '../routes';\nimport { getIpfsHash } from './ipfs';\nimport { logging } from './logger';\n\nvar NewQuestion =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NewQuestion, _Component);\n\n  function NewQuestion(props) {\n    var _this;\n\n    _classCallCheck(this, NewQuestion);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NewQuestion).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var accounts, logTransaction;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              }); // Ensures all fields are filled\n\n\n              if (!(_this.checkFieldEmpty(_this.state.questionTitle) && _this.checkFieldEmpty(_this.state.content) && _this.checkIntegerField(_this.state.reward) && _this.checkIntegerField(_this.state.maxDuration))) {\n                _context.next = 18;\n                break;\n              }\n\n              _context.prev = 2;\n              _context.next = 5;\n              return web3.eth.getAccounts();\n\n            case 5:\n              accounts = _context.sent;\n              // Logs the transactions\n              logTransaction = logging(\"Created New Question: \" + _this.state.questionTitle); // Create a new post\n\n              _context.next = 9;\n              return factory.methods.createQuestion(_this.state.questionTitle, _this.state.content, _this.lowerCase(_this.state.tag), Number(_this.state.reward) * 10e3, _parseFloat(_this.state.maxDuration) * 60 * 60, _this.state.fileHashes_array, _this.state.fileNames_array, logTransaction, EthQuestionToken._address).send({\n                from: accounts[0]\n              });\n\n            case 9:\n              Router.pushRoute('/home'); // Automatic redirect the user.\n\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](2);\n\n              _this.setState({\n                errorMessage: _context.t0.message\n              });\n\n            case 15:\n              _this.setState({\n                loading: false\n              });\n\n              _context.next = 20;\n              break;\n\n            case 18:\n              _this.setState({\n                errorMessage: \"Required Field(s) Empty\"\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 12]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"checkFieldEmpty\", function (field) {\n      return field === \"\" ? false : true;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkIntegerField\", function (field) {\n      return field > 0 ? true : false;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"lowerCase\", function (tags) {\n      for (var i = 0; i < tags.length; i++) {\n        tags[i] = tags[i].toLowerCase();\n      }\n\n      return tags;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFileSelected\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var reader, file, _this$state, files_array, fileNames_array, fileHashes_array;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // Access JavaScript FileReader() method for conversion to buffer\n              reader = new FileReader();\n              file = _this.fileInput.files[0];\n\n              _this.setState({\n                fileLoading: true\n              });\n\n              if (file instanceof Blob) {\n                _this$state = _this.state, files_array = _this$state.files_array, fileNames_array = _this$state.fileNames_array, fileHashes_array = _this$state.fileHashes_array;\n                files_array.push(file);\n                fileNames_array.push(file.name);\n\n                _this.setState({\n                  files_array: files_array,\n                  fileNames_array: fileNames_array\n                });\n\n                console.log(\"fileNames_array: \", fileNames_array);\n                reader.onloadend =\n                /*#__PURE__*/\n                _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee2() {\n                  var fileHash;\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          _context2.next = 2;\n                          return _this.setState({\n                            fileUrl: reader.result,\n                            fileLoading: true,\n                            buffer: Buffer.from(reader.result) // File is converted to a buffer for upload to IPFS\n\n                          });\n\n                        case 2:\n                          if (!_this.state.buffer) {\n                            _context2.next = 8;\n                            break;\n                          }\n\n                          _context2.next = 5;\n                          return getIpfsHash(file);\n\n                        case 5:\n                          _context2.t0 = _context2.sent;\n                          _context2.next = 9;\n                          break;\n\n                        case 8:\n                          _context2.t0 = '0';\n\n                        case 9:\n                          fileHash = _context2.t0;\n                          fileHashes_array.push(fileHash);\n\n                          _this.setState({\n                            fileHashes_array: fileHashes_array\n                          });\n\n                          console.log(\"fileHashes_array: \", fileHashes_array);\n\n                          _this.setState({\n                            fileLoading: false\n                          });\n\n                        case 14:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }));\n                reader.readAsDataURL(file);\n              }\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"onFileRemoved\", function (file) {\n      var i = 0;\n      var _this$state2 = _this.state,\n          files_array = _this$state2.files_array,\n          fileHashes_array = _this$state2.fileHashes_array,\n          fileNames_array = _this$state2.fileNames_array;\n      console.log('file: ', file);\n\n      for (i = 0; i < files_array.length; i++) {\n        if (file === files_array[i]) {\n          files_array.splice(i, 1);\n          fileNames_array.splice(i, 1);\n          fileHashes_array.splice(i, 1);\n          break;\n        }\n      }\n\n      _this.setState({\n        files_array: files_array,\n        fileNames_array: fileNames_array,\n        fileHashes_array: fileHashes_array\n      });\n\n      console.log('fileNames_array', fileNames_array);\n      console.log(\"fileHashes_array: \", fileHashes_array);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleAddition\", function (e, _ref4) {\n      var value = _ref4.value;\n\n      _this.setState({\n        tagOptions: [{\n          text: value,\n          value: value\n        }].concat(_toConsumableArray(_this.state.tagOptions))\n      });\n    });\n\n    _this.state = {\n      questionTitle: '',\n      content: '',\n      tag: [],\n      tagOptions: [],\n      reward: '',\n      maxDuration: '',\n      errorMessage: '',\n      loading: false,\n      fileLoading: false,\n      buffer: null,\n      files_array: [],\n      fileHashes_array: [],\n      fileNames_array: [],\n      login: false,\n      resourceLoading: true,\n      accountType: null\n    };\n    return _this;\n  }\n\n  _createClass(NewQuestion, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var deployedQuestions, balance, accounts, login, profileAddress, profile, accountType, _deployedQuestions, deployedQuestionsCount, tags, tagOptions, i, question, summary, _i;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return factory.methods.getDeployedQuestions().call();\n\n              case 2:\n                deployedQuestions = _context4.sent;\n                _context4.next = 5;\n                return EthQuestionToken.methods.balanceOf(deployedQuestions[0]).call();\n\n              case 5:\n                balance = _context4.sent;\n                console.log(balance);\n                _context4.next = 9;\n                return web3.eth.getAccounts();\n\n              case 9:\n                accounts = _context4.sent;\n                login = false;\n                _context4.next = 13;\n                return credentials.methods.getBinding(accounts[0]).call();\n\n              case 13:\n                _context4.t0 = _context4.sent;\n\n                if (!(_context4.t0 === \"\")) {\n                  _context4.next = 17;\n                  break;\n                }\n\n                _context4.next = 45;\n                break;\n\n              case 17:\n                login = true; // Get Account Type\n\n                _context4.next = 20;\n                return factory.methods.getProfile(accounts[0]).call();\n\n              case 20:\n                profileAddress = _context4.sent;\n                profile = Profile(profileAddress);\n                _context4.next = 24;\n                return profile.methods.getAccountType().call();\n\n              case 24:\n                accountType = _context4.sent;\n                accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"; // Retrieve previously used tags and ether balance\n\n                _context4.next = 28;\n                return factory.methods.getDeployedQuestions().call();\n\n              case 28:\n                _deployedQuestions = _context4.sent;\n                deployedQuestionsCount = _deployedQuestions.length;\n                tags = [];\n                tagOptions = [];\n                i = 0;\n\n              case 33:\n                if (!(i < deployedQuestionsCount)) {\n                  _context4.next = 42;\n                  break;\n                }\n\n                question = Question(_deployedQuestions[i]);\n                _context4.next = 37;\n                return question.methods.getSummary().call();\n\n              case 37:\n                summary = _context4.sent;\n                tags = [].concat(_toConsumableArray(tags), _toConsumableArray(summary[8]));\n\n              case 39:\n                i++;\n                _context4.next = 33;\n                break;\n\n              case 42:\n                // Remove duplicated tags\n                tags = _toConsumableArray(new _Set(tags));\n\n                for (_i = 0; _i < tags.length; _i++) {\n                  tagOptions.push({\n                    key: _i,\n                    text: tags[_i],\n                    value: tags[_i]\n                  });\n                }\n\n                this.setState({\n                  login: login,\n                  accountType: accountType,\n                  tagOptions: tagOptions\n                });\n\n              case 45:\n                this.setState({\n                  resourceLoading: false\n                });\n\n              case 46:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() // Submit the question to be stored on the Ethereum Blockchain\n\n  }, {\n    key: \"renderFilesUpload\",\n    value: function renderFilesUpload(files) {\n      var _this2 = this;\n\n      var files_array = this.state.files_array;\n\n      if (this.state.files_array.length == 0) {\n        return React.createElement(Segment, {\n          placeholder: true\n        }, React.createElement(Header, {\n          icon: true\n        }, React.createElement(Icon, {\n          name: \"images outline\"\n        }), \"No images are uploaded for this question\"), React.createElement(\"input\", {\n          style: {\n            display: 'none'\n          },\n          type: \"file\",\n          onChange: function onChange() {\n            return _this2.onFileSelected();\n          },\n          ref: function ref(fileInput) {\n            return _this2.fileInput = fileInput;\n          }\n        }), React.createElement(Button, {\n          primary: true,\n          onClick: function onClick() {\n            return _this2.fileInput.click();\n          },\n          loading: this.state.fileLoading\n        }, \"Upload Image\"));\n      } else {\n        return React.createElement(Segment, {\n          placeholder: true\n        }, React.createElement(\"center\", null, React.createElement(\"div\", {\n          style: {\n            marginBottom: '20px'\n          }\n        }, files), React.createElement(\"input\", {\n          style: {\n            display: 'none'\n          },\n          type: \"file\",\n          onChange: function onChange() {\n            return _this2.onFileSelected();\n          },\n          ref: function ref(fileInput) {\n            return _this2.fileInput = fileInput;\n          }\n        }), React.createElement(Button, {\n          primary: true,\n          onClick: function onClick() {\n            return _this2.fileInput.click();\n          },\n          loading: this.state.fileLoading\n        }, \"Upload Files\")));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      if (this.state.login) {\n        var files_array = this.state.files_array;\n        var elmFiles = null;\n\n        if (files_array !== null) {\n          elmFiles = files_array.map(function (item, index) {\n            return React.createElement(Label, {\n              as: \"a\",\n              key: index,\n              size: \"big\"\n            }, item.name, React.createElement(Icon, {\n              name: \"delete\",\n              onClick: function onClick() {\n                return _this3.onFileRemoved(item);\n              }\n            }));\n          });\n        }\n\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(Container, {\n          style: {\n            height: \"100vh\"\n          }\n        }, React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Segment, {\n          textAlign: \"center\",\n          as: \"h3\"\n        }, \"Creating Of New Question\"), React.createElement(Form, {\n          error: !!this.state.errorMessage,\n          style: {\n            marginTop: '10px'\n          }\n        }, React.createElement(Form.Field, {\n          required: true\n        }, React.createElement(\"label\", null, \"Question Title\"), React.createElement(Input, {\n          placeholder: \"Enter Title\",\n          value: this.state.questionTitle,\n          onChange: function onChange(event) {\n            return _this3.setState({\n              questionTitle: event.target.value\n            });\n          }\n        })), React.createElement(Form.Field, {\n          required: true\n        }, React.createElement(\"label\", null, \"Question Description (To include math questions, delimit the latex format with $$)\"), React.createElement(Label, null, \"Example: This is my equation: $$1 \\\\triangleright 1 \\\\bigcirc  \\\\bigcirc $$\"), React.createElement(\"a\", {\n          style: {\n            display: \"table-cell\"\n          },\n          href: \"https://www.codecogs.com/latex/eqneditor.php\",\n          target: \"_blank\"\n        }, \"Link to Supported Latex Editor\"), React.createElement(TextArea, {\n          placeholder: \"Enter Description\",\n          value: this.state.content,\n          onChange: function onChange(event) {\n            return _this3.setState({\n              content: event.target.value\n            });\n          }\n        })), React.createElement(Form.Field, null, React.createElement(\"label\", null, \"Tags\"), React.createElement(Dropdown, {\n          clearable: true,\n          options: this.state.tagOptions,\n          selection: true,\n          multiple: true,\n          allowAdditions: true,\n          search: true,\n          placeholder: \"Select from existing tags or create your own tags\",\n          value: this.state.tag,\n          onChange: function onChange(e, _ref5) {\n            var value = _ref5.value;\n            return _this3.setState({\n              tag: value\n            });\n          },\n          onAddItem: this.handleAddition\n        })), React.createElement(Form.Field, {\n          required: true\n        }, React.createElement(\"label\", null, \"EQT(s)\"), React.createElement(Input, {\n          label: \"EQT(s)\",\n          labelPosition: \"right\",\n          placeholder: \"Enter your value of reward\",\n          value: this.state.reward,\n          onChange: function onChange(event) {\n            return _this3.setState({\n              reward: event.target.value\n            });\n          }\n        })), React.createElement(Form.Field, {\n          required: true\n        }, React.createElement(\"label\", null, \"Maximum Duration\"), React.createElement(Input, {\n          label: \"hour(s)\",\n          labelPosition: \"right\",\n          placeholder: \"Enter the duration for the question to be valid\",\n          value: this.state.maxDuration,\n          onChange: function onChange(event) {\n            return _this3.setState({\n              maxDuration: event.target.value\n            });\n          }\n        })), React.createElement(Form.Field, null, this.renderFilesUpload(elmFiles)), React.createElement(Message, {\n          error: true,\n          header: \"Oops!\",\n          content: this.state.errorMessage\n        }), React.createElement(Modal, {\n          open: this.state.loading,\n          trigger: React.createElement(Button, {\n            primary: true,\n            onClick: this.onSubmit\n          }, \"Submit Question\"),\n          basic: true,\n          size: \"small\"\n        }, React.createElement(Header, {\n          content: \"Posting New Question\"\n        }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"Please Confirm the MetaMask Transaction Request to submit your Question to the Block-Chain Network. Upon successful submission, you will be redirected to the Home Page. This process might take awhile.\"), React.createElement(Loader, {\n          active: true,\n          inline: \"centered\"\n        }, \"Loading\"))))));\n      } else {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(Container, {\n          style: {\n            width: \"100%\",\n            height: \"100vh\"\n          }\n        }, React.createElement(Modal, {\n          open: this.state.resourceLoading,\n          basic: true,\n          size: \"small\"\n        }, React.createElement(Header, {\n          icon: \"ethereum\",\n          content: \"Loading Resources\"\n        }), React.createElement(Modal.Content, null, React.createElement(Loader, {\n          active: true,\n          inline: \"centered\"\n        }, \"Loading Form\"))), React.createElement(Modal, {\n          open: !this.state.login && !this.state.resourceLoading,\n          basic: true,\n          size: \"small\"\n        }, React.createElement(Header, {\n          icon: \"ethereum\",\n          content: \"Not Registered\"\n        }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"You are currently not registered to access the platform. Please have your account registered.\")), React.createElement(Modal.Actions, null, React.createElement(Button, {\n          color: \"green\",\n          inverted: true,\n          attached: \"bottom\",\n          onClick: function onClick() {\n            Router.pushRoute('/');\n          }\n        }, \"Register For Account\")))));\n      }\n    }\n  }]);\n\n  return NewQuestion;\n}(Component);\n\nexport default NewQuestion;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\newQuestion.js"],"names":["React","Component","Form","Button","Input","Message","Dropdown","Header","Icon","Segment","Container","TextArea","Divider","Label","Modal","Loader","Layout","factory","Question","Profile","web3","EthQuestionToken","credentials","Router","getIpfsHash","logging","NewQuestion","props","setState","loading","errorMessage","checkFieldEmpty","state","questionTitle","content","checkIntegerField","reward","maxDuration","eth","getAccounts","accounts","logTransaction","methods","createQuestion","lowerCase","tag","Number","fileHashes_array","fileNames_array","_address","send","from","pushRoute","message","field","tags","i","length","toLowerCase","reader","FileReader","file","fileInput","files","fileLoading","Blob","files_array","push","name","console","log","onloadend","fileUrl","result","buffer","Buffer","fileHash","readAsDataURL","splice","e","value","tagOptions","text","login","resourceLoading","accountType","getDeployedQuestions","call","deployedQuestions","balanceOf","balance","getBinding","getProfile","profileAddress","profile","getAccountType","deployedQuestionsCount","question","getSummary","summary","key","display","onFileSelected","click","marginBottom","elmFiles","map","item","index","onFileRemoved","height","marginTop","event","target","handleAddition","renderFilesUpload","onSubmit","width"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,KAAvB,EAA8BC,OAA9B,EAAuCC,QAAvC,EAAiDC,MAAjD,EACEC,IADF,EACQC,OADR,EACiBC,SADjB,EAC4BC,QAD5B,EACsCC,OADtC,EAC+CC,KAD/C,EACsDC,KADtD,EAC6DC,MAD7D,QAC2E,mBAD3E;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,gBAAP,MAA6B,mBAA7B;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,WAAT,QAA4B,QAA5B;AACA,SAASC,OAAT,QAAwB,UAAxB;;IAEMC,W;;;;;AACF,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,qFAAMA,KAAN;;AADiB;AAAA;AAAA;AAAA;AAAA,6BAmER;AAAA;AAAA;AAAA;AAAA;AAAA;AACP,oBAAKC,QAAL,CAAc;AAAEC,gBAAAA,OAAO,EAAE,IAAX;AAAiBC,gBAAAA,YAAY,EAAE;AAA/B,eAAd,EADO,CAEP;;;AAFO,oBAGH,MAAKC,eAAL,CAAqB,MAAKC,KAAL,CAAWC,aAAhC,KAAkD,MAAKF,eAAL,CAAqB,MAAKC,KAAL,CAAWE,OAAhC,CAAlD,IAA8F,MAAKC,iBAAL,CAAuB,MAAKH,KAAL,CAAWI,MAAlC,CAA9F,IAA2I,MAAKD,iBAAL,CAAuB,MAAKH,KAAL,CAAWK,WAAlC,CAHxI;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAKsBjB,IAAI,CAACkB,GAAL,CAASC,WAAT,EALtB;;AAAA;AAKKC,cAAAA,QALL;AAMD;AACIC,cAAAA,cAPH,GAOoBhB,OAAO,CAAC,2BAA2B,MAAKO,KAAL,CAAWC,aAAvC,CAP3B,EAQD;;AARC;AAAA,qBASKhB,OAAO,CAACyB,OAAR,CACLC,cADK,CACU,MAAKX,KAAL,CAAWC,aADrB,EACoC,MAAKD,KAAL,CAAWE,OAD/C,EACwD,MAAKU,SAAL,CAAe,MAAKZ,KAAL,CAAWa,GAA1B,CADxD,EACwFC,MAAM,CAAC,MAAKd,KAAL,CAAWI,MAAZ,CAAN,GAA0B,IADlH,EACwH,YAAW,MAAKJ,KAAL,CAAWK,WAAtB,IAAqC,EAArC,GAA0C,EADlK,EAEJ,MAAKL,KAAL,CAAWe,gBAFP,EAEyB,MAAKf,KAAL,CAAWgB,eAFpC,EAEqDP,cAFrD,EAEqEpB,gBAAgB,CAAC4B,QAFtF,EAGLC,IAHK,CAGA;AACFC,gBAAAA,IAAI,EAAEX,QAAQ,CAAC,CAAD;AADZ,eAHA,CATL;;AAAA;AAeDjB,cAAAA,MAAM,CAAC6B,SAAP,CAAiB,OAAjB,EAfC,CAe0B;;AAf1B;AAAA;;AAAA;AAAA;AAAA;;AAiBD,oBAAKxB,QAAL,CAAc;AAAEE,gBAAAA,YAAY,EAAE,YAAIuB;AAApB,eAAd;;AAjBC;AAmBL,oBAAKzB,QAAL,CAAc;AAAEC,gBAAAA,OAAO,EAAE;AAAX,eAAd;;AAnBK;AAAA;;AAAA;AAqBL,oBAAKD,QAAL,CAAc;AAAEE,gBAAAA,YAAY,EAAE;AAAhB,eAAd;;AACA,oBAAKF,QAAL,CAAc;AAAEC,gBAAAA,OAAO,EAAE;AAAX,eAAd;;AAtBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnEQ;;AAAA,sEA6FD,UAACyB,KAAD,EAAW;AAC3B,aAAOA,KAAK,KAAK,EAAV,GAAe,KAAf,GAAuB,IAA9B;AACD,KA/FkB;;AAAA,wEAiGC,UAACA,KAAD,EAAW;AAC7B,aAAOA,KAAK,GAAG,CAAR,GAAY,IAAZ,GAAmB,KAA1B;AACD,KAnGkB;;AAAA,gEAqGP,UAACC,IAAD,EAAU;AACpB,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAACD,IAAI,CAACE,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AAClCD,QAAAA,IAAI,CAACC,CAAD,CAAJ,GAAUD,IAAI,CAACC,CAAD,CAAJ,CAAQE,WAAR,EAAV;AACD;;AACD,aAAOH,IAAP;AACD,KA1GkB;;AAAA;AAAA;AAAA;AAAA;AAAA,6BA6GF;AAAA;;AAAA;AAAA;AAAA;AAAA;AACb;AACMI,cAAAA,MAFO,GAEE,IAAIC,UAAJ,EAFF;AAGPC,cAAAA,IAHO,GAGA,MAAKC,SAAL,CAAeC,KAAf,CAAqB,CAArB,CAHA;;AAIb,oBAAKnC,QAAL,CAAc;AAACoC,gBAAAA,WAAW,EAAE;AAAd,eAAd;;AACA,kBAAIH,IAAI,YAAYI,IAApB,EAA2B;AAAA,8BACgC,MAAKjC,KADrC,EAClBkC,WADkB,eAClBA,WADkB,EACLlB,eADK,eACLA,eADK,EACYD,gBADZ,eACYA,gBADZ;AAEvBmB,gBAAAA,WAAW,CAACC,IAAZ,CAAiBN,IAAjB;AACAb,gBAAAA,eAAe,CAACmB,IAAhB,CAAqBN,IAAI,CAACO,IAA1B;;AACA,sBAAKxC,QAAL,CAAc;AACVsC,kBAAAA,WAAW,EAAEA,WADH;AAEVlB,kBAAAA,eAAe,EAAEA;AAFP,iBAAd;;AAIAqB,gBAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCtB,eAAjC;AACAW,gBAAAA,MAAM,CAACY,SAAP;AAAA;AAAA;AAAA;AAAA,yCAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACT,MAAK3C,QAAL,CAAc;AAChB4C,4BAAAA,OAAO,EAAEb,MAAM,CAACc,MADA;AAEhBT,4BAAAA,WAAW,EAAE,IAFG;AAGhBU,4BAAAA,MAAM,EAAEC,MAAM,CAACxB,IAAP,CAAYQ,MAAM,CAACc,MAAnB,CAHQ,CAGmB;;AAHnB,2BAAd,CADS;;AAAA;AAAA,+BAME,MAAKzC,KAAL,CAAW0C,MANb;AAAA;AAAA;AAAA;;AAAA;AAAA,iCAM6BlD,WAAW,CAACqC,IAAD,CANxC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,yCAMkD,GANlD;;AAAA;AAMTe,0BAAAA,QANS;AAOf7B,0BAAAA,gBAAgB,CAACoB,IAAjB,CAAsBS,QAAtB;;AACA,gCAAKhD,QAAL,CAAc;AAAEmB,4BAAAA,gBAAgB,EAAEA;AAApB,2BAAd;;AACAsB,0BAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCvB,gBAAlC;;AACA,gCAAKnB,QAAL,CAAc;AAACoC,4BAAAA,WAAW,EAAE;AAAd,2BAAd;;AAVe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAnB;AAYAL,gBAAAA,MAAM,CAACkB,aAAP,CAAqBhB,IAArB;AACH;;AA3BY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7GE;;AAAA,oEA4IH,UAACA,IAAD,EAAU;AACtB,UAAIL,CAAC,GAAG,CAAR;AADsB,yBAEiC,MAAKxB,KAFtC;AAAA,UAEjBkC,WAFiB,gBAEjBA,WAFiB;AAAA,UAEJnB,gBAFI,gBAEJA,gBAFI;AAAA,UAEcC,eAFd,gBAEcA,eAFd;AAGtBqB,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBT,IAAtB;;AACA,WAAKL,CAAC,GAAG,CAAT,EAAaA,CAAC,GAAGU,WAAW,CAACT,MAA7B,EAAsCD,CAAC,EAAvC,EAA2C;AACvC,YAAIK,IAAI,KAAKK,WAAW,CAACV,CAAD,CAAxB,EAA6B;AACzBU,UAAAA,WAAW,CAACY,MAAZ,CAAmBtB,CAAnB,EAAsB,CAAtB;AACAR,UAAAA,eAAe,CAAC8B,MAAhB,CAAuBtB,CAAvB,EAA0B,CAA1B;AACAT,UAAAA,gBAAgB,CAAC+B,MAAjB,CAAwBtB,CAAxB,EAA2B,CAA3B;AACA;AACH;AACJ;;AACD,YAAK5B,QAAL,CAAc;AACVsC,QAAAA,WAAW,EAAEA,WADH;AAEVlB,QAAAA,eAAe,EAAEA,eAFP;AAGVD,QAAAA,gBAAgB,EAAEA;AAHR,OAAd;;AAKAsB,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BtB,eAA/B;AACAqB,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCvB,gBAAlC;AACH,KA/JkB;;AAAA,qEAiKF,UAACgC,CAAD,SAAkB;AAAA,UAAZC,KAAY,SAAZA,KAAY;;AACjC,YAAKpD,QAAL,CAAc;AAAEqD,QAAAA,UAAU,GAAG;AAAEC,UAAAA,IAAI,EAAEF,KAAR;AAAeA,UAAAA,KAAK,EAALA;AAAf,SAAH,4BAA8B,MAAKhD,KAAL,CAAWiD,UAAzC;AAAZ,OAAd;AACD,KAnKkB;;AAEjB,UAAKjD,KAAL,GAAa;AACTC,MAAAA,aAAa,EAAE,EADN;AAETC,MAAAA,OAAO,EAAC,EAFC;AAGTW,MAAAA,GAAG,EAAE,EAHI;AAIToC,MAAAA,UAAU,EAAE,EAJH;AAKT7C,MAAAA,MAAM,EAAC,EALE;AAMTC,MAAAA,WAAW,EAAC,EANH;AAOTP,MAAAA,YAAY,EAAE,EAPL;AAQTD,MAAAA,OAAO,EAAE,KARA;AASTmC,MAAAA,WAAW,EAAE,KATJ;AAUTU,MAAAA,MAAM,EAAE,IAVC;AAWTR,MAAAA,WAAW,EAAE,EAXJ;AAYTnB,MAAAA,gBAAgB,EAAE,EAZT;AAaTC,MAAAA,eAAe,EAAE,EAbR;AAcTmC,MAAAA,KAAK,EAAE,KAdE;AAeTC,MAAAA,eAAe,EAAE,IAfR;AAgBTC,MAAAA,WAAW,EAAE;AAhBJ,KAAb;AAFiB;AAoBlB;;;;;;;;;;;;;;;uBAG+BpE,OAAO,CAACyB,OAAR,CAAgB4C,oBAAhB,GAAuCC,IAAvC,E;;;AAA1BC,gBAAAA,iB;;uBACgBnE,gBAAgB,CAACqB,OAAjB,CAAyB+C,SAAzB,CAAmCD,iBAAiB,CAAC,CAAD,CAApD,EAAyDD,IAAzD,E;;;AAAhBG,gBAAAA,O;AACJrB,gBAAAA,OAAO,CAACC,GAAR,CAAYoB,OAAZ;;uBACuBtE,IAAI,CAACkB,GAAL,CAASC,WAAT,E;;;AAAjBC,gBAAAA,Q;AACF2C,gBAAAA,K,GAAQ,K;;uBACF7D,WAAW,CAACoB,OAAZ,CAAoBiD,UAApB,CAA+BnD,QAAQ,CAAC,CAAD,CAAvC,EAA4C+C,IAA5C,E;;;;;uCAAuD,E;;;;;;;;;AAE/DJ,gBAAAA,KAAK,GAAG,IAAR,C,CACA;;;uBAC2BlE,OAAO,CAACyB,OAAR,CAAgBkD,UAAhB,CAA2BpD,QAAQ,CAAC,CAAD,CAAnC,EAAwC+C,IAAxC,E;;;AAAvBM,gBAAAA,c;AACAC,gBAAAA,O,GAAU3E,OAAO,CAAC0E,cAAD,C;;uBACGC,OAAO,CAACpD,OAAR,CAAgBqD,cAAhB,GAAiCR,IAAjC,E;;;AAApBF,gBAAAA,W;AACJA,gBAAAA,WAAW,IAAI,CAAf,GAAmBA,WAAW,GAAG,OAAjC,GAA2CA,WAAW,GAAG,MAAzD,C,CAEA;;;uBAC8BpE,OAAO,CAACyB,OAAR,CAAgB4C,oBAAhB,GAAuCC,IAAvC,E;;;AAA1BC,gBAAAA,kB;AACAQ,gBAAAA,sB,GAAyBR,kBAAiB,CAAC/B,M;AAC3CF,gBAAAA,I,GAAO,E;AACP0B,gBAAAA,U,GAAa,E;AAERzB,gBAAAA,C,GAAE,C;;;sBAAGA,CAAC,GAACwC,sB;;;;;AACVC,gBAAAA,Q,GAAW/E,QAAQ,CAACsE,kBAAiB,CAAChC,CAAD,CAAlB,C;;uBACHyC,QAAQ,CAACvD,OAAT,CAAiBwD,UAAjB,GAA8BX,IAA9B,E;;;AAAhBY,gBAAAA,O;AACJ5C,gBAAAA,IAAI,gCAAOA,IAAP,sBAAgB4C,OAAO,CAAC,CAAD,CAAvB,EAAJ;;;AAHsC3C,gBAAAA,CAAC,E;;;;;AAKzC;AACAD,gBAAAA,IAAI,sBAAO,SAAQA,IAAR,CAAP,CAAJ;;AAEA,qBAASC,EAAT,GAAa,CAAb,EAAgBA,EAAC,GAACD,IAAI,CAACE,MAAvB,EAA+BD,EAAC,EAAhC,EAAoC;AAChCyB,kBAAAA,UAAU,CAACd,IAAX,CAAgB;AACZiC,oBAAAA,GAAG,EAAE5C,EADO;AAEZ0B,oBAAAA,IAAI,EAAE3B,IAAI,CAACC,EAAD,CAFE;AAGZwB,oBAAAA,KAAK,EAAEzB,IAAI,CAACC,EAAD;AAHC,mBAAhB;AAKH;;AAED,qBAAK5B,QAAL,CAAe;AAAEuD,kBAAAA,KAAK,EAAEA,KAAT;AACEE,kBAAAA,WAAW,EAAEA,WADf;AAEEJ,kBAAAA,UAAU,EAAEA;AAFd,iBAAf;;;AAIF,qBAAKrD,QAAL,CAAe;AAAEwD,kBAAAA,eAAe,EAAE;AAAnB,iBAAf;;;;;;;;;;;;;;;QAGF;;;;sCAmGkBrB,K,EAAO;AAAA;;AAAA,UAClBG,WADkB,GACH,KAAKlC,KADF,CAClBkC,WADkB;;AAEvB,UAAG,KAAKlC,KAAL,CAAWkC,WAAX,CAAuBT,MAAvB,IAAiC,CAApC,EAAsC;AACpC,eACE,oBAAC,OAAD;AAAS,UAAA,WAAW;AAApB,WACE,oBAAC,MAAD;AAAQ,UAAA,IAAI;AAAZ,WACE,oBAAC,IAAD;AAAM,UAAA,IAAI,EAAC;AAAX,UADF,6CADF,EAKE;AACI,UAAA,KAAK,EAAE;AAAE4C,YAAAA,OAAO,EAAE;AAAX,WADX;AAEI,UAAA,IAAI,EAAC,MAFT;AAGI,UAAA,QAAQ,EAAE;AAAA,mBAAM,MAAI,CAACC,cAAL,EAAN;AAAA,WAHd;AAII,UAAA,GAAG,EAAE,aAAAxC,SAAS;AAAA,mBAAI,MAAI,CAACA,SAAL,GAAiBA,SAArB;AAAA;AAJlB,UALF,EAUE,oBAAC,MAAD;AAAQ,UAAA,OAAO,MAAf;AAAgB,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACA,SAAL,CAAeyC,KAAf,EAAN;AAAA,WAAzB;AAAuD,UAAA,OAAO,EAAE,KAAKvE,KAAL,CAAWgC;AAA3E,0BAVF,CADF;AAcD,OAfD,MAeO;AACL,eACE,oBAAC,OAAD;AAAS,UAAA,WAAW;AAApB,WACE,oCACI;AAAK,UAAA,KAAK,EAAE;AAACwC,YAAAA,YAAY,EAAE;AAAf;AAAZ,WACKzC,KADL,CADJ,EAII;AACI,UAAA,KAAK,EAAE;AAAEsC,YAAAA,OAAO,EAAE;AAAX,WADX;AAEI,UAAA,IAAI,EAAC,MAFT;AAGI,UAAA,QAAQ,EAAE;AAAA,mBAAM,MAAI,CAACC,cAAL,EAAN;AAAA,WAHd;AAII,UAAA,GAAG,EAAE,aAAAxC,SAAS;AAAA,mBAAI,MAAI,CAACA,SAAL,GAAiBA,SAArB;AAAA;AAJlB,UAJJ,EASI,oBAAC,MAAD;AAAQ,UAAA,OAAO,MAAf;AAAgB,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACA,SAAL,CAAeyC,KAAf,EAAN;AAAA,WAAzB;AAAuD,UAAA,OAAO,EAAE,KAAKvE,KAAL,CAAWgC;AAA3E,0BATJ,CADF,CADF;AAeD;AACF;;;6BAEQ;AAAA;;AACP,UAAI,KAAKhC,KAAL,CAAWmD,KAAf,EAAsB;AAAA,YACfjB,WADe,GACA,KAAKlC,KADL,CACfkC,WADe;AAEpB,YAAIuC,QAAQ,GAAG,IAAf;;AAEA,YAAIvC,WAAW,KAAK,IAApB,EAA0B;AACxBuC,UAAAA,QAAQ,GAAGvC,WAAW,CAACwC,GAAZ,CAAgB,UAACC,IAAD,EAAOC,KAAP;AAAA,mBACvB,oBAAC,KAAD;AAAO,cAAA,EAAE,EAAC,GAAV;AAAc,cAAA,GAAG,EAAEA,KAAnB;AAA0B,cAAA,IAAI,EAAC;AAA/B,eACKD,IAAI,CAACvC,IADV,EAEI,oBAAC,IAAD;AAAM,cAAA,IAAI,EAAC,QAAX;AACM,cAAA,OAAO,EAAE;AAAA,uBAAM,MAAI,CAACyC,aAAL,CAAmBF,IAAnB,CAAN;AAAA;AADf,cAFJ,CADuB;AAAA,WAAhB,CAAX;AAOD;;AACD,eACE,oBAAC,MAAD;AAAQ,UAAA,WAAW,EAAE,KAAK3E,KAAL,CAAWqD;AAAhC,WACI,oBAAC,SAAD;AAAW,UAAA,KAAK,EAAE;AAACyB,YAAAA,MAAM,EAAC;AAAR;AAAlB,WACE,oBAAC,OAAD;AAAS,UAAA,MAAM;AAAf,UADF,EAEE,oBAAC,OAAD;AAAS,UAAA,SAAS,EAAC,QAAnB;AAA4B,UAAA,EAAE,EAAC;AAA/B,sCAFF,EAGE,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAE,CAAC,CAAC,KAAK9E,KAAL,CAAWF,YAA1B;AAAwC,UAAA,KAAK,EAAE;AAAEiF,YAAAA,SAAS,EAAE;AAAb;AAA/C,WACI,oBAAC,IAAD,CAAM,KAAN;AAAY,UAAA,QAAQ,EAAE;AAAtB,WACI,oDADJ,EAEI,oBAAC,KAAD;AACI,UAAA,WAAW,EAAC,aADhB;AAEI,UAAA,KAAK,EAAE,KAAK/E,KAAL,CAAWC,aAFtB;AAGI,UAAA,QAAQ,EAAE,kBAAA+E,KAAK;AAAA,mBAAI,MAAI,CAACpF,QAAL,CAAc;AAAEK,cAAAA,aAAa,EAAE+E,KAAK,CAACC,MAAN,CAAajC;AAA9B,aAAd,CAAJ;AAAA;AAHnB,UAFJ,CADJ,EASI,oBAAC,IAAD,CAAM,KAAN;AAAY,UAAA,QAAQ,EAAE;AAAtB,WACI,wHADJ,EAEI,oBAAC,KAAD,sFAFJ,EAGI;AAAG,UAAA,KAAK,EAAE;AAACqB,YAAAA,OAAO,EAAE;AAAV,WAAV;AAAmC,UAAA,IAAI,EAAC,8CAAxC;AAAuF,UAAA,MAAM,EAAC;AAA9F,4CAHJ,EAII,oBAAC,QAAD;AACI,UAAA,WAAW,EAAC,mBADhB;AAEI,UAAA,KAAK,EAAE,KAAKrE,KAAL,CAAWE,OAFtB;AAGI,UAAA,QAAQ,EAAE,kBAAA8E,KAAK;AAAA,mBAAI,MAAI,CAACpF,QAAL,CAAc;AAAEM,cAAAA,OAAO,EAAE8E,KAAK,CAACC,MAAN,CAAajC;AAAxB,aAAd,CAAJ;AAAA;AAHnB,UAJJ,CATJ,EAmBI,oBAAC,IAAD,CAAM,KAAN,QACI,0CADJ,EAEI,oBAAC,QAAD;AAAU,UAAA,SAAS,MAAnB;AACU,UAAA,OAAO,EAAE,KAAKhD,KAAL,CAAWiD,UAD9B;AAEU,UAAA,SAAS,MAFnB;AAGU,UAAA,QAAQ,MAHlB;AAIU,UAAA,cAAc,MAJxB;AAKU,UAAA,MAAM,MALhB;AAMU,UAAA,WAAW,EAAC,mDANtB;AAOU,UAAA,KAAK,EAAE,KAAKjD,KAAL,CAAWa,GAP5B;AAQU,UAAA,QAAQ,EAAG,kBAACkC,CAAD;AAAA,gBAAMC,KAAN,SAAMA,KAAN;AAAA,mBAAkB,MAAI,CAACpD,QAAL,CAAc;AAAEiB,cAAAA,GAAG,EAAEmC;AAAP,aAAd,CAAlB;AAAA,WARrB;AASU,UAAA,SAAS,EAAE,KAAKkC;AAT1B,UAFJ,CAnBJ,EAiCI,oBAAC,IAAD,CAAM,KAAN;AAAY,UAAA,QAAQ,EAAE;AAAtB,WACI,4CADJ,EAEI,oBAAC,KAAD;AACI,UAAA,KAAK,EAAC,QADV;AAEI,UAAA,aAAa,EAAC,OAFlB;AAGI,UAAA,WAAW,EAAC,4BAHhB;AAII,UAAA,KAAK,EAAE,KAAKlF,KAAL,CAAWI,MAJtB;AAKI,UAAA,QAAQ,EAAE,kBAAA4E,KAAK;AAAA,mBAAI,MAAI,CAACpF,QAAL,CAAc;AAAEQ,cAAAA,MAAM,EAAE4E,KAAK,CAACC,MAAN,CAAajC;AAAvB,aAAd,CAAJ;AAAA;AALnB,UAFJ,CAjCJ,EA2CI,oBAAC,IAAD,CAAM,KAAN;AAAY,UAAA,QAAQ,EAAE;AAAtB,WACI,sDADJ,EAEI,oBAAC,KAAD;AACI,UAAA,KAAK,EAAC,SADV;AAEI,UAAA,aAAa,EAAC,OAFlB;AAGI,UAAA,WAAW,EAAC,iDAHhB;AAII,UAAA,KAAK,EAAE,KAAKhD,KAAL,CAAWK,WAJtB;AAKI,UAAA,QAAQ,EAAE,kBAAA2E,KAAK;AAAA,mBAAI,MAAI,CAACpF,QAAL,CAAc;AAAES,cAAAA,WAAW,EAAE2E,KAAK,CAACC,MAAN,CAAajC;AAA5B,aAAd,CAAJ;AAAA;AALnB,UAFJ,CA3CJ,EAqDI,oBAAC,IAAD,CAAM,KAAN,QACG,KAAKmC,iBAAL,CAAuBV,QAAvB,CADH,CArDJ,EAwDI,oBAAC,OAAD;AAAS,UAAA,KAAK,MAAd;AAAe,UAAA,MAAM,EAAC,OAAtB;AAA8B,UAAA,OAAO,EAAE,KAAKzE,KAAL,CAAWF;AAAlD,UAxDJ,EAyDI,oBAAC,KAAD;AAAO,UAAA,IAAI,EAAE,KAAKE,KAAL,CAAWH,OAAxB;AAAiC,UAAA,OAAO,EAAE,oBAAC,MAAD;AAAQ,YAAA,OAAO,MAAf;AAAgB,YAAA,OAAO,EAAE,KAAKuF;AAA9B,+BAA1C;AAA4G,UAAA,KAAK,MAAjH;AAAkH,UAAA,IAAI,EAAC;AAAvH,WACE,oBAAC,MAAD;AAAQ,UAAA,OAAO,EAAC;AAAhB,UADF,EAEE,oBAAC,KAAD,CAAO,OAAP,QACE,0OADF,EAKE,oBAAC,MAAD;AAAQ,UAAA,MAAM,MAAd;AAAe,UAAA,MAAM,EAAC;AAAtB,qBALF,CAFF,CAzDJ,CAHF,CADJ,CADF;AA8ED,OA3FD,MA2FO;AACL,eACE,oBAAC,MAAD;AAAQ,UAAA,WAAW,EAAE,KAAKpF,KAAL,CAAWqD;AAAhC,WACE,oBAAC,SAAD;AAAW,UAAA,KAAK,EAAE;AAACgC,YAAAA,KAAK,EAAE,MAAR;AAAgBP,YAAAA,MAAM,EAAC;AAAvB;AAAlB,WACE,oBAAC,KAAD;AAAO,UAAA,IAAI,EAAE,KAAK9E,KAAL,CAAWoD,eAAxB;AAAyC,UAAA,KAAK,MAA9C;AAA+C,UAAA,IAAI,EAAC;AAApD,WACE,oBAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,UAAb;AAAwB,UAAA,OAAO,EAAC;AAAhC,UADF,EAEE,oBAAC,KAAD,CAAO,OAAP,QACE,oBAAC,MAAD;AAAQ,UAAA,MAAM,MAAd;AAAe,UAAA,MAAM,EAAC;AAAtB,0BADF,CAFF,CADF,EASE,oBAAC,KAAD;AAAO,UAAA,IAAI,EAAE,CAAC,KAAKpD,KAAL,CAAWmD,KAAZ,IAAqB,CAAC,KAAKnD,KAAL,CAAWoD,eAA9C;AAA+D,UAAA,KAAK,MAApE;AAAqE,UAAA,IAAI,EAAC;AAA1E,WACE,oBAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,UAAb;AAAwB,UAAA,OAAO,EAAC;AAAhC,UADF,EAEE,oBAAC,KAAD,CAAO,OAAP,QACE,+HADF,CAFF,EAOE,oBAAC,KAAD,CAAO,OAAP,QACE,oBAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,OAAd;AAAsB,UAAA,QAAQ,MAA9B;AAA+B,UAAA,QAAQ,EAAC,QAAxC;AAAiD,UAAA,OAAO,EAAE,mBAAM;AAC9D7D,YAAAA,MAAM,CAAC6B,SAAP,CAAiB,GAAjB;AAAsB;AADxB,kCADF,CAPF,CATF,CADF,CADF;AA6BD;AACF;;;;EArUqBnD,S;;AAwU1B,eAAeyB,WAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Form, Button, Input, Message, Dropdown, Header,\r\n  Icon, Segment, Container, TextArea, Divider, Label, Modal, Loader } from 'semantic-ui-react';\r\nimport Layout from '../components/Layout';\r\nimport factory from '../ethereum/factory';\r\nimport Question from '../ethereum/question';\r\nimport Profile from '../ethereum/profile';\r\nimport web3 from '../ethereum/web3';\r\nimport EthQuestionToken from '../ethereum/token';\r\nimport credentials from '../ethereum/credentials';\r\nimport { Router } from '../routes';\r\nimport { getIpfsHash } from './ipfs';\r\nimport { logging } from './logger';\r\n\r\nclass NewQuestion extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n          questionTitle: '',\r\n          content:'',\r\n          tag: [],\r\n          tagOptions: [],\r\n          reward:'',\r\n          maxDuration:'',\r\n          errorMessage: '',\r\n          loading: false,\r\n          fileLoading: false,\r\n          buffer: null,\r\n          files_array: [],\r\n          fileHashes_array: [],\r\n          fileNames_array: [],\r\n          login: false,\r\n          resourceLoading: true,\r\n          accountType: null\r\n      };\r\n    }\r\n\r\n    async componentDidMount() {\r\n      let deployedQuestions = await factory.methods.getDeployedQuestions().call();\r\n      let balance = await EthQuestionToken.methods.balanceOf(deployedQuestions[0]).call();\r\n      console.log(balance)\r\n      const accounts = await web3.eth.getAccounts();\r\n      let login = false;\r\n      if (await credentials.methods.getBinding(accounts[0]).call() === \"\") {\r\n      } else {\r\n        login = true;\r\n        // Get Account Type\r\n        let profileAddress = await factory.methods.getProfile(accounts[0]).call();\r\n        let profile = Profile(profileAddress);\r\n        let accountType = await profile.methods.getAccountType().call();\r\n        accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"\r\n\r\n        // Retrieve previously used tags and ether balance\r\n        let deployedQuestions = await factory.methods.getDeployedQuestions().call();\r\n        let deployedQuestionsCount = deployedQuestions.length;\r\n        let tags = [];\r\n        let tagOptions = [];\r\n\r\n        for (let i=0; i<deployedQuestionsCount; i++) {\r\n          let question = Question(deployedQuestions[i])\r\n          let summary = await question.methods.getSummary().call();\r\n          tags = [...tags, ...summary[8]]\r\n        }\r\n        // Remove duplicated tags\r\n        tags = [...new Set(tags)]\r\n\r\n        for (let i = 0; i<tags.length; i++) {\r\n            tagOptions.push({\r\n                key: i,\r\n                text: tags[i],\r\n                value: tags[i]\r\n            });\r\n        }\r\n\r\n        this.setState( { login: login,\r\n                         accountType: accountType,\r\n                         tagOptions: tagOptions });\r\n      }\r\n      this.setState( { resourceLoading: false });\r\n    }\r\n\r\n    // Submit the question to be stored on the Ethereum Blockchain\r\n    onSubmit = async () => {\r\n        this.setState({ loading: true, errorMessage: '' });\r\n        // Ensures all fields are filled\r\n        if (this.checkFieldEmpty(this.state.questionTitle) && this.checkFieldEmpty(this.state.content) && this.checkIntegerField(this.state.reward) && this.checkIntegerField(this.state.maxDuration)){\r\n          try {\r\n              const accounts = await web3.eth.getAccounts();\r\n              // Logs the transactions\r\n              let logTransaction = logging(\"Created New Question: \" + this.state.questionTitle);\r\n              // Create a new post\r\n              await factory.methods\r\n              .createQuestion(this.state.questionTitle, this.state.content, this.lowerCase(this.state.tag), Number(this.state.reward)*10e3, parseFloat(this.state.maxDuration) * 60 * 60,\r\n                this.state.fileHashes_array, this.state.fileNames_array, logTransaction, EthQuestionToken._address)\r\n              .send({\r\n                  from: accounts[0]\r\n              });\r\n              Router.pushRoute('/home'); // Automatic redirect the user.\r\n          } catch (err) {\r\n              this.setState({ errorMessage: err.message });\r\n          }\r\n          this.setState({ loading: false });\r\n        } else {\r\n          this.setState({ errorMessage: \"Required Field(s) Empty\" });\r\n          this.setState({ loading: false });\r\n        }\r\n    };\r\n\r\n    checkFieldEmpty = (field) => {\r\n      return field === \"\" ? false : true;\r\n    }\r\n\r\n    checkIntegerField = (field) => {\r\n      return field > 0 ? true : false;\r\n    }\r\n\r\n    lowerCase = (tags) => {\r\n      for (let i = 0; i<tags.length; i++) {\r\n        tags[i] = tags[i].toLowerCase();\r\n      }\r\n      return tags;\r\n    }\r\n\r\n    // Select a file to upload\r\n    onFileSelected = async () => {\r\n        // Access JavaScript FileReader() method for conversion to buffer\r\n        const reader = new FileReader();\r\n        const file = this.fileInput.files[0];\r\n        this.setState({fileLoading: true});\r\n        if (file instanceof Blob ) {\r\n            let {files_array, fileNames_array, fileHashes_array} = this.state;\r\n            files_array.push(file);\r\n            fileNames_array.push(file.name);\r\n            this.setState({\r\n                files_array: files_array,\r\n                fileNames_array: fileNames_array\r\n            });\r\n            console.log(\"fileNames_array: \", fileNames_array);\r\n            reader.onloadend = async () => {\r\n                await this.setState({\r\n                    fileUrl: reader.result,\r\n                    fileLoading: true,\r\n                    buffer: Buffer.from(reader.result) // File is converted to a buffer for upload to IPFS\r\n                });\r\n                const fileHash = this.state.buffer ? (await getIpfsHash(file)) : '0';\r\n                fileHashes_array.push(fileHash);\r\n                this.setState({ fileHashes_array: fileHashes_array });\r\n                console.log(\"fileHashes_array: \", fileHashes_array);\r\n                this.setState({fileLoading: false});\r\n            }\r\n            reader.readAsDataURL(file);\r\n        }\r\n    }\r\n\r\n    // Remove a previously selected file to upload\r\n    onFileRemoved = (file) => {\r\n        var i = 0;\r\n        let {files_array, fileHashes_array, fileNames_array} = this.state;\r\n        console.log('file: ', file);\r\n        for (i = 0 ; i < files_array.length ; i++) {\r\n            if (file === files_array[i]) {\r\n                files_array.splice(i, 1);\r\n                fileNames_array.splice(i, 1);\r\n                fileHashes_array.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n        this.setState({\r\n            files_array: files_array,\r\n            fileNames_array: fileNames_array,\r\n            fileHashes_array: fileHashes_array\r\n        });\r\n        console.log('fileNames_array', fileNames_array);\r\n        console.log(\"fileHashes_array: \", fileHashes_array);\r\n    }\r\n\r\n    handleAddition = (e, { value }) => {\r\n      this.setState({ tagOptions: [{ text: value, value }, ...this.state.tagOptions] });\r\n    }\r\n\r\n    renderFilesUpload(files) {\r\n      let {files_array} = this.state;\r\n      if(this.state.files_array.length == 0){\r\n        return (\r\n          <Segment placeholder>\r\n            <Header icon>\r\n              <Icon name='images outline' />\r\n              No images are uploaded for this question\r\n            </Header>\r\n            <input\r\n                style={{ display: 'none' }}\r\n                type='file'\r\n                onChange={() => this.onFileSelected()}\r\n                ref={fileInput => this.fileInput = fileInput}/>\r\n            <Button primary onClick={() => this.fileInput.click()} loading={this.state.fileLoading}>Upload Image</Button>\r\n          </Segment>\r\n        )\r\n      } else {\r\n        return (\r\n          <Segment placeholder>\r\n            <center>\r\n                <div style={{marginBottom: '20px'}}>\r\n                    {files}\r\n                </div>\r\n                <input\r\n                    style={{ display: 'none' }}\r\n                    type='file'\r\n                    onChange={() => this.onFileSelected()}\r\n                    ref={fileInput => this.fileInput = fileInput}/>\r\n                <Button primary onClick={() => this.fileInput.click()} loading={this.state.fileLoading}>Upload Files</Button>\r\n            </center>\r\n          </Segment>\r\n        )\r\n      }\r\n    };\r\n\r\n    render() {\r\n      if (this.state.login) {\r\n        let {files_array} = this.state;\r\n        let elmFiles = null;\r\n\r\n        if (files_array !== null) {\r\n          elmFiles = files_array.map((item, index) =>\r\n              <Label as='a' key={index} size='big'>\r\n                  {item.name}\r\n                  <Icon name='delete'\r\n                        onClick={() => this.onFileRemoved(item)} />\r\n              </Label>\r\n          );\r\n        }\r\n        return (\r\n          <Layout accountType={this.state.accountType}>\r\n              <Container style={{height:\"100vh\"}}>\r\n                <Divider hidden/>\r\n                <Segment textAlign='center' as='h3'>Creating Of New Question</Segment>\r\n                <Form error={!!this.state.errorMessage} style={{ marginTop: '10px' }}>\r\n                    <Form.Field required={true}>\r\n                        <label>Question Title</label>\r\n                        <Input\r\n                            placeholder=\"Enter Title\"\r\n                            value={this.state.questionTitle}\r\n                            onChange={event => this.setState({ questionTitle: event.target.value })}\r\n                        />\r\n                    </Form.Field>\r\n                    <Form.Field required={true}>\r\n                        <label>Question Description (To include math questions, delimit the latex format with $$)</label>\r\n                        <Label>Example: This is my equation: $$1 \\triangleright 1 \\bigcirc  \\bigcirc $$</Label>\r\n                        <a style={{display: \"table-cell\"}} href=\"https://www.codecogs.com/latex/eqneditor.php\" target=\"_blank\">Link to Supported Latex Editor</a>\r\n                        <TextArea\r\n                            placeholder=\"Enter Description\"\r\n                            value={this.state.content}\r\n                            onChange={event => this.setState({ content: event.target.value })}\r\n                        />\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label>Tags</label>\r\n                        <Dropdown clearable\r\n                                  options={this.state.tagOptions}\r\n                                  selection\r\n                                  multiple\r\n                                  allowAdditions\r\n                                  search\r\n                                  placeholder='Select from existing tags or create your own tags'\r\n                                  value={this.state.tag}\r\n                                  onChange={ (e, { value }) => this.setState({ tag: value })}\r\n                                  onAddItem={this.handleAddition} />\r\n\r\n                    </Form.Field>\r\n                    <Form.Field required={true}>\r\n                        <label>EQT(s)</label>\r\n                        <Input\r\n                            label=\"EQT(s)\"\r\n                            labelPosition=\"right\"\r\n                            placeholder='Enter your value of reward'\r\n                            value={this.state.reward}\r\n                            onChange={event => this.setState({ reward: event.target.value })}\r\n                        />\r\n                    </Form.Field>\r\n                    <Form.Field required={true}>\r\n                        <label>Maximum Duration</label>\r\n                        <Input\r\n                            label=\"hour(s)\"\r\n                            labelPosition=\"right\"\r\n                            placeholder='Enter the duration for the question to be valid'\r\n                            value={this.state.maxDuration}\r\n                            onChange={event => this.setState({ maxDuration: event.target.value })}\r\n                        />\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      {this.renderFilesUpload(elmFiles)}\r\n                    </Form.Field>\r\n                    <Message error header=\"Oops!\" content={this.state.errorMessage} />\r\n                    <Modal open={this.state.loading} trigger={<Button primary onClick={this.onSubmit}>Submit Question</Button>} basic size='small'>\r\n                      <Header content='Posting New Question' />\r\n                      <Modal.Content>\r\n                        <p>\r\n                          Please Confirm the MetaMask Transaction Request to submit your Question to the Block-Chain Network.\r\n                          Upon successful submission, you will be redirected to the Home Page. This process might take awhile.\r\n                        </p>\r\n                        <Loader active inline=\"centered\">\r\n                          Loading\r\n                        </Loader>\r\n                      </Modal.Content>\r\n                    </Modal>\r\n                </Form>\r\n              </Container>\r\n          </Layout>\r\n        );\r\n      } else {\r\n        return (\r\n          <Layout accountType={this.state.accountType}>\r\n            <Container style={{width: \"100%\", height:\"100vh\"}}>\r\n              <Modal open={this.state.resourceLoading} basic size='small'>\r\n                <Header icon='ethereum' content='Loading Resources' />\r\n                <Modal.Content>\r\n                  <Loader active inline=\"centered\">\r\n                    Loading Form\r\n                  </Loader>\r\n                </Modal.Content>\r\n              </Modal>\r\n              <Modal open={!this.state.login && !this.state.resourceLoading} basic size='small'>\r\n                <Header icon='ethereum' content='Not Registered' />\r\n                <Modal.Content>\r\n                  <p>\r\n                    You are currently not registered to access the platform. Please have your account registered.\r\n                  </p>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                  <Button color='green' inverted attached='bottom' onClick={() => {\r\n                    Router.pushRoute('/')}\r\n                  }>\r\n                    Register For Account\r\n                  </Button>\r\n                </Modal.Actions>\r\n              </Modal>\r\n            </Container>\r\n          </Layout>\r\n        );\r\n      }\r\n    }\r\n}\r\n\r\nexport default NewQuestion;\r\n"]},"metadata":{},"sourceType":"module"}