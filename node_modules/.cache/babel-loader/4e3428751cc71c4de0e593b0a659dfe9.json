{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport Layout from '../components/Layout';\nimport { Container, Segment, Header, Divider, Button, Icon, Dropdown } from \"semantic-ui-react\";\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\nimport Question from '../ethereum/question';\nimport credentials from '../ethereum/credentials'; // Ensure jsPDF does not import on Server Side\n\nvar jsPDF = null;\n\nif (typeof window !== \"undefined\") {\n  import(\"jspdf\").then(function (module) {\n    jsPDF = module.default;\n  });\n}\n\nvar AdminPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AdminPage, _Component);\n\n  function AdminPage(props) {\n    var _this;\n\n    _classCallCheck(this, AdminPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AdminPage).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"export\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var doc, questionNumber, question, summary, answerList, questionTitle, j, i, answer;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(_this.state.questionNumber != \"\")) {\n                _context.next = 20;\n                break;\n              }\n\n              // Initialise the PDF document to write\n              doc = new jsPDF(); // Retrieve all the data of selected question\n\n              questionNumber = Number(_this.state.questionNumber) - 1;\n              question = Question(_this.props.deployedQuestions[questionNumber]);\n              _context.next = 6;\n              return question.methods.getSummary().call();\n\n            case 6:\n              summary = _context.sent;\n              _context.next = 9;\n              return question.methods.getAnswerList().call();\n\n            case 9:\n              answerList = _context.sent;\n              questionTitle = \"Question: \" + summary[1]; // Writing to the PDF document\n\n              doc.text(20, 20, questionTitle);\n              doc.setLineWidth(0.5);\n              doc.line(20, 22, 185, 22);\n              doc.text(20, 30, \"Answers:\");\n              j = 40;\n\n              for (i = 0; i < answerList.length; i++) {\n                answer = \"(\" + (i + 1) + \") \" + answerList[i][0]; // Creates a new page for every 10 answers\n\n                if (i % 10 == 0) {\n                  doc.addPage();\n                  j = 30;\n                }\n\n                doc.text(20, j, answer);\n                j = j + 10;\n              }\n\n              doc.save(\"Answer.pdf\");\n              _context.next = 21;\n              break;\n\n            case 20:\n              console.log(\"Please select a question\");\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    _this.state = {\n      questionOptions: [],\n      questionNumber: ''\n    };\n    return _this;\n  }\n\n  _createClass(AdminPage, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context2.sent;\n                _context2.next = 5;\n                return credentials.methods.getBinding(accounts[0]).call();\n\n              case 5:\n                _context2.t0 = _context2.sent;\n\n                if (!(_context2.t0 === \"\")) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                Router.pushRoute(\"/\"); // Automatic redirect the user to Login or Sign Up\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var questionOptions, i;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                questionOptions = [];\n\n                for (i = 0; i < this.props.deployedQuestionsCount; i++) {\n                  questionOptions.push({\n                    key: i + 1,\n                    text: this.props.deployedQuestions[i],\n                    value: i + 1\n                  });\n                }\n\n                this.setState({\n                  questionOptions: questionOptions\n                });\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Layout, null, React.createElement(Container, {\n        style: {\n          height: \"100vh\"\n        }\n      }, React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(Segment, {\n        raised: true,\n        textAlign: \"left\"\n      }, React.createElement(Header, {\n        as: \"h2\",\n        textAlign: \"center\"\n      }, \"Exporting Questions & Answers As PDF\")), React.createElement(Divider, {\n        hidden: true\n      }), React.createElement(\"p\", {\n        style: {\n          fontSize: '16px'\n        }\n      }, \"Select the question to export the question and it's corresponding answers\"), React.createElement(Dropdown, {\n        clearable: true,\n        options: this.state.questionOptions,\n        selection: true,\n        placeholder: \"Select the question to export\",\n        value: this.state.questionNumber,\n        onChange: function onChange(e, _ref2) {\n          var value = _ref2.value;\n          return _this2.setState({\n            questionNumber: value\n          });\n        }\n      }), React.createElement(Button, {\n        icon: true,\n        labelPosition: \"left\",\n        color: \"red\",\n        onClick: this.export,\n        style: {\n          left: \"20px\"\n        }\n      }, React.createElement(Icon, {\n        name: \"download\"\n      }), \"Export As PDF\")));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var accounts, deployedQuestions, deployedQuestionsCount;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context4.sent;\n                _context4.next = 5;\n                return credentials.methods.getBinding(accounts[0]).call();\n\n              case 5:\n                _context4.t0 = _context4.sent;\n\n                if (!(_context4.t0 === \"\")) {\n                  _context4.next = 8;\n                  break;\n                }\n\n                Router.pushRoute(\"/\");\n\n              case 8:\n                _context4.next = 10;\n                return factory.methods.getDeployedQuestions().call();\n\n              case 10:\n                deployedQuestions = _context4.sent;\n                deployedQuestionsCount = deployedQuestions.length;\n                return _context4.abrupt(\"return\", {\n                  accounts: accounts,\n                  deployedQuestionsCount: deployedQuestionsCount,\n                  deployedQuestions: deployedQuestions\n                });\n\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function getInitialProps() {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return AdminPage;\n}(Component);\n\nexport default AdminPage;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\admin.js"],"names":["React","Component","Layout","Container","Segment","Header","Divider","Button","Icon","Dropdown","web3","factory","Question","credentials","jsPDF","window","then","module","default","AdminPage","props","state","questionNumber","doc","Number","question","deployedQuestions","methods","getSummary","call","summary","getAnswerList","answerList","questionTitle","text","setLineWidth","line","j","i","length","answer","addPage","save","console","log","questionOptions","eth","getAccounts","accounts","getBinding","Router","pushRoute","deployedQuestionsCount","push","key","value","setState","height","fontSize","e","export","left","getDeployedQuestions"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from '../components/Layout';\r\nimport { Container, Segment, Header, Divider, Button, Icon, Dropdown } from \"semantic-ui-react\";\r\nimport web3 from '../ethereum/web3';\r\nimport factory from '../ethereum/factory';\r\nimport Question from '../ethereum/question';\r\nimport credentials from '../ethereum/credentials';\r\n\r\n// Ensure jsPDF does not import on Server Side\r\nlet jsPDF = null;\r\nif (typeof window !== \"undefined\") {\r\n  import(\"jspdf\").then(module => {\r\n    jsPDF = module.default;\r\n  });\r\n}\r\n\r\nclass AdminPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      questionOptions: [],\r\n      questionNumber: ''\r\n    };\r\n  }\r\n\r\n  static async getInitialProps () {\r\n      const accounts = await web3.eth.getAccounts();\r\n      // Redirect E-Wallet that are not Logged In to the Login Page\r\n      if (await credentials.methods.getBinding(accounts[0]).call() === \"\"){\r\n          Router.pushRoute(`/`);\r\n      }\r\n\r\n      // Retrieve an array of addresses of questions deployed\r\n      let deployedQuestions = await factory.methods.getDeployedQuestions().call();\r\n      let deployedQuestionsCount = deployedQuestions.length;\r\n\r\n      return { accounts, deployedQuestionsCount, deployedQuestions }\r\n  }\r\n\r\n  async componentWillMount() {\r\n    // Retrieve the Ethereum Account from MetaMask\r\n    const accounts = await web3.eth.getAccounts();\r\n    // Redirect E-Wallet that are not Logged In to the Login Page\r\n    if (await credentials.methods.getBinding(accounts[0]).call() === \"\"){\r\n        Router.pushRoute(`/`); // Automatic redirect the user to Login or Sign Up\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let questionOptions = [];\r\n    for (let i = 0; i < this.props.deployedQuestionsCount; i++) {\r\n        questionOptions.push({\r\n            key: i+1,\r\n            text: this.props.deployedQuestions[i],\r\n            value: i+1\r\n        });\r\n    }\r\n    this.setState( { questionOptions: questionOptions });\r\n  }\r\n\r\n  export = async () => {\r\n    // Check that a question must be selected\r\n    if (this.state.questionNumber != \"\") {\r\n      // Initialise the PDF document to write\r\n      let doc = new jsPDF()\r\n\r\n      // Retrieve all the data of selected question\r\n      let questionNumber = Number(this.state.questionNumber) - 1;\r\n      let question = Question(this.props.deployedQuestions[questionNumber])\r\n      let summary = await question.methods.getSummary().call();\r\n      let answerList = await question.methods.getAnswerList().call();\r\n      let questionTitle = \"Question: \" + summary[1];\r\n\r\n      // Writing to the PDF document\r\n      doc.text(20, 20, questionTitle);\r\n      doc.setLineWidth(0.5)\r\n      doc.line(20, 22, 185, 22)\r\n      doc.text(20, 30, \"Answers:\");\r\n      let j = 40;\r\n      for (let i = 0; i < answerList.length; i++) {\r\n        let answer = \"(\" + (i+1) + \") \" + answerList[i][0];\r\n        // Creates a new page for every 10 answers\r\n        if (i % 10 == 0) {\r\n          doc.addPage();\r\n          j = 30;\r\n        }\r\n        doc.text(20, j, answer);\r\n        j = j + 10;\r\n      }\r\n      doc.save(\"Answer.pdf\");\r\n    } else {\r\n      console.log(\"Please select a question\")\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <Container style={{height:\"100vh\"}}>\r\n          <Divider hidden/>\r\n          <Segment raised textAlign='left'>\r\n            <Header as='h2' textAlign='center'>\r\n              Exporting Questions & Answers As PDF\r\n            </Header>\r\n          </Segment>\r\n          <Divider hidden/>\r\n          <p style={{fontSize:'16px'}}>\r\n            Select the question to export the question and it's corresponding answers\r\n          </p>\r\n          <Dropdown clearable\r\n                    options={this.state.questionOptions}\r\n                    selection\r\n                    placeholder='Select the question to export'\r\n                    value={this.state.questionNumber}\r\n                    onChange={ (e, { value }) => this.setState({ questionNumber: value })}/>\r\n          <Button icon labelPosition='left' color=\"red\" onClick={this.export} style={{left:\"20px\"}}>\r\n            <Icon name='download'/>\r\n            Export As PDF\r\n          </Button>\r\n        </Container>\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AdminPage;\r\n"]},"metadata":{},"sourceType":"module"}