{"ast":null,"code":"// // Imports Web3 API\n// import Web3 from 'web3';\n//\n// // New instance of Web3 with the provider that is automatically provided to us by MetaMask inside the browser.\n// // This makes the assumption that the user has MetaMask.\n// let web3;\n//\n// // Execute inside the browser and MetaMask is available\n// if (typeof window !== 'undefined' && typeof window.web3 !== 'undefined') {\n//     web3 = new Web3(window.web3.currentProvider);\n// } else {\n//     // We are on the server *OR* the user is not running MetaMask.\n//     // Create our own provider:\n//     const provider = new Web3.providers.HttpProvider(\n//         // Pass the URL of some remote node that we have excess to\n//         'http://192.168.86.21:8543'\n//         //'http://127.0.0.1:8543'\n//         //'http://192.168.1.41:8543'\n//         //'http://172.21.148.184:8543'\n//         //'http://10.27.52.197:8543'\n//         //'http://localhost:8545'\n//     );\n//     web3 = new Web3(provider);\n// }\n//\n// export default web3;\n// Imports Web3 API\nimport Web3 from 'web3'; // New instance of Web3 with the provider that is automatically provided to us by MetaMask inside the browser.\n// This makes the assumption that the user has MetaMask.\n\nvar web3; // Modern DApp broswer\n\nif (typeof window !== 'undefined' && window.ethereum) {\n  var instance = new Web3(window.ethereum);\n\n  try {\n    // Request account access if needed\n    window.ethereum.enable(); // Acccounts now exposed\n\n    web3 = instance;\n  } catch (error) {\n    // User denied account access...\n    alert('Please allow access for the app to work');\n  }\n} else if (typeof window !== 'undefined' && window.web3) {\n  //Legacy DApp browser\n  web3 = new Web3(web3.currentProvider); // Acccounts always exposed\n\n  resolve(web3);\n} else {\n  // We are on the server *OR* the user is not running MetaMask.\n  // Create our own provider:\n  var provider = new Web3.providers.HttpProvider( // Pass the URL of some remote node that we have excess to\n  'http://192.168.86.21:8543' //'http://127.0.0.1:8543'\n  //'http://192.168.1.41:8543'\n  //'http://172.21.148.184:8543'\n  //'http://10.27.52.197:8543'\n  //'http://localhost:8545'\n  );\n  web3 = new Web3(provider);\n}\n\nexport default web3;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\ethereum\\web3.js"],"names":["Web3","web3","window","ethereum","instance","enable","error","alert","currentProvider","resolve","provider","providers","HttpProvider"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,OAAOA,IAAP,MAAiB,MAAjB,C,CAEA;AACA;;AACA,IAAIC,IAAJ,C,CAEA;;AACA,IAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACC,QAA5C,EAAsD;AACpD,MAAIC,QAAQ,GAAG,IAAIJ,IAAJ,CAASE,MAAM,CAACC,QAAhB,CAAf;;AACA,MAAI;AACF;AACAD,IAAAA,MAAM,CAACC,QAAP,CAAgBE,MAAhB,GAFE,CAGF;;AACAJ,IAAAA,IAAI,GAAGG,QAAP;AACD,GALD,CAKE,OAAOE,KAAP,EAAc;AACd;AACAC,IAAAA,KAAK,CAAC,yCAAD,CAAL;AACD;AACF,CAXD,MAWO,IAAI,OAAOL,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACD,IAA5C,EAAkD;AAAE;AACzDA,EAAAA,IAAI,GAAG,IAAID,IAAJ,CAASC,IAAI,CAACO,eAAd,CAAP,CADuD,CAEvD;;AACAC,EAAAA,OAAO,CAACR,IAAD,CAAP;AACD,CAJM,MAIA;AACL;AACA;AACA,MAAMS,QAAQ,GAAG,IAAIV,IAAI,CAACW,SAAL,CAAeC,YAAnB,EACb;AACA,6BAFa,CAGb;AACA;AACA;AACA;AACA;AAPa,GAAjB;AASAX,EAAAA,IAAI,GAAG,IAAID,IAAJ,CAASU,QAAT,CAAP;AACD;;AACD,eAAeT,IAAf","sourcesContent":["// // Imports Web3 API\r\n// import Web3 from 'web3';\r\n//\r\n// // New instance of Web3 with the provider that is automatically provided to us by MetaMask inside the browser.\r\n// // This makes the assumption that the user has MetaMask.\r\n// let web3;\r\n//\r\n// // Execute inside the browser and MetaMask is available\r\n// if (typeof window !== 'undefined' && typeof window.web3 !== 'undefined') {\r\n//     web3 = new Web3(window.web3.currentProvider);\r\n// } else {\r\n//     // We are on the server *OR* the user is not running MetaMask.\r\n//     // Create our own provider:\r\n//     const provider = new Web3.providers.HttpProvider(\r\n//         // Pass the URL of some remote node that we have excess to\r\n//         'http://192.168.86.21:8543'\r\n//         //'http://127.0.0.1:8543'\r\n//         //'http://192.168.1.41:8543'\r\n//         //'http://172.21.148.184:8543'\r\n//         //'http://10.27.52.197:8543'\r\n//         //'http://localhost:8545'\r\n//     );\r\n//     web3 = new Web3(provider);\r\n// }\r\n//\r\n// export default web3;\r\n\r\n// Imports Web3 API\r\nimport Web3 from 'web3';\r\n\r\n// New instance of Web3 with the provider that is automatically provided to us by MetaMask inside the browser.\r\n// This makes the assumption that the user has MetaMask.\r\nlet web3;\r\n\r\n// Modern DApp broswer\r\nif (typeof window !== 'undefined' && window.ethereum) {\r\n  let instance = new Web3(window.ethereum);\r\n  try {\r\n    // Request account access if needed\r\n    window.ethereum.enable();\r\n    // Acccounts now exposed\r\n    web3 = instance;\r\n  } catch (error) {\r\n    // User denied account access...\r\n    alert('Please allow access for the app to work');\r\n  }\r\n} else if (typeof window !== 'undefined' && window.web3) { //Legacy DApp browser\r\n  web3 = new Web3(web3.currentProvider);\r\n  // Acccounts always exposed\r\n  resolve(web3);\r\n} else {\r\n  // We are on the server *OR* the user is not running MetaMask.\r\n  // Create our own provider:\r\n  const provider = new Web3.providers.HttpProvider(\r\n      // Pass the URL of some remote node that we have excess to\r\n      'http://192.168.86.21:8543'\r\n      //'http://127.0.0.1:8543'\r\n      //'http://192.168.1.41:8543'\r\n      //'http://172.21.148.184:8543'\r\n      //'http://10.27.52.197:8543'\r\n      //'http://localhost:8545'\r\n  );\r\n  web3 = new Web3(provider);\r\n}\r\nexport default web3;\r\n"]},"metadata":{},"sourceType":"module"}