{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport MobileDetect from 'mobile-detect';\nimport _ from 'lodash';\nimport { Button, Header, Table, Statistic, Rating, Grid, Loader, List, Menu, Divider, Container, Icon, Label, Progress, Segment, Modal, Responsive, Checkbox, Dropdown } from 'semantic-ui-react';\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport { getWidthFactory } from '../utils/device';\nimport factory from '../ethereum/factory';\nimport credentials from '../ethereum/credentials';\nimport Question from '../ethereum/question';\nimport Profile from '../ethereum/profile';\nimport Layout from '../components/Layout';\nimport { Link, Router } from '../routes';\nimport web3 from '../ethereum/web3';\nimport { search, checkLogin } from '../utils/functions';\n\nvar HomePage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(HomePage, _Component);\n\n  function HomePage(props) {\n    var _this;\n\n    _classCallCheck(this, HomePage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HomePage).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSort\", function (clickedColumn) {\n      return function () {\n        var _this$state = _this.state,\n            column = _this$state.column,\n            leaderboardData = _this$state.leaderboardData,\n            direction = _this$state.direction;\n\n        if (column !== clickedColumn) {\n          _this.setState({\n            column: clickedColumn,\n            leaderboardData: _.sortBy(leaderboardData, [clickedColumn]),\n            direction: 'ascending'\n          });\n\n          return;\n        }\n\n        _this.setState({\n          leaderboardData: leaderboardData.reverse(),\n          direction: direction === 'ascending' ? 'descending' : 'ascending'\n        });\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (e, _ref) {\n      var value = _ref.value;\n      return _this.setState({\n        sortBy: value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleQuestionLimit\", function (e, _ref2) {\n      var value = _ref2.value;\n\n      _this.setState({\n        questionLimit: value\n      });\n\n      component.forceUpdate();\n    });\n\n    _this.state = {\n      login: false,\n      accountType: null,\n      column: null,\n      direction: null,\n      leaderboardData: [],\n      tags: [],\n      topTags: [],\n      loading: true,\n      sortBy: null,\n      summaries: [],\n      questionLimit: 10\n    };\n    return _this;\n  }\n\n  _createClass(HomePage, [{\n    key: \"componentDidUpdate\",\n    value: function () {\n      var _componentDidUpdate = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(prevProps) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.props.summaries != prevProps.summaries) {\n                  this.fetchQuestionData();\n                }\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidUpdate(_x) {\n        return _componentDidUpdate.apply(this, arguments);\n      }\n\n      return componentDidUpdate;\n    }()\n  }, {\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var login, accounts, profileAddress, profile, accountType, ethWallet, accountPointMapping, i, points;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                login = false; // Retrieve the Ethereum Account from MetaMask\n\n                _context2.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context2.sent;\n                _context2.next = 6;\n                return checkLogin(accounts[0]);\n\n              case 6:\n                if (!_context2.sent) {\n                  _context2.next = 37;\n                  break;\n                }\n\n                login = true; // Get Account Type\n\n                _context2.next = 10;\n                return factory.methods.getProfile(accounts[0]).call();\n\n              case 10:\n                profileAddress = _context2.sent;\n                profile = Profile(profileAddress);\n                _context2.next = 14;\n                return profile.methods.getAccountType().call();\n\n              case 14:\n                accountType = _context2.sent;\n                accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"; // Retireve an array of addresses of ethWallets registered\n\n                _context2.next = 18;\n                return factory.methods.getEthWallets().call();\n\n              case 18:\n                ethWallet = _context2.sent;\n                accountPointMapping = [];\n                i = 0;\n\n              case 21:\n                if (!(i < ethWallet.length)) {\n                  _context2.next = 33;\n                  break;\n                }\n\n                _context2.next = 24;\n                return factory.methods.getProfile(ethWallet[i]).call();\n\n              case 24:\n                profileAddress = _context2.sent;\n                profile = Profile(profileAddress);\n                _context2.next = 28;\n                return profile.methods.getPoints().call();\n\n              case 28:\n                points = _context2.sent;\n                accountPointMapping.push({\n                  account: ethWallet[i],\n                  points: _parseInt(points)\n                });\n\n              case 30:\n                i++;\n                _context2.next = 21;\n                break;\n\n              case 33:\n                // Set the states required for the Leaderboard and ensure it is descending by default\n                this.setState({\n                  leaderboardData: _.sortBy(accountPointMapping, ['points']).reverse()\n                });\n                this.setState({\n                  login: login\n                });\n                this.setState({\n                  accountType: accountType\n                });\n                this.fetchQuestionData();\n\n              case 37:\n                this.setState({\n                  loading: false\n                });\n\n              case 38:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"fetchQuestionData\",\n    value: function fetchQuestionData() {\n      // Get the top 10 used tags\n      var tags = {};\n      var summaries = this.props.summaries.splice(0, this.state.questionLimit);\n      summaries.forEach(function (summary) {\n        summary[8].forEach(function (tag) {\n          if (tags[tag] == undefined) {\n            tags[tag] = 1;\n          } else {\n            tags[tag] = tags[tag] + 1;\n          }\n        });\n      });\n\n      var sortedTags = _Object$keys(tags).map(function (key) {\n        return [key, tags[key]];\n      }); // Sort the array based on the second element\n\n\n      sortedTags.sort(function (first, second) {\n        return second[1] - first[1];\n      }); // Array of all tags\n\n      var tagList = [];\n      sortedTags.forEach(function (tag) {\n        tagList.push(tag[0]);\n      }); // Array with only the first 10 items\n\n      tags = [];\n      sortedTags.slice(0, 10).forEach(function (tag) {\n        tags.push(tag[0]);\n      });\n      this.setState({\n        topTags: tags\n      });\n      this.setState({\n        tags: tagList\n      });\n      this.setState({\n        summaries: summaries\n      });\n    } // Function to handle the sorting of leaderboard\n\n  }, {\n    key: \"renderQuestionHeader\",\n    value: function renderQuestionHeader() {\n      return React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        width: 2\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Current Phase\")), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        width: 2\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Answers Submitted\")), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        width: 2\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Reward\")), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\"\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Question Title\")));\n    } // Renders out the list of question\n\n  }, {\n    key: \"renderQuestionList\",\n    value: function renderQuestionList() {\n      var _this2 = this;\n\n      var summaries = this.state.summaries;\n\n      switch (this.state.sortBy) {\n        case 0:\n          summaries.sort(function (a, b) {\n            return a[4] - b[4];\n          });\n          break;\n\n        case 1:\n          summaries.sort(function (a, b) {\n            return b[4] - a[4];\n          });\n          break;\n\n        case 2:\n          summaries.sort(function (a, b) {\n            return a[10] - b[10];\n          });\n          break;\n\n        case 3:\n          summaries.sort(function (a, b) {\n            return b[10] - a[10];\n          });\n          break;\n\n        case 4:\n          summaries.sort(function (a, b) {\n            return a[2] - b[2];\n          });\n          break;\n\n        case 5:\n          summaries.sort(function (a, b) {\n            return b[2] - a[2];\n          });\n          break;\n\n        default:\n          break;\n      }\n\n      return summaries.map(function (summary, index) {\n        var questionState = summary[4];\n        var tagList = summary[8];\n        return React.createElement(Table.Row, {\n          key: index\n        }, React.createElement(Table.Cell, {\n          textAlign: \"center\",\n          width: 2\n        }, questionState == 0 ? React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: 'red'\n          }\n        }, \" Answering\")), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"Phase\"))) : questionState == 1 ? React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#C9C633'\n          }\n        }, \" Voting\")), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"Phase\"))) : React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#10EE44'\n          }\n        }, \" Rewarded\")), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"Phase\")))), React.createElement(Table.Cell, {\n          textAlign: \"center\",\n          width: 2\n        }, React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, summary[10])), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"answer(s)\")))), React.createElement(Table.Cell, {\n          textAlign: \"center\",\n          width: 2\n        }, React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, summary[2] * 1e-4)), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"EQT(s)\")))), React.createElement(Table.Cell, {\n          textAlign: \"left\"\n        }, React.createElement(Grid.Row, {\n          textAlign: \"left\"\n        }, React.createElement(\"span\", {\n          style: {\n            fontSize: 18,\n            color: '#6A737C',\n            cursor: 'pointer'\n          },\n          onClick: function onClick() {\n            return Router.pushRoute(\"/questions/\".concat(summary[11]));\n          }\n        }, React.createElement(\"a\", null, summary[0]))), _this2.renderTag(tagList, \"mini\")));\n      });\n    }\n  }, {\n    key: \"renderMobileQuestionList\",\n    value: function renderMobileQuestionList() {\n      var _this3 = this;\n\n      return this.state.summaries.map(function (summary, index) {\n        var tags = summary[8];\n        var questionState = summary[4];\n        var tagList = summary[8];\n        return React.createElement(List.Item, {\n          key: index\n        }, React.createElement(List.Icon, {\n          name: \"question circle\",\n          size: \"large\",\n          verticalAlign: \"middle\"\n        }), React.createElement(List.Content, null, React.createElement(List.Header, {\n          as: \"a\",\n          onClick: function onClick() {\n            return Router.pushRoute(\"/questions/\".concat(summary[11]));\n          }\n        }, summary[0]), React.createElement(Grid, null, React.createElement(Grid.Column, {\n          width: 10\n        }, React.createElement(List.Description, null, \"Number of Answer(s): \" + summary[10]), React.createElement(List.Description, null, \"Reward: \" + summary[2] * 1e-4 + \" EQT(s)\"), _this3.renderTag(tags, \"mini\")), React.createElement(Grid.Column, {\n          width: 4\n        }, questionState == 0 ? React.createElement(List.Description, null, React.createElement(\"b\", null, React.createElement(\"font\", {\n          color: \"red\"\n        }, \"ANSWERING PHASE\"))) : questionState == 1 ? React.createElement(List.Description, null, React.createElement(\"b\", null, React.createElement(\"font\", {\n          color: \"#C9C633\"\n        }, \"VOTING PHASE\"))) : React.createElement(List.Description, null, React.createElement(\"b\", null, React.createElement(\"font\", {\n          color: \"#10EE44\"\n        }, \"REWARDED PHASE\")))))), React.createElement(Divider, {\n          hidden: true\n        }));\n      });\n    } // Render each tag individually for each question\n\n  }, {\n    key: \"renderTag\",\n    value: function renderTag(tagList, tagSize) {\n      var tagColours = [\"red\", \"olive\", \"blue\", \"teal\", \"green\"];\n      return tagList.map(function (tag, index) {\n        return React.createElement(Label, {\n          as: \"a\",\n          onClick: function onClick() {\n            return Router.pushRoute(\"/\".concat('search/' + encodeURIComponent(tag)));\n          },\n          tag: true,\n          size: tagSize,\n          key: index,\n          color: tagColours[index % 5]\n        }, tag);\n      });\n    }\n  }, {\n    key: \"renderLeaderBoard\",\n    value: function renderLeaderBoard() {\n      var _this$state2 = this.state,\n          column = _this$state2.column,\n          data = _this$state2.data,\n          direction = _this$state2.direction;\n      return React.createElement(Segment, null, React.createElement(Header, {\n        as: \"h3\",\n        textAlign: \"center\"\n      }, React.createElement(Icon, {\n        name: \"chess king\"\n      }), \"Leaderboard\"), React.createElement(\"p\", {\n        style: {\n          textAlign: 'center'\n        }\n      }, React.createElement(\"b\", null, \"Current Registered User(s):\"), \" \", this.state.leaderboardData.length), React.createElement(Table, {\n        basic: \"very\",\n        celled: true,\n        collapsing: true,\n        sortable: true\n      }, React.createElement(Table.Header, null, React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, null, \"Account\"), React.createElement(Table.HeaderCell, {\n        sorted: column === 'points' ? direction : null,\n        onClick: this.handleSort('points')\n      }, \"Point(s)\"))), React.createElement(Table.Body, null, this.renderUserList())));\n    }\n  }, {\n    key: \"renderTopTags\",\n    value: function renderTopTags() {\n      return React.createElement(Segment, null, React.createElement(Header, {\n        as: \"h3\",\n        textAlign: \"center\"\n      }, React.createElement(Icon, {\n        name: \"tags\"\n      }), \"Top 10 Tags\"), this.renderTag(this.state.topTags, \"medium\"));\n    }\n  }, {\n    key: \"renderUserList\",\n    value: function renderUserList() {\n      return this.state.leaderboardData.map(function (item, index) {\n        return React.createElement(Table.Row, {\n          key: index\n        }, React.createElement(Table.Cell, {\n          textAlign: \"center\"\n        }, React.createElement(\"p\", {\n          style: {\n            fontSize: \"12px\"\n          }\n        }, item.account)), React.createElement(Table.Cell, {\n          textAlign: \"center\"\n        }, React.createElement(\"p\", {\n          style: {\n            fontSize: \"12px\"\n          }\n        }, item.points)));\n      });\n    }\n  }, {\n    key: \"renderSortSettings\",\n    value: function renderSortSettings() {\n      return React.createElement(\"span\", null, React.createElement(Icon, {\n        name: \"sort\"\n      }), \"Sort Questions By: \", ' ', React.createElement(Dropdown, {\n        inline: true,\n        options: [{\n          key: 'Ascending Phase',\n          text: 'Ascending Phase',\n          value: 0\n        }, {\n          key: 'Descending Phase',\n          text: 'Descending Phase',\n          value: 1\n        }, {\n          key: 'Ascending Answers',\n          text: 'Ascending Answers',\n          value: 2\n        }, {\n          key: 'Descending Answers',\n          text: 'Descending Answers',\n          value: 3\n        }, {\n          key: 'Ascending Rewards',\n          text: 'Ascending Rewards',\n          value: 4\n        }, {\n          key: 'Descending Rewards',\n          text: 'Descending Rewards',\n          value: 5\n        }],\n        onChange: this.handleChange\n      }));\n    }\n  }, {\n    key: \"renderQuestionLimit\",\n    value: function renderQuestionLimit() {\n      return React.createElement(\"span\", null, React.createElement(Icon, {\n        name: \"sort\"\n      }), \"Total Questions Shown:\", React.createElement(Dropdown, {\n        inline: true,\n        options: [{\n          key: '10',\n          text: '10',\n          value: 10\n        }, {\n          key: '20',\n          text: '20',\n          value: 20\n        }],\n        onChange: this.handleQuestionLimit\n      }));\n    }\n  }, {\n    key: \"renderFilterSettings\",\n    value: function renderFilterSettings() {\n      var tagColours = [\"red\", \"olive\", \"blue\", \"teal\", \"green\"];\n      return React.createElement(\"span\", null, React.createElement(Icon, {\n        name: \"filter\"\n      }), React.createElement(Dropdown, {\n        text: \"Filter Questions\",\n        multiple: true\n      }, React.createElement(Dropdown.Menu, null, React.createElement(Dropdown.Header, {\n        icon: \"tags\",\n        content: \"Tag Label\"\n      }), React.createElement(Dropdown.Menu, {\n        scrolling: true\n      }, this.state.tags.map(function (tag, index) {\n        return React.createElement(Dropdown.Item, {\n          key: index,\n          text: tag,\n          label: {\n            color: tagColours[index % 6],\n            empty: true,\n            circular: true\n          },\n          onClick: function onClick() {\n            return Router.pushRoute(\"/\".concat('search/' + encodeURIComponent(tag)));\n          }\n        });\n      })))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.login) {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(Responsive, {\n          fireOnMount: true,\n          getWidth: getWidthFactory(this.props.isMobileFromSSR),\n          minWidth: Responsive.onlyTablet.minWidth\n        }, React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Grid, {\n          centered: true\n        }, React.createElement(Grid.Column, {\n          width: 4\n        }, this.renderLeaderBoard()), React.createElement(Grid.Column, {\n          width: 8\n        }, React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"Questions Posted\"), React.createElement(Grid, null, React.createElement(Grid.Column, {\n          width: 12\n        }, this.renderSortSettings()), React.createElement(Grid.Column, {\n          width: 4\n        }, this.renderFilterSettings())), React.createElement(Grid, null, React.createElement(Grid.Row, null, this.renderQuestionLimit())), React.createElement(Table, null, React.createElement(Table.Header, null, this.renderQuestionHeader()), React.createElement(Table.Body, null, this.renderQuestionList()), React.createElement(Table.Footer, null, React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, {\n          colSpan: \"4\"\n        }, React.createElement(Menu, {\n          floated: \"right\",\n          pagination: true\n        }, React.createElement(Menu.Item, {\n          as: \"a\",\n          icon: true\n        }, React.createElement(Icon, {\n          name: \"chevron left\"\n        })), React.createElement(Menu.Item, {\n          as: \"a\"\n        }, \"1\"), React.createElement(Menu.Item, {\n          as: \"a\"\n        }, \"2\"), React.createElement(Menu.Item, {\n          as: \"a\"\n        }, \"3\"), React.createElement(Menu.Item, {\n          as: \"a\"\n        }, \"4\"), React.createElement(Menu.Item, {\n          as: \"a\",\n          icon: true\n        }, React.createElement(Icon, {\n          name: \"chevron right\"\n        }))))))), React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(\"div\", {\n          style: {\n            marginTop: 20\n          }\n        }, \"Found \", this.state.summaries.length, \" Item(s).\")), React.createElement(Grid.Column, {\n          width: 3\n        }, this.renderTopTags()))), React.createElement(Responsive, {\n          fireOnMount: true,\n          getWidth: getWidthFactory(this.props.isMobileFromSSR),\n          maxWidth: Responsive.onlyMobile.maxWidth\n        }, React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Grid, {\n          centered: true\n        }, React.createElement(Grid.Column, null, React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"Questions Posted\"), this.renderSortSettings(), this.renderFilterSettings(), React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(List, {\n          divided: true,\n          relaxed: true\n        }, this.renderMobileQuestionList()), React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(\"div\", {\n          style: {\n            marginTop: 20\n          }\n        }, \"Found \", this.state.summaries.length, \" Item(s).\")))));\n      } else {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(AccountIssueModal, {\n          loading: this.state.loading,\n          login: this.state.login\n        }));\n      }\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(props) {\n        var isMobileFromSSR, device, md, deployedQuestions, deployedQuestionsCount, summaries, searchItem, i, question, summary, answerList;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                isMobileFromSSR = false;\n\n                if (props.req) {\n                  device = props.req.headers[\"user-agent\"];\n                  md = new MobileDetect(device);\n                  isMobileFromSSR = !!md.mobile();\n                } // Retrieve an array of addresses of questions deployed\n\n\n                _context3.next = 4;\n                return factory.methods.getDeployedQuestions().call();\n\n              case 4:\n                deployedQuestions = _context3.sent;\n                deployedQuestionsCount = deployedQuestions.length; // Retrieve the summaries of all deployed questions\n\n                summaries = [];\n\n                if (!(props.query.value != undefined && props.query.value != 'favicon.ico')) {\n                  _context3.next = 13;\n                  break;\n                }\n\n                searchItem = decodeURIComponent(props.query.value);\n                _context3.next = 11;\n                return search(searchItem, deployedQuestions);\n\n              case 11:\n                deployedQuestions = _context3.sent;\n                deployedQuestionsCount = deployedQuestions.length;\n\n              case 13:\n                i = 0;\n\n              case 14:\n                if (!(i < deployedQuestionsCount)) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                question = Question(deployedQuestions[i]);\n                _context3.next = 18;\n                return question.methods.getSummary().call();\n\n              case 18:\n                summary = _context3.sent;\n\n                if (summary[9]) {\n                  _context3.next = 26;\n                  break;\n                }\n\n                summaries[i] = summary;\n                _context3.next = 23;\n                return question.methods.getAnswerList().call();\n\n              case 23:\n                answerList = _context3.sent;\n                summaries[i][10] = answerList.length;\n                summaries[i][11] = deployedQuestions[i];\n\n              case 26:\n                i++;\n                _context3.next = 14;\n                break;\n\n              case 29:\n                summaries = summaries.reverse();\n                return _context3.abrupt(\"return\", {\n                  isMobileFromSSR: isMobileFromSSR,\n                  summaries: summaries\n                });\n\n              case 31:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function getInitialProps(_x2) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return HomePage;\n}(Component);\n\nexport default HomePage;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\home.js"],"names":["React","Component","MobileDetect","_","Button","Header","Table","Statistic","Rating","Grid","Loader","List","Menu","Divider","Container","Icon","Label","Progress","Segment","Modal","Responsive","Checkbox","Dropdown","AccountIssueModal","getWidthFactory","factory","credentials","Question","Profile","Layout","Link","Router","web3","search","checkLogin","HomePage","props","clickedColumn","state","column","leaderboardData","direction","setState","sortBy","reverse","e","value","questionLimit","component","forceUpdate","login","accountType","tags","topTags","loading","summaries","prevProps","fetchQuestionData","eth","getAccounts","accounts","methods","getProfile","call","profileAddress","profile","getAccountType","getEthWallets","ethWallet","accountPointMapping","i","length","getPoints","points","push","account","splice","forEach","summary","tag","undefined","sortedTags","map","key","sort","first","second","tagList","slice","fontSize","color","a","b","index","questionState","cursor","pushRoute","renderTag","tagSize","tagColours","encodeURIComponent","data","textAlign","handleSort","renderUserList","item","text","handleChange","handleQuestionLimit","empty","circular","isMobileFromSSR","onlyTablet","minWidth","renderLeaderBoard","renderSortSettings","renderFilterSettings","renderQuestionLimit","renderQuestionHeader","renderQuestionList","marginTop","renderTopTags","onlyMobile","maxWidth","renderMobileQuestionList","req","device","headers","md","mobile","getDeployedQuestions","deployedQuestions","deployedQuestionsCount","query","searchItem","decodeURIComponent","question","getSummary","getAnswerList","answerList"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport MobileDetect from 'mobile-detect';\r\nimport _ from 'lodash';\r\nimport { Button, Header, Table, Statistic, Rating, Grid, Loader, List, Menu,\r\n   Divider, Container, Icon, Label, Progress, Segment, Modal, Responsive, Checkbox, Dropdown } from 'semantic-ui-react';\r\nimport AccountIssueModal from '../components/AccountIssueModal';\r\nimport { getWidthFactory } from '../utils/device';\r\nimport factory from '../ethereum/factory';\r\nimport credentials from '../ethereum/credentials';\r\nimport Question from '../ethereum/question';\r\nimport Profile from '../ethereum/profile';\r\nimport Layout from '../components/Layout';\r\nimport {Link, Router} from '../routes';\r\nimport web3 from '../ethereum/web3';\r\nimport { search, checkLogin } from '../utils/functions';\r\n\r\nclass HomePage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      login: false,\r\n      accountType: null,\r\n      column: null,\r\n      direction: null,\r\n      leaderboardData: [],\r\n      tags: [],\r\n      topTags: [],\r\n      loading: true,\r\n      sortBy:null,\r\n      summaries: [],\r\n      questionLimit: 10,\r\n    };\r\n  }\r\n\r\n  static async getInitialProps(props) {\r\n    let isMobileFromSSR = false;\r\n    if(props.req) {\r\n      const device = props.req.headers[\"user-agent\"];\r\n      const md = new MobileDetect(device);\r\n      isMobileFromSSR = !!md.mobile();\r\n    }\r\n\r\n    // Retrieve an array of addresses of questions deployed\r\n    let deployedQuestions = await factory.methods.getDeployedQuestions().call();\r\n    let deployedQuestionsCount = deployedQuestions.length;\r\n\r\n    // Retrieve the summaries of all deployed questions\r\n    let summaries = [];\r\n    let searchItem;\r\n    //filter the questions based on search value\r\n    if (props.query.value != undefined && props.query.value != 'favicon.ico') {\r\n        searchItem = decodeURIComponent(props.query.value);\r\n        deployedQuestions = await search(searchItem,deployedQuestions);\r\n        deployedQuestionsCount = deployedQuestions.length;\r\n    }\r\n\r\n    for(let i=0; i<deployedQuestionsCount; i++) {\r\n      let question = Question(deployedQuestions[i]);\r\n      let summary = await question.methods.getSummary().call();\r\n      // Filter out flagged questions\r\n      if (!summary[9]) {\r\n        summaries[i] = summary;\r\n        let answerList = await question.methods.getAnswerList().call();\r\n        summaries[i][10] = answerList.length;\r\n        summaries[i][11] = deployedQuestions[i];\r\n      }\r\n    }\r\n    summaries = summaries.reverse()\r\n    return { isMobileFromSSR, summaries };\r\n  }\r\n\r\n  async componentDidUpdate(prevProps) {\r\n    if(this.props.summaries != prevProps.summaries) {\r\n      this.fetchQuestionData()\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let login = false;\r\n    // Retrieve the Ethereum Account from MetaMask\r\n    const accounts = await web3.eth.getAccounts();\r\n    if (await checkLogin(accounts[0])) {\r\n      login = true;\r\n      // Get Account Type\r\n      let profileAddress = await factory.methods.getProfile(accounts[0]).call();\r\n      let profile = Profile(profileAddress);\r\n      let accountType = await profile.methods.getAccountType().call();\r\n      accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"\r\n\r\n      // Retireve an array of addresses of ethWallets registered\r\n      let ethWallet = await factory.methods.getEthWallets().call();\r\n      let accountPointMapping = [];\r\n\r\n      for (let i=0; i<ethWallet.length; i++) {\r\n        profileAddress = await factory.methods.getProfile(ethWallet[i]).call();\r\n        profile = Profile(profileAddress);\r\n        let points = await profile.methods.getPoints().call();\r\n        accountPointMapping.push({\r\n          account: ethWallet[i],\r\n          points: parseInt(points)\r\n        });\r\n      }\r\n      // Set the states required for the Leaderboard and ensure it is descending by default\r\n      this.setState( { leaderboardData: _.sortBy(accountPointMapping, ['points']).reverse() });\r\n      this.setState( { login: login });\r\n      this.setState( { accountType: accountType });\r\n      this.fetchQuestionData()\r\n    }\r\n    this.setState( { loading: false });\r\n  }\r\n\r\n  fetchQuestionData() {\r\n    // Get the top 10 used tags\r\n    let tags = {};\r\n    let summaries = this.props.summaries.splice(0, this.state.questionLimit)\r\n    summaries.forEach(summary =>{\r\n      summary[8].forEach(tag => {\r\n        if (tags[tag] == undefined) {\r\n          tags[tag] = 1;\r\n        } else {\r\n          tags[tag] = tags[tag] + 1;\r\n        }\r\n      })\r\n    })\r\n    let sortedTags = Object.keys(tags).map(function(key) {\r\n      return [key, tags[key]];\r\n    });\r\n\r\n    // Sort the array based on the second element\r\n    sortedTags.sort(function(first, second) {\r\n      return second[1] - first[1];\r\n    });\r\n\r\n    // Array of all tags\r\n    let tagList = [];\r\n    sortedTags.forEach(tag=> {\r\n      tagList.push(tag[0])\r\n    })\r\n\r\n    // Array with only the first 10 items\r\n    tags = [];\r\n    sortedTags.slice(0, 10).forEach(tag => {\r\n      tags.push(tag[0])\r\n    })\r\n    this.setState({ topTags: tags });\r\n    this.setState({ tags: tagList });\r\n    this.setState({ summaries: summaries });\r\n  }\r\n\r\n  // Function to handle the sorting of leaderboard\r\n  handleSort = (clickedColumn) => () => {\r\n    const { column, leaderboardData, direction } = this.state\r\n    if (column !== clickedColumn) {\r\n      this.setState({\r\n        column: clickedColumn,\r\n        leaderboardData: _.sortBy(leaderboardData, [clickedColumn]),\r\n        direction: 'ascending',\r\n      })\r\n      return\r\n    }\r\n    this.setState({\r\n      leaderboardData: leaderboardData.reverse(),\r\n      direction: direction === 'ascending' ? 'descending' : 'ascending',\r\n    })\r\n  }\r\n\r\n  handleChange = (e, { value }) =>  this.setState({ sortBy : value });\r\n\r\n  handleQuestionLimit = (e, { value }) => {\r\n    this.setState({ questionLimit: value });\r\n    component.forceUpdate()\r\n  }\r\n\r\n  renderQuestionHeader() {\r\n    return(\r\n      <Table.Row>\r\n        <Table.HeaderCell textAlign='center' width={2}><span style={{fontSize: 15, color: '#6A737C'}}>Current Phase</span></Table.HeaderCell>\r\n        <Table.HeaderCell textAlign='center' width={2}><span style={{fontSize: 15, color: '#6A737C'}}>Answers Submitted</span></Table.HeaderCell>\r\n        <Table.HeaderCell textAlign='center' width={2}><span style={{fontSize: 15, color: '#6A737C'}}>Reward</span></Table.HeaderCell>\r\n        <Table.HeaderCell textAlign='center'><span style={{fontSize: 15, color: '#6A737C'}}>Question Title</span></Table.HeaderCell>\r\n      </Table.Row>\r\n    );\r\n  }\r\n\r\n  // Renders out the list of question\r\n  renderQuestionList() {\r\n    let summaries = this.state.summaries\r\n    switch(this.state.sortBy) {\r\n      case 0:\r\n        summaries.sort(function(a, b) {\r\n          return a[4] - b[4];\r\n        });\r\n        break;\r\n      case 1:\r\n        summaries.sort(function(a, b) {\r\n          return b[4] - a[4];\r\n        });\r\n        break;\r\n      case 2:\r\n        summaries.sort(function(a, b) {\r\n          return a[10] - b[10];\r\n        });\r\n        break;\r\n      case 3:\r\n        summaries.sort(function(a, b) {\r\n          return b[10] - a[10];\r\n        });\r\n        break;\r\n      case 4:\r\n        summaries.sort(function(a, b) {\r\n          return a[2] - b[2];\r\n        });\r\n        break;\r\n      case 5:\r\n        summaries.sort(function(a, b) {\r\n          return b[2] - a[2];\r\n        });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return summaries.map((summary, index) => {\r\n      const questionState = summary[4];\r\n      const tagList = summary[8];\r\n      return <Table.Row key={index}>\r\n        <Table.Cell textAlign='center' width={2}>\r\n            {\r\n              questionState == 0 ? <Statistic size='mini' color='red'>\r\n                              <Statistic.Value><span\r\n                                  style={{fontSize: 15, color: 'red'}}> Answering\r\n                                              </span></Statistic.Value>\r\n                              <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>Phase</span></Statistic.Label>\r\n                          </Statistic>\r\n                        : questionState == 1 ?\r\n                        <Statistic size='mini' color='red'>\r\n                              <Statistic.Value><span\r\n                                  style={{fontSize: 15, color: '#C9C633'}}> Voting\r\n                                              </span></Statistic.Value>\r\n                              <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>Phase</span></Statistic.Label>\r\n                          </Statistic>\r\n                        :<Statistic size='mini' color='red'>\r\n                              <Statistic.Value><span\r\n                                  style={{fontSize: 15, color: '#10EE44'}}> Rewarded\r\n                                              </span></Statistic.Value>\r\n                              <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>Phase</span></Statistic.Label>\r\n                          </Statistic>\r\n            }\r\n          </Table.Cell>\r\n          <Table.Cell textAlign='center' width={2}>\r\n              <Statistic size='mini' color='red'>\r\n                  <Statistic.Value><span style={{fontSize: 15, color: '#6A737C'}}>{summary[10]}</span></Statistic.Value>\r\n                  <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>answer(s)</span></Statistic.Label>\r\n              </Statistic>\r\n          </Table.Cell>\r\n          <Table.Cell textAlign='center' width={2}>\r\n              <Statistic size='mini' color='red'>\r\n                  <Statistic.Value><span style={{fontSize: 15, color: '#6A737C'}}>{summary[2]*1e-4}</span></Statistic.Value>\r\n                  <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>EQT(s)</span></Statistic.Label>\r\n              </Statistic>\r\n          </Table.Cell>\r\n          <Table.Cell textAlign='left'>\r\n              <Grid.Row textAlign='left'>\r\n                  <span style={{fontSize: 18, color: '#6A737C', cursor: 'pointer'}} onClick={() => Router.pushRoute(`/questions/${summary[11]}`)}><a>{summary[0]}</a></span>\r\n              </Grid.Row>\r\n              {this.renderTag(tagList, \"mini\")}\r\n          </Table.Cell>\r\n      </Table.Row>\r\n    });\r\n  }\r\n\r\n  renderMobileQuestionList() {\r\n    return this.state.summaries.map((summary, index) => {\r\n      const tags = summary[8];\r\n      const questionState = summary[4];\r\n      const tagList = summary[8];\r\n      return <List.Item key={index}>\r\n              <List.Icon name='question circle' size='large' verticalAlign='middle' />\r\n              <List.Content>\r\n                <List.Header as='a' onClick={() => Router.pushRoute(`/questions/${summary[11]}`)}>{summary[0]}</List.Header>\r\n                <Grid>\r\n                <Grid.Column width={10}>\r\n                  <List.Description>{\"Number of Answer(s): \" + summary[10]}</List.Description>\r\n                  <List.Description>{\"Reward: \" + summary[2]*1e-4 + \" EQT(s)\" }</List.Description>\r\n                  {this.renderTag(tags, \"mini\")}\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                  {questionState == 0 ? <List.Description><b><font color='red'>{\"ANSWERING PHASE\"}</font></b></List.Description> : questionState == 1\r\n                  ? <List.Description><b><font color='#C9C633'>{\"VOTING PHASE\"}</font></b></List.Description>\r\n                  : <List.Description><b><font color='#10EE44'>{\"REWARDED PHASE\"}</font></b></List.Description> }\r\n                </Grid.Column>\r\n                </Grid>\r\n              </List.Content>\r\n              <Divider hidden/>\r\n            </List.Item>\r\n    });\r\n  }\r\n\r\n  // Render each tag individually for each question\r\n  renderTag(tagList, tagSize) {\r\n    const tagColours = [\"red\", \"olive\", \"blue\", \"teal\", \"green\"];\r\n    return tagList.map((tag, index) => {\r\n      return(\r\n        <Label as='a' onClick={() => Router.pushRoute(`/${'search/'+encodeURIComponent(tag)}`)}\r\n          tag size={tagSize} key={index} color={tagColours[index%5]}>\r\n          {tag}\r\n        </Label>\r\n      )\r\n    });\r\n  }\r\n\r\n  renderLeaderBoard() {\r\n    const { column, data, direction } = this.state\r\n    return (\r\n      <Segment>\r\n        <Header as='h3' textAlign=\"center\">\r\n          <Icon name=\"chess king\"/>Leaderboard\r\n        </Header>\r\n        <p style={{ textAlign:'center'}}>\r\n          <b>Current Registered User(s):</b> {this.state.leaderboardData.length}\r\n        </p>\r\n        <Table basic='very' celled collapsing sortable>\r\n          <Table.Header>\r\n            <Table.Row>\r\n              <Table.HeaderCell>Account</Table.HeaderCell>\r\n              <Table.HeaderCell\r\n                sorted={column === 'points' ? direction : null}\r\n                onClick={this.handleSort('points')}>\r\n              Point(s)\r\n              </Table.HeaderCell>\r\n            </Table.Row>\r\n          </Table.Header>\r\n          <Table.Body>\r\n            {this.renderUserList()}\r\n          </Table.Body>\r\n        </Table>\r\n      </Segment>\r\n    );\r\n  }\r\n\r\n  renderTopTags() {\r\n    return (\r\n      <Segment>\r\n        <Header as='h3' textAlign=\"center\">\r\n          <Icon name=\"tags\"/>Top 10 Tags\r\n        </Header>\r\n        {this.renderTag(this.state.topTags, \"medium\")}\r\n      </Segment>\r\n    );\r\n  }\r\n\r\n  renderUserList() {\r\n    return this.state.leaderboardData.map((item, index) => {\r\n      return (\r\n        <Table.Row key={index}>\r\n          <Table.Cell textAlign='center'>\r\n            <p style={{fontSize:\"12px\"}}>{item.account}</p>\r\n          </Table.Cell>\r\n          <Table.Cell textAlign='center'>\r\n            <p style={{fontSize:\"12px\"}}>{item.points}</p>\r\n          </Table.Cell>\r\n        </Table.Row>\r\n      );\r\n    });\r\n  }\r\n\r\n  renderSortSettings() {\r\n    return (\r\n      <span>\r\n        <Icon name='sort'/>Sort Questions By: {' '}\r\n        <Dropdown\r\n          inline\r\n          options={[\r\n          {\r\n            key: 'Ascending Phase',\r\n            text: 'Ascending Phase',\r\n            value: 0\r\n          },\r\n          {\r\n            key: 'Descending Phase',\r\n            text: 'Descending Phase',\r\n            value: 1\r\n          },\r\n          {\r\n            key: 'Ascending Answers',\r\n            text: 'Ascending Answers',\r\n            value: 2\r\n          },\r\n          {\r\n            key: 'Descending Answers',\r\n            text: 'Descending Answers',\r\n            value: 3\r\n          },\r\n          {\r\n            key: 'Ascending Rewards',\r\n            text: 'Ascending Rewards',\r\n            value: 4\r\n          },\r\n          {\r\n            key: 'Descending Rewards',\r\n            text: 'Descending Rewards',\r\n            value: 5\r\n          }\r\n          ]}\r\n          onChange={this.handleChange}\r\n        />\r\n      </span>\r\n    );\r\n  }\r\n\r\n  renderQuestionLimit() {\r\n    return (\r\n      <span>\r\n        <Icon name='sort'/>Total Questions Shown:\r\n        <Dropdown\r\n          inline\r\n          options={[\r\n          {\r\n            key: '10',\r\n            text: '10',\r\n            value: 10\r\n          },\r\n          {\r\n            key: '20',\r\n            text: '20',\r\n            value: 20\r\n          }\r\n          ]}\r\n          onChange={this.handleQuestionLimit}\r\n        />\r\n      </span>\r\n    );\r\n  }\r\n\r\n  renderFilterSettings() {\r\n    const tagColours = [\"red\", \"olive\", \"blue\", \"teal\", \"green\"];\r\n    return (\r\n      <span>\r\n        <Icon name='filter'/>\r\n        <Dropdown text='Filter Questions' multiple>\r\n          <Dropdown.Menu>\r\n            <Dropdown.Header icon='tags' content='Tag Label' />\r\n            <Dropdown.Menu scrolling>\r\n              {this.state.tags.map((tag, index) => (\r\n                <Dropdown.Item key={index}\r\n                               text={tag}\r\n                               label={{color: tagColours[index%6], empty: true, circular: true}}\r\n                               onClick={() => Router.pushRoute(`/${'search/'+encodeURIComponent(tag)}`)} />\r\n              ))}\r\n            </Dropdown.Menu>\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (this.state.login) {\r\n      return (\r\n        <Layout accountType={this.state.accountType}>\r\n          <Responsive fireOnMount getWidth={getWidthFactory(this.props.isMobileFromSSR)} minWidth={Responsive.onlyTablet.minWidth}>\r\n            <Divider hidden/>\r\n            <Grid centered>\r\n              <Grid.Column width={4}>\r\n                {this.renderLeaderBoard()}\r\n              </Grid.Column>\r\n              <Grid.Column width={8}>\r\n                <Header as='h2' textAlign='center'>\r\n                    Questions Posted\r\n                </Header>\r\n                <Grid>\r\n                  <Grid.Column width={12}>\r\n                    {this.renderSortSettings()}\r\n                  </Grid.Column>\r\n                  <Grid.Column width={4}>\r\n                    {this.renderFilterSettings()}\r\n                  </Grid.Column>\r\n                </Grid>\r\n                <Grid>\r\n                  <Grid.Row>\r\n                    {this.renderQuestionLimit()}\r\n                  </Grid.Row>\r\n                </Grid>\r\n                <Table>\r\n                  <Table.Header>\r\n                    {this.renderQuestionHeader()}\r\n                  </Table.Header>\r\n                  <Table.Body>\r\n                    {this.renderQuestionList()}\r\n                  </Table.Body>\r\n                  <Table.Footer>\r\n                    <Table.Row>\r\n                      <Table.HeaderCell colSpan='4'>\r\n                        <Menu floated='right' pagination>\r\n                          <Menu.Item as='a' icon>\r\n                            <Icon name='chevron left' />\r\n                          </Menu.Item>\r\n                          <Menu.Item as='a'>1</Menu.Item>\r\n                          <Menu.Item as='a'>2</Menu.Item>\r\n                          <Menu.Item as='a'>3</Menu.Item>\r\n                          <Menu.Item as='a'>4</Menu.Item>\r\n                          <Menu.Item as='a' icon>\r\n                            <Icon name='chevron right' />\r\n                          </Menu.Item>\r\n                        </Menu>\r\n                      </Table.HeaderCell>\r\n                    </Table.Row>\r\n                  </Table.Footer>\r\n                </Table>\r\n                <Divider hidden/>\r\n                <div style={{ marginTop: 20 }}>Found {this.state.summaries.length} Item(s).</div>\r\n              </Grid.Column>\r\n              <Grid.Column width={3}>\r\n                {this.renderTopTags()}\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Responsive>\r\n\r\n          <Responsive fireOnMount getWidth={getWidthFactory(this.props.isMobileFromSSR)} maxWidth={Responsive.onlyMobile.maxWidth}>\r\n            <Divider hidden/>\r\n            <Grid centered>\r\n              <Grid.Column>\r\n                <Header as='h2' textAlign='center'>\r\n                    Questions Posted\r\n                </Header>\r\n                {this.renderSortSettings()}\r\n                {this.renderFilterSettings()}\r\n                <Divider hidden/>\r\n                <List divided relaxed>\r\n                  {this.renderMobileQuestionList()}\r\n                </List>\r\n                <Divider hidden/>\r\n                <div style={{ marginTop: 20 }}>Found {this.state.summaries.length} Item(s).</div>\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Responsive>\r\n        </Layout>\r\n      );\r\n    } else {\r\n      return (\r\n        <Layout accountType={this.state.accountType}>\r\n          <AccountIssueModal loading={this.state.loading} login={this.state.login} />\r\n        </Layout>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}