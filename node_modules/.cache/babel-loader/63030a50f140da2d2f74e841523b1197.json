{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { Table, Popup, Button, Container, Form, Header, Comment, Segment, Message, Divider, Icon, Label, Modal, Loader, Image, Grid } from 'semantic-ui-react';\nimport { Link, Router } from '../routes';\nimport moment from 'moment';\nimport web3 from '../ethereum/web3';\nimport Question from '../ethereum/question';\nimport credentials from '../ethereum/credentials';\nimport Profile from '../ethereum/profile';\nimport factory from '../ethereum/factory';\nimport Layout from '../components/Layout';\nimport Countdown from 'react-countdown-now';\nimport { Context, Text } from 'react-mathjax2';\nimport Footer from '../components/Footer';\nimport { getIpfsHash } from './ipfs';\nimport { logging } from \"./logger\";\n\nvar QuestionRow =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(QuestionRow, _Component);\n\n  function QuestionRow(props) {\n    var _this;\n\n    _classCallCheck(this, QuestionRow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(QuestionRow).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"votePhase\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var accounts, question, _questionState, _votingTime;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n\n              if (!(_this.state.questionState == 0)) {\n                _context.next = 23;\n                break;\n              }\n\n              _context.next = 4;\n              return web3.eth.getAccounts();\n\n            case 4:\n              accounts = _context.sent;\n              question = Question(_this.state.questionAddress); // Ensure that only Creator of Question can access this function\n\n              _context.t0 = accounts[0];\n              _context.next = 9;\n              return question.methods.getCreator().call();\n\n            case 9:\n              _context.t1 = _context.sent;\n\n              if (!(_context.t0 == _context.t1)) {\n                _context.next = 22;\n                break;\n              }\n\n              _this.setState({\n                stateChange: true\n              });\n\n              _context.next = 14;\n              return question.methods.getQuestionState().send({\n                from: accounts[0]\n              });\n\n            case 14:\n              _questionState = _context.sent;\n              _context.next = 17;\n              return question.methods.getTime().call();\n\n            case 17:\n              _votingTime = _context.sent;\n\n              _this.setState({\n                questionState: _questionState,\n                votingTime: _votingTime[3]\n              });\n\n              Router.pushRoute(\"/questions/\".concat(_this.state.questionAddress));\n              _context.next = 23;\n              break;\n\n            case 22:\n              _this.setState({\n                ownerError: true\n              });\n\n            case 23:\n              _context.next = 28;\n              break;\n\n            case 25:\n              _context.prev = 25;\n              _context.t2 = _context[\"catch\"](0);\n\n              _this.setState({\n                errorMessage: _context.t2.message\n              });\n\n            case 28:\n              _this.setState({\n                stateChange: false\n              });\n\n            case 29:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 25]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"rewardPhase\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var accounts, question, _questionState, logTransaction;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n\n              if (!(_this.state.questionState == 1)) {\n                _context2.next = 23;\n                break;\n              }\n\n              _context2.next = 4;\n              return web3.eth.getAccounts();\n\n            case 4:\n              accounts = _context2.sent;\n              question = Question(_this.state.questionAddress); // Ensure that only Creator of Question can access this function\n\n              _context2.t0 = accounts[0];\n              _context2.next = 9;\n              return question.methods.getCreator().call();\n\n            case 9:\n              _context2.t1 = _context2.sent;\n\n              if (!(_context2.t0 == _context2.t1)) {\n                _context2.next = 22;\n                break;\n              }\n\n              _this.setState({\n                stateChange: true\n              });\n\n              _context2.next = 14;\n              return question.methods.getQuestionState().send({\n                from: accounts[0]\n              });\n\n            case 14:\n              _questionState = _context2.sent;\n              logTransaction = logging(\"Awarded Reward for Question Titled: \" + _this.props.summary[0]);\n              _context2.next = 18;\n              return factory.methods.shareTokenAt(_this.state.questionAddress, logTransaction).send({\n                from: accounts[0]\n              });\n\n            case 18:\n              _this.setState({\n                questionState: _questionState\n              });\n\n              Router.pushRoute(\"/questions/\".concat(_this.state.questionAddress));\n              _context2.next = 23;\n              break;\n\n            case 22:\n              _this.setState({\n                ownerError: true\n              });\n\n            case 23:\n              _context2.next = 28;\n              break;\n\n            case 25:\n              _context2.prev = 25;\n              _context2.t2 = _context2[\"catch\"](0);\n\n              _this.setState({\n                errorMessage: _context2.t2.message\n              });\n\n            case 28:\n              _this.setState({\n                stateChange: false\n              });\n\n            case 29:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 25]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"timeExtension\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var accounts, question;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context3.sent;\n              question = Question(_this.state.questionAddress); // Ensure that only Creator of Question can access this function\n\n              _context3.t0 = accounts[0];\n              _context3.next = 8;\n              return question.methods.getCreator().call();\n\n            case 8:\n              _context3.t1 = _context3.sent;\n\n              if (!(_context3.t0 == _context3.t1)) {\n                _context3.next = 16;\n                break;\n              }\n\n              _this.setState({\n                timeExtension: true\n              });\n\n              _context3.next = 13;\n              return question.methods.timeExtension().send({\n                from: accounts[0]\n              });\n\n            case 13:\n              Router.pushRoute(\"/questions/\".concat(_this.state.questionAddress));\n              _context3.next = 17;\n              break;\n\n            case 16:\n              _this.setState({\n                ownerError: true\n              });\n\n            case 17:\n              _context3.next = 22;\n              break;\n\n            case 19:\n              _context3.prev = 19;\n              _context3.t2 = _context3[\"catch\"](0);\n\n              _this.setState({\n                errorMessage: _context3.t2.message\n              });\n\n            case 22:\n              _this.setState({\n                timeExtension: false\n              });\n\n            case 23:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[0, 19]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"increaseReward\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var accounts, question, logTransaction;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context4.sent;\n              question = Question(_this.state.questionAddress); // Ensure that only Creator of Question can access this function\n\n              _context4.t0 = accounts[0];\n              _context4.next = 8;\n              return question.methods.getCreator().call();\n\n            case 8:\n              _context4.t1 = _context4.sent;\n\n              if (!(_context4.t0 == _context4.t1)) {\n                _context4.next = 17;\n                break;\n              }\n\n              _this.setState({\n                changeReward: true\n              });\n\n              logTransaction = logging(\"Increase Reward for Question Titled: \" + _this.props.summary[0]);\n              _context4.next = 14;\n              return factory.methods.increaseReward(_this.state.questionAddress, logTransaction).send({\n                from: accounts[0]\n              });\n\n            case 14:\n              Router.pushRoute(\"/questions/\".concat(_this.state.questionAddress));\n              _context4.next = 18;\n              break;\n\n            case 17:\n              _this.setState({\n                ownerError: true\n              });\n\n            case 18:\n              _context4.next = 23;\n              break;\n\n            case 20:\n              _context4.prev = 20;\n              _context4.t2 = _context4[\"catch\"](0);\n\n              _this.setState({\n                errorMessage: _context4.t2.message\n              });\n\n            case 23:\n              _this.setState({\n                changeReward: false\n              });\n\n            case 24:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[0, 20]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmitAnswer\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee5() {\n      var accounts, question, logTransaction;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              });\n\n              _context5.prev = 1;\n              _context5.next = 4;\n              return web3.eth.getAccounts();\n\n            case 4:\n              accounts = _context5.sent;\n              question = Question(_this.state.questionAddress); // Ensure that creator of question cannot provide answers\n\n              _context5.t0 = accounts[0];\n              _context5.next = 9;\n              return question.methods.getCreator().call();\n\n            case 9:\n              _context5.t1 = _context5.sent;\n\n              if (!(_context5.t0 != _context5.t1)) {\n                _context5.next = 17;\n                break;\n              }\n\n              // Logs the transactions\n              logTransaction = logging(\"Submitted Answer for Question Titled: \" + _this.props.summary[0]); // Create new answer\n\n              _context5.next = 14;\n              return factory.methods.createAnswer(_this.state.questionAddress, _this.state.answer, _this.state.fileHashes_array, _this.state.fileNames_array, logTransaction).send({\n                from: accounts[0]\n              });\n\n            case 14:\n              Router.pushRoute(\"/questions/\".concat(_this.state.questionAddress));\n              _context5.next = 18;\n              break;\n\n            case 17:\n              _this.setState({\n                loading: false,\n                errorMessage: \"You cannot provide answer for your own question\"\n              });\n\n            case 18:\n              _context5.next = 23;\n              break;\n\n            case 20:\n              _context5.prev = 20;\n              _context5.t2 = _context5[\"catch\"](1);\n\n              _this.setState({\n                errorMessage: _context5.t2.message\n              });\n\n            case 23:\n              _this.setState({\n                loading: false,\n                answer: ''\n              });\n\n            case 24:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[1, 20]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"upVote\",\n    /*#__PURE__*/\n    function () {\n      var _ref6 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(index) {\n        var accounts, question, profile, logTransaction;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context6.sent;\n                _context6.next = 5;\n                return Question(_this.state.questionAddress);\n\n              case 5:\n                question = _context6.sent;\n                _context6.next = 8;\n                return factory.methods.getProfile(accounts[0]).call();\n\n              case 8:\n                profile = _context6.sent;\n                _context6.t0 = accounts[0];\n                _context6.next = 12;\n                return question.methods.getAnswerer(index).call();\n\n              case 12:\n                _context6.t1 = _context6.sent;\n\n                if (!(_context6.t0 != _context6.t1)) {\n                  _context6.next = 26;\n                  break;\n                }\n\n                _context6.next = 16;\n                return question.methods.checkVoter(index, profile).call();\n\n              case 16:\n                if (_context6.sent) {\n                  _context6.next = 23;\n                  break;\n                }\n\n                logTransaction = logging(\"Up Voted An Answer for Question Titled: \" + _this.props.summary[0]);\n                _context6.next = 20;\n                return factory.methods.upVote(_this.state.questionAddress, index, logTransaction).send({\n                  from: accounts[0]\n                });\n\n              case 20:\n                Router.pushRoute(\"/questions/\".concat(_this.state.questionAddress));\n                _context6.next = 24;\n                break;\n\n              case 23:\n                _this.setState({\n                  voteMultipleError: true\n                });\n\n              case 24:\n                _context6.next = 27;\n                break;\n\n              case 26:\n                _this.setState({\n                  voteError: true\n                });\n\n              case 27:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      return function (_x) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"downVote\",\n    /*#__PURE__*/\n    function () {\n      var _ref7 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(index) {\n        var accounts, question, profile, logTransaction;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context7.sent;\n                _context7.next = 5;\n                return Question(_this.state.questionAddress);\n\n              case 5:\n                question = _context7.sent;\n                _context7.next = 8;\n                return factory.methods.getProfile(accounts[0]).call();\n\n              case 8:\n                profile = _context7.sent;\n                _context7.t0 = accounts[0];\n                _context7.next = 12;\n                return question.methods.getAnswerer(index).call();\n\n              case 12:\n                _context7.t1 = _context7.sent;\n\n                if (!(_context7.t0 != _context7.t1)) {\n                  _context7.next = 26;\n                  break;\n                }\n\n                _context7.next = 16;\n                return question.methods.checkVoter(index, profile).call();\n\n              case 16:\n                if (_context7.sent) {\n                  _context7.next = 23;\n                  break;\n                }\n\n                logTransaction = logging(\"Down Voted An Answer for Question Titled: \" + _this.props.summary[0]);\n                _context7.next = 20;\n                return factory.methods.downVote(_this.state.questionAddress, index, logTransaction).send({\n                  from: accounts[0]\n                });\n\n              case 20:\n                Router.pushRoute(\"/questions/\".concat(_this.state.questionAddress));\n                _context7.next = 24;\n                break;\n\n              case 23:\n                _this.setState({\n                  voteMultipleError: true\n                });\n\n              case 24:\n                _context7.next = 27;\n                break;\n\n              case 26:\n                _this.setState({\n                  voteError: true\n                });\n\n              case 27:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      return function (_x2) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"onFileSelected\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee9() {\n      var reader, file, _this$state, files_array, fileNames_array, fileHashes_array;\n\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              // Access JavaScript FileReader() method for conversion to buffer\n              reader = new FileReader();\n              file = _this.fileInput.files[0];\n\n              _this.setState({\n                fileLoading: true\n              });\n\n              if (file instanceof Blob) {\n                _this$state = _this.state, files_array = _this$state.files_array, fileNames_array = _this$state.fileNames_array, fileHashes_array = _this$state.fileHashes_array;\n                files_array.push(file);\n                fileNames_array.push(file.name);\n\n                _this.setState({\n                  files_array: files_array,\n                  fileNames_array: fileNames_array\n                });\n\n                console.log(\"fileNames_array: \", fileNames_array);\n                reader.onloadend =\n                /*#__PURE__*/\n                _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee8() {\n                  var fileHash;\n                  return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n                    while (1) {\n                      switch (_context8.prev = _context8.next) {\n                        case 0:\n                          _context8.next = 2;\n                          return _this.setState({\n                            fileUrl: reader.result,\n                            fileLoading: true,\n                            buffer: Buffer.from(reader.result) // File is converted to a buffer for upload to IPFS\n\n                          });\n\n                        case 2:\n                          if (!_this.state.buffer) {\n                            _context8.next = 8;\n                            break;\n                          }\n\n                          _context8.next = 5;\n                          return getIpfsHash(file);\n\n                        case 5:\n                          _context8.t0 = _context8.sent;\n                          _context8.next = 9;\n                          break;\n\n                        case 8:\n                          _context8.t0 = '0';\n\n                        case 9:\n                          fileHash = _context8.t0;\n                          fileHashes_array.push(fileHash);\n\n                          _this.setState({\n                            fileHashes_array: fileHashes_array\n                          });\n\n                          console.log(\"fileHashes_array: \", fileHashes_array);\n\n                          _this.setState({\n                            fileLoading: false\n                          });\n\n                        case 14:\n                        case \"end\":\n                          return _context8.stop();\n                      }\n                    }\n                  }, _callee8);\n                }));\n                reader.readAsDataURL(file);\n              }\n\n            case 4:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"onFileRemoved\", function (file) {\n      var i = 0;\n      var _this$state2 = _this.state,\n          files_array = _this$state2.files_array,\n          fileHashes_array = _this$state2.fileHashes_array,\n          fileNames_array = _this$state2.fileNames_array;\n      console.log('file: ', file);\n\n      for (i = 0; i < files_array.length; i++) {\n        if (file === files_array[i]) {\n          files_array.splice(i, 1);\n          fileNames_array.splice(i, 1);\n          fileHashes_array.splice(i, 1);\n          break;\n        }\n      }\n\n      _this.setState({\n        files_array: files_array,\n        fileNames_array: fileNames_array,\n        fileHashes_array: fileHashes_array\n      });\n\n      console.log('fileNames_array', fileNames_array);\n      console.log(\"fileHashes_array: \", fileHashes_array);\n    });\n\n    _this.state = {\n      profileOwnerAddress: '',\n      questionAddress: '',\n      questionState: '',\n      votingTime: '',\n      answer: '',\n      errorMessage: '',\n      loading: false,\n      voteError: false,\n      ownerError: false,\n      voteMultipleError: false,\n      stateChange: false,\n      timeExtension: false,\n      changeReward: false,\n      fileLoading: false,\n      buffer: null,\n      files_array: [],\n      fileHashes_array: [],\n      fileNames_array: [],\n      login: false,\n      resourceLoading: true,\n      accountType: null\n    };\n    return _this;\n  }\n\n  _createClass(QuestionRow, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee10() {\n        var accounts, login, profileAddress, profile, accountType;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context10.sent;\n                login = false;\n                _context10.next = 6;\n                return credentials.methods.getBinding(accounts[0]).call();\n\n              case 6:\n                _context10.t0 = _context10.sent;\n\n                if (!(_context10.t0 === \"\")) {\n                  _context10.next = 10;\n                  break;\n                }\n\n                _context10.next = 20;\n                break;\n\n              case 10:\n                login = true; // Get Account Type\n\n                _context10.next = 13;\n                return factory.methods.getProfile(accounts[0]).call();\n\n              case 13:\n                profileAddress = _context10.sent;\n                profile = Profile(profileAddress);\n                _context10.next = 17;\n                return profile.methods.getAccountType().call();\n\n              case 17:\n                accountType = _context10.sent;\n                accountType == 0 ? accountType = \"Admin\" : accountType = \"User\";\n                this.setState({\n                  login: login,\n                  accountType: accountType\n                });\n\n              case 20:\n                this.setState({\n                  profileOwnerAddress: this.props.profileOwnerAddress,\n                  questionAddress: this.props.questionAddress,\n                  questionState: this.props.summary[4],\n                  votingTime: this.props.time[3],\n                  resourceLoading: false\n                });\n\n              case 21:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"renderQuestion\",\n    value: function renderQuestion() {\n      var summary = this.props.summary;\n      var time = this.props.time;\n      var currentTime = new Date().getTime();\n      var maxDuration = (_parseFloat(summary[3]) / 60 / 60).toFixed(2).toString().toString();\n      var publishTime = moment.unix(time[0]).format('dddd, Do MMMM YYYY, h:mm:ss a');\n      var votingTime = moment.unix(this.state.votingTime).format('dddd, Do MMMM YYYY, h:mm:ss a');\n      var publishTimeMs = moment.unix(time[0]).valueOf();\n      var maxDurationMs = moment.unix(time[2]).valueOf();\n      var votingTimeMs = moment.unix(this.state.votingTime).valueOf();\n      var remainingTime = 0;\n\n      if (this.state.questionState == 0) {\n        remainingTime = publishTimeMs + maxDurationMs - currentTime;\n\n        if (remainingTime < 0) {\n          remainingTime = 0;\n        }\n      } else {\n        remainingTime = votingTimeMs + maxDurationMs - currentTime;\n\n        if (remainingTime < 0) {\n          remainingTime = 0;\n        }\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(Table, {\n        definition: true\n      }, React.createElement(Table.Body, null, React.createElement(Table.Row, null, React.createElement(Table.Cell, {\n        width: 2\n      }, \"Question Title\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px',\n          lineHeight: '1.5'\n        }\n      }, summary[0])), React.createElement(Table.Row, null, React.createElement(Table.Cell, {\n        width: 2\n      }, \"Description\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px',\n          lineHeight: '1.5'\n        }\n      }, React.createElement(Context, {\n        input: \"tex\",\n        onLoad: function onLoad() {\n          return console.log(\"Loaded MathJax script!\");\n        },\n        onError: function onError(MathJax, error) {\n          console.warn(error);\n          console.log(\"Encountered a MathJax error, re-attempting a typeset!\");\n          MathJax.Hub.Queue(MathJax.Hub.Typeset());\n        },\n        options: {\n          asciimath2jax: {\n            useMathMLspacing: true,\n            delimiters: [[\"$$\", \"$$\"]],\n            preview: \"none\"\n          }\n        }\n      }, React.createElement(Text, {\n        text: summary[1]\n      })))), React.createElement(Table.Row, null, React.createElement(Table.Cell, null, \"Reward (ETH)\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px'\n        }\n      }, summary[2], this.state.questionState == 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"ethereum\",\n          color: \"black\",\n          onClick: this.increaseReward\n        }),\n        content: \"Increase Reward\",\n        position: \"bottom right\",\n        inverted: true\n      }) : React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"ethereum\",\n          color: \"black\",\n          disabled: true\n        }),\n        position: \"bottom right\",\n        inverted: true\n      }))), React.createElement(Table.Row, null, React.createElement(Table.Cell, null, \"Publish Time\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px'\n        }\n      }, publishTime)), React.createElement(Table.Row, null, React.createElement(Table.Cell, null, \"Answering Duration (hours)\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px'\n        }\n      }, React.createElement(\"span\", {\n        style: {\n          verticalAlign: 'middle',\n          lineHeight: '33px'\n        }\n      }, maxDuration), this.state.questionState == 0 && remainingTime > 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"violet\"\n        }),\n        content: React.createElement(\"span\", null, React.createElement(\"span\", null, \"Remaining time - \"), React.createElement(Countdown, {\n          date: _Date$now() + remainingTime\n        })),\n        position: \"bottom right\",\n        inverted: true\n      }) : this.state.questionState == 0 && remainingTime == 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"red\"\n        }),\n        flowing: true,\n        hoverable: true\n      }, React.createElement(Grid, {\n        centered: true,\n        divided: true,\n        columns: 2\n      }, React.createElement(Grid.Column, {\n        textAlign: \"center\"\n      }, React.createElement(\"p\", null, \"Extends the validity of question by 1 hour\"), React.createElement(Button, {\n        onClick: this.timeExtension\n      }, \"Extend Deadline\")), React.createElement(Grid.Column, {\n        textAlign: \"center\"\n      }, React.createElement(\"p\", null, \"Proceed to the voting phase\"), React.createElement(Button, {\n        onClick: this.votePhase\n      }, \"Voting Phase\")))) : React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"red\",\n          disabled: true\n        }),\n        position: \"bottom right\",\n        inverted: true\n      }))), React.createElement(Table.Row, null, React.createElement(Table.Cell, null, \"Voting Duration (hours)\"), React.createElement(Table.Cell, {\n        style: {\n          fontSize: '20px'\n        }\n      }, React.createElement(\"span\", {\n        style: {\n          verticalAlign: 'middle',\n          lineHeight: '33px'\n        }\n      }, maxDuration), this.state.questionState == 1 && remainingTime > 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"violet\"\n        }),\n        content: React.createElement(\"span\", null, React.createElement(\"span\", null, \"Remaining time - \"), React.createElement(Countdown, {\n          date: _Date$now() + remainingTime\n        })),\n        position: \"bottom right\",\n        inverted: true\n      }) : this.state.questionState == 1 && remainingTime == 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"red\",\n          onClick: this.rewardPhase\n        }),\n        content: \"Reward\",\n        position: \"bottom right\",\n        inverted: true\n      }) : this.state.questionState == 0 ? React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"red\",\n          disabled: true\n        }),\n        position: \"bottom right\",\n        inverted: true\n      }) : React.createElement(Popup, {\n        trigger: React.createElement(Button, {\n          style: {\n            float: 'right',\n            verticalAlign: 'middle'\n          },\n          icon: \"clock\",\n          color: \"red\",\n          disabled: true\n        }),\n        position: \"bottom right\",\n        inverted: true\n      }))))));\n    }\n  }, {\n    key: \"renderAnswers\",\n    value: function renderAnswers() {\n      var _this2 = this;\n\n      var answers = this.props.answerList; // Answering Phase no answers are shown\n\n      if (this.state.questionState != 0) {\n        return answers.map(function (answer, index) {\n          var answeredTime = moment.unix(answer[5]).format('Do MMMM YYYY, h:mm a');\n          var id = index % 70;\n          return React.createElement(Comment, {\n            key: index\n          }, React.createElement(Comment.Avatar, {\n            src: _this2.props.avatarListIcon[id],\n            style: {\n              backgroundColor: '#8D8741'\n            }\n          }), React.createElement(Comment.Content, {\n            style: {\n              width: \"1000px\"\n            }\n          }, React.createElement(Comment.Author, {\n            as: \"a\"\n          }, answer[1]), React.createElement(Comment.Metadata, null, React.createElement(\"div\", null, answeredTime)), React.createElement(\"br\", null), _this2.state.questionState == 2 ? React.createElement(Comment.Metadata, null, React.createElement(\"div\", null, React.createElement(Icon, {\n            name: \"thumbs up\"\n          }), answer[3]), React.createElement(\"div\", null, React.createElement(Icon, {\n            name: \"thumbs down\"\n          }), answer[4])) : React.createElement(Comment.Metadata, null, React.createElement(\"div\", null, React.createElement(Icon, {\n            name: \"thumbs up\"\n          }), \"0\"), React.createElement(\"div\", null, React.createElement(Icon, {\n            name: \"thumbs down\"\n          }), \"0\")), React.createElement(Comment.Text, null, React.createElement(Context, {\n            input: \"tex\",\n            onLoad: function onLoad() {\n              return console.log(\"Loaded MathJax script!\");\n            },\n            onError: function onError(MathJax, error) {\n              console.warn(error);\n              console.log(\"Encountered a MathJax error, re-attempting a typeset!\");\n              MathJax.Hub.Queue(MathJax.Hub.Typeset());\n            },\n            options: {\n              asciimath2jax: {\n                useMathMLspacing: true,\n                delimiters: [[\"$$\", \"$$\"]],\n                preview: \"none\"\n              }\n            }\n          }, React.createElement(Text, {\n            text: answer[0]\n          })), answer[8].map(function (imageName, index) {\n            return React.createElement(\"div\", {\n              style: {\n                marginBottom: '10px'\n              },\n              key: index\n            }, React.createElement(Image, {\n              src: \"https://ipfs.io/ipfs/\" + answer[9][index]\n            }));\n          })), React.createElement(Comment.Actions, null, React.createElement(Comment.Action, null, React.createElement(Button, {\n            style: {\n              float: 'right',\n              verticalAlign: 'middle'\n            },\n            icon: \"thumbs down\",\n            onClick: function onClick() {\n              return _this2.downVote(index);\n            },\n            size: \"tiny\"\n          }), React.createElement(Button, {\n            style: {\n              float: 'right',\n              verticalAlign: 'middle'\n            },\n            icon: \"thumbs up\",\n            onClick: function onClick() {\n              return _this2.upVote(index);\n            },\n            size: \"tiny\"\n          })))));\n        });\n      }\n    }\n  }, {\n    key: \"renderFiles\",\n    value: function renderFiles() {\n      var fileHashes = this.props.summary[5];\n      var fileNames = this.props.summary[6];\n\n      if (fileHashes.length == 0) {\n        return React.createElement(Segment, {\n          placeholder: true\n        }, React.createElement(Header, {\n          icon: true\n        }, React.createElement(Icon, {\n          name: \"images outline\"\n        }), \"No images are uploaded for this question\"));\n      } else {\n        return React.createElement(Segment, {\n          placeholder: true\n        }, React.createElement(\"center\", null, React.createElement(\"p\", null, \"Image(s) Uploaded\"), fileNames.map(function (fileName, index) {\n          return React.createElement(\"div\", {\n            style: {\n              marginBottom: '10px'\n            },\n            key: index\n          }, React.createElement(Image, {\n            src: \"https://ipfs.io/ipfs/\" + fileHashes[index]\n          }), React.createElement(Divider, {\n            hidden: true\n          }), React.createElement(\"p\", null, \" To download: \"), React.createElement(Label, {\n            as: \"a\",\n            size: \"big\",\n            href: \"https://ipfs.io/ipfs/\" + fileHashes[index]\n          }, React.createElement(Icon, {\n            name: \"download\"\n          }), fileName));\n        })));\n      }\n    }\n  }, {\n    key: \"renderAnswersForm\",\n    value: function renderAnswersForm() {\n      var _this3 = this;\n\n      var files_array = this.state.files_array;\n      var elmFiles = null;\n\n      if (files_array !== null) {\n        elmFiles = files_array.map(function (item, index) {\n          return React.createElement(Label, {\n            as: \"a\",\n            key: index,\n            size: \"big\"\n          }, item.name, React.createElement(Icon, {\n            name: \"delete\",\n            onClick: function onClick() {\n              return _this3.onFileRemoved(item);\n            }\n          }));\n        });\n      }\n\n      return React.createElement(Form, {\n        error: !!this.state.errorMessage\n      }, React.createElement(Form.TextArea, {\n        placeholder: \"Enter Answers\",\n        value: this.state.answer,\n        onChange: function onChange(event) {\n          return _this3.setState({\n            answer: event.target.value\n          });\n        }\n      }), React.createElement(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.errorMessage\n      }), React.createElement(Form.Field, null, this.renderFilesUpload(elmFiles)), React.createElement(Modal, {\n        open: this.state.loading,\n        trigger: this.state.questionState == 1 ? React.createElement(Button, {\n          content: \"Submit Answers\",\n          disabled: true,\n          labelPosition: \"left\",\n          icon: \"edit\",\n          primary: true\n        }) : React.createElement(Button, {\n          content: \"Submit Answers\",\n          onClick: this.onSubmitAnswer,\n          loading: this.state.loading,\n          labelPosition: \"left\",\n          icon: \"edit\",\n          primary: true\n        }),\n        basic: true,\n        size: \"small\"\n      }, React.createElement(Header, {\n        content: \"Posting New Answers\"\n      }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"Please Confirm the MetaMask Transaction Request to submit your Answers to the Block-Chain Network. Upon successful submission, you will be redirected back to the Question Page. This process might take awhile.\"), React.createElement(Loader, {\n        active: true,\n        inline: \"centered\"\n      }, \"Loading\"))));\n    }\n  }, {\n    key: \"renderFilesUpload\",\n    value: function renderFilesUpload(files) {\n      var _this4 = this;\n\n      var files_array = this.state.files_array;\n\n      if (this.state.files_array.length == 0) {\n        return React.createElement(Segment, {\n          placeholder: true\n        }, React.createElement(Header, {\n          icon: true\n        }, React.createElement(Icon, {\n          name: \"images outline\"\n        }), \"No images are uploaded for this answer\"), React.createElement(\"input\", {\n          style: {\n            display: 'none'\n          },\n          type: \"file\",\n          onChange: function onChange() {\n            return _this4.onFileSelected();\n          },\n          ref: function ref(fileInput) {\n            return _this4.fileInput = fileInput;\n          }\n        }), React.createElement(Button, {\n          primary: true,\n          onClick: function onClick() {\n            return _this4.fileInput.click();\n          },\n          loading: this.state.fileLoading\n        }, \"Upload Image\"));\n      } else {\n        return React.createElement(Segment, {\n          placeholder: true\n        }, React.createElement(\"center\", null, React.createElement(\"div\", {\n          style: {\n            marginBottom: '20px'\n          }\n        }, files), React.createElement(\"input\", {\n          style: {\n            display: 'none'\n          },\n          type: \"file\",\n          onChange: function onChange() {\n            return _this4.onFileSelected();\n          },\n          ref: function ref(fileInput) {\n            return _this4.fileInput = fileInput;\n          }\n        }), React.createElement(Button, {\n          primary: true,\n          onClick: function onClick() {\n            return _this4.fileInput.click();\n          },\n          loading: this.state.fileLoading\n        }, \"Upload Files\")));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      if (this.state.login) {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(Container, null, React.createElement(Divider, {\n          hidden: true\n        }), this.renderQuestion(), React.createElement(Divider, null), this.renderFiles(), React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"Submit Your Answers Here\"), React.createElement(\"p\", null, React.createElement(\"b\", null, \"Note:\"), \" To include math equations, delimit the latex format with $$.\"), React.createElement(\"a\", {\n          style: {\n            display: \"table-cell\"\n          },\n          href: \"https://www.codecogs.com/latex/eqneditor.php\",\n          target: \"_blank\"\n        }, \"Link to Supported Latex Editor\"), this.renderAnswersForm(), React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"Answer(s) Submitted: \", this.props.answerList.length), React.createElement(Divider, null), React.createElement(Comment.Group, {\n          size: \"large\"\n        }, this.renderAnswers()), React.createElement(Modal, {\n          open: this.state.voteError,\n          basic: true,\n          size: \"small\"\n        }, React.createElement(Header, {\n          icon: \"ethereum\",\n          content: \"Cannot Vote Own Answers\"\n        }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"You have selected to vote the answer you have provided. Please only vote answers provided by others.\")), React.createElement(Modal.Actions, null, React.createElement(Button, {\n          color: \"green\",\n          inverted: true,\n          attached: \"bottom\",\n          onClick: function onClick() {\n            Router.pushRoute(\"/questions/\".concat(_this5.state.questionAddress));\n\n            _this5.setState({\n              voteError: false\n            });\n          }\n        }, \"Go Back\"))), React.createElement(Modal, {\n          open: this.state.ownerError,\n          basic: true,\n          size: \"small\"\n        }, React.createElement(Header, {\n          icon: \"ethereum\",\n          content: \"Only Available For Owner Of Question\"\n        }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"You cannot change the state of the question as you are not the owner.\")), React.createElement(Modal.Actions, null, React.createElement(Button, {\n          color: \"green\",\n          inverted: true,\n          attached: \"bottom\",\n          onClick: function onClick() {\n            Router.pushRoute(\"/questions/\".concat(_this5.state.questionAddress));\n\n            _this5.setState({\n              ownerError: false\n            });\n          }\n        }, \"Go Back\"))), React.createElement(Modal, {\n          open: this.state.voteMultipleError,\n          basic: true,\n          size: \"small\"\n        }, React.createElement(Header, {\n          icon: \"ethereum\",\n          content: \"Answer Already Voted\"\n        }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"You cannot vote for the same answer more than once. Please vote for another answer.\")), React.createElement(Modal.Actions, null, React.createElement(Button, {\n          color: \"green\",\n          inverted: true,\n          attached: \"bottom\",\n          onClick: function onClick() {\n            Router.pushRoute(\"/questions/\".concat(_this5.state.questionAddress));\n\n            _this5.setState({\n              voteMultipleError: false\n            });\n          }\n        }, \"Go Back\"))), React.createElement(Modal, {\n          open: this.state.stateChange,\n          basic: true,\n          size: \"small\"\n        }, React.createElement(Header, {\n          content: \"Proceeding To Voting/Rewarding Phase\"\n        }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"Please Confirm the MetaMask Transaction Request to proceed towards Voting/Rewarding Phase.\"), React.createElement(Loader, {\n          active: true,\n          inline: \"centered\"\n        }, \"State Changing\"))), React.createElement(Modal, {\n          open: this.state.timeExtension,\n          basic: true,\n          size: \"small\"\n        }, React.createElement(Header, {\n          content: \"Extending Question Deadline\"\n        }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"Please Confirm the MetaMask Transaction Request to extend the duration of the question.\"), React.createElement(Loader, {\n          active: true,\n          inline: \"centered\"\n        }, \"Refreshing Question\"))), React.createElement(Modal, {\n          open: this.state.changeReward,\n          basic: true,\n          size: \"small\"\n        }, React.createElement(Header, {\n          content: \"Increasing Reward\"\n        }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"Please Confirm the MetaMask Transaction Request to increase reward.\"), React.createElement(Loader, {\n          active: true,\n          inline: \"centered\"\n        }, \"Increasing Reward\")))));\n      } else {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(Container, {\n          style: {\n            width: \"100%\",\n            height: \"100vh\"\n          }\n        }, React.createElement(Modal, {\n          open: this.state.resourceLoading,\n          basic: true,\n          size: \"small\"\n        }, React.createElement(Header, {\n          icon: \"ethereum\",\n          content: \"Loading Resources\"\n        }), React.createElement(Modal.Content, null, React.createElement(Loader, {\n          active: true,\n          inline: \"centered\"\n        }, \"Loading Selected Question Information\"))), React.createElement(Modal, {\n          open: !this.state.login && !this.state.resourceLoading,\n          basic: true,\n          size: \"small\"\n        }, React.createElement(Header, {\n          icon: \"ethereum\",\n          content: \"Not Registered\"\n        }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"You are currently not registered to access the platform. Please have your account registered.\")), React.createElement(Modal.Actions, null, React.createElement(Button, {\n          color: \"green\",\n          inverted: true,\n          attached: \"bottom\",\n          onClick: function onClick() {\n            Router.pushRoute('/');\n          }\n        }, \"Register For Account\")))));\n      }\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee11(props) {\n        var questionAddress, question, summary, time, profileOwnerAddress, answerList, iconList, avatarListIcon;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                // Retrieve question data\n                questionAddress = props.query.value;\n                question = Question(questionAddress);\n                _context11.next = 4;\n                return question.methods.getSummary().call();\n\n              case 4:\n                summary = _context11.sent;\n                _context11.next = 7;\n                return question.methods.getTime().call();\n\n              case 7:\n                time = _context11.sent;\n                _context11.next = 10;\n                return factory.methods.getProfile(summary[7]).call();\n\n              case 10:\n                profileOwnerAddress = _context11.sent;\n                _context11.next = 13;\n                return question.methods.getAnswerList().call();\n\n              case 13:\n                answerList = _context11.sent;\n                iconList = ['alligator', 'anteater', 'armadillo', 'auroch', 'axolotl', 'badger', 'bat', 'beaver', 'buffalo', 'camel', 'capybara', 'chameleon', 'cheetah', 'chinchilla', 'chipmunk', 'chupacabra', 'cormorant', 'coyote', 'crow', 'dingo', 'dinosaur', 'dolphin', 'duck', 'elephant', 'ferret', 'fox', 'frog', 'giraffe', 'gopher', 'grizzly', 'hedgehog', 'hippo', 'hyena', 'ibex', 'ifrit', 'iguana', 'jackal', 'kangaroo', 'koala', 'kraken', 'lemur', 'leopard', 'liger', 'llama', 'manatee', 'mink', 'monkey', 'moose', 'narwhal', 'orangutan', 'otter', 'panda', 'penguin', 'platypus', 'pumpkin', 'python', 'quagga', 'rabbit', 'raccoon', 'rhino', 'sheep', 'shrew', 'skunk', 'squirrel', 'tiger', 'turtle', 'walrus', 'wolf', 'wolverine', 'wombat'];\n                avatarListIcon = iconList.map(function (item) {\n                  return 'https://ssl.gstatic.com/docs/common/profile/' + item + '_lg.png';\n                });\n                return _context11.abrupt(\"return\", {\n                  summary: summary,\n                  time: time,\n                  questionAddress: questionAddress,\n                  answerList: answerList,\n                  avatarListIcon: avatarListIcon,\n                  profileOwnerAddress: profileOwnerAddress\n                });\n\n              case 17:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11);\n      }));\n\n      function getInitialProps(_x3) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return QuestionRow;\n}(Component);\n\nexport default QuestionRow;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\showQuestion.js"],"names":["React","Component","Table","Popup","Button","Container","Form","Header","Comment","Segment","Message","Divider","Icon","Label","Modal","Loader","Image","Grid","Link","Router","moment","web3","Question","credentials","Profile","factory","Layout","Countdown","Context","Text","Footer","getIpfsHash","logging","QuestionRow","props","state","questionState","eth","getAccounts","accounts","question","questionAddress","methods","getCreator","call","setState","stateChange","getQuestionState","send","from","_questionState","getTime","_votingTime","votingTime","pushRoute","ownerError","errorMessage","message","logTransaction","summary","shareTokenAt","timeExtension","changeReward","increaseReward","loading","createAnswer","answer","fileHashes_array","fileNames_array","index","getProfile","profile","getAnswerer","checkVoter","upVote","voteMultipleError","voteError","downVote","reader","FileReader","file","fileInput","files","fileLoading","Blob","files_array","push","name","console","log","onloadend","fileUrl","result","buffer","Buffer","fileHash","readAsDataURL","i","length","splice","profileOwnerAddress","login","resourceLoading","accountType","getBinding","profileAddress","getAccountType","time","currentTime","Date","maxDuration","toFixed","toString","publishTime","unix","format","publishTimeMs","valueOf","maxDurationMs","votingTimeMs","remainingTime","fontSize","lineHeight","MathJax","error","warn","Hub","Queue","Typeset","asciimath2jax","useMathMLspacing","delimiters","preview","float","verticalAlign","votePhase","rewardPhase","answers","answerList","map","answeredTime","id","avatarListIcon","backgroundColor","width","imageName","marginBottom","fileHashes","fileNames","fileName","elmFiles","item","onFileRemoved","event","target","value","renderFilesUpload","onSubmitAnswer","display","onFileSelected","click","renderQuestion","renderFiles","renderAnswersForm","renderAnswers","height","query","getSummary","getAnswerList","iconList"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Table, Popup, Button, Container, Form, Header, Comment,\r\n  Segment, Message, Divider, Icon, Label, Modal, Loader, Image, Grid } from 'semantic-ui-react';\r\nimport { Link, Router } from '../routes';\r\nimport moment from 'moment';\r\nimport web3 from '../ethereum/web3';\r\nimport Question from '../ethereum/question';\r\nimport credentials from '../ethereum/credentials';\r\nimport Profile from '../ethereum/profile'\r\nimport factory from '../ethereum/factory';\r\nimport Layout from '../components/Layout';\r\nimport Countdown from 'react-countdown-now';\r\nimport { Context, Text } from 'react-mathjax2';\r\nimport Footer from '../components/Footer';\r\nimport { getIpfsHash } from './ipfs';\r\nimport { logging } from \"./logger\";\r\n\r\nclass QuestionRow extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      profileOwnerAddress: '',\r\n      questionAddress: '',\r\n      questionState: '',\r\n      votingTime:'',\r\n      answer:'',\r\n      errorMessage: '',\r\n      loading: false,\r\n      voteError: false,\r\n      ownerError: false,\r\n      voteMultipleError: false,\r\n      stateChange: false,\r\n      timeExtension: false,\r\n      changeReward: false,\r\n      fileLoading: false,\r\n      buffer: null,\r\n      files_array: [],\r\n      fileHashes_array: [],\r\n      fileNames_array: [],\r\n      login: false,\r\n      resourceLoading: true,\r\n      accountType: null\r\n    };\r\n  }\r\n\r\n  static async getInitialProps(props) {\r\n    // Retrieve question data\r\n    const questionAddress = props.query.value;\r\n    const question = Question(questionAddress);\r\n    const summary = await question.methods.getSummary().call();\r\n    const time = await question.methods.getTime().call();\r\n    const profileOwnerAddress = await factory.methods.getProfile(summary[7]).call();\r\n    const answerList = await question.methods.getAnswerList().call();\r\n    const iconList = ['alligator', 'anteater', 'armadillo', 'auroch', 'axolotl',\r\n        'badger', 'bat', 'beaver', 'buffalo', 'camel', 'capybara',\r\n        'chameleon', 'cheetah', 'chinchilla', 'chipmunk', 'chupacabra',\r\n        'cormorant', 'coyote', 'crow', 'dingo', 'dinosaur', 'dolphin',\r\n        'duck', 'elephant', 'ferret', 'fox', 'frog', 'giraffe', 'gopher',\r\n        'grizzly', 'hedgehog', 'hippo', 'hyena', 'ibex', 'ifrit', 'iguana',\r\n        'jackal', 'kangaroo', 'koala', 'kraken', 'lemur', 'leopard',\r\n        'liger', 'llama', 'manatee', 'mink', 'monkey', 'moose', 'narwhal',\r\n        'orangutan', 'otter', 'panda', 'penguin', 'platypus',\r\n        'pumpkin', 'python', 'quagga', 'rabbit', 'raccoon', 'rhino',\r\n        'sheep', 'shrew', 'skunk', 'squirrel', 'tiger', 'turtle', 'walrus',\r\n        'wolf', 'wolverine', 'wombat'];\r\n    const avatarListIcon = iconList.map((item)=>{\r\n        return 'https://ssl.gstatic.com/docs/common/profile/' + item + '_lg.png';\r\n    });\r\n    return { summary, time, questionAddress, answerList, avatarListIcon, profileOwnerAddress };\r\n  };\r\n\r\n  async componentDidMount() {\r\n    // Retrieve the Ethereum Account from MetaMask\r\n    const accounts = await web3.eth.getAccounts();\r\n    let login = false;\r\n    if (await credentials.methods.getBinding(accounts[0]).call() === \"\") {\r\n    } else {\r\n      login = true;\r\n      // Get Account Type\r\n      let profileAddress = await factory.methods.getProfile(accounts[0]).call();\r\n      let profile = Profile(profileAddress);\r\n      let accountType = await profile.methods.getAccountType().call();\r\n      accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"\r\n      this.setState({ login: login,\r\n                      accountType: accountType });\r\n    }\r\n    this.setState({\r\n      profileOwnerAddress: this.props.profileOwnerAddress,\r\n      questionAddress: this.props.questionAddress,\r\n      questionState: this.props.summary[4],\r\n      votingTime: this.props.time[3],\r\n      resourceLoading: false\r\n    });\r\n  }\r\n\r\n  votePhase = async () => {\r\n    try {\r\n      if(this.state.questionState == 0) {\r\n        const accounts = await web3.eth.getAccounts();\r\n        const question = Question(this.state.questionAddress);\r\n        // Ensure that only Creator of Question can access this function\r\n        if (accounts[0] == await question.methods.getCreator().call()){\r\n          this.setState({ stateChange: true});\r\n          let _questionState = await question.methods.getQuestionState().send(\r\n            { from: accounts[0]}\r\n          );\r\n          // Set voting time inside smart contract as +1hr of now end time\r\n          let _votingTime = await question.methods.getTime().call();\r\n          this.setState({questionState: _questionState, votingTime: _votingTime[3] });\r\n          Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n        } else {\r\n          this.setState({ ownerError: true});\r\n        }\r\n      }\r\n    } catch (err) {\r\n        this.setState({ errorMessage: err.message });\r\n    }\r\n    this.setState({ stateChange: false});\r\n  }\r\n\r\n  rewardPhase = async () => {\r\n    try {\r\n      if(this.state.questionState == 1) {\r\n        const accounts = await web3.eth.getAccounts();\r\n        const question = Question(this.state.questionAddress);\r\n        // Ensure that only Creator of Question can access this function\r\n        if (accounts[0] == await question.methods.getCreator().call()){\r\n          this.setState({ stateChange: true});\r\n          let _questionState = await question.methods.getQuestionState().send(\r\n            { from: accounts[0]}\r\n          );\r\n          let logTransaction = logging(\"Awarded Reward for Question Titled: \" + this.props.summary[0]);\r\n          await factory.methods\r\n          .shareTokenAt(this.state.questionAddress, logTransaction)\r\n          .send({\r\n              from: accounts[0]\r\n          });\r\n          this.setState({questionState: _questionState });\r\n          Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n        } else {\r\n          this.setState({ ownerError: true});\r\n        }\r\n      }\r\n    } catch (err) {\r\n      this.setState({ errorMessage: err.message });\r\n    }\r\n    this.setState({ stateChange: false});\r\n  };\r\n\r\n  timeExtension = async () => {\r\n    try {\r\n      const accounts = await web3.eth.getAccounts();\r\n      const question = Question(this.state.questionAddress);\r\n      // Ensure that only Creator of Question can access this function\r\n      if (accounts[0] == await question.methods.getCreator().call()){\r\n        this.setState({ timeExtension: true});\r\n        await question.methods.timeExtension().send({\r\n          from: accounts[0]\r\n        });\r\n        Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n      } else {\r\n        this.setState({ ownerError: true});\r\n      }\r\n    } catch (err) {\r\n      this.setState({ errorMessage: err.message });\r\n    }\r\n    this.setState({ timeExtension: false})\r\n  }\r\n\r\n  increaseReward = async () => {\r\n    try {\r\n      const accounts = await web3.eth.getAccounts();\r\n      const question = Question(this.state.questionAddress);\r\n      // Ensure that only Creator of Question can access this function\r\n      if (accounts[0] == await question.methods.getCreator().call()){\r\n        this.setState({ changeReward: true});\r\n        let logTransaction = logging(\"Increase Reward for Question Titled: \" + this.props.summary[0]);\r\n        await factory.methods.increaseReward(this.state.questionAddress, logTransaction).send({\r\n          from: accounts[0]\r\n        });\r\n        Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n      } else {\r\n        this.setState({ ownerError: true});\r\n      }\r\n    } catch (err) {\r\n      this.setState({ errorMessage: err.message });\r\n    }\r\n    this.setState({ changeReward: false})\r\n  }\r\n\r\n  onSubmitAnswer = async () => {\r\n    this.setState({ loading: true, errorMessage: '' });\r\n    try {\r\n        const accounts = await web3.eth.getAccounts();\r\n        const question = Question(this.state.questionAddress);\r\n        // Ensure that creator of question cannot provide answers\r\n        if (accounts[0] != await question.methods.getCreator().call()){\r\n          // Logs the transactions\r\n          let logTransaction = logging(\"Submitted Answer for Question Titled: \" + this.props.summary[0]);\r\n          // Create new answer\r\n          await factory.methods\r\n          .createAnswer(this.state.questionAddress, this.state.answer, this.state.fileHashes_array, this.state.fileNames_array, logTransaction)\r\n          .send({\r\n              from: accounts[0]\r\n          });\r\n          Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n        } else {\r\n          this.setState({ loading: false, errorMessage: \"You cannot provide answer for your own question\"})\r\n        }\r\n    } catch (err) {\r\n        this.setState({ errorMessage: err.message });\r\n    }\r\n    this.setState({ loading: false, answer:'' });\r\n  };\r\n\r\n  upVote = async(index) => {\r\n    const accounts = await web3.eth.getAccounts();\r\n    const question = await Question(this.state.questionAddress);\r\n    const profile = await factory.methods.getProfile(accounts[0]).call();\r\n    // Ensure that voter is not the answerer\r\n    if (accounts[0] != await question.methods.getAnswerer(index).call()){\r\n      // Cannot vote twice\r\n      if (! await question.methods.checkVoter(index, profile).call()) {\r\n        let logTransaction = logging(\"Up Voted An Answer for Question Titled: \" + this.props.summary[0]);\r\n        await factory.methods\r\n        .upVote(this.state.questionAddress, index, logTransaction)\r\n        .send({\r\n            from: accounts[0]\r\n        });\r\n        Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n      } else {\r\n        this.setState({ voteMultipleError: true});\r\n      }\r\n    } else {\r\n      this.setState({ voteError: true});\r\n    }\r\n  };\r\n\r\n  downVote = async(index) => {\r\n    const accounts = await web3.eth.getAccounts();\r\n    const question = await Question(this.state.questionAddress);\r\n    const profile = await factory.methods.getProfile(accounts[0]).call();\r\n    // Ensure that voter is not the answerer\r\n    if (accounts[0] != await question.methods.getAnswerer(index).call()){\r\n      // Cannot vote twice\r\n      if (! await question.methods.checkVoter(index, profile).call()) {\r\n        let logTransaction = logging(\"Down Voted An Answer for Question Titled: \" + this.props.summary[0]);\r\n        await factory.methods\r\n        .downVote(this.state.questionAddress, index, logTransaction)\r\n        .send({\r\n            from: accounts[0]\r\n        });\r\n        Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n      } else {\r\n        this.setState({ voteMultipleError: true});\r\n      }\r\n    } else {\r\n      this.setState({ voteError: true});\r\n    }\r\n  };\r\n\r\n  // Select a file to upload\r\n  onFileSelected = async () => {\r\n      // Access JavaScript FileReader() method for conversion to buffer\r\n      const reader = new FileReader();\r\n      const file = this.fileInput.files[0];\r\n      this.setState({fileLoading: true});\r\n      if (file instanceof Blob ) {\r\n          let {files_array, fileNames_array, fileHashes_array} = this.state;\r\n          files_array.push(file);\r\n          fileNames_array.push(file.name);\r\n          this.setState({\r\n              files_array: files_array,\r\n              fileNames_array: fileNames_array\r\n          });\r\n          console.log(\"fileNames_array: \", fileNames_array);\r\n          reader.onloadend = async () => {\r\n              await this.setState({\r\n                  fileUrl: reader.result,\r\n                  fileLoading: true,\r\n                  buffer: Buffer.from(reader.result) // File is converted to a buffer for upload to IPFS\r\n              });\r\n              const fileHash = this.state.buffer ? (await getIpfsHash(file)) : '0';\r\n              fileHashes_array.push(fileHash);\r\n              this.setState({ fileHashes_array: fileHashes_array });\r\n              console.log(\"fileHashes_array: \", fileHashes_array);\r\n              this.setState({fileLoading: false});\r\n          }\r\n          reader.readAsDataURL(file);\r\n      }\r\n  }\r\n\r\n  // Remove a previously selected file to upload\r\n  onFileRemoved = (file) => {\r\n      var i = 0;\r\n      let {files_array, fileHashes_array, fileNames_array} = this.state;\r\n      console.log('file: ', file);\r\n      for (i = 0 ; i < files_array.length ; i++) {\r\n          if (file === files_array[i]) {\r\n              files_array.splice(i, 1);\r\n              fileNames_array.splice(i, 1);\r\n              fileHashes_array.splice(i, 1);\r\n              break;\r\n          }\r\n      }\r\n      this.setState({\r\n          files_array: files_array,\r\n          fileNames_array: fileNames_array,\r\n          fileHashes_array: fileHashes_array\r\n      });\r\n      console.log('fileNames_array', fileNames_array);\r\n      console.log(\"fileHashes_array: \", fileHashes_array);\r\n  }\r\n\r\n  renderQuestion() {\r\n      const summary = this.props.summary;\r\n      const time = this.props.time;\r\n      var currentTime = (new Date).getTime();\r\n      var maxDuration =(parseFloat(summary[3]) / 60 / 60).toFixed(2).toString().toString();\r\n      var publishTime = moment.unix(time[0]).format('dddd, Do MMMM YYYY, h:mm:ss a');\r\n      var votingTime = moment.unix(this.state.votingTime).format('dddd, Do MMMM YYYY, h:mm:ss a');\r\n      var publishTimeMs = moment.unix(time[0]).valueOf();\r\n      var maxDurationMs = moment.unix(time[2]).valueOf();\r\n      var votingTimeMs = moment.unix(this.state.votingTime).valueOf();\r\n\r\n      let remainingTime = 0;\r\n      if (this.state.questionState == 0) {\r\n        remainingTime = publishTimeMs + maxDurationMs - currentTime;\r\n        if (remainingTime < 0) {\r\n            remainingTime = 0;\r\n        }\r\n      } else {\r\n        remainingTime = votingTimeMs + maxDurationMs - currentTime;\r\n        if (remainingTime < 0) {\r\n            remainingTime = 0;\r\n        }\r\n      }\r\n\r\n      return (\r\n        <React.Fragment>\r\n            <Table definition>\r\n                <Table.Body>\r\n                  <Table.Row>\r\n                      <Table.Cell width={2}>Question Title</Table.Cell>\r\n                      <Table.Cell style={{fontSize: '20px', lineHeight: '1.5'}}>\r\n                          {summary[0]}\r\n                      </Table.Cell>\r\n                  </Table.Row>\r\n                    <Table.Row>\r\n                        <Table.Cell width={2}>Description</Table.Cell>\r\n                        <Table.Cell style={{fontSize: '20px', lineHeight: '1.5'}}>\r\n                            <Context\r\n                                input='tex'\r\n                                onLoad={ () => console.log(\"Loaded MathJax script!\") }\r\n                                onError={ (MathJax, error) => {\r\n                                    console.warn(error);\r\n                                    console.log(\"Encountered a MathJax error, re-attempting a typeset!\");\r\n                                    MathJax.Hub.Queue(\r\n                                      MathJax.Hub.Typeset()\r\n                                    );\r\n                                } }\r\n                                options={{\r\n                                    asciimath2jax: {\r\n                                         useMathMLspacing: true,\r\n                                         delimiters: [[\"$$\",\"$$\"]],\r\n                                         preview: \"none\",\r\n                                    }\r\n                                }}>\r\n                                <Text text={summary[1]}/>\r\n                            </Context>\r\n                        </Table.Cell>\r\n                    </Table.Row>\r\n                    <Table.Row>\r\n                        <Table.Cell>Reward (ETH)</Table.Cell>\r\n                        <Table.Cell style={{fontSize: '20px'}}>{summary[2]}\r\n                        {this.state.questionState == 0\r\n                            ?  <Popup\r\n                                trigger={\r\n                                    <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                            icon='ethereum'\r\n                                            color=\"black\"\r\n                                            onClick={this.increaseReward}\r\n                                              />\r\n                                }\r\n                                content={\"Increase Reward\"}\r\n                                position='bottom right'\r\n                                inverted />\r\n                            :  <Popup\r\n                                trigger={\r\n                                    <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                            icon='ethereum'\r\n                                            color=\"black\"\r\n                                            disabled\r\n                                    />\r\n                                }\r\n                                position='bottom right'\r\n                                inverted />\r\n                        }\r\n                        </Table.Cell>\r\n                    </Table.Row>\r\n                    <Table.Row>\r\n                        <Table.Cell>Publish Time</Table.Cell>\r\n                        <Table.Cell style={{fontSize: '20px'}}>{publishTime}</Table.Cell>\r\n                    </Table.Row>\r\n                    <Table.Row>\r\n                        <Table.Cell>Answering Duration (hours)</Table.Cell>\r\n                        <Table.Cell style={{fontSize: '20px'}}>\r\n                            <span style={{verticalAlign: 'middle', lineHeight: '33px'}}>\r\n                                {maxDuration}\r\n                            </span>\r\n                            {this.state.questionState == 0 && remainingTime > 0\r\n                                ? <Popup\r\n                                    trigger={\r\n                                        <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                icon='clock'\r\n                                                color=\"violet\"\r\n                                        />}\r\n                                    content={\r\n                                        <span>\r\n                                        <span>Remaining time - </span>\r\n                                        <Countdown date={Date.now() + remainingTime}>\r\n                                        </Countdown>\r\n                                    </span>}\r\n                                    position='bottom right'\r\n                                    inverted />\r\n                                : this.state.questionState == 0 && remainingTime == 0\r\n                                ? <Popup trigger={<Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                          icon='clock'\r\n                                                          color=\"red\"/>}\r\n                                        flowing hoverable>\r\n                                    <Grid centered divided columns={2}>\r\n                                      <Grid.Column textAlign='center'>\r\n                                        <p>Extends the validity of question by 1 hour</p>\r\n                                        <Button onClick={this.timeExtension}>Extend Deadline</Button>\r\n                                      </Grid.Column>\r\n                                      <Grid.Column textAlign='center'>\r\n                                        <p>Proceed to the voting phase</p>\r\n                                        <Button onClick={this.votePhase}>Voting Phase</Button>\r\n                                      </Grid.Column>\r\n                                    </Grid>\r\n                                  </Popup>\r\n                                : <Popup\r\n                                    trigger={\r\n                                        <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                icon='clock'\r\n                                                color=\"red\"\r\n                                                disabled\r\n                                        />\r\n                                    }\r\n                                    position='bottom right'\r\n                                    inverted />\r\n                            }\r\n                        </Table.Cell>\r\n                    </Table.Row>\r\n                    <Table.Row>\r\n                        <Table.Cell>Voting Duration (hours)</Table.Cell>\r\n                        <Table.Cell style={{fontSize: '20px'}}>\r\n                            <span style={{verticalAlign: 'middle', lineHeight: '33px'}}>\r\n                                {maxDuration}\r\n                            </span>\r\n                            {this.state.questionState == 1 && remainingTime > 0\r\n                                ? <Popup\r\n                                    trigger={\r\n                                        <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                icon='clock'\r\n                                                color=\"violet\"\r\n                                        />}\r\n                                    content={\r\n                                        <span>\r\n                                        <span>Remaining time - </span>\r\n                                        <Countdown date={Date.now() + remainingTime}>\r\n                                        </Countdown>\r\n                                    </span>}\r\n                                    position='bottom right'\r\n                                    inverted />\r\n                                : this.state.questionState == 1 && remainingTime == 0\r\n                                ? <Popup\r\n                                    trigger={\r\n                                        <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                icon='clock'\r\n                                                color=\"red\"\r\n                                                onClick={this.rewardPhase}\r\n                                                  />\r\n                                    }\r\n                                    content={\"Reward\"}\r\n                                    position='bottom right'\r\n                                    inverted />\r\n                                : this.state.questionState == 0\r\n                                ? <Popup\r\n                                    trigger={\r\n                                        <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                icon='clock'\r\n                                                color=\"red\"\r\n                                                disabled\r\n                                        />\r\n                                    }\r\n                                    position='bottom right'\r\n                                    inverted />\r\n                                : <Popup\r\n                                    trigger={\r\n                                        <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                                                icon='clock'\r\n                                                color=\"red\"\r\n                                                disabled\r\n                                                  />\r\n                                    }\r\n                                    position='bottom right'\r\n                                    inverted />\r\n                          }\r\n                        </Table.Cell>\r\n                    </Table.Row>\r\n                </Table.Body>\r\n            </Table>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n\r\n  renderAnswers() {\r\n    const answers = this.props.answerList;\r\n    // Answering Phase no answers are shown\r\n    if (this.state.questionState != 0){\r\n      return answers.map((answer, index) => {\r\n          var answeredTime = moment.unix(answer[5]).format('Do MMMM YYYY, h:mm a');\r\n          var id = index % 70;\r\n          return <Comment key={index}>\r\n              <Comment.Avatar src={this.props.avatarListIcon[id]} style={{backgroundColor: '#8D8741'}}/>\r\n              <Comment.Content style={{width:\"1000px\"}}>\r\n                <Comment.Author as='a'>{answer[1]}</Comment.Author>\r\n                <Comment.Metadata>\r\n                  <div>{answeredTime}</div>\r\n                </Comment.Metadata>\r\n                <br/>\r\n                {this.state.questionState == 2\r\n                  ? <Comment.Metadata>\r\n                    <div><Icon name='thumbs up' />{answer[3]}</div>\r\n                    <div><Icon name='thumbs down' />{answer[4]}</div>\r\n                  </Comment.Metadata>\r\n                  : <Comment.Metadata>\r\n                    <div><Icon name='thumbs up' />0</div>\r\n                    <div><Icon name='thumbs down' />0</div>\r\n                  </Comment.Metadata>\r\n                }\r\n                <Comment.Text>\r\n                  <Context\r\n                      input='tex'\r\n                      onLoad={ () => console.log(\"Loaded MathJax script!\") }\r\n                      onError={ (MathJax, error) => {\r\n                          console.warn(error);\r\n                          console.log(\"Encountered a MathJax error, re-attempting a typeset!\");\r\n                          MathJax.Hub.Queue(\r\n                            MathJax.Hub.Typeset()\r\n                          );\r\n                      } }\r\n                      options={{\r\n                          asciimath2jax: {\r\n                               useMathMLspacing: true,\r\n                               delimiters: [[\"$$\",\"$$\"]],\r\n                               preview: \"none\",\r\n                          }\r\n                      }}>\r\n                      <Text text={answer[0]}/>\r\n                  </Context>\r\n                  {answer[8].map((imageName, index) =>\r\n                      <div style={{marginBottom: '10px'}} key={index}>\r\n                          <Image src={\"https://ipfs.io/ipfs/\"+answer[9][index]} />\r\n                      </div>\r\n                  )}\r\n                </Comment.Text>\r\n                <Comment.Actions>\r\n                  <Comment.Action>\r\n                    <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                            icon='thumbs down'\r\n                            onClick={() => this.downVote(index)}\r\n                            size='tiny'\r\n                    />\r\n                    <Button style={{float: 'right', verticalAlign: 'middle'}}\r\n                            icon='thumbs up'\r\n                            onClick={() => this.upVote(index)}\r\n                            size='tiny'\r\n                    />\r\n                      </Comment.Action>\r\n                </Comment.Actions>\r\n              </Comment.Content>\r\n            </Comment>\r\n      });\r\n    }\r\n  }\r\n\r\n  renderFiles () {\r\n    let fileHashes = this.props.summary[5];\r\n    let fileNames = this.props.summary[6];\r\n\r\n    if (fileHashes.length == 0) {\r\n        return(\r\n            <Segment placeholder>\r\n                <Header icon>\r\n                    <Icon name='images outline' />\r\n                    No images are uploaded for this question\r\n                </Header>\r\n            </Segment>\r\n        );\r\n    } else {\r\n        return(\r\n            <Segment placeholder>\r\n                <center>\r\n                    <p>Image(s) Uploaded</p>\r\n                    {fileNames.map((fileName, index) =>\r\n                        <div style={{marginBottom: '10px'}} key={index}>\r\n                            <Image src={\"https://ipfs.io/ipfs/\"+fileHashes[index]} />\r\n                            <Divider hidden/>\r\n                            <p> To download: </p>\r\n                            <Label as='a' size='big' href={\"https://ipfs.io/ipfs/\"+fileHashes[index]}>\r\n                                <Icon name='download' />\r\n                                {fileName}\r\n                            </Label>\r\n                        </div>\r\n                    )}\r\n                </center>\r\n            </Segment>\r\n        );\r\n    }\r\n  }\r\n\r\n  renderAnswersForm() {\r\n    let {files_array} = this.state;\r\n    let elmFiles = null;\r\n\r\n    if (files_array !== null) {\r\n        elmFiles = files_array.map((item, index) =>\r\n            <Label as='a' key={index} size='big'>\r\n                {item.name}\r\n                <Icon name='delete'\r\n                      onClick={() => this.onFileRemoved(item)} />\r\n            </Label>\r\n        );\r\n    }\r\n    return(\r\n      <Form error={!!this.state.errorMessage}>\r\n        <Form.TextArea\r\n          placeholder=\"Enter Answers\"\r\n          value={this.state.answer}\r\n          onChange={event => this.setState({ answer: event.target.value })}\r\n        />\r\n        <Message error header=\"Oops!\" content={this.state.errorMessage} />\r\n        <Form.Field>\r\n          {this.renderFilesUpload(elmFiles)}\r\n        </Form.Field>\r\n        <Modal open={this.state.loading} trigger={ this.state.questionState == 1 ? <Button content='Submit Answers' disabled labelPosition='left' icon='edit' primary />\r\n            : <Button content='Submit Answers' onClick={this.onSubmitAnswer} loading={this.state.loading} labelPosition='left' icon='edit' primary />} basic size='small'>\r\n          <Header content='Posting New Answers' />\r\n          <Modal.Content>\r\n            <p>\r\n              Please Confirm the MetaMask Transaction Request to submit your Answers to the Block-Chain Network.\r\n              Upon successful submission, you will be redirected back to the Question Page. This process might take awhile.\r\n            </p>\r\n            <Loader active inline=\"centered\">\r\n              Loading\r\n            </Loader>\r\n          </Modal.Content>\r\n        </Modal>\r\n      </Form>\r\n    );\r\n  }\r\n\r\n  renderFilesUpload(files) {\r\n    let {files_array} = this.state;\r\n    if(this.state.files_array.length == 0){\r\n      return (\r\n        <Segment placeholder>\r\n          <Header icon>\r\n            <Icon name='images outline' />\r\n            No images are uploaded for this answer\r\n          </Header>\r\n          <input\r\n              style={{ display: 'none' }}\r\n              type='file'\r\n              onChange={() => this.onFileSelected()}\r\n              ref={fileInput => this.fileInput = fileInput}/>\r\n          <Button primary onClick={() => this.fileInput.click()} loading={this.state.fileLoading}>Upload Image</Button>\r\n        </Segment>\r\n      )\r\n    } else {\r\n      return (\r\n        <Segment placeholder>\r\n          <center>\r\n              <div style={{marginBottom: '20px'}}>\r\n                  {files}\r\n              </div>\r\n              <input\r\n                  style={{ display: 'none' }}\r\n                  type='file'\r\n                  onChange={() => this.onFileSelected()}\r\n                  ref={fileInput => this.fileInput = fileInput}/>\r\n              <Button primary onClick={() => this.fileInput.click()} loading={this.state.fileLoading}>Upload Files</Button>\r\n          </center>\r\n        </Segment>\r\n      )\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (this.state.login) {\r\n      return (\r\n        <Layout accountType={this.state.accountType}>\r\n          <Container>\r\n            <Divider hidden/>\r\n            {this.renderQuestion()}\r\n            <Divider />\r\n            {this.renderFiles()}\r\n            <Header as='h2' textAlign='center'>\r\n                Submit Your Answers Here\r\n            </Header>\r\n            <p><b>Note:</b> To include math equations, delimit the latex format with $$.</p>\r\n            <a style={{display: \"table-cell\"}} href=\"https://www.codecogs.com/latex/eqneditor.php\" target=\"_blank\">Link to Supported Latex Editor</a>\r\n            {this.renderAnswersForm()}\r\n            <Header as='h2' textAlign='center'>\r\n              Answer(s) Submitted: {this.props.answerList.length}\r\n            </Header>\r\n            <Divider />\r\n            <Comment.Group size='large'>\r\n            {this.renderAnswers()}\r\n            </Comment.Group>\r\n            <Modal open={this.state.voteError} basic size='small'>\r\n              <Header icon='ethereum' content='Cannot Vote Own Answers' />\r\n              <Modal.Content>\r\n                <p>\r\n                  You have selected to vote the answer you have provided. Please only vote answers provided by\r\n                  others.\r\n                </p>\r\n              </Modal.Content>\r\n              <Modal.Actions>\r\n                <Button color='green' inverted attached='bottom' onClick={() => {\r\n                  Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n                  this.setState({ voteError: false})}\r\n                }>\r\n                  Go Back\r\n                </Button>\r\n              </Modal.Actions>\r\n            </Modal>\r\n            <Modal open={this.state.ownerError} basic size='small'>\r\n              <Header icon='ethereum' content='Only Available For Owner Of Question' />\r\n              <Modal.Content>\r\n                <p>\r\n                  You cannot change the state of the question as you are not the owner.\r\n                </p>\r\n              </Modal.Content>\r\n              <Modal.Actions>\r\n                <Button color='green' inverted attached='bottom' onClick={() => {\r\n                  Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n                  this.setState({ ownerError: false})}\r\n                }>\r\n                  Go Back\r\n                </Button>\r\n              </Modal.Actions>\r\n            </Modal>\r\n            <Modal open={this.state.voteMultipleError} basic size='small'>\r\n              <Header icon='ethereum' content='Answer Already Voted' />\r\n              <Modal.Content>\r\n                <p>\r\n                  You cannot vote for the same answer more than once. Please vote for another answer.\r\n                </p>\r\n              </Modal.Content>\r\n              <Modal.Actions>\r\n                <Button color='green' inverted attached='bottom' onClick={() => {\r\n                  Router.pushRoute(`/questions/${this.state.questionAddress}`)\r\n                  this.setState({ voteMultipleError: false})}\r\n                }>\r\n                  Go Back\r\n                </Button>\r\n              </Modal.Actions>\r\n            </Modal>\r\n            <Modal open={this.state.stateChange} basic size='small'>\r\n              <Header content='Proceeding To Voting/Rewarding Phase' />\r\n              <Modal.Content>\r\n                <p>\r\n                  Please Confirm the MetaMask Transaction Request to proceed towards Voting/Rewarding Phase.\r\n                </p>\r\n                <Loader active inline=\"centered\">\r\n                  State Changing\r\n                </Loader>\r\n              </Modal.Content>\r\n            </Modal>\r\n            <Modal open={this.state.timeExtension} basic size='small'>\r\n              <Header content='Extending Question Deadline' />\r\n              <Modal.Content>\r\n                <p>\r\n                  Please Confirm the MetaMask Transaction Request to extend the duration of the question.\r\n                </p>\r\n                <Loader active inline=\"centered\">\r\n                  Refreshing Question\r\n                </Loader>\r\n              </Modal.Content>\r\n            </Modal>\r\n            <Modal open={this.state.changeReward} basic size='small'>\r\n              <Header content='Increasing Reward' />\r\n              <Modal.Content>\r\n                <p>\r\n                  Please Confirm the MetaMask Transaction Request to increase reward.\r\n                </p>\r\n                <Loader active inline=\"centered\">\r\n                  Increasing Reward\r\n                </Loader>\r\n              </Modal.Content>\r\n            </Modal>\r\n          </Container>\r\n        </Layout>\r\n      );\r\n    } else {\r\n      return (\r\n        <Layout accountType={this.state.accountType}>\r\n          <Container style={{width: \"100%\", height:\"100vh\"}}>\r\n            <Modal open={this.state.resourceLoading} basic size='small'>\r\n              <Header icon='ethereum' content='Loading Resources' />\r\n              <Modal.Content>\r\n                <Loader active inline=\"centered\">\r\n                  Loading Selected Question Information\r\n                </Loader>\r\n              </Modal.Content>\r\n            </Modal>\r\n            <Modal open={!this.state.login && !this.state.resourceLoading} basic size='small'>\r\n              <Header icon='ethereum' content='Not Registered' />\r\n              <Modal.Content>\r\n                <p>\r\n                  You are currently not registered to access the platform. Please have your account registered.\r\n                </p>\r\n              </Modal.Content>\r\n              <Modal.Actions>\r\n                <Button color='green' inverted attached='bottom' onClick={() => {\r\n                  Router.pushRoute('/')}\r\n                }>\r\n                  Register For Account\r\n                </Button>\r\n              </Modal.Actions>\r\n            </Modal>\r\n          </Container>\r\n        </Layout>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default QuestionRow;\r\n"]},"metadata":{},"sourceType":"module"}