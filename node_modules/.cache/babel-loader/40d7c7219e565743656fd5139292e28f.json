{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React, { Component } from 'react';\nimport { Segment, Container, Divider, Header, Modal, Button, Loader } from 'semantic-ui-react';\nimport Layout from '../components/Layout';\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\nimport Profile from '../ethereum/profile';\nimport { Router } from '../routes';\nimport credentials from '../ethereum/credentials';\n\nvar AboutPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AboutPage, _Component);\n\n  function AboutPage(props) {\n    var _this;\n\n    _classCallCheck(this, AboutPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AboutPage).call(this, props));\n    _this.state = {\n      login: false,\n      loading: true,\n      accountType: null\n    };\n    return _this;\n  }\n\n  _createClass(AboutPage, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var accounts, login, profileAddress, profile, accountType;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context.sent;\n                login = false;\n                _context.next = 6;\n                return credentials.methods.getBinding(accounts[0]).call();\n\n              case 6:\n                _context.t0 = _context.sent;\n\n                if (!(_context.t0 === \"\")) {\n                  _context.next = 10;\n                  break;\n                }\n\n                _context.next = 21;\n                break;\n\n              case 10:\n                login = true; // Get Account Type\n\n                _context.next = 13;\n                return factory.methods.getProfile(accounts[0]).call();\n\n              case 13:\n                profileAddress = _context.sent;\n                profile = Profile(profileAddress);\n                _context.next = 17;\n                return profile.methods.getAccountType().call();\n\n              case 17:\n                accountType = _context.sent;\n                accountType == 0 ? accountType = \"Admin\" : accountType = \"User\";\n                this.setState({\n                  login: login\n                });\n                this.setState({\n                  accountType: accountType\n                });\n\n              case 21:\n                this.setState({\n                  loading: false\n                });\n\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.login) {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(Container, null, React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Segment, {\n          raised: true,\n          textAlign: \"left\"\n        }, React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"SCSE19-0299: Block-Chain Based Question Answering System\")), React.createElement(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, \"Project Details\"), React.createElement(Divider, null), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, \"This is an experimental system for School Of Computer Science & Engineereing (SCSE) Final Year Project titled SCSE19-0299.\"), React.createElement(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, \"System Rules & Guidelines\"), React.createElement(Divider, null), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, \"All users are to \", React.createElement(\"b\", null, \"only post questions from past year examinations\"), \". No posting of \", React.createElement(\"b\", null, \"Assignments \"), \"or \", React.createElement(\"b\", null, \"Tutorial Questions\"), \" is allowed. Fraudulent accounts will be \", React.createElement(\"b\", null, \"removed from the system and banned from future use\"), \".\"), React.createElement(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, \"Earning EthQuestionToken (EQT)\"), React.createElement(Divider, null), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, \"EthQuestionToken (EQT) is a cryptocurrency that is used within the Question Answering System. Each user is given \", React.createElement(\"b\", null, \"10 EQTs\"), \" upon signing up. User can be rewarded additional EQTs by providing answers with the highest approvals for each question. User can also be rewarded \", React.createElement(\"b\", null, \"2 EQTs\"), \"for approving the answer that is awarded the reward for the question.\"), React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Segment, {\n          raised: true,\n          textAlign: \"left\"\n        }, React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"Leaderboard\")), React.createElement(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, \"Accumulating Points\"), React.createElement(Divider, null), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, \"Points can be earned through the following ways:\"), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, React.createElement(\"b\", null, \"Creating Question:\"), \" 5 Points\"), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, React.createElement(\"b\", null, \"Answer Selected:\"), \" 4 Points\"), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, React.createElement(\"b\", null, \"Submit Answer:\"), \" 2 Points\"), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, React.createElement(\"b\", null, \"Vote for Answer Voted as Best Answer:\"), \" 2 Points\"), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, React.createElement(\"b\", null, \"Participate in Voting:\"), \" 1 Point\"), React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Segment, null, React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"System Functionality\")), React.createElement(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, \"Post New Question\"), React.createElement(Divider, null), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, \"Access using \\\"\", React.createElement(\"b\", null, \"Create New Question\"), \"\\\" tab above. Each creation of new question requires at least\", React.createElement(\"b\", null, \" 1 EQT\"), \" as the reward. In the event that there are no answers provided within the duration specified, the reward will be returned to the owner of the question.\"), React.createElement(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, \"Provide Answer To Question\"), React.createElement(Divider, null), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, \"All questions posted can be view from the Home Page access via \", React.createElement(\"b\", null, \"\\\"Home\\\"\"), \" tab above. Clicking on the question title will provide additional details on the question as well as providing the form to submit an answer for the question. No EQT are required for answering of question.\"), React.createElement(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, \"Voting Of Answers\"), React.createElement(Divider, null), React.createElement(\"p\", {\n          style: {\n            fontSize: '16px'\n          }\n        }, \"When the question is in the \", React.createElement(\"b\", null, \"\\\"Voting Phase\\\"\"), \", all users can view all answers that are submitted and up vote or down vote each answer depending on it's relevance and helpfulness. Each up vote or down vote requires \", React.createElement(\"b\", null, \"1 EQT\"), \". Each user can only\", React.createElement(\"b\", null, \" up vote or down each answer once\"), \".\")));\n      } else {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(Container, {\n          style: {\n            width: \"100%\",\n            height: \"100vh\"\n          }\n        }, React.createElement(Modal, {\n          open: this.state.loading,\n          basic: true,\n          size: \"small\"\n        }, React.createElement(Header, {\n          icon: \"ethereum\",\n          content: \"Loading Resources\"\n        }), React.createElement(Modal.Content, null, React.createElement(Loader, {\n          active: true,\n          inline: \"centered\"\n        }, \"Loading About Page\"))), React.createElement(Modal, {\n          open: !this.state.login && !this.state.loading,\n          basic: true,\n          size: \"small\"\n        }, React.createElement(Header, {\n          icon: \"ethereum\",\n          content: \"Not Registered\"\n        }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"You are currently not registered to access the platform. Please have your account registered.\")), React.createElement(Modal.Actions, null, React.createElement(Button, {\n          color: \"green\",\n          inverted: true,\n          attached: \"bottom\",\n          onClick: function onClick() {\n            Router.pushRoute('/');\n          }\n        }, \"Register For Account\")))));\n      }\n    }\n  }]);\n\n  return AboutPage;\n}(Component);\n\nexport default AboutPage;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\about.js"],"names":["React","Component","Segment","Container","Divider","Header","Modal","Button","Loader","Layout","web3","factory","Profile","Router","credentials","AboutPage","props","state","login","loading","accountType","eth","getAccounts","accounts","methods","getBinding","call","getProfile","profileAddress","profile","getAccountType","setState","fontSize","width","height","pushRoute"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Segment, Container, Divider, Header, Modal, Button, Loader } from 'semantic-ui-react';\r\nimport Layout from '../components/Layout';\r\nimport web3 from '../ethereum/web3';\r\nimport factory from '../ethereum/factory';\r\nimport Profile from '../ethereum/profile';\r\nimport {Router} from '../routes';\r\nimport credentials from '../ethereum/credentials';\r\n\r\nclass AboutPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      login: false,\r\n      loading: true,\r\n      accountType: null\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    // Retrieve the Ethereum Account from MetaMask\r\n    const accounts = await web3.eth.getAccounts();\r\n    let login = false;\r\n    if (await credentials.methods.getBinding(accounts[0]).call() === \"\") {\r\n    } else {\r\n        login = true;\r\n        // Get Account Type\r\n        let profileAddress = await factory.methods.getProfile(accounts[0]).call();\r\n        let profile = Profile(profileAddress);\r\n        let accountType = await profile.methods.getAccountType().call();\r\n        accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"\r\n        this.setState( { login: login });\r\n        this.setState( { accountType: accountType });\r\n      }\r\n    this.setState( { loading: false });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.login) {\r\n      return (\r\n        <Layout accountType={this.state.accountType}>\r\n          <Container>\r\n            <Divider hidden/>\r\n            <Segment raised textAlign='left'>\r\n              <Header as='h2' textAlign='center'>\r\n                SCSE19-0299: Block-Chain Based Question Answering System\r\n              </Header>\r\n            </Segment>\r\n            <Header as='h3' textAlign='left'>\r\n              Project Details\r\n            </Header>\r\n            <Divider />\r\n            <p style={{fontSize:'16px'}}>\r\n              This is an experimental system for School Of Computer Science & Engineereing (SCSE) Final Year Project\r\n              titled SCSE19-0299.\r\n            </p>\r\n            <Header as='h3' textAlign='left'>\r\n              System Rules & Guidelines\r\n            </Header>\r\n            <Divider />\r\n            <p style={{fontSize:'16px'}}>\r\n              All users are to <b>only post questions from past year examinations</b>. No posting of <b>Assignments </b>\r\n              or <b>Tutorial Questions</b> is allowed. Fraudulent accounts will be <b>removed from the system and banned from\r\n              future use</b>.\r\n            </p>\r\n            <Header as='h3' textAlign='left'>\r\n              Earning EthQuestionToken (EQT)\r\n            </Header>\r\n            <Divider />\r\n            <p style={{fontSize:'16px'}}>\r\n              EthQuestionToken (EQT) is a cryptocurrency that is used within the Question Answering System. Each user is given <b>10 EQTs</b> upon signing up.\r\n              User can be rewarded additional EQTs by providing answers with the highest approvals for each question. User can also be rewarded <b>2 EQTs</b>\r\n              for approving the answer that is awarded the reward for the question.\r\n            </p>\r\n            <Divider hidden/>\r\n\r\n            <Divider hidden/>\r\n            <Segment raised textAlign='left'>\r\n              <Header as='h2' textAlign='center'>\r\n                Leaderboard\r\n              </Header>\r\n            </Segment>\r\n            <Header as='h3' textAlign='left'>\r\n              Accumulating Points\r\n            </Header>\r\n            <Divider />\r\n            <p style={{fontSize:'16px'}}>\r\n              Points can be earned through the following ways:\r\n            </p>\r\n            <p style={{fontSize:'16px'}}><b>Creating Question:</b> 5 Points</p>\r\n            <p style={{fontSize:'16px'}}><b>Answer Selected:</b> 4 Points</p>\r\n            <p style={{fontSize:'16px'}}><b>Submit Answer:</b> 2 Points</p>\r\n            <p style={{fontSize:'16px'}}><b>Vote for Answer Voted as Best Answer:</b> 2 Points</p>\r\n            <p style={{fontSize:'16px'}}><b>Participate in Voting:</b> 1 Point</p>\r\n            <Divider hidden/>\r\n\r\n            <Segment>\r\n              <Header as='h2' textAlign='center'>\r\n                System Functionality\r\n              </Header>\r\n            </Segment>\r\n            <Header as='h3' textAlign='left'>\r\n              Post New Question\r\n            </Header>\r\n            <Divider />\r\n            <p style={{fontSize:'16px'}}>\r\n              Access using \"<b>Create New Question</b>\" tab above. Each creation of new question requires at least\r\n              <b> 1 EQT</b> as the reward. In the event that there are no answers provided within the duration specified,\r\n              the reward will be returned to the owner of the question.\r\n            </p>\r\n            <Header as='h3' textAlign='left'>\r\n              Provide Answer To Question\r\n            </Header>\r\n            <Divider />\r\n            <p style={{fontSize:'16px'}}>\r\n              All questions posted can be view from the Home Page access via <b>\"Home\"</b> tab above. Clicking on the question title\r\n              will provide additional details on the question as well as providing the form to submit an answer for the question. No\r\n              EQT are required for answering of question.\r\n            </p>\r\n            <Header as='h3' textAlign='left'>\r\n              Voting Of Answers\r\n            </Header>\r\n            <Divider />\r\n            <p style={{fontSize:'16px'}}>\r\n              When the question is in the <b>\"Voting Phase\"</b>, all users can view all answers that are submitted and up vote or down vote\r\n              each answer depending on it's relevance and helpfulness. Each up vote or down vote requires <b>1 EQT</b>. Each user can only\r\n              <b> up vote or down each answer once</b>.\r\n            </p>\r\n          </Container>\r\n        </Layout>\r\n      )\r\n    } else {\r\n      return (\r\n        <Layout accountType={this.state.accountType}>\r\n          <Container style={{width: \"100%\", height:\"100vh\"}}>\r\n            <Modal open={this.state.loading} basic size='small'>\r\n              <Header icon='ethereum' content='Loading Resources' />\r\n              <Modal.Content>\r\n                <Loader active inline=\"centered\">\r\n                  Loading About Page\r\n                </Loader>\r\n              </Modal.Content>\r\n            </Modal>\r\n            <Modal open={!this.state.login && !this.state.loading} basic size='small'>\r\n              <Header icon='ethereum' content='Not Registered' />\r\n              <Modal.Content>\r\n                <p>\r\n                  You are currently not registered to access the platform. Please have your account registered.\r\n                </p>\r\n              </Modal.Content>\r\n              <Modal.Actions>\r\n                <Button color='green' inverted attached='bottom' onClick={() => {\r\n                  Router.pushRoute('/')}\r\n                }>\r\n                  Register For Account\r\n                </Button>\r\n              </Modal.Actions>\r\n            </Modal>\r\n          </Container>\r\n        </Layout>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default AboutPage;\r\n"]},"metadata":{},"sourceType":"module"}