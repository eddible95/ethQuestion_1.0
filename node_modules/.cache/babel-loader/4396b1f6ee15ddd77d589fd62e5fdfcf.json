{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport MobileDetect from 'mobile-detect';\nimport _ from 'lodash';\nimport { Button, Header, Table, Statistic, Rating, Grid, Loader, List, Popup, Divider, Container, Icon, Label, Progress, Segment, Modal, Responsive, Checkbox, Dropdown } from 'semantic-ui-react';\nimport AccountIssueModal from '../components/AccountIssueModal';\nimport { getWidthFactory } from '../utils/device';\nimport factory from '../ethereum/factory';\nimport credentials from '../ethereum/credentials';\nimport Question from '../ethereum/question';\nimport Profile from '../ethereum/profile';\nimport Layout from '../components/Layout';\nimport { Link, Router } from '../routes';\nimport web3 from '../ethereum/web3';\nimport { search, sortingQuestions } from '../utils/functions';\nimport cookies from 'next-cookies';\n\nvar HomePage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(HomePage, _Component);\n\n  function HomePage(props) {\n    var _this;\n\n    _classCallCheck(this, HomePage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HomePage).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSort\", function (clickedColumn) {\n      return function () {\n        var _this$state = _this.state,\n            column = _this$state.column,\n            leaderboardData = _this$state.leaderboardData,\n            direction = _this$state.direction;\n\n        if (column !== clickedColumn) {\n          _this.setState({\n            column: clickedColumn,\n            leaderboardData: _.sortBy(leaderboardData, [clickedColumn]),\n            direction: 'ascending'\n          });\n\n          return;\n        }\n\n        _this.setState({\n          leaderboardData: leaderboardData.reverse(),\n          direction: direction === 'ascending' ? 'descending' : 'ascending'\n        });\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (e, _ref) {\n      var value = _ref.value;\n      return _this.setState({\n        sortBy: value\n      });\n    });\n\n    _this.state = {\n      login: false,\n      accountType: null,\n      column: null,\n      direction: null,\n      leaderboardData: [],\n      tags: [],\n      topTags: [],\n      loading: true,\n      sortBy: null,\n      data: [],\n      summaries: [],\n      questionLimit: 30,\n      questionLimitChoice: [],\n      isSSR: false,\n      isMining: false\n    };\n    return _this;\n  }\n\n  _createClass(HomePage, [{\n    key: \"componentDidUpdate\",\n    value: function () {\n      var _componentDidUpdate = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(prevProps) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.props != prevProps) {\n                  this.fetchQuestionData();\n                }\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidUpdate(_x) {\n        return _componentDidUpdate.apply(this, arguments);\n      }\n\n      return componentDidUpdate;\n    }()\n  }, {\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var login, profileAddress, profile, accountType, ethWallet, accountPointMapping, i, points;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(typeof web3 === 'undefined')) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                this.setState({\n                  loading: false\n                });\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                login = false;\n\n                if (!this.props.isLogin) {\n                  _context2.next = 36;\n                  break;\n                }\n\n                login = true; // Get Account Type\n\n                _context2.next = 8;\n                return factory.methods.getProfile(this.props.account).call();\n\n              case 8:\n                profileAddress = _context2.sent;\n                profile = Profile(profileAddress);\n                _context2.next = 12;\n                return profile.methods.getAccountType().call();\n\n              case 12:\n                accountType = _context2.sent;\n                accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"; // Retireve an array of addresses of ethWallets registered\n\n                _context2.next = 16;\n                return factory.methods.getEthWallets().call();\n\n              case 16:\n                ethWallet = _context2.sent;\n                accountPointMapping = [];\n                i = 0;\n\n              case 19:\n                if (!(i < ethWallet.length)) {\n                  _context2.next = 31;\n                  break;\n                }\n\n                _context2.next = 22;\n                return factory.methods.getProfile(ethWallet[i]).call();\n\n              case 22:\n                profileAddress = _context2.sent;\n                profile = Profile(profileAddress);\n                _context2.next = 26;\n                return profile.methods.getPoints().call();\n\n              case 26:\n                points = _context2.sent;\n                accountPointMapping.push({\n                  account: ethWallet[i],\n                  points: _parseInt(points)\n                });\n\n              case 28:\n                i++;\n                _context2.next = 19;\n                break;\n\n              case 31:\n                _context2.next = 33;\n                return this.fetchQuestionData();\n\n              case 33:\n                // Set the states required for the Leaderboard and ensure it is descending by default\n                this.setState({\n                  leaderboardData: _.sortBy(accountPointMapping, ['points']).reverse()\n                });\n                this.setState({\n                  login: login\n                });\n                this.setState({\n                  accountType: accountType\n                });\n\n              case 36:\n                this.setState({\n                  loading: false\n                });\n\n              case 37:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"fetchQuestionData\",\n    value: function () {\n      var _fetchQuestionData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var deployedQuestions, deployedQuestionsCount, summaries, searchItem, i, question, summary, answerList, questionLimitChoice, choice, _i, tags, sortedTags, tagList, isMining, blockNumber;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return factory.methods.getDeployedQuestions().call();\n\n              case 2:\n                deployedQuestions = _context3.sent;\n                deployedQuestionsCount = deployedQuestions.length;\n                this.setState({\n                  deployedQuestionsCount: deployedQuestionsCount\n                }); // Retrieve the summaries of all deployed questions\n\n                summaries = [];\n\n                if (!(this.props.queryValue != undefined && this.props.queryValue != 'favicon.ico')) {\n                  _context3.next = 12;\n                  break;\n                }\n\n                searchItem = decodeURIComponent(this.props.queryValue);\n                _context3.next = 10;\n                return search(searchItem, deployedQuestions);\n\n              case 10:\n                deployedQuestions = _context3.sent;\n                deployedQuestionsCount = deployedQuestions.length;\n\n              case 12:\n                i = 0;\n\n              case 13:\n                if (!(i < deployedQuestionsCount)) {\n                  _context3.next = 28;\n                  break;\n                }\n\n                question = Question(deployedQuestions[i]);\n                _context3.next = 17;\n                return question.methods.getSummary().call();\n\n              case 17:\n                summary = _context3.sent;\n\n                if (summary[9]) {\n                  _context3.next = 25;\n                  break;\n                }\n\n                summaries[i] = summary;\n                _context3.next = 22;\n                return question.methods.getAnswerList().call();\n\n              case 22:\n                answerList = _context3.sent;\n                summaries[i][10] = answerList.length;\n                summaries[i][11] = deployedQuestions[i];\n\n              case 25:\n                i++;\n                _context3.next = 13;\n                break;\n\n              case 28:\n                summaries = summaries.reverse(); // Displays questions in interval of 30\n\n                questionLimitChoice = [30];\n                choice = Math.floor(summaries.length / 30);\n\n                for (_i = 1; _i <= choice; _i++) {\n                  questionLimitChoice.push(30 * (_i + 1));\n                } // Get the top 10 used tags\n\n\n                tags = {};\n                summaries = summaries.slice(0, this.state.questionLimit);\n                summaries.forEach(function (summary) {\n                  summary[8].forEach(function (tag) {\n                    if (tags[tag] == undefined) {\n                      tags[tag] = 1;\n                    } else {\n                      tags[tag] = tags[tag] + 1;\n                    }\n                  });\n                });\n                sortedTags = _Object$keys(tags).map(function (key) {\n                  return [key, tags[key]];\n                }); // Sort the array based on the second element\n\n                sortedTags.sort(function (first, second) {\n                  return second[1] - first[1];\n                }); // Array of all tags\n\n                tagList = [];\n                sortedTags.forEach(function (tag) {\n                  tagList.push(tag[0]);\n                }); // Array with only the first 10 items\n\n                tags = [];\n                sortedTags.slice(0, 10).forEach(function (tag) {\n                  tags.push(tag[0]);\n                });\n                _context3.next = 43;\n                return web3.eth.isMining();\n\n              case 43:\n                isMining = _context3.sent;\n                _context3.next = 46;\n                return web3.eth.getBlockNumber();\n\n              case 46:\n                blockNumber = _context3.sent;\n                this.setState({\n                  isMining: isMining,\n                  blockNumber: blockNumber\n                });\n                this.setState({\n                  topTags: tags\n                });\n                this.setState({\n                  tags: tagList\n                });\n                this.setState({\n                  summaries: summaries\n                });\n                this.setState({\n                  questionLimitChoice: questionLimitChoice\n                });\n\n              case 52:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function fetchQuestionData() {\n        return _fetchQuestionData.apply(this, arguments);\n      }\n\n      return fetchQuestionData;\n    }() // Function to handle the sorting of leaderboard\n\n  }, {\n    key: \"renderQuestionHeader\",\n    value: function renderQuestionHeader() {\n      return React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        width: 2\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Current Phase\")), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        width: 2\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Answers Submitted\")), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        width: 2\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Reward\")), React.createElement(Table.HeaderCell, {\n        textAlign: \"center\"\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: 15,\n          color: '#6A737C'\n        }\n      }, \"Question Title\")));\n    } // Renders out the list of question\n\n  }, {\n    key: \"renderQuestionList\",\n    value: function renderQuestionList() {\n      var _this2 = this;\n\n      var summaries = this.state.summaries;\n      summaries = sortingQuestions(summaries, this.state.sortBy);\n      return summaries.map(function (summary, index) {\n        var questionState = summary[4];\n        var tagList = summary[8];\n        return React.createElement(Table.Row, {\n          key: index\n        }, React.createElement(Table.Cell, {\n          textAlign: \"center\",\n          width: 2\n        }, questionState == 0 ? React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: 'red'\n          }\n        }, \" Answering\")), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"Phase\"))) : questionState == 1 ? React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#C9C633'\n          }\n        }, \" Voting\")), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"Phase\"))) : React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#10EE44'\n          }\n        }, \" Rewarded\")), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"Phase\")))), React.createElement(Table.Cell, {\n          textAlign: \"center\",\n          width: 2\n        }, React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, summary[10])), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"answer(s)\")))), React.createElement(Table.Cell, {\n          textAlign: \"center\",\n          width: 2\n        }, React.createElement(Statistic, {\n          size: \"mini\",\n          color: \"red\"\n        }, React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, summary[2] * 1e-4)), React.createElement(Statistic.Label, null, React.createElement(\"span\", {\n          style: {\n            fontSize: 15,\n            color: '#6A737C'\n          }\n        }, \"EQT(s)\")))), React.createElement(Table.Cell, {\n          textAlign: \"left\"\n        }, React.createElement(Grid.Row, {\n          textAlign: \"left\"\n        }, React.createElement(\"span\", {\n          style: {\n            fontSize: 18,\n            color: '#6A737C',\n            cursor: 'pointer'\n          },\n          onClick: function onClick() {\n            return Router.pushRoute(\"/questions/\".concat(summary[11]));\n          }\n        }, React.createElement(\"a\", null, summary[0]))), _this2.renderTag(tagList, \"mini\")));\n      });\n    }\n  }, {\n    key: \"renderMobileQuestionList\",\n    value: function renderMobileQuestionList() {\n      var _this3 = this;\n\n      return this.state.summaries.map(function (summary, index) {\n        var tags = summary[8];\n        var questionState = summary[4];\n        var tagList = summary[8];\n        return React.createElement(List.Item, {\n          key: index\n        }, React.createElement(List.Icon, {\n          name: \"question circle\",\n          size: \"large\",\n          verticalAlign: \"middle\"\n        }), React.createElement(List.Content, null, React.createElement(List.Header, {\n          as: \"a\",\n          onClick: function onClick() {\n            return Router.pushRoute(\"/questions/\".concat(summary[11]));\n          }\n        }, summary[0]), React.createElement(Grid, null, React.createElement(Grid.Column, {\n          width: 10\n        }, React.createElement(List.Description, null, \"Number of Answer(s): \" + summary[10]), React.createElement(List.Description, null, \"Reward: \" + summary[2] * 1e-4 + \" EQT(s)\"), _this3.renderTag(tags, \"mini\")), React.createElement(Grid.Column, {\n          width: 4\n        }, questionState == 0 ? React.createElement(List.Description, null, React.createElement(\"b\", null, React.createElement(\"font\", {\n          color: \"red\"\n        }, \"ANSWERING PHASE\"))) : questionState == 1 ? React.createElement(List.Description, null, React.createElement(\"b\", null, React.createElement(\"font\", {\n          color: \"#C9C633\"\n        }, \"VOTING PHASE\"))) : React.createElement(List.Description, null, React.createElement(\"b\", null, React.createElement(\"font\", {\n          color: \"#10EE44\"\n        }, \"REWARDED PHASE\")))))), React.createElement(Divider, {\n          hidden: true\n        }));\n      });\n    } // Render each tag individually for each question\n\n  }, {\n    key: \"renderTag\",\n    value: function renderTag(tagList, tagSize) {\n      var tagColours = [\"red\", \"olive\", \"blue\", \"teal\", \"green\"];\n      return tagList.map(function (tag, index) {\n        return React.createElement(Label, {\n          as: \"a\",\n          onClick: function onClick() {\n            return Router.pushRoute(\"/\".concat('search/' + encodeURIComponent(tag)));\n          },\n          tag: true,\n          size: tagSize,\n          key: index,\n          color: tagColours[index % 5]\n        }, tag);\n      });\n    }\n  }, {\n    key: \"renderLeaderBoard\",\n    value: function renderLeaderBoard() {\n      var _this$state2 = this.state,\n          column = _this$state2.column,\n          data = _this$state2.data,\n          direction = _this$state2.direction;\n      return React.createElement(Segment, null, React.createElement(Header, {\n        as: \"h3\",\n        textAlign: \"center\"\n      }, React.createElement(Icon, {\n        name: \"chess king\"\n      }), \"Leaderboard\"), React.createElement(Table, {\n        basic: \"very\",\n        celled: true,\n        collapsing: true,\n        sortable: true\n      }, React.createElement(Table.Header, null, React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, null, \"Account\"), React.createElement(Table.HeaderCell, {\n        sorted: column === 'points' ? direction : null,\n        onClick: this.handleSort('points')\n      }, \"Point(s)\"))), React.createElement(Table.Body, null, this.renderUserList())));\n    }\n  }, {\n    key: \"renderUserList\",\n    value: function renderUserList() {\n      return this.state.leaderboardData.map(function (item, index) {\n        return React.createElement(Table.Row, {\n          key: index\n        }, React.createElement(Table.Cell, {\n          textAlign: \"center\"\n        }, React.createElement(\"p\", {\n          style: {\n            fontSize: \"12px\"\n          }\n        }, item.account)), React.createElement(Table.Cell, {\n          textAlign: \"center\"\n        }, React.createElement(\"p\", {\n          style: {\n            fontSize: \"12px\"\n          }\n        }, item.points)));\n      });\n    }\n  }, {\n    key: \"renderTopTags\",\n    value: function renderTopTags() {\n      return React.createElement(Segment, null, React.createElement(Header, {\n        as: \"h3\",\n        textAlign: \"center\"\n      }, React.createElement(Icon, {\n        name: \"tags\"\n      }), \"Top 10 Tags\"), this.renderTag(this.state.topTags, \"medium\"));\n    }\n  }, {\n    key: \"renderQuestionStatistics\",\n    value: function renderQuestionStatistics() {\n      return React.createElement(Segment, null, React.createElement(Statistic.Group, {\n        horizontal: true,\n        color: \"red\"\n      }, React.createElement(Statistic, null, React.createElement(Statistic.Value, null, this.state.deployedQuestionsCount), React.createElement(Statistic.Label, null, \"Questions Asked\"))), React.createElement(Statistic.Group, {\n        horizontal: true,\n        color: \"yellow\"\n      }, React.createElement(Statistic, null, React.createElement(Statistic.Value, null, this.state.leaderboardData.length), React.createElement(Statistic.Label, null, \"Active Users\"))));\n    }\n  }, {\n    key: \"renderBlockChainStatistics\",\n    value: function renderBlockChainStatistics() {\n      return React.createElement(Segment, null, React.createElement(Header, {\n        as: \"h3\",\n        textAlign: \"center\"\n      }, React.createElement(Icon, {\n        name: \"ethereum\"\n      }), \"Block-Chain Status\"), this.state.isMining ? React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n        style: {\n          fontSize: 18,\n          color: 'green'\n        }\n      }, \"Currently Mining\")) : React.createElement(Statistic.Value, null, React.createElement(\"span\", {\n        style: {\n          fontSize: 18,\n          color: 'red'\n        }\n      }, \"Currently Not Mining\")), React.createElement(Statistic.Group, {\n        horizontal: true,\n        color: \"green\"\n      }, React.createElement(Statistic, null, React.createElement(Statistic.Value, null, this.state.blockNumber), React.createElement(Statistic.Label, null, \"Blocks Mined\"))), \"*When blockchain is not mining, do not create any transaction\");\n    }\n  }, {\n    key: \"renderSortSettings\",\n    value: function renderSortSettings() {\n      return React.createElement(\"span\", null, React.createElement(Icon, {\n        name: \"sort\"\n      }), \"Sort Questions By: \", ' ', React.createElement(Dropdown, {\n        inline: true,\n        options: [{\n          key: 'Ascending Phase',\n          text: 'Ascending Phase',\n          value: 0\n        }, {\n          key: 'Descending Phase',\n          text: 'Descending Phase',\n          value: 1\n        }, {\n          key: 'Ascending Answers',\n          text: 'Ascending Answers',\n          value: 2\n        }, {\n          key: 'Descending Answers',\n          text: 'Descending Answers',\n          value: 3\n        }, {\n          key: 'Ascending Rewards',\n          text: 'Ascending Rewards',\n          value: 4\n        }, {\n          key: 'Descending Rewards',\n          text: 'Descending Rewards',\n          value: 5\n        }],\n        onChange: this.handleChange\n      }));\n    }\n  }, {\n    key: \"renderFilterSettings\",\n    value: function renderFilterSettings() {\n      var tagColours = [\"red\", \"olive\", \"blue\", \"teal\", \"green\"];\n      return React.createElement(\"span\", null, React.createElement(Icon, {\n        name: \"filter\"\n      }), React.createElement(Dropdown, {\n        text: \"Filter Questions\",\n        multiple: true\n      }, React.createElement(Dropdown.Menu, null, React.createElement(Dropdown.Header, {\n        icon: \"tags\",\n        content: \"Tag Label\"\n      }), React.createElement(Dropdown.Menu, {\n        scrolling: true\n      }, this.state.tags.map(function (tag, index) {\n        return React.createElement(Dropdown.Item, {\n          key: index,\n          text: tag,\n          label: {\n            color: tagColours[index % 6],\n            empty: true,\n            circular: true\n          },\n          onClick: function onClick() {\n            return Router.pushRoute(\"/\".concat('search/' + encodeURIComponent(tag)));\n          }\n        });\n      })))));\n    }\n  }, {\n    key: \"renderQuestionLimitSettings\",\n    value: function renderQuestionLimitSettings() {\n      var _this4 = this;\n\n      return React.createElement(Dropdown, {\n        text: \"Questions To Show\",\n        multiple: true\n      }, React.createElement(Dropdown.Menu, null, React.createElement(Dropdown.Header, {\n        icon: \"list\",\n        content: \"Question Limit\"\n      }), React.createElement(Dropdown.Menu, {\n        scrolling: true\n      }, this.state.questionLimitChoice.map(function (choice, index) {\n        return React.createElement(Dropdown.Item, {\n          key: index,\n          text: choice,\n          onClick:\n          /*#__PURE__*/\n          _asyncToGenerator(\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee4() {\n            return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.next = 2;\n                    return _this4.setState({\n                      questionLimit: choice\n                    });\n\n                  case 2:\n                    _this4.fetchQuestionData();\n\n                  case 3:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _callee4);\n          }))\n        });\n      }))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.login) {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType,\n          page: \"Home\"\n        }, React.createElement(Responsive, {\n          fireOnMount: true,\n          getWidth: getWidthFactory(this.props.isMobileFromSSR),\n          minWidth: Responsive.onlyTablet.minWidth\n        }, React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Grid, {\n          centered: true\n        }, React.createElement(Grid.Column, {\n          width: 4\n        }, this.renderLeaderBoard()), React.createElement(Grid.Column, {\n          width: 8\n        }, React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"Questions Posted\"), React.createElement(Grid, null, React.createElement(Grid.Column, {\n          width: 5\n        }, this.renderSortSettings()), React.createElement(Grid.Column, {\n          width: 5\n        }, this.renderFilterSettings(), React.createElement(Popup, {\n          trigger: React.createElement(Button, {\n            circular: true,\n            icon: \"settings\",\n            onClick: Router.pushRoute(\"/home\")\n          }),\n          content: \"Clear Filter\"\n        })), React.createElement(Grid.Column, {\n          width: 6\n        }, this.renderQuestionLimitSettings())), React.createElement(Table, null, React.createElement(Table.Header, null, this.renderQuestionHeader()), React.createElement(Table.Body, null, this.renderQuestionList())), React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(\"div\", {\n          style: {\n            marginTop: 20\n          }\n        }, \"Found \", this.state.summaries.length, \" Item(s).\")), React.createElement(Grid.Column, {\n          width: 3\n        }, this.renderQuestionStatistics(), this.renderTopTags(), this.renderBlockChainStatistics()))), React.createElement(Responsive, {\n          fireOnMount: true,\n          getWidth: getWidthFactory(this.props.isMobileFromSSR),\n          maxWidth: Responsive.onlyMobile.maxWidth\n        }, React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Grid, {\n          centered: true\n        }, React.createElement(Grid.Column, null, React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"Questions Posted\"), this.renderSortSettings(), this.renderFilterSettings(), this.renderQuestionLimitSettings(), React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(List, {\n          divided: true,\n          relaxed: true\n        }, this.renderMobileQuestionList()), React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(\"div\", {\n          style: {\n            marginTop: 20\n          }\n        }, \"Found \", this.state.summaries.length, \" Item(s).\")))));\n      } else {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(AccountIssueModal, {\n          loading: this.state.loading,\n          login: this.state.login\n        }));\n      }\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(props) {\n        var isMobileFromSSR, queryValue, device, md;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                isMobileFromSSR = false;\n                queryValue = props.query.value;\n\n                if (props.req) {\n                  device = props.req.headers[\"user-agent\"];\n                  md = new MobileDetect(device);\n                  isMobileFromSSR = !!md.mobile();\n                }\n\n                return _context5.abrupt(\"return\", {\n                  isMobileFromSSR: isMobileFromSSR,\n                  queryValue: queryValue,\n                  isLogin: cookies(props).login || '',\n                  account: cookies(props).wallet || ''\n                });\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function getInitialProps(_x2) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return HomePage;\n}(Component);\n\nexport default HomePage;","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion_1.0\\pages\\home.js"],"names":["React","Component","MobileDetect","_","Button","Header","Table","Statistic","Rating","Grid","Loader","List","Popup","Divider","Container","Icon","Label","Progress","Segment","Modal","Responsive","Checkbox","Dropdown","AccountIssueModal","getWidthFactory","factory","credentials","Question","Profile","Layout","Link","Router","web3","search","sortingQuestions","cookies","HomePage","props","clickedColumn","state","column","leaderboardData","direction","setState","sortBy","reverse","e","value","login","accountType","tags","topTags","loading","data","summaries","questionLimit","questionLimitChoice","isSSR","isMining","prevProps","fetchQuestionData","isLogin","methods","getProfile","account","call","profileAddress","profile","getAccountType","getEthWallets","ethWallet","accountPointMapping","i","length","getPoints","points","push","getDeployedQuestions","deployedQuestions","deployedQuestionsCount","queryValue","undefined","searchItem","decodeURIComponent","question","getSummary","summary","getAnswerList","answerList","choice","Math","floor","slice","forEach","tag","sortedTags","map","key","sort","first","second","tagList","eth","getBlockNumber","blockNumber","fontSize","color","index","questionState","cursor","pushRoute","renderTag","tagSize","tagColours","encodeURIComponent","handleSort","renderUserList","item","text","handleChange","empty","circular","isMobileFromSSR","onlyTablet","minWidth","renderLeaderBoard","renderSortSettings","renderFilterSettings","renderQuestionLimitSettings","renderQuestionHeader","renderQuestionList","marginTop","renderQuestionStatistics","renderTopTags","renderBlockChainStatistics","onlyMobile","maxWidth","renderMobileQuestionList","query","req","device","headers","md","mobile","wallet"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport MobileDetect from 'mobile-detect';\r\nimport _ from 'lodash';\r\nimport { Button, Header, Table, Statistic, Rating, Grid, Loader, List, Popup,\r\n   Divider, Container, Icon, Label, Progress, Segment, Modal, Responsive, Checkbox, Dropdown } from 'semantic-ui-react';\r\nimport AccountIssueModal from '../components/AccountIssueModal';\r\nimport { getWidthFactory } from '../utils/device';\r\nimport factory from '../ethereum/factory';\r\nimport credentials from '../ethereum/credentials';\r\nimport Question from '../ethereum/question';\r\nimport Profile from '../ethereum/profile';\r\nimport Layout from '../components/Layout';\r\nimport {Link, Router} from '../routes';\r\nimport web3 from '../ethereum/web3';\r\nimport { search, sortingQuestions } from '../utils/functions';\r\nimport cookies from 'next-cookies';\r\n\r\nclass HomePage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      login: false,\r\n      accountType: null,\r\n      column: null,\r\n      direction: null,\r\n      leaderboardData: [],\r\n      tags: [],\r\n      topTags: [],\r\n      loading: true,\r\n      sortBy:null,\r\n      data: [],\r\n      summaries: [],\r\n      questionLimit: 30,\r\n      questionLimitChoice: [],\r\n      isSSR: false,\r\n      isMining: false\r\n    };\r\n  }\r\n\r\n  static async getInitialProps(props) {\r\n    let isMobileFromSSR = false;\r\n    let queryValue = props.query.value;\r\n    if(props.req) {\r\n      const device = props.req.headers[\"user-agent\"];\r\n      const md = new MobileDetect(device);\r\n      isMobileFromSSR = !!md.mobile();\r\n    }\r\n    return { isMobileFromSSR, queryValue, isLogin: cookies(props).login || '' , account: cookies(props).wallet || ''};\r\n  }\r\n\r\n  async componentDidUpdate(prevProps) {\r\n    if(this.props != prevProps) {\r\n      this.fetchQuestionData()\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (typeof web3 === 'undefined') {\r\n      this.setState({ loading: false })\r\n      return\r\n    }\r\n    let login = false;\r\n    if (this.props.isLogin) {\r\n      login = true;\r\n      // Get Account Type\r\n      let profileAddress = await factory.methods.getProfile(this.props.account).call();\r\n      let profile = Profile(profileAddress);\r\n      let accountType = await profile.methods.getAccountType().call();\r\n      accountType == 0 ? accountType = \"Admin\" : accountType = \"User\"\r\n\r\n      // Retireve an array of addresses of ethWallets registered\r\n      let ethWallet = await factory.methods.getEthWallets().call();\r\n      let accountPointMapping = [];\r\n\r\n      for (let i=0; i<ethWallet.length; i++) {\r\n        profileAddress = await factory.methods.getProfile(ethWallet[i]).call();\r\n        profile = Profile(profileAddress);\r\n        let points = await profile.methods.getPoints().call();\r\n        accountPointMapping.push({\r\n          account: ethWallet[i],\r\n          points: parseInt(points)\r\n        });\r\n      }\r\n      await this.fetchQuestionData();\r\n      // Set the states required for the Leaderboard and ensure it is descending by default\r\n      this.setState( { leaderboardData: _.sortBy(accountPointMapping, ['points']).reverse() });\r\n      this.setState( { login: login });\r\n      this.setState( { accountType: accountType });\r\n    }\r\n    this.setState( { loading: false });\r\n  }\r\n\r\n  async fetchQuestionData() {\r\n    // Retrieve an array of addresses of questions deployed\r\n    let deployedQuestions = await factory.methods.getDeployedQuestions().call();\r\n    let deployedQuestionsCount = deployedQuestions.length;\r\n    this.setState({ deployedQuestionsCount: deployedQuestionsCount });\r\n\r\n    // Retrieve the summaries of all deployed questions\r\n    let summaries = [];\r\n    let searchItem;\r\n    //filter the questions based on search value\r\n    if (this.props.queryValue != undefined && this.props.queryValue != 'favicon.ico') {\r\n        searchItem = decodeURIComponent(this.props.queryValue);\r\n        deployedQuestions = await search(searchItem,deployedQuestions);\r\n        deployedQuestionsCount = deployedQuestions.length;\r\n    }\r\n\r\n    for(let i=0; i<deployedQuestionsCount; i++) {\r\n      let question = Question(deployedQuestions[i]);\r\n      let summary = await question.methods.getSummary().call();\r\n      // Filter out flagged questions\r\n      if (!summary[9]) {\r\n        summaries[i] = summary;\r\n        let answerList = await question.methods.getAnswerList().call();\r\n        summaries[i][10] = answerList.length;\r\n        summaries[i][11] = deployedQuestions[i];\r\n      }\r\n    }\r\n    summaries = summaries.reverse()\r\n\r\n    // Displays questions in interval of 30\r\n    let questionLimitChoice = [30]\r\n    let choice = Math.floor(summaries.length/30)\r\n    for (let i=1; i<=choice; i++) {\r\n      questionLimitChoice.push(30*(i+1))\r\n    }\r\n\r\n    // Get the top 10 used tags\r\n    let tags = {};\r\n    summaries = summaries.slice(0, this.state.questionLimit)\r\n    summaries.forEach(summary =>{\r\n      summary[8].forEach(tag => {\r\n        if (tags[tag] == undefined) {\r\n          tags[tag] = 1;\r\n        } else {\r\n          tags[tag] = tags[tag] + 1;\r\n        }\r\n      })\r\n    })\r\n    let sortedTags = Object.keys(tags).map(function(key) {\r\n      return [key, tags[key]];\r\n    });\r\n\r\n    // Sort the array based on the second element\r\n    sortedTags.sort(function(first, second) {\r\n      return second[1] - first[1];\r\n    });\r\n\r\n    // Array of all tags\r\n    let tagList = [];\r\n    sortedTags.forEach(tag=> {\r\n      tagList.push(tag[0])\r\n    })\r\n\r\n    // Array with only the first 10 items\r\n    tags = [];\r\n    sortedTags.slice(0, 10).forEach(tag => {\r\n      tags.push(tag[0])\r\n    })\r\n    let isMining = await web3.eth.isMining();\r\n    let blockNumber = await web3.eth.getBlockNumber();\r\n    this.setState({ isMining: isMining, blockNumber: blockNumber });\r\n    this.setState({ topTags: tags });\r\n    this.setState({ tags: tagList });\r\n    this.setState({ summaries: summaries });\r\n    this.setState({ questionLimitChoice: questionLimitChoice });\r\n  }\r\n\r\n  // Function to handle the sorting of leaderboard\r\n  handleSort = (clickedColumn) => () => {\r\n    const { column, leaderboardData, direction } = this.state\r\n    if (column !== clickedColumn) {\r\n      this.setState({\r\n        column: clickedColumn,\r\n        leaderboardData: _.sortBy(leaderboardData, [clickedColumn]),\r\n        direction: 'ascending',\r\n      })\r\n      return\r\n    }\r\n    this.setState({\r\n      leaderboardData: leaderboardData.reverse(),\r\n      direction: direction === 'ascending' ? 'descending' : 'ascending',\r\n    })\r\n  }\r\n\r\n  handleChange = (e, { value }) => this.setState({ sortBy : value });\r\n\r\n  renderQuestionHeader() {\r\n    return(\r\n      <Table.Row>\r\n        <Table.HeaderCell textAlign='center' width={2}><span style={{fontSize: 15, color: '#6A737C'}}>Current Phase</span></Table.HeaderCell>\r\n        <Table.HeaderCell textAlign='center' width={2}><span style={{fontSize: 15, color: '#6A737C'}}>Answers Submitted</span></Table.HeaderCell>\r\n        <Table.HeaderCell textAlign='center' width={2}><span style={{fontSize: 15, color: '#6A737C'}}>Reward</span></Table.HeaderCell>\r\n        <Table.HeaderCell textAlign='center'><span style={{fontSize: 15, color: '#6A737C'}}>Question Title</span></Table.HeaderCell>\r\n      </Table.Row>\r\n    );\r\n  }\r\n\r\n  // Renders out the list of question\r\n  renderQuestionList() {\r\n    let summaries = this.state.summaries\r\n    summaries = sortingQuestions(summaries, this.state.sortBy);\r\n    return summaries.map((summary, index) => {\r\n      const questionState = summary[4];\r\n      const tagList = summary[8];\r\n      return <Table.Row key={index}>\r\n        <Table.Cell textAlign='center' width={2}>\r\n            {\r\n              questionState == 0 ? <Statistic size='mini' color='red'>\r\n                              <Statistic.Value><span\r\n                                  style={{fontSize: 15, color: 'red'}}> Answering\r\n                                              </span></Statistic.Value>\r\n                              <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>Phase</span></Statistic.Label>\r\n                          </Statistic>\r\n                        : questionState == 1 ?\r\n                        <Statistic size='mini' color='red'>\r\n                              <Statistic.Value><span\r\n                                  style={{fontSize: 15, color: '#C9C633'}}> Voting\r\n                                              </span></Statistic.Value>\r\n                              <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>Phase</span></Statistic.Label>\r\n                          </Statistic>\r\n                        :<Statistic size='mini' color='red'>\r\n                              <Statistic.Value><span\r\n                                  style={{fontSize: 15, color: '#10EE44'}}> Rewarded\r\n                                              </span></Statistic.Value>\r\n                              <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>Phase</span></Statistic.Label>\r\n                          </Statistic>\r\n            }\r\n          </Table.Cell>\r\n          <Table.Cell textAlign='center' width={2}>\r\n              <Statistic size='mini' color='red'>\r\n                  <Statistic.Value><span style={{fontSize: 15, color: '#6A737C'}}>{summary[10]}</span></Statistic.Value>\r\n                  <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>answer(s)</span></Statistic.Label>\r\n              </Statistic>\r\n          </Table.Cell>\r\n          <Table.Cell textAlign='center' width={2}>\r\n              <Statistic size='mini' color='red'>\r\n                  <Statistic.Value><span style={{fontSize: 15, color: '#6A737C'}}>{summary[2]*1e-4}</span></Statistic.Value>\r\n                  <Statistic.Label><span style={{fontSize: 15, color: '#6A737C'}}>EQT(s)</span></Statistic.Label>\r\n              </Statistic>\r\n          </Table.Cell>\r\n          <Table.Cell textAlign='left'>\r\n              <Grid.Row textAlign='left'>\r\n                  <span style={{fontSize: 18, color: '#6A737C', cursor: 'pointer'}} onClick={() => Router.pushRoute(`/questions/${summary[11]}`)}><a>{summary[0]}</a></span>\r\n              </Grid.Row>\r\n              {this.renderTag(tagList, \"mini\")}\r\n          </Table.Cell>\r\n      </Table.Row>\r\n    });\r\n  }\r\n\r\n  renderMobileQuestionList() {\r\n    return this.state.summaries.map((summary, index) => {\r\n      const tags = summary[8];\r\n      const questionState = summary[4];\r\n      const tagList = summary[8];\r\n      return <List.Item key={index}>\r\n              <List.Icon name='question circle' size='large' verticalAlign='middle' />\r\n              <List.Content>\r\n                <List.Header as='a' onClick={() => Router.pushRoute(`/questions/${summary[11]}`)}>{summary[0]}</List.Header>\r\n                <Grid>\r\n                <Grid.Column width={10}>\r\n                  <List.Description>{\"Number of Answer(s): \" + summary[10]}</List.Description>\r\n                  <List.Description>{\"Reward: \" + summary[2]*1e-4 + \" EQT(s)\" }</List.Description>\r\n                  {this.renderTag(tags, \"mini\")}\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                  {questionState == 0 ? <List.Description><b><font color='red'>{\"ANSWERING PHASE\"}</font></b></List.Description> : questionState == 1\r\n                  ? <List.Description><b><font color='#C9C633'>{\"VOTING PHASE\"}</font></b></List.Description>\r\n                  : <List.Description><b><font color='#10EE44'>{\"REWARDED PHASE\"}</font></b></List.Description> }\r\n                </Grid.Column>\r\n                </Grid>\r\n              </List.Content>\r\n              <Divider hidden/>\r\n            </List.Item>\r\n    });\r\n  }\r\n\r\n  // Render each tag individually for each question\r\n  renderTag(tagList, tagSize) {\r\n    const tagColours = [\"red\", \"olive\", \"blue\", \"teal\", \"green\"];\r\n    return tagList.map((tag, index) => {\r\n      return(\r\n        <Label as='a' onClick={() => Router.pushRoute(`/${'search/'+encodeURIComponent(tag)}`)}\r\n          tag size={tagSize} key={index} color={tagColours[index%5]}>\r\n          {tag}\r\n        </Label>\r\n      )\r\n    });\r\n  }\r\n\r\n  renderLeaderBoard() {\r\n    const { column, data, direction } = this.state\r\n    return (\r\n      <Segment>\r\n        <Header as='h3' textAlign=\"center\">\r\n          <Icon name=\"chess king\"/>Leaderboard\r\n        </Header>\r\n        <Table basic='very' celled collapsing sortable>\r\n          <Table.Header>\r\n            <Table.Row>\r\n              <Table.HeaderCell>Account</Table.HeaderCell>\r\n              <Table.HeaderCell\r\n                sorted={column === 'points' ? direction : null}\r\n                onClick={this.handleSort('points')}>\r\n              Point(s)\r\n              </Table.HeaderCell>\r\n            </Table.Row>\r\n          </Table.Header>\r\n          <Table.Body>\r\n            {this.renderUserList()}\r\n          </Table.Body>\r\n        </Table>\r\n      </Segment>\r\n    );\r\n  }\r\n\r\n  renderUserList() {\r\n    return this.state.leaderboardData.map((item, index) => {\r\n      return (\r\n        <Table.Row key={index}>\r\n          <Table.Cell textAlign='center'>\r\n            <p style={{fontSize:\"12px\"}}>{item.account}</p>\r\n          </Table.Cell>\r\n          <Table.Cell textAlign='center'>\r\n            <p style={{fontSize:\"12px\"}}>{item.points}</p>\r\n          </Table.Cell>\r\n        </Table.Row>\r\n      );\r\n    });\r\n  }\r\n\r\n  renderTopTags() {\r\n    return (\r\n      <Segment>\r\n        <Header as='h3' textAlign=\"center\">\r\n          <Icon name=\"tags\"/>Top 10 Tags\r\n        </Header>\r\n        {this.renderTag(this.state.topTags, \"medium\")}\r\n      </Segment>\r\n    );\r\n  }\r\n\r\n  renderQuestionStatistics() {\r\n    return (\r\n      <Segment>\r\n        <Statistic.Group horizontal color='red'>\r\n          <Statistic>\r\n            <Statistic.Value>{this.state.deployedQuestionsCount}</Statistic.Value>\r\n            <Statistic.Label>Questions Asked</Statistic.Label>\r\n          </Statistic>\r\n        </Statistic.Group>\r\n        <Statistic.Group horizontal color='yellow'>\r\n          <Statistic>\r\n            <Statistic.Value>{this.state.leaderboardData.length}</Statistic.Value>\r\n            <Statistic.Label>Active Users</Statistic.Label>\r\n          </Statistic>\r\n        </Statistic.Group>\r\n      </Segment>\r\n    );\r\n  }\r\n\r\n  renderBlockChainStatistics() {\r\n    return (\r\n      <Segment>\r\n        <Header as='h3' textAlign=\"center\">\r\n          <Icon name=\"ethereum\"/>Block-Chain Status\r\n        </Header>\r\n        {this.state.isMining ? <Statistic.Value><span\r\n            style={{fontSize: 18, color: 'green'}}>Currently Mining\r\n                        </span></Statistic.Value> : <Statistic.Value><span\r\n            style={{fontSize: 18, color: 'red'}}>Currently Not Mining\r\n                        </span></Statistic.Value>\r\n        }\r\n        <Statistic.Group horizontal color='green'>\r\n          <Statistic>\r\n            <Statistic.Value>{this.state.blockNumber}</Statistic.Value>\r\n            <Statistic.Label>Blocks Mined</Statistic.Label>\r\n          </Statistic>\r\n        </Statistic.Group>\r\n        *When blockchain is not mining, do not create any transaction\r\n      </Segment>\r\n    );\r\n  }\r\n\r\n  renderSortSettings() {\r\n    return (\r\n      <span>\r\n        <Icon name='sort'/>Sort Questions By: {' '}\r\n        <Dropdown\r\n          inline\r\n          options={[\r\n          {\r\n            key: 'Ascending Phase',\r\n            text: 'Ascending Phase',\r\n            value: 0\r\n          },\r\n          {\r\n            key: 'Descending Phase',\r\n            text: 'Descending Phase',\r\n            value: 1\r\n          },\r\n          {\r\n            key: 'Ascending Answers',\r\n            text: 'Ascending Answers',\r\n            value: 2\r\n          },\r\n          {\r\n            key: 'Descending Answers',\r\n            text: 'Descending Answers',\r\n            value: 3\r\n          },\r\n          {\r\n            key: 'Ascending Rewards',\r\n            text: 'Ascending Rewards',\r\n            value: 4\r\n          },\r\n          {\r\n            key: 'Descending Rewards',\r\n            text: 'Descending Rewards',\r\n            value: 5\r\n          }\r\n          ]}\r\n          onChange={this.handleChange}\r\n        />\r\n      </span>\r\n    );\r\n  }\r\n\r\n  renderFilterSettings() {\r\n    const tagColours = [\"red\", \"olive\", \"blue\", \"teal\", \"green\"];\r\n    return (\r\n      <span>\r\n        <Icon name='filter'/>\r\n        <Dropdown text='Filter Questions' multiple>\r\n          <Dropdown.Menu>\r\n            <Dropdown.Header icon='tags' content='Tag Label' />\r\n            <Dropdown.Menu scrolling>\r\n              {this.state.tags.map((tag, index) => (\r\n                <Dropdown.Item key={index}\r\n                               text={tag}\r\n                               label={{color: tagColours[index%6], empty: true, circular: true}}\r\n                               onClick={() => Router.pushRoute(`/${'search/'+encodeURIComponent(tag)}`)} />\r\n              ))}\r\n            </Dropdown.Menu>\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  renderQuestionLimitSettings() {\r\n    return(\r\n      <Dropdown text='Questions To Show' multiple>\r\n        <Dropdown.Menu>\r\n          <Dropdown.Header icon='list' content='Question Limit' />\r\n          <Dropdown.Menu scrolling>\r\n            {this.state.questionLimitChoice.map((choice, index) => (\r\n              <Dropdown.Item key={index}\r\n                             text={choice}\r\n                             onClick={async () => {\r\n                               await this.setState({ questionLimit : choice});\r\n                               this.fetchQuestionData()\r\n                             }} />\r\n            ))}\r\n          </Dropdown.Menu>\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (this.state.login) {\r\n      return (\r\n        <Layout accountType={this.state.accountType} page={\"Home\"}>\r\n          <Responsive fireOnMount getWidth={getWidthFactory(this.props.isMobileFromSSR)} minWidth={Responsive.onlyTablet.minWidth}>\r\n            <Divider hidden/>\r\n            <Grid centered>\r\n              <Grid.Column width={4}>\r\n                {this.renderLeaderBoard()}\r\n              </Grid.Column>\r\n              <Grid.Column width={8}>\r\n                <Header as='h2' textAlign='center'>\r\n                    Questions Posted\r\n                </Header>\r\n                <Grid>\r\n                  <Grid.Column width={5}>\r\n                    {this.renderSortSettings()}\r\n                  </Grid.Column>\r\n                  <Grid.Column width={5}>\r\n                    {this.renderFilterSettings()}\r\n                    <Popup\r\n                        trigger={\r\n                            <Button circular icon='settings' onClick={ Router.pushRoute(`/home`)}/>}\r\n                        content={\"Clear Filter\"} />\r\n                  </Grid.Column>\r\n                  <Grid.Column width={6}>\r\n                    {this.renderQuestionLimitSettings()}\r\n                  </Grid.Column>\r\n                </Grid>\r\n                <Table>\r\n                  <Table.Header>\r\n                    {this.renderQuestionHeader()}\r\n                  </Table.Header>\r\n                  <Table.Body>\r\n                    {this.renderQuestionList()}\r\n                  </Table.Body>\r\n                </Table>\r\n                <Divider hidden/>\r\n                <div style={{ marginTop: 20 }}>Found {this.state.summaries.length} Item(s).</div>\r\n              </Grid.Column>\r\n              <Grid.Column width={3}>\r\n                {this.renderQuestionStatistics()}\r\n                {this.renderTopTags()}\r\n                {this.renderBlockChainStatistics()}\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Responsive>\r\n\r\n          <Responsive fireOnMount getWidth={getWidthFactory(this.props.isMobileFromSSR)} maxWidth={Responsive.onlyMobile.maxWidth}>\r\n            <Divider hidden/>\r\n            <Grid centered>\r\n              <Grid.Column>\r\n                <Header as='h2' textAlign='center'>\r\n                    Questions Posted\r\n                </Header>\r\n                {this.renderSortSettings()}\r\n                {this.renderFilterSettings()}\r\n                {this.renderQuestionLimitSettings()}\r\n                <Divider hidden/>\r\n                <List divided relaxed>\r\n                  {this.renderMobileQuestionList()}\r\n                </List>\r\n                <Divider hidden/>\r\n                <div style={{ marginTop: 20 }}>Found {this.state.summaries.length} Item(s).</div>\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Responsive>\r\n        </Layout>\r\n      );\r\n    } else {\r\n      return (\r\n        <Layout accountType={this.state.accountType}>\r\n          <AccountIssueModal loading={this.state.loading} login={this.state.login} />\r\n        </Layout>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}