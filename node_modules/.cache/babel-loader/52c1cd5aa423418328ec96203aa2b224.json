{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport credentials from '../ethereum/credentials';\nimport Question from '../ethereum/question';\n\nvar Fuse = require(\"fuse.js\"); // Check for user logins\n\n\nfunction checkLogin(_x) {\n  return _checkLogin.apply(this, arguments);\n} // Validate Email Address Format\n\n\nfunction _checkLogin() {\n  _checkLogin = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(account) {\n    var _emailAddress;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return credentials.methods.getBinding(account).call();\n\n          case 2:\n            _emailAddress = _context.sent;\n            _context.t0 = _emailAddress === \"\";\n\n            if (_context.t0) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.next = 7;\n            return credentials.methods.emailNotBlackList(_emailAddress).call();\n\n          case 7:\n            _context.t0 = _context.sent;\n\n          case 8:\n            if (!_context.t0) {\n              _context.next = 12;\n              break;\n            }\n\n            return _context.abrupt(\"return\", false);\n\n          case 12:\n            return _context.abrupt(\"return\", true);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _checkLogin.apply(this, arguments);\n}\n\nvar validate = function validate(emailAddress) {\n  if (emailAddress === \"admin\") {\n    return true;\n  } else {\n    var re = /\\S+@e\\.ntu\\.edu\\.sg$/;\n    return re.test(emailAddress);\n  }\n}; // Provides common logging method for logging every transactions\n\n\nvar logging = function logging(message) {\n  var today = new Date();\n  var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  var date = months[today.getMonth()] + \" \" + today.getDate() + \" \" + today.getFullYear();\n  var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n  var dateTime = date + ' ' + time + \": \" + message;\n  return dateTime;\n}; // Search Algorithm\n\n\nfunction search(_x2, _x3) {\n  return _search.apply(this, arguments);\n} // Checks required fields are filled up\n\n\nfunction _search() {\n  _search = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(value, questions) {\n    var list, i, summary, options, fuse, result;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            list = [];\n            i = 0;\n\n          case 2:\n            if (!(i < questions.length)) {\n              _context2.next = 10;\n              break;\n            }\n\n            _context2.next = 5;\n            return Question(questions[i]).methods.getSummary().call();\n\n          case 5:\n            summary = _context2.sent;\n            list.push({\n              'address': questions[i],\n              'title': summary[0],\n              'content': summary[1],\n              'tags': summary[8]\n            });\n\n          case 7:\n            i++;\n            _context2.next = 2;\n            break;\n\n          case 10:\n            options = {\n              id: \"address\",\n              threshold: 0.1,\n              shouldSort: true,\n              tokenize: true,\n              keys: [{\n                name: 'title',\n                weight: 0.3\n              }, {\n                name: 'content',\n                weight: 0.3\n              }, {\n                name: 'tags',\n                weight: 0.4\n              }]\n            };\n            fuse = new Fuse(list, options);\n            result = fuse.search(value);\n            return _context2.abrupt(\"return\", result);\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _search.apply(this, arguments);\n}\n\nvar checkFieldEmpty = function checkFieldEmpty(field) {\n  return field === \"\" ? false : true;\n}; // Checks time-related fields are filled up properly\n\n\nvar checkTimeField = function checkTimeField(field) {\n  return field > 0 ? true : false;\n}; // Checks ETQ fields are filled up properly\n\n\nvar checkRewardField = function checkRewardField(field) {\n  return field >= 1 ? true : false;\n}; // Convert to lower case letters in a string\n\n\nvar lowerCase = function lowerCase(item) {\n  for (var i = 0; i < item.length; i++) {\n    item[i] = item[i].toLowerCase();\n  }\n\n  return item;\n};\n\nvar sortingQuestions = function sortingQuestions(summary, sortBy) {\n  switch (sortBy) {\n    case 0:\n      summary.sort(function (a, b) {\n        return a[4] - b[4];\n      });\n      break;\n\n    case 1:\n      summary.sort(function (a, b) {\n        return b[4] - a[4];\n      });\n      break;\n\n    case 2:\n      summary.sort(function (a, b) {\n        return a[10] - b[10];\n      });\n      break;\n\n    case 3:\n      summary.sort(function (a, b) {\n        return b[10] - a[10];\n      });\n      break;\n\n    case 4:\n      summary.sort(function (a, b) {\n        return a[2] - b[2];\n      });\n      break;\n\n    case 5:\n      summary.sort(function (a, b) {\n        return b[2] - a[2];\n      });\n      break;\n\n    default:\n      break;\n  }\n\n  return summary;\n};\n\nvar sortingAnswers = function sortingAnswers(answers, sorted) {\n  if (sorted) {\n    answers.sort(function (a, b) {\n      return a[4] - b[4];\n    });\n  } else {\n    answers.sort(function (a, b) {\n      return b[4] - a[4];\n    });\n  }\n\n  return answers;\n};\n\nexport { validate, logging, search, checkFieldEmpty, checkTimeField, checkRewardField, lowerCase, checkLogin, sortingQuestions, sortingAnswers };","map":null,"metadata":{},"sourceType":"module"}