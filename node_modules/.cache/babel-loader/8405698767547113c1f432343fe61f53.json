{"ast":null,"code":"var MobileDetect = require('mobile-detect');\n\nvar _require = require('semantic-ui-react'),\n    Responsive = _require.Responsive;\n\nvar isMobileSSR = function isMobileSSR(req) {\n  var md = new MobileDetect(req.headers[\"user-agent\"]);\n  console.log(md);\n  return !!md.mobile();\n};\n\nvar getWidthFactory = function getWidthFactory(isMobileFromSSR) {\n  return function () {\n    var isSSR = typeof window === \"undefined\";\n    var ssrValue = isMobileFromSSR ? Responsive.onlyMobile.maxWidth : Responsive.onlyTablet.minWidth;\n    return isSSR ? ssrValue : window.innerWidth;\n  };\n};\n\nexport { isMobileSSR, getWidthFactory };","map":{"version":3,"sources":["C:\\Users\\edd1e\\Desktop\\ethQuestion\\pages\\utils\\device.js"],"names":["MobileDetect","require","Responsive","isMobileSSR","req","md","headers","console","log","mobile","getWidthFactory","isMobileFromSSR","isSSR","window","ssrValue","onlyMobile","maxWidth","onlyTablet","minWidth","innerWidth"],"mappings":"AAAA,IAAMA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA5B;;eACuBA,OAAO,CAAC,mBAAD,C;IAAtBC,U,YAAAA,U;;AAER,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD,EAAS;AACzB,MAAMC,EAAE,GAAG,IAAIL,YAAJ,CAAiBI,GAAG,CAACE,OAAJ,CAAY,YAAZ,CAAjB,CAAX;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,EAAZ;AACA,SAAO,CAAC,CAACA,EAAE,CAACI,MAAH,EAAT;AACH,CAJD;;AAMA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,eAAD;AAAA,SAAqB,YAAM;AAC/C,QAAMC,KAAK,GAAG,OAAOC,MAAP,KAAkB,WAAhC;AACA,QAAMC,QAAQ,GAAGH,eAAe,GAC5BT,UAAU,CAACa,UAAX,CAAsBC,QADM,GAE5Bd,UAAU,CAACe,UAAX,CAAsBC,QAF1B;AAGA,WAAON,KAAK,GAAGE,QAAH,GAAcD,MAAM,CAACM,UAAjC;AACH,GANuB;AAAA,CAAxB;;AAQC,SAAShB,WAAT,EAAsBO,eAAtB","sourcesContent":["const MobileDetect = require('mobile-detect');\r\nconst { Responsive } = require('semantic-ui-react');\r\n\r\nconst isMobileSSR = (req) => {\r\n    const md = new MobileDetect(req.headers[\"user-agent\"]);\r\n    console.log(md);\r\n    return !!md.mobile();\r\n}\r\n\r\nconst getWidthFactory = (isMobileFromSSR) => () => {\r\n    const isSSR = typeof window === \"undefined\";\r\n    const ssrValue = isMobileFromSSR\r\n      ? Responsive.onlyMobile.maxWidth\r\n      : Responsive.onlyTablet.minWidth;\r\n    return isSSR ? ssrValue : window.innerWidth;\r\n};\r\n\r\n export { isMobileSSR, getWidthFactory };\r\n"]},"metadata":{},"sourceType":"module"}