{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport Layout from '../components/Layout';\nimport { Container, Segment, Header, Divider, Button, Icon, TextArea, Modal, Loader, Message, Form, Rail, Grid, Label, Progress } from \"semantic-ui-react\";\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\nimport Profile from '../ethereum/profile';\nimport credentials from '../ethereum/credentials';\nimport feedback from '../ethereum/feedback';\nimport { Router } from '../routes';\n\nvar FeedbackPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FeedbackPage, _Component);\n\n  function FeedbackPage(props) {\n    var _this;\n\n    _classCallCheck(this, FeedbackPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FeedbackPage).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onLike\", function () {\n      _this.setState({\n        like: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDislike\", function () {\n      _this.setState({\n        like: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onUseful\", function () {\n      _this.setState({\n        usefulness: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onNotUseful\", function () {\n      _this.setState({\n        usefulness: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onEasy\", function () {\n      _this.setState({\n        easy: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onNotEasy\", function () {\n      _this.setState({\n        easy: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var accounts;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                loading: true,\n                errorMessage: ''\n              }); // Ensures all fields are filled\n\n\n              if (!(_this.checkFieldEmpty(_this.state.like) && _this.checkFieldEmpty(_this.state.usefulness) && _this.checkFieldEmpty(_this.state.easy))) {\n                _context.next = 17;\n                break;\n              }\n\n              _context.prev = 2;\n              _context.next = 5;\n              return web3.eth.getAccounts();\n\n            case 5:\n              accounts = _context.sent;\n              _context.next = 8;\n              return feedback.methods.updateFeedback(_this.state.like, _this.state.usefulness, _this.state.easy, _this.state.comments).send({\n                from: accounts[0]\n              });\n\n            case 8:\n              Router.pushRoute('/home'); // Automatic redirect the user.\n\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](2);\n\n              _this.setState({\n                errorMessage: _context.t0.message\n              });\n\n            case 14:\n              _this.setState({\n                loading: false\n              });\n\n              _context.next = 19;\n              break;\n\n            case 17:\n              _this.setState({\n                errorMessage: \"Required Field(s) Empty\"\n              });\n\n              _this.setState({\n                loading: false\n              });\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 11]]);\n    })));\n\n    _this.state = {\n      like: \"\",\n      usefulness: \"\",\n      easy: \"\",\n      comments: \"\",\n      loading: false,\n      errorMessage: \"\",\n      login: false,\n      resourceLoading: true,\n      accountType: null,\n      statistics: []\n    };\n    return _this;\n  }\n\n  _createClass(FeedbackPage, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var accounts, login, profileAddress, profile, accountType, statistics;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context2.sent;\n                login = false;\n                _context2.next = 6;\n                return credentials.methods.getBinding(accounts[0]).call();\n\n              case 6:\n                _context2.t0 = _context2.sent;\n\n                if (!(_context2.t0 === \"\")) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                _context2.next = 25;\n                break;\n\n              case 10:\n                login = true; // Get Account Type\n\n                _context2.next = 13;\n                return factory.methods.getProfile(accounts[0]).call();\n\n              case 13:\n                profileAddress = _context2.sent;\n                profile = Profile(profileAddress);\n                _context2.next = 17;\n                return profile.methods.getAccountType().call();\n\n              case 17:\n                accountType = _context2.sent;\n                accountType == 0 ? accountType = \"Admin\" : accountType = \"User\";\n                _context2.next = 21;\n                return feedback.methods.getSummaryStatistics().call();\n\n              case 21:\n                statistics = _context2.sent;\n                this.setState({\n                  login: login\n                });\n                this.setState({\n                  accountType: accountType\n                });\n                this.setState({\n                  statistics: statistics\n                });\n\n              case 25:\n                this.setState({\n                  resourceLoading: false\n                });\n\n              case 26:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"checkFieldEmpty\",\n    value: function checkFieldEmpty(field) {\n      return field === \"\" ? false : true;\n    } // Submit the question to be stored on the Ethereum Blockchain\n\n  }, {\n    key: \"renderStatistic\",\n    value: function renderStatistic() {\n      var numOfLikes = this.state.statistics[0];\n      var numOfDislikes = this.state.statistics[1];\n      var numOfUseful = this.state.statistics[2];\n      var numOfNotUseful = this.state.statistics[3];\n      var numOfEasy = this.state.statistics[4];\n      var numOfNotEasy = this.state.statistics[5];\n      var totalRatings = Number(numOfLikes) + Number(numOfDislikes);\n      return React.createElement(Rail, {\n        position: \"right\",\n        style: {\n          top: \"20%\",\n          left: \"57%\"\n        }\n      }, React.createElement(Segment, {\n        style: {\n          width: \"155%\"\n        }\n      }, React.createElement(Header, {\n        as: \"h3\",\n        textAlign: \"center\"\n      }, React.createElement(Icon, {\n        name: \"chart bar outline\"\n      }), \"Summary Statistics of System\"), React.createElement(\"p\", {\n        style: {\n          textAlign: 'center'\n        }\n      }, React.createElement(\"b\", null, \"Total Rating(s):\"), \" \", totalRatings), React.createElement(Grid, {\n        centered: true,\n        columns: 2\n      }, React.createElement(Grid.Column, {\n        style: {\n          paddingLeft: \"10px\",\n          paddingRight: \"0\",\n          width: \"30%\"\n        }\n      }, React.createElement(Label, {\n        horizontal: true\n      }, \"Likes\")), React.createElement(Grid.Column, {\n        style: {\n          paddingLeft: \"0\",\n          paddingRight: \"10px\",\n          width: \"70%\"\n        }\n      }, React.createElement(Progress, {\n        color: \"green\",\n        value: numOfLikes,\n        total: totalRatings,\n        progress: \"percent\",\n        precision: 2,\n        style: {\n          margin: \"0\"\n        }\n      })), React.createElement(Grid.Column, {\n        style: {\n          paddingLeft: \"10px\",\n          paddingRight: \"0\",\n          width: \"30%\"\n        }\n      }, React.createElement(Label, {\n        horizontal: true\n      }, \"Useful\")), React.createElement(Grid.Column, {\n        style: {\n          paddingLeft: \"0\",\n          paddingRight: \"10px\",\n          width: \"70%\"\n        }\n      }, React.createElement(Progress, {\n        color: \"green\",\n        value: numOfUseful,\n        total: totalRatings,\n        progress: \"percent\",\n        precision: 2,\n        style: {\n          margin: \"0\"\n        }\n      })), React.createElement(Grid.Column, {\n        style: {\n          paddingLeft: \"10px\",\n          paddingRight: \"0\",\n          width: \"30%\"\n        }\n      }, React.createElement(Label, {\n        horizontal: true\n      }, \"Easy To Use\")), React.createElement(Grid.Column, {\n        style: {\n          paddingLeft: \"0\",\n          paddingRight: \"10px\",\n          width: \"70%\"\n        }\n      }, React.createElement(Progress, {\n        color: \"green\",\n        value: numOfEasy,\n        total: totalRatings,\n        progress: \"percent\",\n        precision: 2,\n        style: {\n          margin: \"0\"\n        }\n      })))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.state.login) {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(Container, {\n          style: {\n            height: \"100vh\"\n          }\n        }, React.createElement(Grid, {\n          centered: true\n        }, React.createElement(Grid.Column, null, React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Segment, {\n          raised: true,\n          textAlign: \"left\"\n        }, React.createElement(Header, {\n          as: \"h2\",\n          textAlign: \"center\"\n        }, \"Collection of Feedback For System\")), React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, \"Do you like the system?\"), React.createElement(\"p\", null, \"Selected Choice: \", React.createElement(\"b\", null, this.state.like.toString())), React.createElement(Button, {\n          icon: true,\n          labelPosition: \"left\",\n          color: \"green\",\n          compact: true,\n          onClick: this.onLike\n        }, React.createElement(Icon, {\n          name: \"thumbs up outline\"\n        }), \"Yes\"), React.createElement(Button, {\n          icon: true,\n          labelPosition: \"left\",\n          color: \"red\",\n          compact: true,\n          onClick: this.onDislike\n        }, React.createElement(Icon, {\n          name: \"thumbs down outline\"\n        }), \"No\"), React.createElement(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, \"Do you find the system useful?\"), React.createElement(\"p\", null, \"Selected Choice: \", React.createElement(\"b\", null, this.state.usefulness.toString())), React.createElement(Button, {\n          icon: true,\n          labelPosition: \"left\",\n          color: \"green\",\n          compact: true,\n          onClick: this.onUseful\n        }, React.createElement(Icon, {\n          name: \"thumbs up outline\"\n        }), \"Yes\"), React.createElement(Button, {\n          icon: true,\n          labelPosition: \"left\",\n          color: \"red\",\n          compact: true,\n          onClick: this.onNotUseful\n        }, React.createElement(Icon, {\n          name: \"thumbs down outline\"\n        }), \"No\"), React.createElement(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, \"Do you find the system easy to use?\"), React.createElement(\"p\", null, \"Selected Choice: \", React.createElement(\"b\", null, this.state.easy.toString())), React.createElement(Button, {\n          icon: true,\n          labelPosition: \"left\",\n          color: \"green\",\n          compact: true,\n          onClick: this.onEasy\n        }, React.createElement(Icon, {\n          name: \"thumbs up outline\"\n        }), \"Yes\"), React.createElement(Button, {\n          icon: true,\n          labelPosition: \"left\",\n          color: \"red\",\n          compact: true,\n          onClick: this.onNotEasy\n        }, React.createElement(Icon, {\n          name: \"thumbs down outline\"\n        }), \"No\"), React.createElement(Header, {\n          as: \"h3\",\n          textAlign: \"left\"\n        }, \"Any suggestions for improvments or other comments?\"), React.createElement(Form, {\n          error: !!this.state.errorMessage,\n          style: {\n            marginTop: '10px'\n          }\n        }, React.createElement(Form.Field, null, React.createElement(TextArea, {\n          placeholder: \"Tell us more\",\n          style: {\n            width: \"100%\",\n            height: \"20%\"\n          },\n          value: this.state.comments,\n          onChange: function onChange(event) {\n            return _this2.setState({\n              comments: event.target.value\n            });\n          }\n        })), React.createElement(Message, {\n          error: true,\n          header: \"Oops!\",\n          content: this.state.errorMessage\n        })), React.createElement(Divider, {\n          hidden: true\n        }), React.createElement(Modal, {\n          open: this.state.loading,\n          trigger: React.createElement(Button, {\n            primary: true,\n            onClick: this.onSubmit\n          }, \"Submit Feedback\"),\n          basic: true,\n          size: \"small\"\n        }, React.createElement(Header, {\n          content: \"Submitting Feedback\"\n        }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"Please Confirm the MetaMask Transaction Request to submit your Feedback to the Block-Chain Network. Upon successful submission, you will be redirected to the Home Page. This process might take awhile.\"), React.createElement(Loader, {\n          active: true,\n          inline: \"centered\"\n        }, \"Loading\"))), this.renderStatistic()))));\n      } else {\n        return React.createElement(Layout, {\n          accountType: this.state.accountType\n        }, React.createElement(Container, {\n          style: {\n            width: \"100%\",\n            height: \"100vh\"\n          }\n        }, React.createElement(Modal, {\n          open: this.state.resourceLoading,\n          basic: true,\n          size: \"small\"\n        }, React.createElement(Header, {\n          icon: \"ethereum\",\n          content: \"Loading Resources\"\n        }), React.createElement(Modal.Content, null, React.createElement(Loader, {\n          active: true,\n          inline: \"centered\"\n        }, \"Loading Feedback Page\"))), React.createElement(Modal, {\n          open: !this.state.login && !this.state.resourceLoading,\n          basic: true,\n          size: \"small\"\n        }, React.createElement(Header, {\n          icon: \"ethereum\",\n          content: \"Not Registered\"\n        }), React.createElement(Modal.Content, null, React.createElement(\"p\", null, \"You are currently not registered to access the platform. Please have your account registered.\")), React.createElement(Modal.Actions, null, React.createElement(Button, {\n          color: \"green\",\n          inverted: true,\n          attached: \"bottom\",\n          onClick: function onClick() {\n            Router.pushRoute('/');\n          }\n        }, \"Register For Account\")))));\n      }\n    }\n  }]);\n\n  return FeedbackPage;\n}(Component);\n\nexport default FeedbackPage;","map":null,"metadata":{},"sourceType":"module"}